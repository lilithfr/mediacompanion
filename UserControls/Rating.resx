<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="PictureBoxRating.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        C3JcNQnfKY8/AAAAAElFTkSuQmCC
</value>
  </data>
</root>