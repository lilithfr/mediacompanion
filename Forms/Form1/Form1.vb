
Imports System.Net
Imports System.IO
Imports System.Text.RegularExpressions
Imports System.Text
Imports System.Threading
Imports Media_Companion.ScraperFunctions
Imports Media_Companion.Preferences
Imports Media_Companion.Renamer
Imports System.Xml
Imports System.Reflection
Imports System.Windows.Forms
Imports System.ComponentModel
Imports Media_Companion

#Const SilentErrorScream = False
#Const NoRefocus = True


Public Class Form1

    'Public Shared Preferences As New Structures

    Public Const SetDefaults = True
    Public movieRebuildNeeded As Boolean = True
    Public tvRebuildNeeded As Boolean = True
    Public messbox As New frmMessageBox("blank", "", "")
    Public startup As Boolean = True
    Public tv_RegexScraper As New List(Of String)
    Public tv_RegexRename As New List(Of String)
    Public dList As New List(Of String)
    Public scraperFunction2 As New ScraperFunctions
    Public globalThreadStop As Boolean = False
    Public globalThreadCounter As Integer = 0
    Public nfoFunction As New WorkingWithNfoFiles
    Public fullMovieList As New List(Of str_ComboList)
    Public filteredList As New List(Of str_ComboList)
    Public workingMovieDetails As FullMovieDetails


    Public workingMovie As New str_ComboList(SetDefaults)
    Public batchList As New str_BatchWizard(SetDefaults)
    Public tvBatchList As New str_TvShowBatchWizard(SetDefaults)
    Public generalprefschanged As Boolean = False


    Public noFanart As Boolean
    'Public Shared tvScraperLog As String = ""

    Dim WithEvents bigPictureBox As PictureBox
    Dim WithEvents fanartBoxes As PictureBox
    Dim WithEvents fanartCheckBoxes As RadioButton
    Dim WithEvents posterPicBoxes As PictureBox
    Dim WithEvents posterCheckBoxes As RadioButton
    Dim WithEvents posterLabels As Label
    Dim WithEvents resLabel As Label
    Dim WithEvents tvFanartBoxes As PictureBox
    Dim WithEvents tvFanartCheckBoxes As RadioButton
    Dim WithEvents resolutionLabels As Label
    Dim newTvFolders As New List(Of String)
    Dim maximised As Boolean = False
    Dim imdbCounter As Integer = 0
    Dim tootip5 As New ToolTip

    Dim prefsload As Boolean = False

    Dim pictureList As New List(Of PictureBox)
    Dim screenshotTab As TabPage
    'Dim totalEpisodeCount As Integer = 0
    'Dim totalTvShowCount As Integer = 0
    Dim defaultActor As String
    Dim defaultFanart As String
    Dim defaultPoster As String
    Dim defaultBanner As String
    Dim defaultOfflineArt As String
    Dim defaultScreenShot As String
    Dim actorDB As New List(Of str_ActorDatabase)
    Dim scraperLog As String = ""

    Dim filterOverride As Boolean = False
    Dim mouseOver As Boolean = False
    Dim newMovieList As New List(Of str_NewMovie)


    Dim bigPanel As Panel
    Dim realMoviePaths As New List(Of String)
    Dim realTvPaths As New List(Of String)
    Dim droppedItems As New List(Of String)
    Dim newTvShows As New List(Of String)
    Dim profileStruct As New Profiles
    Dim frmSplash As New frmSplashscreen
    Dim frmSplash2 As New frmProgressScreen
    Dim progressmode As Boolean
    Dim templateList As New List(Of str_HTMLTemplate)
    Dim overItem As String
    Dim scrapeAndQuit As Boolean = False
    Dim mouseDelta As Integer = 0
    Dim resLabels As Label
    Dim fanartUrls(1000, 1) As String
    Dim fanartArray As New List(Of str_ListOfPosters)
    Dim cropString As String
    Dim thumbedItsMade As Boolean = False
    Dim posterArray As New List(Of str_ListOfPosters)
    Dim pageCount As Integer = 0
    Dim currentPage As Integer = 0
    Dim posterThumbedItsMade As Boolean = False
    Dim posterCropString As String
    Dim tab1 As Integer = 0

    Dim listOfTvFanarts As New List(Of str_FanartList)
    Dim lockedList As Boolean = False
    Dim tempTVDBiD As String = String.Empty
    Dim novaThread As Thread
    Dim newMovieFoundTitle As String = String.Empty
    Dim newMovieFoundFilename As String = String.Empty
    Dim tableSets As New List(Of str_TableItems)
    Dim relativeFolderList As New List(Of str_RelativeFileList)

    Dim templanguage As String

    Dim combostart As String = ""

    Dim currentposterid As String = ""
    Dim workingposterpath As String

    Dim WithEvents tvposterpicboxes As PictureBox
    Dim WithEvents tvpostercheckboxes As RadioButton
    Dim WithEvents tvposterlabels As Label
    Dim WithEvents tvreslabel As Label
    Dim tvposterpage As Integer = 1
    Dim walllocked As Boolean = False
    Dim maxcount As Integer = 0
    Dim moviecount_bak As Integer = 0
    Dim displayRuntimeScraper As Boolean = True
    Dim tv_IMDbID_detected As Boolean = False
    Dim tv_IMDbID_warned As Boolean = False
    Dim tv_IMDbID_detectedMsg As String = String.Format("Media Companion has detected one or more TV Shows has an incorrect ID.{0}", vbCrLf) & _
                            String.Format("To rectify, please select the following:{0}", vbCrLf) & _
                            String.Format("  1. TV Preferences -> Fix NFO id during cache rebuild{0}", vbCrLf) & _
                            String.Format("  2. TV Shows -> Rebuild Shows{0}", vbCrLf) & _
                            String.Format("(This will only be reported once per session)", vbCrLf)

    Private ClickedControl As String


    Private WithEvents FileToBeDownloaded As WebFileDownloader
    Private tvCurrentTabIndex As Integer = 0
    Private currentTabIndex As Integer = 0



    Private Sub util_BatchUpdate()
        messbox = New frmMessageBox("Please wait,", "", "rebuilding Movie nfo files")
        Windows.Forms.Cursor.Current = Cursors.WaitCursor
        messbox.Show()
        Me.Refresh()
        messbox.Refresh()
        Dim tempint As Integer = fullMovieList.Count - 1
        For i = 0 To tempint
            Try
                Dim updatedmovie As New FullMovieDetails
                updatedmovie = nfoFunction.mov_NfoLoadFull(fullMovieList(i).fullpathandfilename)
                nfoFunction.mov_NfoSave(fullMovieList(i).fullpathandfilename, updatedmovie, True)
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
        Next
        messbox.Close()
    End Sub

#If Not Refocus Then
    Private Sub Form1_Activated(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Activated
        Try
            If messbox.Visible = True Then
                messbox.Activate()
                messbox.BringToFront()
                messbox.Focus()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub
#End If

    

    Private Sub Form1_FormClosed(ByVal sender As Object, ByVal e As System.Windows.Forms.FormClosedEventArgs) Handles Me.FormClosed
        Try
            Me.Dispose()
            Me.Finalize()
            End
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Form1_FormClosing(ByVal sender As Object, ByVal e As System.Windows.Forms.FormClosingEventArgs) Handles Me.FormClosing
        Try
            Call mov_CacheSave()
            If Tv_CacheSave("New Function") Then
                e.Cancel = True
                Exit Sub
            End If

            'if we say cancel to save nfo's & exit then we don't want to exit MC if e.cancel= true we abort the closing....

            'Todo: Code a better way to serialize the data

            'Me.LoadConfig()

            Preferences.splt1 = SplitContainer1.SplitterDistance
            Preferences.splt2 = SplitContainer2.SplitterDistance
            Preferences.splt3 = SplitContainer3.SplitterDistance
            Preferences.splt4 = SplitContainer4.SplitterDistance
            Preferences.splt5 = SplitContainer5.SplitterDistance


            If Me.WindowState = FormWindowState.Minimized Then
                Me.WindowState = FormWindowState.Normal
                Preferences.formwidth = Me.Width
                Preferences.formheight = Me.Height
                Preferences.locx = Me.Location.X
                Preferences.locy = Me.Location.Y
                Preferences.maximised = False
            End If

            If Me.WindowState = FormWindowState.Normal Then
                Preferences.formwidth = Me.Width
                Preferences.formheight = Me.Height
                Preferences.locx = Me.Location.X
                Preferences.locy = Me.Location.Y
                Preferences.maximised = False
            End If

            If Me.WindowState = FormWindowState.Maximized Then
                Me.WindowState = FormWindowState.Normal
                Preferences.maximised = True
            End If

            If DataGridView1.Columns.Count > 0 Then
                Preferences.tableview.Clear()
                For Each column In DataGridView1.Columns
                    Dim tempstring As String = String.Format("{0}|{1}|{2}|{3}", column.name, column.width, column.displayindex, column.visible)
                    Preferences.tableview.Add(tempstring)
                Next
            End If

            Preferences.startuptab = TabLevel1.SelectedIndex

            Preferences.SaveConfig()
            Dim errpath As String = IO.Path.Combine(applicationPath, "tvrebuild.log")
        Catch ex As Exception
            MessageBox.Show(ex.ToString, "Exception")
            Environment.Exit(1)
            'ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Form1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.GotFocus
        Try
            If messbox.Visible = True Then
                messbox.Activate()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub


    'TODO: (Form1_Load) Need to refactor
    Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Me.Load
        Try

            For I = 0 To 20
                Common.Tasks.Add(New Tasks.BlankTask())
            Next

            Preferences.applicationPath = Application.StartupPath
            Utilities.applicationPath = Application.StartupPath
            
            'TasksList.DataSource = Common.Tasks

            ForegroundWorkTimer.Interval = 500
            AddHandler ForegroundWorkTimer.Tick, AddressOf ForegroundWorkPumper



            DownloadCache.CacheFolder = IO.Path.Combine(Utilities.applicationPath, "cache\")
            Dim asm As Assembly = Assembly.GetExecutingAssembly
            Dim InternalResourceNames() As String = asm.GetManifestResourceNames

            'Update Main Form Window Title to show Currrent Version
            Dim sAssemblyVersion As String = Trim(System.Reflection.Assembly.GetExecutingAssembly.FullName.Split(",")(1))
            sAssemblyVersion = Microsoft.VisualBasic.Right(sAssemblyVersion, 7)       'Cuts Version=3.4.0.2 down to just 3.4.0.2
            Me.Text = "Media Companion - V" & sAssemblyVersion

            For Each Temp In InternalResourceNames
                Dim Temp1 As ManifestResourceInfo = asm.GetManifestResourceInfo(Temp)
            Next
            ComboBox11.SelectedIndex = 0
            RadioButton45.Checked = True
            'Try
            '    Dim scraperfunction As New imdb.Classimdbscraper
            '    Dim temp As String = scraperfunction.getversion
            '    If Convert.ToInt32(temp) < 5 Then
            '        MsgBox("             Out of date IMDB scraper file detected" & vbCrLf & "Please replace your 'imdb.dll' file with the one from the downloaded archive")
            '        End
            '    End If
            'Catch

            'End Try
            'Panel4.Location = New Point(149, 23)              'Disabled this direct positioning on Panel 4 so that we can position in GUI....SK
            TvTreeview.Sort()

            For Each arg As String In Environment.GetCommandLineArgs()
                Console.WriteLine(arg)
                If arg = "sq" Then
                    Me.WindowState = FormWindowState.Minimized
                    scrapeAndQuit = True
                End If
            Next
            Dim loadinginfo As String
            If scrapeAndQuit = False Then
                frmSplash.Show()

                loadinginfo = "Status :- Initialising Program"
                frmSplash.Label3.Text = loadinginfo
                frmSplash.Label3.Refresh()
            End If
            Me.Visible = False

            ComboBox10.SelectedIndex = 0

            Me.Refresh()
            Application.DoEvents()
            Dim tempstring As String
            tempstring = applicationPath & "\enablemultiple.set"
            If Not File.Exists(tempstring) Then
                Dim tej As Integer = 0
                Dim processes() As Process
                Dim instance As Process
                Dim process As New Process()
                processes = process.GetProcesses
                For Each instance In processes
                    If instance.ProcessName = "Media Companion" Then                            'If instance.ProcessName.IndexOf("Media Companion - V") <> -1 Then          This should limit the match to only Median Companion running not Visual Studio 2010
                        tej = tej + 1
                        If tej >= 2 Then
                            MsgBox("XBMC Media Companion is already running")

                            End                         'Close MC since another version of the program is running.
                        End If
                    End If
                Next
            End If
            CheckForIllegalCrossThreadCalls = False
            'messbox.Show()
            'messbox.Visible = False



            Preferences.maximised = False
            Preferences.SetUpPreferences()                     'Set defaults to all userpreferences. We then load the preferences from config.xml this way any missing ones have a default already set
            generalprefschanged = False

            tempstring = applicationPath & "\Settings\" 'read in the config.xml to set the stored preferences (if it exists)
            Dim hg As New IO.DirectoryInfo(tempstring)
            If hg.Exists Then
                ' applicationdatapath = tempstring
                Preferences.configpath = tempstring & "config.xml"
                If Not IO.File.Exists(Preferences.configpath) Then

                    Preferences.SaveConfig()
                End If
            Else
                IO.Directory.CreateDirectory(tempstring)
                workingProfile.config = tempstring = applicationPath & "\Settings\config.xml"
                Preferences.SaveConfig()
            End If



            If IO.File.Exists(applicationPath & "\settings\profile.xml") = True Then
                Call util_ProfilesLoad()
                For Each prof In profileStruct.profilelist
                    If prof.profilename = profileStruct.startupprofile Then
                        workingProfile.actorcache = prof.actorcache
                        workingProfile.config = prof.config
                        workingProfile.moviecache = prof.moviecache
                        workingProfile.profilename = prof.profilename
                        workingProfile.regexlist = prof.regexlist
                        workingProfile.filters = prof.filters
                        workingProfile.tvcache = prof.tvcache
                        workingProfile.profilename = prof.profilename
                        For Each item In ProfilesToolStripMenuItem.DropDownItems
                            If item.text = workingProfile.profilename Then
                                With item
                                    item.checked = True
                                End With
                            Else
                                item.checked = False
                            End If
                        Next
                    End If
                Next
            Else
                profileStruct.workingprofilename = "Default"
                profileStruct.defaultprofile = "Default"
                profileStruct.startupprofile = "Default"
                Dim currentprofile As New str_ListOfProfiles(SetDefaults)
                tempstring = applicationPath & "\Settings\"
                currentprofile.actorcache = tempstring & "actorcache.xml"
                currentprofile.config = tempstring & "config.xml"
                currentprofile.regexlist = tempstring & "regex.xml"
                currentprofile.tvcache = tempstring & "tvcache.xml"
                currentprofile.filters = tempstring & "filters.txt"
                currentprofile.moviecache = tempstring & "moviecache.xml"
                currentprofile.profilename = "Default"
                profileStruct.profilelist.Add(currentprofile)
                profileStruct.workingprofilename = "Default"
                Call util_ProfileSave()
                Call util_ProfilesLoad()
                For Each prof In profileStruct.profilelist
                    If prof.profilename = profileStruct.startupprofile Then
                        workingProfile.actorcache = prof.actorcache
                        workingProfile.config = prof.config
                        workingProfile.moviecache = prof.moviecache
                        workingProfile.profilename = prof.profilename
                        workingProfile.regexlist = prof.regexlist
                        workingProfile.filters = prof.filters
                        workingProfile.tvcache = prof.tvcache
                        workingProfile.profilename = prof.profilename
                    End If
                Next
            End If

            'Application data folder

            'Dim f As New IO.DirectoryInfo(applicationdatapath)
            'If Not f.Exists Then
            '    Try
            '        Directory.CreateDirectory(applicationdatapath)
            '    Catch ex As Exception
            '        MsgBox(ex.Message.ToString)
            '        End
            '    End Try
            'End If

            Dim g As New IO.DirectoryInfo(IO.Path.Combine(applicationPath, "settings\postercache\"))
            If Not g.Exists Then
                Try
                    Directory.CreateDirectory(IO.Path.Combine(applicationPath, "settings\postercache\"))
                Catch ex As Exception
                    MsgBox(ex.Message.ToString)
                    End
                End Try
            End If


            defaultOfflineArt = IO.Path.Combine(applicationPath, "Resources\default_offline.jpg")
            defaultFanart = IO.Path.Combine(applicationPath, "Resources\default_fanart.jpg")
            defaultPoster = IO.Path.Combine(applicationPath, "Resources\default_poster.jpg")
            defaultBanner = IO.Path.Combine(applicationPath, "Resources\default_banner.jpg")
            defaultActor = IO.Path.Combine(applicationPath, "Resources\default_actor.jpg")
            defaultScreenShot = IO.Path.Combine(applicationPath, "Resources\default_offline.jpg")

            CheckForIllegalCrossThreadCalls = False

            'These lines fixed the associated panel so that they don't automove when the Form1 is resized
            SplitContainer1.FixedPanel = System.Windows.Forms.FixedPanel.Panel1 'Left Panel on Movie tab - Movie Listing 
            SplitContainer5.FixedPanel = System.Windows.Forms.FixedPanel.Panel2 'Bottom Left Panel on Movie Tab - Filters
            SplitContainer3.FixedPanel = System.Windows.Forms.FixedPanel.Panel1 'Left Panel on TV Tab

            Try
                If IO.File.Exists(IO.Path.Combine(applicationPath, "\error.log")) Then IO.File.Delete(IO.Path.Combine(applicationPath, "\error.log"))
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try

            tempstring = applicationDatapath & "error.log"
            If IO.File.Exists(tempstring) = True Then
                IO.File.Delete(tempstring)
            End If


            'ToolStrip1.Enabled = False

            Call util_RegexLoad()

            Call util_PrefsLoad()

            'If applicationpath.IndexOf("/") <> -1 Then tempstring = applicationpath & "/" & "config.xml"
            'If applicationpath.IndexOf("\") <> -1 Then tempstring = applicationpath & "\" & "config.xml"



            Select Case Preferences.moviedefaultlist
                Case 0
                    RadioButton1.Checked = True
                Case 1
                    RadioButton2.Checked = True
                Case 2
                    RadioButton6.Checked = True
            End Select

            Select Case Preferences.moviesortorder
                Case 0
                    RadioButton3.Checked = True
                Case 1
                    RadioButton4.Checked = True
                Case 2
                    RadioButtonSortModified.Checked = True
                Case 3
                    RadioButton21.Checked = True
                Case 4
                    RadioButton7.Checked = True
                Case 5
                    RadioButton19.Checked = True
                Case 6
                    RadioButtonSortCreate.Checked = True
            End Select
            '----------------------------------------------------------

            mScraperManager = New ScraperManager(IO.Path.Combine(My.Application.Info.DirectoryPath, "Assets\scrapers"))
            '----------------------------------------------------------
            If Not IO.File.Exists(workingProfile.moviecache) Or Preferences.startupCache = False Then
                loadinginfo = "Status :- Building Movie Database"
                frmSplash.Label3.Text = loadinginfo
                frmSplash.Label3.Refresh()
                Call mov_CacheRebuild(movieFolders)

            Else
                loadinginfo = "Status :- Loading Movie Database"
                frmSplash.Label3.Text = loadinginfo
                frmSplash.Label3.Refresh()
                Call mov_CacheLoad()

            End If

            If IO.File.Exists(workingProfile.filters) Then
                loadinginfo = "Status :- Loading Genrelist"
                frmSplash.Label3.Text = loadinginfo
                frmSplash.Label3.Refresh()
                Call util_GenreLoad()
            End If

            If Not IO.File.Exists(workingProfile.tvcache) Or Preferences.startupCache = False Then
                loadinginfo = "Status :- Building TV Database"
                frmSplash.Label3.Text = loadinginfo
                frmSplash.Label3.Refresh()
                Call tv_CacheRebuild()
            Else
                loadinginfo = "Status :- Loading TV Database"
                frmSplash.Label3.Text = loadinginfo
                frmSplash.Label3.Refresh()
                Call tv_CacheLoad(("New Function"))
            End If
            If Not IO.File.Exists(workingProfile.actorcache) Or Preferences.startupCache = False Then
                loadinginfo = "Status :- Building Actor Database"
                frmSplash.Label3.Text = loadinginfo
                frmSplash.Label3.Refresh()
                Call mov_ActorRebuild()
            Else
                loadinginfo = "Status :- Loading Actor Database"
                frmSplash.Label3.Text = loadinginfo
                frmSplash.Label3.Refresh()
                Dim NovaThread3 = New Thread(New ThreadStart(AddressOf mov_ActorCacheLoad))
                NovaThread3.SetApartmentState(ApartmentState.STA)
                NovaThread3.Start()
                'Call loadactorcache()
            End If

            Call mov_PreferencesDisplay()

            If scrapeAndQuit = False Then
                Me.Visible = True


                Dim intX As Integer = Screen.PrimaryScreen.Bounds.Width
                Dim intY As Integer = Screen.PrimaryScreen.Bounds.Height
                SplitContainer1.IsSplitterFixed = True
                SplitContainer2.IsSplitterFixed = True
                SplitContainer3.IsSplitterFixed = True
                SplitContainer4.IsSplitterFixed = True
                SplitContainer5.IsSplitterFixed = True
                If Preferences.maximised = False Then
                    If Preferences.locx < 0 Then Preferences.locx = 0
                    If Preferences.locy < 0 Then Preferences.locy = 0
                    If Preferences.formheight > intY Then Preferences.formheight = intY
                    If Preferences.formwidth > intX Then Preferences.formwidth = intX
                    If Preferences.locx >= intX Then Preferences.locx = intX - Preferences.formwidth
                    If Preferences.locy >= intY Then Preferences.locy = intY - Preferences.formheight
                    If Preferences.formheight <> 0 And Preferences.formwidth <> 0 Then
                        Me.Width = Preferences.formwidth
                        Me.Height = Preferences.formheight
                    End If
                Else
                    Me.WindowState = FormWindowState.Maximized
                End If

                Dim dpi As Graphics = Me.CreateGraphics

                'MessageBox.Show(String.Format("X={0}, Y={1}", dpi.DpiX, dpi.DpiY),
                '"DPI Settings", MessageBoxButtons.OK, MessageBoxIcon.Information)

                DebugSytemDPITextBox.Text = dpi.DpiX

                'If Preferences.maximised = True Then
                '    Me.WindowState = FormWindowState.Maximized
                'Else
                '    If Preferences.locx <> 0 Then
                '        Me.Location = New Point(Preferences.locx, Preferences.locy)
                '    End If
                '    If Preferences.locy <> 0 Then
                '        Me.Location = New Point(Preferences.locx, Preferences.locy)
                '    End If
                '    If Preferences.formheight <> 0 And Preferences.formwidth <> 0 Then
                '        Me.Width = Preferences.formwidth
                '        Me.Height = Preferences.formheight
                '    End If
                'End If

                Me.Refresh()
                Application.DoEvents()

                Me.Refresh()
                Application.DoEvents()

                Application.DoEvents()

                screenshotTab = TabControl3.TabPages(1)

                TabControl3.TabPages.RemoveAt(1)

                If Preferences.splt5 = 0 Then
                    Dim tempint As Integer = SplitContainer1.Height
                    tempint = tempint / 4
                    tempint = tempint * 3
                    If tempint > 275 Then
                        Preferences.splt5 = tempint
                    Else
                        Preferences.splt5 = 275
                    End If
                End If

                If Preferences.startuptab = 0 Then
                    SplitContainer1.SplitterDistance = Preferences.splt1
                    SplitContainer2.SplitterDistance = Preferences.splt2
                    SplitContainer5.SplitterDistance = Preferences.splt5
                    TabLevel1.SelectedIndex = 1
                    SplitContainer3.SplitterDistance = Preferences.splt3
                    SplitContainer4.SplitterDistance = Preferences.splt4
                    TabLevel1.SelectedIndex = 0
                Else
                    SplitContainer1.SplitterDistance = Preferences.splt1
                    SplitContainer2.SplitterDistance = Preferences.splt2
                    SplitContainer5.SplitterDistance = Preferences.splt5
                    TabLevel1.SelectedIndex = 1
                    SplitContainer3.SplitterDistance = Preferences.splt3
                    SplitContainer4.SplitterDistance = Preferences.splt4
                End If
                SplitContainer1.IsSplitterFixed = False
                SplitContainer2.IsSplitterFixed = False
                SplitContainer3.IsSplitterFixed = False
                SplitContainer4.IsSplitterFixed = False
                SplitContainer5.IsSplitterFixed = False
            End If

            'Dim tempboolean As Boolean = UrlIsValid("http://thetvdb.com/")

            If scrapeAndQuit = True Then
                Call util_AutoRun()
            Else
                Try
                    If ComboBox3.Items.Count <> Preferences.moviesets.Count Then
                        ComboBox3.Items.Clear()
                        For Each mset In Preferences.moviesets
                            ComboBox3.Items.Add(mset)
                        Next
                    End If
                    If workingMovieDetails.fullmoviebody.movieset <> "-None-" Then
                        'For Each mset In Preferences.moviesets
                        '    ComboBox3.Items.Add(mset)
                        'Next
                        For te = 0 To ComboBox3.Items.Count - 1
                            If ComboBox3.Items(te) = workingMovieDetails.fullmoviebody.movieset Then
                                ComboBox3.SelectedIndex = te
                                Exit For
                            End If
                        Next
                    End If
                Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
                End Try
                Call util_FontSetup()

                Call util_HtmlTemplatesAdd()
                Call util_CommandListLoad()
                startup = False
                frmSplash.Close()

                'hide debug xml view tabs - unhiden (i.e. added) via debug tab
                TabLevel1.TabPages.Remove(Me.TabConfigXML)
                TabLevel1.TabPages.Remove(Me.TabMovieCacheXML)
                TabLevel1.TabPages.Remove(Me.TabTVCacheXML)
                TabLevel1.TabPages.Remove(Me.TabProfile)
                TabLevel1.TabPages.Remove(Me.TabActorCache)
                TabLevel1.TabPages.Remove(Me.TabRegex)

                'the following code aligns the 3 groupboxes ontop of each other which cannot be done in the GUI
                GroupBox_IMDB_Scraper_Preferences.Location = GroupBox_MovieIMDBMirror.Location
                GroupBox_TMDB_Scraper_Preferences.Location = GroupBox_MovieIMDBMirror.Location

                'ToolStrip1.Enabled = True

                'Below shows the current screensize on initial start
                DebugScreenSizeLabel.Text = Me.Width & " x " & Me.Height
                mov_SplitContainerAutoPosition()
                tv_ShowSelectedCurrently()
                tv_SplitContainerAutoPosition()
            End If

            Common.Tasks.StartTaskEngine()
            ForegroundWorkTimer.Start()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    

    Private Sub Form1_Resize(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Resize
        Try
            If Me.WindowState = FormWindowState.Maximized Then
                mov_SplitContainerAutoPosition()
                tv_SplitContainerAutoPosition()
            End If
            If startup = False Then
                Preferences.locx = Me.Location.X
                Preferences.locy = Me.Location.Y
                'Preferences.SaveConfig()              'this is run when we close MC, no need to run it each time we resize MC
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Sub mov_SplitContainerAutoPosition()
        'Set Movie Splitter Auto Position
        Dim pic1ratio As Decimal
        Dim pic2ratio As Decimal
        Try
            Dim pic1ImSzW = PictureBox7.Image.Size.Width        'original picture sizes
            Dim pic1ImszH = PictureBox7.Image.Size.Height
            Dim pic2ImSzW = moviethumb.Image.Size.Width
            Dim pic2ImszH = moviethumb.Image.Size.Height
            pic1ratio = pic1ImSzW / pic1ImszH
            pic2ratio = pic2ImSzW / pic2ImszH
            Dim width As Integer = SplitContainer2.Size.Width
            ' MsgBox(from & " = " & width & ":" & Int(SplitContainer2.Size.Width * (pic1ratio / (pic1ratio + pic2ratio))) - 5 & " - " & pic1ImSzW & "x" & pic1ImszH & " " & pic2ImszH & "x" & pic2ImSzW)
        Catch ex As Exception
            pic1ratio = 2
            pic2ratio = 1
            'MsgBox("Movie Splitter Exception")
        End Try
        SplitContainer2.SplitterDistance = (SplitContainer2.Size.Width - 8) * (pic1ratio / (pic1ratio + pic2ratio))
    End Sub
    Sub tv_SplitContainerAutoPosition()
        'Set TVShow Splitter Auto Position
        Dim pic3ratio As Decimal
        Dim pic4ratio As Decimal
        Try
            Dim pic3ImSzW = tv_PictureBoxLeft.Image.Size.Width
            Dim pic3ImszH = tv_PictureBoxLeft.Image.Size.Height
            Dim pic4ImSzW = tv_PictureBoxRight.Image.Size.Width
            Dim pic4ImszH = tv_PictureBoxRight.Image.Size.Height
            pic3ratio = pic3ImSzW / pic3ImszH
            pic4ratio = pic4ImSzW / pic4ImszH
            'MsgBox(from & " = " & SplitContainer4.SplitterDistance & " - " & pic3ImSzW & "x" & pic3ImszH & " " & pic4ImszH & "x" & pic4ImSzW)
        Catch ex As Exception
            pic3ratio = 2
            pic4ratio = 1
            'MsgBox("TV Splitter Exception")
        End Try
        SplitContainer4.SplitterDistance = (SplitContainer4.Size.Width - 8) * (pic3ratio / (pic3ratio + pic4ratio))
    End Sub

    Private Sub Form1_ResizeEnd(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.ResizeEnd
        Try
            If Preferences.formwidth <> Me.Width Or Preferences.formheight <> Me.Height Then
                Preferences.formwidth = Me.Width
                Preferences.formheight = Me.Height
                DebugScreenSizeLabel.Text = Me.Width & " x " & Me.Height

                'Preferences.saveconfig()           'no need to save position, we do that when MC closes
                Dim maxcount2 As Integer = Convert.ToInt32((TabPage22.Width - 100) / 150)
                If maxcount2 <> maxcount Then
                    maxcount = maxcount2
                    Call mov_WallReset()
                End If

            End If
            mov_SplitContainerAutoPosition()
            tv_SplitContainerAutoPosition()
        Catch ex As Exception
                ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub mov_CacheSave()   'save memory data to cache
        Dim fullpath As String = workingProfile.moviecache
        If IO.File.Exists(fullpath) Then
            Dim don As Boolean = False
            Dim count As Integer = 0
            Do
                Try
                    If IO.File.Exists(fullpath) Then
                        IO.File.Delete(fullpath)
                        don = True
                    Else
                        don = True
                    End If
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                Finally
                    count += 1
                End Try
            Loop Until don = True


        End If

        frmSplash2.Label1.Text = "Creating Movie Cache xml....."
        frmSplash2.Label2.Visible = False
        frmSplash2.ProgressBar1.Visible = False

        Dim doc As New XmlDocument

        Dim thispref As XmlNode = Nothing
        Dim xmlproc As XmlDeclaration

        xmlproc = doc.CreateXmlDeclaration("1.0", "UTF-8", "yes")
        doc.AppendChild(xmlproc)
        Dim root As XmlElement
        Dim child As XmlElement
        root = doc.CreateElement("movie_cache")
        Dim childchild As XmlElement

        Dim count2 As Integer = 0
        frmSplash2.Label2.Text = "Creating cache xml...."
        For Each movie In fullMovieList

            child = doc.CreateElement("movie")
            childchild = doc.CreateElement("filedate")
            childchild.InnerText = movie.filedate
            child.AppendChild(childchild)
            childchild = doc.CreateElement("createdate")
            childchild.InnerText = movie.createdate
            child.AppendChild(childchild)
            childchild = doc.CreateElement("missingdata1")
            childchild.InnerText = movie.missingdata1.ToString
            child.AppendChild(childchild)
            childchild = doc.CreateElement("filename")
            childchild.InnerText = movie.filename
            child.AppendChild(childchild)
            childchild = doc.CreateElement("foldername")
            childchild.InnerText = movie.foldername
            child.AppendChild(childchild)
            childchild = doc.CreateElement("fullpathandfilename")
            childchild.InnerText = movie.fullpathandfilename
            child.AppendChild(childchild)
            If movie.movieset <> Nothing Then
                If movie.movieset <> "" Or movie.movieset <> "-None-" Then
                    childchild = doc.CreateElement("set")
                    childchild.InnerText = movie.movieset
                    child.AppendChild(childchild)
                Else
                    childchild = doc.CreateElement("set")
                    childchild.InnerText = ""
                    child.AppendChild(childchild)
                End If
            Else
                childchild = doc.CreateElement("set")
                childchild.InnerText = ""
                child.AppendChild(childchild)
            End If
            childchild = doc.CreateElement("genre")
            childchild.InnerText = movie.genre
            child.AppendChild(childchild)
            childchild = doc.CreateElement("id")
            childchild.InnerText = movie.id
            child.AppendChild(childchild)
            childchild = doc.CreateElement("playcount")
            childchild.InnerText = movie.playcount
            child.AppendChild(childchild)
            childchild = doc.CreateElement("rating")
            childchild.InnerText = movie.rating
            child.AppendChild(childchild)
            childchild = doc.CreateElement("title")
            childchild.InnerText = movie.title
            child.AppendChild(childchild)
            childchild = doc.CreateElement("originaltitle")
            childchild.InnerText = movie.originaltitle
            child.AppendChild(childchild)
            If movie.sortorder = Nothing Then
                movie.sortorder = movie.title
            End If
            If movie.sortorder = "" Then
                movie.sortorder = movie.title
            End If
            childchild = doc.CreateElement("outline")
            childchild.InnerText = movie.outline
            child.AppendChild(childchild)
            childchild = doc.CreateElement("plot")
            If movie.plot.Length() > 100 Then
                childchild.InnerText = movie.plot.Substring(0, 100)     'Only write first 100 chars to cache- this plot is only used for table view - normal full plot comes from the nfo file (fullbody)
            Else
                childchild.InnerText = movie.plot
            End If

            child.AppendChild(childchild)
            childchild = doc.CreateElement("sortorder")
            childchild.InnerText = movie.sortorder
            child.AppendChild(childchild)
            childchild = doc.CreateElement("titleandyear")
            '---- aqui....
            Try
                If movie.titleandyear.Length >= 5 Then
                    If movie.titleandyear.ToLower.IndexOf(", the") = movie.titleandyear.Length - 12 Then
                        Dim Temp As String = movie.titleandyear.Substring(movie.titleandyear.Length - 7, 7)
                        movie.titleandyear = "The " & movie.titleandyear.Substring(0, movie.titleandyear.Length - 12) & Temp
                    End If
                End If
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
            childchild.InnerText = movie.titleandyear
            child.AppendChild(childchild)
            childchild = doc.CreateElement("runtime")
            childchild.InnerText = movie.runtime
            child.AppendChild(childchild)
            childchild = doc.CreateElement("top250")
            childchild.InnerText = movie.top250
            child.AppendChild(childchild)
            childchild = doc.CreateElement("year")
            childchild.InnerText = movie.year
            child.AppendChild(childchild)
            root.AppendChild(child)
        Next

        doc.AppendChild(root)
        For f = 1 To 100
            Try
                frmSplash2.Label2.Text = "Saving cache xml...." & f
                Dim output As New XmlTextWriter(fullpath, System.Text.Encoding.UTF8)
                output.Formatting = Formatting.Indented
                doc.WriteTo(output)
                output.Close()
                Exit For
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
        Next


    End Sub

    '    Private Sub TV_SaveTvData()
    '        Dim fullpath As String = workingProfile.tvcache
    '        If IO.File.Exists(fullpath) Then
    '            IO.File.Delete(fullpath)
    '        End If
    '        Dim doc As New XmlDocument

    '        Dim thispref As XmlNode = Nothing
    '        Dim xmlproc As XmlDeclaration

    '        xmlproc = doc.CreateXmlDeclaration("1.0", "UTF-8", "yes")
    '        doc.AppendChild(xmlproc)
    '        Dim root As XmlElement
    '        Dim child As XmlElement
    '        root = doc.CreateElement("tv_cache")

    '        Dim childchild As XmlElement
    '        For Each item In TvShows
    '            child = doc.CreateElement("tvshow")
    '            childchild = doc.CreateElement("title")
    '            If item.Title.Value.Length >= 5 Then
    '                If item.Title.Value.ToLower.IndexOf(", the") = item.Title.Value.Length - 5 Then
    '                    item.Title.Value = "The " & item.Title.Value.Substring(0, item.Title.Value.Length - 5)
    '                End If
    '            End If
    '            childchild.InnerText = item.Title.Value
    '            child.AppendChild(childchild)
    '            childchild = doc.CreateElement("fullpathandfilename")
    '            childchild.InnerText = item.NfoFilePath
    '            child.AppendChild(childchild)
    '            childchild = doc.CreateElement("genre")
    '            childchild.InnerText = item.Genre.Value
    '            child.AppendChild(childchild)
    '            childchild = doc.CreateElement("imdbid")
    '            childchild.InnerText = item.ImdbId.Value
    '            child.AppendChild(childchild)
    '            childchild = doc.CreateElement("tvdbid")
    '            childchild.InnerText = item.tvdbid
    '            child.AppendChild(childchild)
    '            childchild = doc.CreateElement("rating")
    '            childchild.InnerText = item.Rating.Value
    '            child.AppendChild(childchild)
    '            child.AppendChild(childchild)
    '            childchild = doc.CreateElement("year")
    '            childchild.InnerText = item.Year.Value
    '            child.AppendChild(childchild)
    '            childchild = doc.CreateElement("language")
    '            childchild.InnerText = item.Language.Value
    '            child.AppendChild(childchild)
    '            childchild = doc.CreateElement("status")
    '            childchild.InnerText = item.Status.Value
    '            child.AppendChild(childchild)
    '            childchild = doc.CreateElement("sortorder")
    '            childchild.InnerText = item.SortOrder.Value
    '            child.AppendChild(childchild)
    '            childchild = doc.CreateElement("episodeactorsource")
    '            childchild.InnerText = item.EpisodeActorSource.Value
    '            child.AppendChild(childchild)
    '            childchild = doc.CreateElement("locked")
    '            childchild.InnerText = item.State.ToString.ToLower
    '            child.AppendChild(childchild)
    '            For Each episode In item.Episodes
    '                Dim episodechild As XmlElement
    '                childchild = doc.CreateElement("episode")
    '                episodechild = doc.CreateElement("title")
    '                episodechild.InnerText = episode.Title.Value
    '                childchild.AppendChild(episodechild)

    '                episodechild = doc.CreateElement("episodepath")
    '                episodechild.InnerText = episode.VideoFilePath
    '                childchild.AppendChild(episodechild)

    '                episodechild = doc.CreateElement("seasonno")
    '                episodechild.InnerText = episode.Season.Value
    '                childchild.AppendChild(episodechild)

    '                episodechild = doc.CreateElement("episodeno")
    '                episodechild.InnerText = episode.Episode.Value
    '                childchild.AppendChild(episodechild)

    '                'episodechild = doc.CreateElement("status")
    '                'episodechild.InnerText = episode.status
    '                'childchild.AppendChild(episodechild)

    '                episodechild = doc.CreateElement("aired")
    '                episodechild.InnerText = episode.Aired.Value
    '                childchild.AppendChild(episodechild)

    '                episodechild = doc.CreateElement("playcount")
    '                episodechild.InnerText = episode.PlayCount.Value
    '                childchild.AppendChild(episodechild)

    '                episodechild = doc.CreateElement("rating")
    '                episodechild.InnerText = episode.Rating.Value
    '                childchild.AppendChild(episodechild)

    '                episodechild = doc.CreateElement("tvdbid")
    '                episodechild.InnerText = episode.TvdbId.Value
    '                childchild.AppendChild(episodechild)
    '                child.AppendChild(childchild)
    '            Next
    '            root.AppendChild(child)
    '            For Each episode In item.missingepisodes
    '                Dim episodechild As XmlElement
    '                childchild = doc.CreateElement("missingepisode")
    '                episodechild = doc.CreateElement("title")
    '                episodechild.InnerText = episode.Title.Value
    '                childchild.AppendChild(episodechild)

    '                episodechild = doc.CreateElement("aired")
    '                episodechild.InnerText = episode.Aired.Value
    '                childchild.AppendChild(episodechild)

    '                episodechild = doc.CreateElement("playcount")
    '                episodechild.InnerText = episode.PlayCount.Value
    '                childchild.AppendChild(episodechild)

    '                episodechild = doc.CreateElement("episodepath")
    '                episodechild.InnerText = episode.VideoFilePath
    '                childchild.AppendChild(episodechild)

    '                episodechild = doc.CreateElement("seasonno")
    '                episodechild.InnerText = episode.Season.value
    '                childchild.AppendChild(episodechild)

    '                episodechild = doc.CreateElement("episodeno")
    '                episodechild.InnerText = episode.Episode.Value
    '                childchild.AppendChild(episodechild)
    '                child.AppendChild(childchild)
    '            Next
    '            root.AppendChild(child)
    '        Next

    '        doc.AppendChild(root)

    '        Try
    '            'TODO: Need to fix XmlTextWriter IO error.
    '            'Surrounded object in Try...Catch to temporarly fix the error
    '            Using output As New XmlTextWriter(fullpath, System.Text.Encoding.UTF8) With {.Formatting = Formatting.Indented}
    '                doc.WriteTo(output)
    '                output.Close()
    '            End Using
    '        Catch ex As Exception
    '#If SilentErrorScream Then
    '            Throw ex
    '#End If
    '        End Try

    '    End Sub

    '    Private Sub loadtvcache()
    '        totalEpisodeCount = 0
    '        totalTvShowCount = 0
    '        TextBox32.Text = ""
    '        TextBox33.Text = ""
    '        TvShows.Clear()
    '        TvTreeview.Nodes.Clear()


    '        For Each Item As String In Preferences.tvFolders
    '            Dim NfoPath As String = IO.Path.Combine(Item, "tvshow.nfo")
    '            Dim NewShow As New Nfo.TvShow
    '            NewShow.NfoFilePath = NfoPath
    '            totalTvShowCount += 1
    '            If NewShow.FileContainsReadableXml Then
    '                NewShow.Load()
    '            Else
    '                NewShow.Title.Value = NewShow.FolderPath
    '                NewShow.State = Nfo.ShowState.Error
    '            End If

    '            NewShow.UpdateTreenode()
    '            If Not TvTreeview.Nodes.Contains(NewShow.ShowNode) Then
    '                TvTreeview.Nodes.Add(NewShow.ShowNode)
    '            End If

    '            TvShows.Add(NewShow)
    '        Next
    '        TvTreeview.Sort()
    '        'Dim tvlist As New XmlDocument
    '        'tvlist.Load(workingProfile.tvcache)
    '        'Dim thisresult As XmlNode = Nothing
    '        'For Each thisresult In tvlist("tv_cache")
    '        '    Select Case thisresult.Name
    '        '        Case "tvshow"
    '        '            Dim newtvshow As New TvShow

    '        '            TvShows.Add(newtvshow)
    '        '            Dim detail As XmlNode = Nothing
    '        '            For Each detail In thisresult.ChildNodes
    '        '                Select Case detail.Name
    '        '                    Case "title"
    '        '                        Dim tempstring As String = ""
    '        '                        tempstring = detail.InnerText
    '        '                        '-------------- Aqui
    '        '                        If Preferences.ignorearticle = True Then
    '        '                            If tempstring.ToLower.IndexOf("the ") = 0 Then
    '        '                                tempstring = tempstring.Substring(4, tempstring.Length - 4)
    '        '                                tempstring = tempstring & ", The"
    '        '                            End If
    '        '                        End If
    '        '                        newtvshow.title = tempstring
    '        '                    Case "fullpathandfilename"
    '        '                        newtvshow.fullpath = detail.InnerText
    '        '                    Case "genre"
    '        '                        newtvshow.genre = detail.InnerText
    '        '                    Case "locked"
    '        '                        newtvshow.locked = detail.InnerText
    '        '                    Case "imdbid"
    '        '                        newtvshow.imdbid = detail.InnerText
    '        '                    Case "tvdbid"
    '        '                        newtvshow.tvdbid = detail.InnerText
    '        '                    Case "rating"
    '        '                        newtvshow.rating = detail.InnerText
    '        '                    Case "year"
    '        '                        newtvshow.year = detail.InnerText
    '        '                    Case "language"
    '        '                        newtvshow.language = detail.InnerText
    '        '                    Case "sortorder"
    '        '                        newtvshow.sortorder = detail.InnerText
    '        '                    Case "episodeactorsource"
    '        '                        newtvshow.episodeactorsource = detail.InnerText
    '        '                    Case "status"
    '        '                        newtvshow.status = detail.InnerText
    '        '                    Case "episode"
    '        '                        Dim newepisode As New TvEpisode
    '        '                        Dim episodenew As XmlNode = Nothing
    '        '                        For Each episodenew In detail.ChildNodes
    '        '                            Select Case episodenew.Name
    '        '                                Case "title"
    '        '                                    newepisode.title = episodenew.InnerText
    '        '                                Case "episodepath"
    '        '                                    newepisode.VideoFilePath = episodenew.InnerText
    '        '                                Case "seasonno"
    '        '                                    newepisode.Season.value = episodenew.InnerText
    '        '                                Case "episodeno"
    '        '                                    newepisode.episodeno = episodenew.InnerText
    '        ''                                    'Case "status"
    '        ''                                    '    newepisode.status = episodenew.InnerText
    '        ''                                Case "aired"
    '        ''                                    newepisode.aired = episodenew.InnerText
    '        'Call TV_PopulateTvTree()
    '        ''                                    newepisode.playcount = episodenew.InnerText
    '        '                                Case "rating"
    '        '                                    newepisode.rating = episodenew.InnerText
    '        '                                Case "tvdbid"
    '        '                                    newepisode.tvdbid = episodenew.InnerText
    '        '                            End Select
    '        '                        Next
    '        '                        newtvshow.allepisodes.Add(newepisode)
    '        '                    Case "missingepisode"
    '        '                        Dim newepisode As New TvEpisode
    '        '                        Dim episodenew As XmlNode = Nothing
    '        '                        For Each episodenew In detail.ChildNodes
    '        '                            Select Case episodenew.Name
    '        '                                Case "title"
    '        '                                    newepisode.title = episodenew.InnerText
    '        '                                Case "episodepath"
    '        '                                    newepisode.VideoFilePath = episodenew.InnerText
    '        '                                Case "seasonno"
    '        '                                    newepisode.Season.value = episodenew.InnerText
    '        '                                Case "episodeno"
    '        '                                    newepisode.episodeno = episodenew.InnerText
    '        '                                    'Case "status"
    '        '                                    '    newepisode.status = episodenew.InnerText
    '        '                                Case "aired"
    '        '                                    newepisode.aired = episodenew.InnerText
    '        '                                Case "playcount"
    '        '                                    newepisode.playcount = episodenew.InnerText
    '        '                                Case "rating"
    '        '                                    newepisode.rating = episodenew.InnerText
    '        '                                Case "tvdbid"
    '        '                                    newepisode.tvdbid = episodenew.InnerText
    '        '                            End Select
    '        '                        Next
    '        '                        newtvshow.missingepisodes.Add(newepisode)
    '        '                        newtvshow.Load()
    '        '                End Select
    '        '            Next
    '        '    End Select
    '        'Next
    '        'CleanFolderList()
    '        'Call populatetvtree()
    '    End Sub

    '    Private Sub add_tvshow_to_treeview(ByVal fullpath As String, ByVal title As String, Optional ByVal xmlerror As Boolean = False, Optional ByVal locked As Boolean = True)
    '        If xmlerror = True Then
    '            TvTreeview.Nodes.Add(fullpath, title)
    '            For Each tn As TreeNode In TvTreeview.Nodes
    '                If tn.Name = fullpath Then
    '                    If locked = True Or locked = 2 Then tn.StateImageIndex = 0
    '                    tn.ForeColor = Color.Red
    '                End If
    '            Next
    '        Else
    '            TvTreeview.Nodes.Add(fullpath, title)
    '            For Each tn As TreeNode In TvTreeview.Nodes
    '                If tn.Name = fullpath Then
    '                    tn.ForeColor = Color.Black
    '                    If locked = True Or locked = 2 Then tn.StateImageIndex = 0
    '                End If
    '            Next
    '        End If
    '    End Sub

    '    Private Sub add_episode_to_treeview(ByVal rootnode As Integer, ByVal childnode As Integer, ByVal fullpath As String, ByVal title As String, Optional ByVal xmlerror As Boolean = False)
    '        Try
    '            Dim ccnode As TreeNode
    '            ccnode = TvTreeview.Nodes(rootnode).Nodes(childnode)
    '            For Each nod In ccnode.Nodes
    '                If nod.text = title Then
    '                    ccnode.Nodes.Remove(nod)
    '                    Exit For
    '                End If
    '            Next
    '            ccnode.Nodes.Add(fullpath, title)

    '            If xmlerror = True Then
    '                For Each no As TreeNode In ccnode.Nodes
    '                    If no.Name = fullpath Then
    '                        no.ForeColor = Color.Red
    '                        Exit For
    '                    End If
    '                Next
    '            Else
    '                For Each no As TreeNode In ccnode.Nodes
    '                    If no.Name = fullpath Then
    '                        no.ForeColor = Color.Black
    '                        Exit For
    '                    End If
    '                Next
    '            End If
    '            'TvTreeview.Nodes.Remove(node)
    '        Catch ex As Exception
    '#If SilentErrorScream Then
    '            Throw ex
    '#End If
    '            'MsgBox(ex.ToString)
    '        End Try
    '    End Sub

    'Private Sub populatetvtree()
    '    Dim tempint As Integer
    '    Dim tempstring As String = String.Empty
    '    Dim cnode As TreeNode = Nothing

    '    ComboBox4.Items.Clear()
    '    ComboBox4.Text = String.Empty


    '    PictureBox6.Image = Nothing
    '    PictureBox4.Image = Nothing
    '    PictureBox5.Image = Nothing
    '    TextBox10.Text = String.Empty
    '    TextBox11.Text = String.Empty
    '    TextBox9.Text = String.Empty
    '    TextBox12.Text = String.Empty
    '    TextBox13.Text = String.Empty
    '    TextBox14.Text = String.Empty
    '    TextBox15.Text = String.Empty
    '    TextBox16.Text = String.Empty
    '    TextBox18.Text = String.Empty
    '    TextBox19.Text = String.Empty
    '    If Not workingTvShow Is Nothing Then workingTvShow.path = String.Empty
    '    ComboBox4.Items.Clear()
    '    ComboBox4.Text = String.Empty
    '    TextBox20.Text = String.Empty
    '    TextBox21.Text = String.Empty
    '    TextBox22.Text = String.Empty
    '    TextBox23.Text = String.Empty
    '    TextBox24.Text = String.Empty
    '    TextBox25.Text = String.Empty
    '    ComboBox5.Items.Clear()
    '    ComboBox5.Text = String.Empty
    '    Panel9.Visible = False
    '    TextBox2.Text = String.Empty
    '    totalTvShowCount = 0
    '    totalEpisodeCount = 0
    '    TvTreeview.Nodes.Clear()

    '    For Each item In TvShows
    '        totalTvShowCount += 1
    '        Dim shownode As Integer = -1

    '        If item.status IsNot Nothing AndAlso Not item.status.ToLower.Contains("xml error") Then
    '            Call add_tvshow_to_treeview(item.fullpath, item.title, True, item.locked)
    '        Else
    '            Call add_tvshow_to_treeview(item.fullpath, item.title, False, item.locked)
    '        End If


    '        For Each episode In item.allepisodes
    '            totalEpisodeCount += 1

    '            Dim seasonno As Integer = -10
    '            seasonno = Convert.ToInt32(episode.Season.value)

    '            For g = 0 To TvTreeview.Nodes.Count - 1
    '                If TvTreeview.Nodes(g).Name.ToString = item.fullpath Then
    '                    cnode = TvTreeview.Nodes(g)
    '                    shownode = g
    '                    Exit For
    '                End If
    '            Next

    '            Dim seasonstring As String = Nothing

    '            If seasonno <> 0 And seasonno <> -1 Then
    '                If seasonno < 10 Then
    '                    tempstring = "Season 0" & seasonno.ToString
    '                Else
    '                    tempstring = "Season " & seasonno.ToString
    '                End If
    '            ElseIf seasonno = 0 Then
    '                tempstring = "Specials"
    '            End If

    '            Dim node As TreeNode
    '            Dim alreadyexists As Boolean = False
    '            For Each node In cnode.Nodes
    '                If node.Text = tempstring Then
    '                    alreadyexists = True
    '                    Exit For
    '                End If
    '            Next
    '            If alreadyexists = False Then cnode.Nodes.Add(tempstring)

    '            For Each node In cnode.Nodes
    '                If node.Text = tempstring Then
    '                    tempint = node.Index
    '                    Exit For
    '                End If
    '            Next

    '            Dim eps As String
    '            If episode.episodeno < 10 Then
    '                eps = "0" & episode.episodeno.ToString
    '            Else
    '                eps = episode.episodeno.ToString
    '            End If

    '            eps = eps & " - " & episode.title
    '            If episode.imdbid = Nothing Then
    '                episode.imdbid = ""
    '            End If

    '            If episode.imdbid.ToLower.IndexOf("xml error") <> -1 Then
    '                Call add_episode_to_treeview(shownode, tempint, episode.VideoFilePath, eps, True)
    '            Else
    '                Call add_episode_to_treeview(shownode, tempint, episode.VideoFilePath, eps, False)
    '            End If

    '        Next

    '        For Each missingep In item.missingepisodes
    '            For g = 0 To TvTreeview.Nodes.Count - 1
    '                If TvTreeview.Nodes(g).Name.ToString = item.fullpath Then
    '                    cnode = TvTreeview.Nodes(g)
    '                    shownode = g
    '                    Exit For
    '                End If
    '            Next

    '            Dim seasonstring As String = Nothing
    '            Dim seasonno As Integer = Convert.ToInt32(missingep.Season.value)
    '            If seasonno <> 0 And seasonno <> -1 Then
    '                If seasonno < 10 Then
    '                    tempstring = "Season 0" & seasonno.ToString
    '                Else
    '                    tempstring = "Season " & seasonno.ToString
    '                End If
    '            ElseIf seasonno = 0 Then
    '                tempstring = "Specials"
    '            End If

    '            Dim node As TreeNode
    '            Dim alreadyexists As Boolean = False
    '            For Each node In cnode.Nodes
    '                If node.Text = tempstring Then
    '                    alreadyexists = True
    '                    Exit For
    '                End If
    '            Next

    '            If alreadyexists = False Then cnode.Nodes.Add(tempstring)
    '            For Each node In cnode.Nodes
    '                If node.Text = tempstring Then
    '                    tempint = node.Index
    '                    Exit For
    '                End If
    '            Next

    '            Dim eps As String
    '            Dim episodeno As Integer = Convert.ToInt32(missingep.episodeno)
    '            If episodeno < 10 Then
    '                eps = "0" & episodeno.ToString
    '            Else
    '                eps = episodeno.ToString
    '            End If

    '            eps = eps & " - " & missingep.title
    '            Dim ccnode As TreeNode
    '            ccnode = TvTreeview.Nodes(shownode).Nodes(tempint)
    '            Dim tempstring2 As String = "Missing: " & eps
    '            ccnode.Nodes.Add(tempstring2, eps)

    '            For Each no As TreeNode In ccnode.Nodes
    '                If no.Name = tempstring2 Then
    '                    no.ForeColor = Color.Blue
    '                    no.Parent.ForeColor = Color.Blue
    '                    no.Parent.Parent.ForeColor = Color.Blue
    '                    Exit For
    '                End If
    '            Next
    '        Next
    '    Next



    '    Dim MyNode As TreeNode
    '    If Not TvTreeview.Nodes.Count = 0 Then
    '        MyNode = TvTreeview.Nodes(0) 'First Level
    '        'MyNode = MyNode.Nodes(6)  ' Second Level
    '        TvTreeview.SelectedNode = MyNode
    '        TabLevel1.Focus()
    '        TabControl3.Focus()
    '        TvTreeview.Focus()
    '    End If
    '    TvTreeview.Refresh()
    '    TvTreeview.CollapseAll()

    '    TextBox32.Text = totalTvShowCount.ToString
    '    TextBox33.Text = totalEpisodeCount.ToString
    'End Sub

    Private Sub mov_CacheLoad()
        fullMovieList.Clear()
        filteredList.Clear()
        dList.Clear()
        Dim movielist As New XmlDocument
        Dim objReader As New System.IO.StreamReader(workingProfile.moviecache)
        Dim tempstring As String = objReader.ReadToEnd
        objReader.Close()



        movielist.LoadXml(tempstring)
        Dim thisresult As XmlNode = Nothing
        For Each thisresult In movielist("movie_cache")
            Select Case thisresult.Name
                Case "movie"
                    Dim newmovie As New str_ComboList(SetDefaults)
                    Dim detail As XmlNode = Nothing
                    For Each detail In thisresult.ChildNodes
                        Select Case detail.Name
                            'workingmovie.missingdata1
                            Case "missingdata1"
                                newmovie.missingdata1 = Convert.ToByte(detail.InnerText)
                            Case "set"
                                newmovie.movieset = detail.InnerText
                            Case "sortorder"
                                newmovie.sortorder = detail.InnerText
                            Case "filedate"
                                If detail.InnerText.Length <> 14 Then 'i.e. invalid date
                                    newmovie.filedate = "19000101000000" '01/01/1900 00:00:00
                                Else
                                    newmovie.filedate = detail.InnerText
                                End If
                            Case "createdate"
                                If detail.InnerText.Length <> 14 Then 'i.e. invalid date
                                    newmovie.createdate = "19000101000000" '01/01/1900 00:00:00
                                Else
                                    newmovie.createdate = detail.InnerText
                                End If

                            Case "filename"
                                newmovie.filename = detail.InnerText
                            Case "foldername"
                                newmovie.foldername = detail.InnerText
                            Case "fullpathandfilename"
                                newmovie.fullpathandfilename = detail.InnerText
                            Case "genre"
                                'Dim strarr() As String
                                'strarr = detail.InnerText.Split("/")
                                'For count = 0 To strarr.Length - 1
                                '    strarr(count) = strarr(count).Replace(" ", "")
                                'Next
                                'If strarr.Length <= Preferences.maxmoviegenre Then
                                '    newmovie.genre = detail.InnerText
                                'Else
                                '    For f = 0 To Preferences.maxmoviegenre - 1
                                '        If f = 0 Then
                                '            newmovie.genre = strarr(f)
                                '        Else
                                '            newmovie.genre += " / " & strarr(f)
                                '        End If
                                '    Next
                                'End If


                                newmovie.genre = detail.InnerText & newmovie.genre
                            Case "id"
                                newmovie.id = detail.InnerText
                            Case "playcount"
                                newmovie.playcount = detail.InnerText
                            Case "rating"
                                newmovie.rating = detail.InnerText
                            Case "title"
                                newmovie.title = detail.InnerText
                            Case "originaltitle"
                                newmovie.originaltitle = detail.InnerText
                            Case "titleandyear"
                                '--------- aqui
                                Dim TempString2 As String = detail.InnerText
                                If Preferences.ignorearticle = True Then
                                    If TempString2.ToLower.IndexOf("the ") = 0 Then
                                        Dim Temp As String = TempString2.Substring(TempString2.Length - 7, 7)
                                        TempString2 = TempString2.Substring(4, TempString2.Length - 11)
                                        TempString2 = TempString2 & ", The" & Temp
                                    End If
                                End If

                                newmovie.titleandyear = TempString2
                            Case "top250"
                                newmovie.top250 = detail.InnerText
                            Case "year"
                                newmovie.year = detail.InnerText
                            Case "outline"
                                newmovie.outline = detail.InnerText
                            Case "plot"
                                newmovie.plot = detail.InnerText
                            Case "runtime"
                                newmovie.runtime = detail.InnerText
                        End Select
                    Next
                    If newmovie.movieset = Nothing Then
                        newmovie.movieset = "-None-"
                    End If
                    If newmovie.movieset = "" Then
                        newmovie.movieset = "-None-"
                    End If
                    fullMovieList.Add(newmovie)
            End Select
        Next



        If fullMovieList.Count = 0 Then
            Call mov_CacheRebuild(movieFolders)
            Exit Sub
        End If

        filteredList.Clear()
        For Each movie In fullMovieList
            filteredList.Add(movie)
        Next
        Call mov_MovieComboListSort()
        Call mov_MovieComboLoad()
        Try
            'ignore = False
            MovieListComboBox.SelectedIndex = 0
            If MovieListComboBox.SelectedItem.value <> "" Then
                'loadinfofile()
            End If
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
    End Sub

    Private Sub util_RegexSetDefaultScraper()
        tv_RegexScraper.Clear()
        tv_RegexScraper.Add("[Ss]([\d]{1,4}).?[Ee]([\d]{1,4})")
        tv_RegexScraper.Add("([\d]{1,4}) ?[xX] ?([\d]{1,4})")
        tv_RegexScraper.Add("([0-9]+)([0-9][0-9])")
    End Sub

    Private Sub util_RegexSetDefaultRename()
        tv_RegexRename.Clear()
        tv_RegexRename.Add("Show Title - S01E01 - Episode Title.ext")
        tv_RegexRename.Add("S01E01 - Episode Title.ext")
        tv_RegexRename.Add("Show Title - 1x01 - Episode Title.ext")
        tv_RegexRename.Add("1x01 - Episode Title.ext")
        tv_RegexRename.Add("Show Title - 101 - Episode Title.ext")
        tv_RegexRename.Add("101 - Episode Title.ext")
    End Sub

    Private Sub util_RegexLoad()

        Dim tempstring As String
        tempstring = workingProfile.regexlist
        tv_RegexScraper.Clear()
        tv_RegexRename.Clear()
        Dim path As String = tempstring
        Dim createDefaultRegexScrape As Boolean = True
        Dim createDefaultRegexRename As Boolean = True

        If File.Exists(path) Then

            Try
                Dim regexList As New XmlDocument
                regexList.Load(path)

                If regexList.DocumentElement.Name = "regexlist" Then
                    For Each result As XmlElement In regexList("regexlist")
                        Select Case result.Name
                            Case "tvregex"                              'This is the old tag before custom renamer was introduced,
                                tv_RegexScraper.Add(result.InnerText)   'so add it to the scraper regex list in case there are custom regexs.
                                createDefaultRegexScrape = False        'The rename regex will not be flagged so regex.xml will be created as new format.
                            Case "tvregexscrape"
                                tv_RegexScraper.Add(result.InnerText)
                                createDefaultRegexScrape = False
                            Case "tvregexrename"
                                tv_RegexRename.Add(result.InnerText)
                                createDefaultRegexRename = False
                        End Select
                    Next
                End If

            Catch ex As Exception
                Call util_RegexSave(True, True)
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
        End If
        If createDefaultRegexScrape Or createDefaultRegexRename Then
            Call util_RegexSave(createDefaultRegexScrape, createDefaultRegexRename) 'Valid regex XML doc not available, so create default one.
        End If
    End Sub

    Private Sub util_RegexSave(Optional ByVal setScraperDefault As Boolean = False, Optional ByVal setRenameDefault As Boolean = False)

        Dim path As String = workingProfile.regexlist
        Dim doc As New XmlDocument
        Dim xmlProc As XmlDeclaration = doc.CreateXmlDeclaration("1.0", "UTF-8", "yes")
        Dim root As XmlElement
        Dim child As XmlElement

        If setScraperDefault = True Then util_RegexSetDefaultScraper()
        If setRenameDefault = True Then util_RegexSetDefaultRename()

        doc.AppendChild(xmlProc)
        root = doc.CreateElement("regexlist")

        For Each Regex In tv_RegexScraper
            child = doc.CreateElement("tvregexscrape")
            child.InnerText = Regex
            root.AppendChild(child)
        Next

        For Each Regex In tv_RegexRename
            child = doc.CreateElement("tvregexrename")
            child.InnerText = Regex
            root.AppendChild(child)
        Next

        doc.AppendChild(root)

        Try
            'TODO: Need to fix XmlTextWriter IO error.
            'Surrounded object in Try...Catch to temporarly fix the error.
            Using output As New XmlTextWriter(path, System.Text.Encoding.UTF8) With {.Formatting = Formatting.Indented}
                '"D:\Dados de Utilizador\Freddy Krueger\Ambiente de Trabalho\MediaCompanion-EVRSOEIRANAS\Settings\regex.xml"
                doc.WriteTo(output)
                output.Close()
            End Using
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try

    End Sub

    Private Sub util_GenreLoad()
        If File.Exists(workingProfile.filters) Or Preferences.startupCache = False Then

            Dim line As String = String.Empty
            CheckedListBox1.Items.Clear()
            CheckedListBox2.Items.Clear()

            Try
                Dim userConfig As StreamReader = File.OpenText(workingProfile.filters)

                Do
                    Try
                        line = userConfig.ReadLine

                        If line <> Nothing Then
                            Dim regexMatch As Match
                            regexMatch = Regex.Match(line, "<([\d]{2,3})>")

                            If regexMatch.Success = True Then
                                If IsNumeric(regexMatch.Groups(1).Value) Then
                                    CheckedListBox1.ColumnWidth = regexMatch.Groups(1).Value
                                End If
                            Else
                                CheckedListBox1.Items.Add(line)
                                CheckedListBox2.Items.Add(line)
                            End If
                        End If

                    Catch ex As Exception
                        MessageBox.Show(ex.Message)
                    End Try
                Loop Until line = Nothing
            Catch ex As Exception
                MessageBox.Show(ex.Message)
            End Try
        End If
    End Sub

    Private Sub util_PrefsLoad()
        Dim tempstring As String
        For Each prof In profileStruct.profilelist
            If prof.profilename = workingProfile.profilename Then
                tempstring = prof.config
                If IO.File.Exists(tempstring) Then Preferences.configpath = tempstring
                Preferences.configpath = tempstring

                Me.util_ConfigLoad()
            End If
        Next
        For Each item In Preferences.moviesets
            ComboBox3.Items.Add(item)
        Next
    End Sub

    Private Sub util_ProfilesLoad()
        profileStruct.profilelist.Clear()
        Dim profilepath As String = IO.Path.Combine(applicationPath, "settings")
        profilepath = IO.Path.Combine(profilepath, "profile.xml")

        Dim path As String = profilepath
        If IO.File.Exists(path) Then
            Try
                Dim profilelist As New XmlDocument
                profilelist.Load(path)
                If profilelist.DocumentElement.Name = "profile" Then
                    For Each thisresult In profilelist("profile")
                        Select Case thisresult.Name
                            Case "default"
                                profileStruct.defaultprofile = thisresult.innertext
                            Case "startup"
                                profileStruct.startupprofile = thisresult.innertext
                            Case "profiledetails"
                                Dim currentprofile As New str_ListOfProfiles(SetDefaults)
                                For Each result In thisresult.childnodes
                                    Select Case result.name
                                        Case "actorcache"
                                            currentprofile.actorcache = result.innertext
                                        Case "config"
                                            currentprofile.config = result.innertext
                                        Case "moviecache"
                                            currentprofile.moviecache = result.innertext
                                        Case "profilename"
                                            currentprofile.profilename = result.innertext
                                        Case "regex"
                                            currentprofile.regexlist = result.innertext
                                        Case "filters"
                                            currentprofile.filters = result.innertext
                                        Case "tvcache"
                                            currentprofile.tvcache = result.innertext
                                    End Select
                                Next
                                profileStruct.profilelist.Add(currentprofile)
                        End Select
                    Next
                End If
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If

            End Try
        Else

        End If
        If profileStruct.profilelist.Count > 1 Then
            ProfilesToolStripMenuItem.Visible = True
            ProfilesToolStripMenuItem.Enabled = True
            ProfilesToolStripMenuItem.DropDownItems.Clear()

            For Each prof In profileStruct.profilelist
                If prof.profilename <> Nothing Then
                    ProfilesToolStripMenuItem.DropDownItems.Add(prof.profilename)
                End If
            Next
            For Each item In ProfilesToolStripMenuItem.DropDownItems
                If item.text = workingProfile.profilename Then
                    With item
                        item.checked = True
                    End With
                Else
                    item.checked = False
                End If
            Next
        End If
    End Sub

    Private Sub util_ProfileSave()
        Dim profilepath As String = IO.Path.Combine(applicationPath, "settings")
        profilepath = IO.Path.Combine(profilepath, "profile.xml")

        Dim doc As New XmlDocument

        Dim thispref As XmlNode = Nothing
        Dim xmlproc As XmlDeclaration

        xmlproc = doc.CreateXmlDeclaration("1.0", "UTF-8", "yes")
        doc.AppendChild(xmlproc)
        Dim root As XmlElement
        Dim child As XmlElement
        Dim childchild As XmlElement
        root = doc.CreateElement("profile")
        child = doc.CreateElement("default")
        child.InnerText = profileStruct.defaultprofile
        root.AppendChild(child)
        child = doc.CreateElement("startup")
        child.InnerText = profileStruct.startupprofile
        root.AppendChild(child)
        doc.AppendChild(root)


        For Each prof In profileStruct.profilelist
            child = doc.CreateElement("profiledetails")
            childchild = doc.CreateElement("actorcache")
            childchild.InnerText = prof.actorcache
            child.AppendChild(childchild)

            childchild = doc.CreateElement("config")
            childchild.InnerText = prof.config
            child.AppendChild(childchild)

            childchild = doc.CreateElement("moviecache")
            childchild.InnerText = prof.moviecache
            child.AppendChild(childchild)

            childchild = doc.CreateElement("profilename")
            childchild.InnerText = prof.profilename
            child.AppendChild(childchild)

            childchild = doc.CreateElement("regex")
            childchild.InnerText = prof.regexlist
            child.AppendChild(childchild)

            childchild = doc.CreateElement("filters")
            childchild.InnerText = prof.filters
            child.AppendChild(childchild)

            childchild = doc.CreateElement("tvcache")
            childchild.InnerText = prof.tvcache
            child.AppendChild(childchild)
            root.AppendChild(child)
        Next



        doc.AppendChild(root)
        Dim saveing As New XmlTextWriter(profilepath, System.Text.Encoding.UTF8)
        saveing.Formatting = Formatting.Indented
        doc.WriteTo(saveing)
        saveing.Close()

        If profileStruct.profilelist.Count > 1 Then
            ProfilesToolStripMenuItem.Visible = True
            ProfilesToolStripMenuItem.Enabled = True
            ProfilesToolStripMenuItem.DropDownItems.Clear()
            For Each prof In profileStruct.profilelist
                If prof.profilename <> Nothing Then
                    ProfilesToolStripMenuItem.DropDownItems.Add(prof.profilename)
                End If
            Next
            For Each item In ProfilesToolStripMenuItem.DropDownItems
                If item.text = workingProfile.profilename Then
                    With item
                        item.checked = True
                    End With
                Else
                    item.checked = False
                End If
            Next
        End If

    End Sub

    Private Sub util_CommandListLoad()
        For Each com In Preferences.commandlist
            ToolsToolStripMenuItem.DropDownItems.Add(com.title)
        Next
    End Sub

    Private Sub util_HtmlTemplatesAdd()
        templateList.Clear()
        Dim folder As String = IO.Path.Combine(applicationPath, "html_templates\")
        Dim dir_info As New System.IO.DirectoryInfo(folder)
        tv_RebuildLog("Looking in " & folder)
        Dim fs_infos() As System.IO.FileInfo = dir_info.GetFiles("*.txt", SearchOption.TopDirectoryOnly)
        For Each info In fs_infos
            Try
                Dim fullstring As String
                Dim htmlType As String = ""
                Dim cfg2 As IO.StreamReader = IO.File.OpenText(info.FullName)
                fullstring = cfg2.ReadToEnd
                If fullstring.ToLower.IndexOf("<<mc html page>>") <> -1 And fullstring.ToLower.IndexOf("<</mc html page>>") <> -1 Then
                    htmlType = "movie"
                ElseIf fullstring.ToLower.IndexOf("<<mc tv html page>>") <> -1 And fullstring.ToLower.IndexOf("<</mc tv html page>>") <> -1 Then
                    htmlType = "tv"
                Else
                    Continue For
                End If
                Dim tempstring As String = fullstring.Substring(fullstring.IndexOf("<title>") + 7, fullstring.IndexOf("</title>") - 7)
                Dim template As New str_HTMLTemplate(SetDefaults)
                Dim add As Boolean = True
                For Each temp In templateList
                    If temp.title = tempstring Then
                        add = False
                        Exit For
                    End If
                Next
                If add = True Then
                    template.title = tempstring
                    template.path = info.FullName
                    template.body = fullstring
                    If htmlType = "movie" Then
                        OutputMovieListAsHTMLToolStripMenuItem.DropDownItems.Add(template.title)
                    Else
                        OutputTVShowsAsHTMLToolStripMenuItem.DropDownItems.Add(template.title)
                    End If
                    templateList.Add(template)
                End If
            Catch ex As Exception
                Dim t As Integer = 0
            End Try
        Next
    End Sub

    Private Sub mov_ActorRebuild()
        actorDB.Clear()
        Try
            For Each movie In fullMovieList
                Dim movieadd As New FullMovieDetails
                movieadd = nfoFunction.mov_NfoLoadFull(movie.fullpathandfilename)
                For Each actor In movieadd.listactors
                    Dim newactor As New str_ActorDatabase(SetDefaults)
                    newactor.actorname = actor.actorname
                    newactor.movieid = movie.id
                    actorDB.Add(newactor)
                Next
            Next
            Call mov_ActorCacheSave()
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
    End Sub

    Private Sub mov_ActorCacheSave()
        Dim savepath As String = workingProfile.actorcache
        Dim doc As New XmlDocument

        Dim thispref As XmlNode = Nothing
        Dim xmlproc As XmlDeclaration

        xmlproc = doc.CreateXmlDeclaration("1.0", "UTF-8", "yes")
        doc.AppendChild(xmlproc)
        Dim root As XmlElement
        Dim child As XmlElement
        root = doc.CreateElement("actor_cache")

        Dim childchild As XmlElement
        For Each actor In actorDB
            child = doc.CreateElement("actor")
            childchild = doc.CreateElement("name")
            childchild.InnerText = actor.actorname
            child.AppendChild(childchild)
            childchild = doc.CreateElement("id")
            childchild.InnerText = actor.movieid
            child.AppendChild(childchild)
            root.AppendChild(child)
        Next
        doc.AppendChild(root)
        Dim output As New XmlTextWriter(savepath, System.Text.Encoding.UTF8)
        output.Formatting = Formatting.Indented
        doc.WriteTo(output)
        output.Close()
    End Sub

    Private Sub mov_ActorCacheLoad()
        actorDB.Clear()
        Dim loadpath As String = workingProfile.actorcache
        Dim actorlist As New XmlDocument
        actorlist.Load(loadpath)
        Dim thisresult As XmlNode = Nothing
        For Each thisresult In actorlist("actor_cache")
            Select Case thisresult.Name
                Case "actor"
                    Dim newactor As New str_ActorDatabase(SetDefaults)
                    newactor.actorname = ""
                    newactor.movieid = ""
                    Dim detail As XmlNode = Nothing
                    For Each detail In thisresult.ChildNodes
                        Select Case detail.Name
                            Case "name"
                                newactor.actorname = detail.InnerText
                            Case "id"
                                newactor.movieid = detail.InnerText
                        End Select
                        If newactor.actorname <> "" And newactor.movieid <> "" Then
                            actorDB.Add(newactor)
                        End If
                    Next
            End Select
        Next
    End Sub

    'Private Sub RebuildTvShows()
    '    tvrebuildlog("Starting TV Show Rebuild" & vbCrLf & vbCrLf, , True)

    '    totalTvShowCount = 0
    '    totalEpisodeCount = 0
    '    TextBox32.Text = ""
    '    TextBox33.Text = ""
    '    Me.Enabled = False
    '    TvShows.Clear()
    '    TvTreeview.Nodes.Clear()
    '    For Each tvfolder In tvFolders
    '        'tvrebuildlog("Adding " & tvfolder)
    '        Dim hg As New IO.DirectoryInfo(tvfolder)
    '        If Not hg.Exists Then
    '            'Dim newtvshownfo As New basictvshownfo
    '            'newtvshownfo.title = filefunction.getlastfolder(tvfolder)
    '            'newtvshownfo.status = "Folder not found"
    '            'basictvlist.Add(newtvshownfo)
    '        End If
    '        'tvrebuildlog("tvshow.nfo path is: " & shownfopath)
    '        Dim newtvshownfo As New TvShow
    '        newtvshownfo.NfoFilePath = IO.Path.Combine(tvfolder, "tvshow.nfo")
    '        newtvshownfo.Load()
    '        If newtvshownfo.title IsNot Nothing Then
    '            If newtvshownfo.status Is Nothing OrElse (newtvshownfo.status IsNot Nothing AndAlso Not newtvshownfo.status.Contains("skipthisfile")) Then
    '                'Dim skip As Boolean = False
    '                'For Each tvshow In TvShows
    '                '    If newtvshownfo.fullpath = tvshow.fullpath Then
    '                '        skip = True
    '                '        Exit For
    '                '    End If
    '                'Next
    '                'If skip = False Then
    '                TvShows.Add(newtvshownfo)
    '                'End If
    '            End If
    '        End If
    '        realTvPaths.Add(tvfolder)
    '        'End If
    '    Next

    '    For Each tv In TvShows
    ''        ListtvFiles(tv, "*.NFO")
    ''    Next


    '    TV_CleanFolderList()
    '    Call TV_PopulateTvTree()

    ''    Me.Enabled = True

    '    Call TV_SaveTvData()

    'End Sub

    Private Sub util_AutoRun()
        If movieFolders.Count = 0 Then
            Me.Close()
        End If
        Call mov_ScanForNew()

    End Sub

    Private Sub mov_ListFiles(ByVal lst As String, ByVal pattern As String, ByVal dir_info As System.IO.DirectoryInfo)

        Dim exists As Boolean
        Dim propfile As Boolean = False
        Dim allok As Boolean = False
        Dim fs_infos() As System.IO.FileInfo = dir_info.GetFiles(pattern)

        Dim counter As Integer = 1
        Dim counter2 As Integer = 1
        Dim progcounter As Integer = 1
        If progressmode = True Then frmSplash2.ProgressBar1.Maximum = fs_infos.Length()

        For Each fs_info As System.IO.FileInfo In fs_infos
            Application.DoEvents()
            If progressmode = True Then frmSplash2.ProgressBar1.Value = progcounter
            progcounter += 1

            exists = (IO.File.Exists(fs_info.FullName))
            If exists = True Then
                frmSplash2.Label2.Text = fs_info.FullName
                frmSplash2.Label2.Refresh()
                Try
                    workingMovie = nfoFunction.mov_NfoLoadBasic(fs_info.FullName, "movielist")
                Catch ex As Exception
                    Continue For    ' if we call an exception due to an nfo issue, try the next one
                End Try
                If workingMovie.title <> "ERROR" Then

                    If workingMovie.movieset <> Nothing Then
                        Dim add As Boolean = True
                        For Each item In Preferences.moviesets
                            If item = workingMovie.movieset Then
                                add = False
                                Exit For
                            End If
                        Next
                        If add = True Then
                            Preferences.moviesets.Add(workingMovie.movieset)
                            ComboBox3.Items.Add(workingMovie.movieset)
                        End If
                    End If
                    If workingMovie.title <> Nothing Then

                        workingMovie.foldername = Utilities.GetLastFolder(workingMovie.fullpathandfilename)
                        If workingMovie.genre.IndexOf("skipthisfile") = -1 Then
                            Dim skip As Boolean = False
                            For Each movie In fullMovieList
                                If movie.fullpathandfilename = workingMovie.fullpathandfilename Then
                                    skip = True
                                    Exit For
                                End If
                            Next
                            If skip = False Then
                                Dim completebyte1 As Byte = 0
                                Dim fanartexists As Boolean = IO.File.Exists(Preferences.GetFanartPath(workingMovie.fullpathandfilename))
                                Dim posterexists As Boolean = IO.File.Exists(Preferences.GetPosterPath(workingMovie.fullpathandfilename))
                                If fanartexists = False Then
                                    completebyte1 += 1
                                End If
                                If posterexists = False Then
                                    completebyte1 += 2
                                End If
                                workingMovie.missingdata1 = completebyte1
                                fullMovieList.Add(workingMovie)
                                'filteredlist.Add(workingmovie)
                            End If
                        End If
                    End If
                End If
            End If
        Next fs_info

        fs_infos = Nothing


    End Sub

    '    Private Sub ListtvFiles(ByVal tvshow As TvShow, ByVal pattern As String)
    '        Try
    '            Dim episode As New List(Of TvEpisode)
    '            Dim propfile As Boolean = False
    '            Dim allok As Boolean = False


    '            Dim newlist As New List(Of String)
    '            newlist.Clear()

    '            Try
    '                newlist = Utilities.EnumerateFolders(tvshow.fullpath.Substring(0, tvshow.fullpath.Length - 10), 6) 'TODO: Restore loging functions
    '            Catch ex As Exception
    '#If SilentErrorScream Then
    '                Throw ex
    '#End If
    '            End Try
    '            newlist.Insert(0, tvshow.fullpath.Substring(0, tvshow.fullpath.Length - 11))
    '            If newlist.Count > 0 Then
    '                tvrebuildlog(newlist.Count - 1.ToString & " subfolders found in: " & newlist(0) & vbCrLf)
    '            End If
    '            For Each folder In newlist
    '                tvrebuildlog("Searching: " & vbCrLf & folder & vbCrLf & "for episodes")
    '                Dim dir_info As New System.IO.DirectoryInfo(folder)
    '                tvrebuildlog("Looking in " & folder)
    '                Dim fs_infos() As System.IO.FileInfo = dir_info.GetFiles(pattern, SearchOption.TopDirectoryOnly)
    '                For Each fs_info As System.IO.FileInfo In fs_infos

    '                    Try
    '                        Application.DoEvents()
    '                        If IO.Path.GetFileName(fs_info.FullName.ToLower) <> "tvshow.nfo" Then
    '                            tvrebuildlog("possible episode nfo found: " & fs_info.FullName)
    '                            episode = nfoFunction.loadbasicepisodenfo(fs_info.FullName)
    '                            If Not episode Is Nothing Then
    '                                For Each ep In episode
    '                                    If ep.title <> Nothing Then
    '                                        Dim skip As Boolean = False
    '                                        For Each eps In tvshow.allepisodes
    '                                            If eps.Season.value = ep.Season.value And eps.episodeno = ep.episodeno And eps.VideoFilePath = ep.VideoFilePath Then
    '                                                skip = True
    '                                                Exit For
    '                                            End If
    '                                        Next
    '                                        If skip = False Then
    '                                            tvshow.allepisodes.Add(ep)
    '                                            tvrebuildlog("Episode appears to have loaded ok")
    '                                        End If
    '                                    End If
    '                                Next
    '                            End If
    '                        End If
    '                    Catch ex As Exception
    '                        tvrebuildlog(ex.ToString)
    '                    End Try
    '                Next fs_info
    '            Next
    '            tvrebuildlog(vbCrLf & vbCrLf & vbCrLf)
    '        Catch ex As Exception
    '            tvrebuildlog(ex.ToString)
    '        End Try
    '    End Sub

    Private Sub mov_NfoLoad(ByVal folderlist As List(Of String), Optional ByVal mode As Boolean = False)
        Dim tempint As Integer = 0
        Dim dirinfo As String = String.Empty
        Dim pattern As String = "*.nfo"

        'dList.Clear()
        realMoviePaths.Clear()
        For Each moviefolder In folderlist
            Dim hg As New IO.DirectoryInfo(moviefolder)
            If hg.Exists Then
                realMoviePaths.Add(moviefolder)
            End If

        Next

        tempint = realMoviePaths.Count
        If tempint > 0 Then
            Dim newlist As List(Of String) = Nothing
            For f = 0 To tempint - 1
                newlist = Utilities.EnumerateFolders(realMoviePaths(f), Long.MaxValue)

                For Each subfolder In newlist
                    realMoviePaths.Add(subfolder)
                Next
            Next


            If mode = False Then frmSplash2.ProgressBar1.Maximum = realMoviePaths.Count - 1
            frmSplash2.Label2.Visible = True
            frmSplash2.ProgressBar1.Maximum = realMoviePaths.Count - 1
            frmSplash2.ProgressBar1.Visible = True

            For f = 0 To realMoviePaths.Count - 1

                frmSplash2.Label1.Text = "Scanning Folder:" & Environment.NewLine & realMoviePaths(f).ToString()

                If mode = False Then frmSplash2.ProgressBar1.Value = f

                Dim subdirs As New System.IO.DirectoryInfo(realMoviePaths(f))

                mov_ListFiles(dirinfo, pattern, subdirs)
            Next
            frmSplash2.Label2.Visible = False

        End If
    End Sub

    Private Sub mov_FormPopulate()

        Dim tempstring As String
        Try
            If Not IsNothing(workingMovieDetails) Then
                If workingMovie.fullpathandfilename <> workingMovieDetails.fileinfo.fullpathandfilename Then
                    Try
                        For i = Panel8.Controls.Count - 1 To 0 Step -1
                            Panel8.Controls.RemoveAt(i)
                        Next
                    Catch
                    End Try
                    Try
                        For i = Panel2.Controls.Count - 1 To 0 Step -1
                            Panel2.Controls.RemoveAt(i)
                        Next
                    Catch
                    End Try
                    Try
                        TextBox8.Text = ""
                    Catch
                    End Try
                End If
            End If
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
        'PictureBox1.CancelAsync()
        'PictureBox1.Image = Nothing
        'PictureBox1.Refresh()
        ComboBox5.Text = ""

        Button27.Visible = False
        Button28.Visible = False
        thumbedItsMade = False
        posterThumbedItsMade = False
        CheckBox1.Visible = False
        Button15.Visible = False
        Button9.Visible = False
        Button10.Visible = False
        Label18.Visible = False
        titletxt.Text = ""
        TextBox3.Text = ""
        outlinetxt.Text = ""
        plottxt.Text = ""
        taglinetxt.Text = ""
        txtStars.Text = ""
        genretxt.Text = ""
        creditstxt.Text = ""
        directortxt.Text = ""
        studiotxt.Text = ""
        pathtxt.Text = ""
        'actorarray.Clear()
        actorcb.Items.Clear()
        ratingtxt.Text = ""
        runtimetxt.Text = ""
        votestxt.Text = ""
        certtxt.Text = ""
        PictureBox7.Image = Nothing
        PictureBox2.Image = Nothing
        moviethumb.Image = Nothing
        Label16.Text = ""
        Label17.Text = ""
        PictureBox3.Image = Nothing
        Label19.Text = ""
        TextBox34.Text = ""
        titletxt.Text = ""

        roletxt.Text = ""
        PictureBox1.Image = Nothing

        Me.Refresh()
        Application.DoEvents()
        Try
            If workingMovie.fullpathandfilename <> Nothing Then
                workingMovieDetails = nfoFunction.mov_NfoLoadFull(workingMovie.fullpathandfilename)
                If workingMovieDetails.fullmoviebody.playcount = Nothing Then workingMovieDetails.fullmoviebody.playcount = "0"
                If workingMovieDetails.fullmoviebody.credits = Nothing Then workingMovieDetails.fullmoviebody.credits = ""
                If workingMovieDetails.fullmoviebody.director = Nothing Then workingMovieDetails.fullmoviebody.director = ""
                If workingMovieDetails.fullmoviebody.stars = Nothing Then workingMovieDetails.fullmoviebody.stars = ""
                If workingMovieDetails.fullmoviebody.filename = Nothing Then workingMovieDetails.fullmoviebody.filename = ""
                If workingMovieDetails.fullmoviebody.genre = Nothing Then workingMovieDetails.fullmoviebody.genre = ""
                If workingMovieDetails.fullmoviebody.imdbid = Nothing Then workingMovieDetails.fullmoviebody.imdbid = ""
                If workingMovieDetails.fullmoviebody.mpaa = Nothing Then workingMovieDetails.fullmoviebody.mpaa = ""
                If workingMovieDetails.fullmoviebody.outline = Nothing Then workingMovieDetails.fullmoviebody.outline = ""
                If workingMovieDetails.fullmoviebody.playcount = Nothing Then workingMovieDetails.fullmoviebody.playcount = ""
                If workingMovieDetails.fullmoviebody.plot = Nothing Then workingMovieDetails.fullmoviebody.plot = ""
                If workingMovieDetails.fullmoviebody.premiered = Nothing Then workingMovieDetails.fullmoviebody.premiered = ""
                If workingMovieDetails.fullmoviebody.rating = Nothing Then workingMovieDetails.fullmoviebody.rating = ""
                If workingMovieDetails.fullmoviebody.runtime = Nothing Then workingMovieDetails.fullmoviebody.runtime = ""
                If workingMovieDetails.fullmoviebody.studio = Nothing Then workingMovieDetails.fullmoviebody.studio = ""
                If workingMovieDetails.fullmoviebody.tagline = Nothing Then workingMovieDetails.fullmoviebody.tagline = ""
                If workingMovieDetails.fullmoviebody.title = Nothing Then workingMovieDetails.fullmoviebody.title = ""
                If workingMovieDetails.fullmoviebody.originaltitle = Nothing Then workingMovieDetails.fullmoviebody.originaltitle = ""
                If workingMovieDetails.fullmoviebody.top250 = Nothing Then workingMovieDetails.fullmoviebody.top250 = ""
                If workingMovieDetails.fullmoviebody.trailer = Nothing Then workingMovieDetails.fullmoviebody.trailer = ""
                If workingMovieDetails.fullmoviebody.votes = Nothing Then workingMovieDetails.fullmoviebody.votes = ""
                If workingMovieDetails.fullmoviebody.year = Nothing Then workingMovieDetails.fullmoviebody.year = ""

                titletxt.Items.Clear()
                titletxt.Items.Add(workingMovieDetails.fullmoviebody.title)
                For Each title In workingMovieDetails.alternativetitles
                    titletxt.Items.Add(title)
                Next
                titletxt.Text = workingMovieDetails.fullmoviebody.title '& " (" & workingmoviedetails.fullmoviebody.year & ")"
                TextBox3.Text = workingMovieDetails.fullmoviebody.title & " (" & workingMovieDetails.fullmoviebody.year & ")"
                TextBox7.Text = workingMovieDetails.fullmoviebody.title & " (" & workingMovieDetails.fullmoviebody.year & ")"
                Me.ToolTip1.SetToolTip(Me.titletxt, "Original Title: '" & workingMovieDetails.fullmoviebody.originaltitle & "'")
                If workingMovieDetails.fullmoviebody.sortorder = "" Then workingMovieDetails.fullmoviebody.sortorder = workingMovieDetails.fullmoviebody.title
                TextBox34.Text = workingMovieDetails.fullmoviebody.sortorder
                outlinetxt.Text = workingMovieDetails.fullmoviebody.outline
                plottxt.Text = workingMovieDetails.fullmoviebody.plot
                taglinetxt.Text = workingMovieDetails.fullmoviebody.tagline
                txtStars.Text = workingMovieDetails.fullmoviebody.stars
                genretxt.Text = workingMovieDetails.fullmoviebody.genre
                creditstxt.Text = workingMovieDetails.fullmoviebody.credits
                directortxt.Text = workingMovieDetails.fullmoviebody.director
                studiotxt.Text = workingMovieDetails.fullmoviebody.studio
                pathtxt.Text = workingMovie.fullpathandfilename
                ratingtxt.Text = workingMovieDetails.fullmoviebody.rating
                'runtimetxt.Text = workingMovieDetails.fullmoviebody.runtime
                votestxt.Text = workingMovieDetails.fullmoviebody.votes
                certtxt.Text = workingMovieDetails.fullmoviebody.mpaa
                If Preferences.movieRuntimeDisplay = "file" Then
                    displayRuntimeScraper = False
                Else
                    displayRuntimeScraper = True
                End If
                Call mov_SwitchRuntime()

                workingMovieDetails.fileinfo.fullpathandfilename = workingMovie.fullpathandfilename
                workingMovieDetails.fileinfo.filename = IO.Path.GetFileName(workingMovie.fullpathandfilename)
                workingMovieDetails.fileinfo.path = IO.Path.GetFullPath(workingMovie.fullpathandfilename)
                workingMovieDetails.fileinfo.foldername = workingMovie.foldername
                workingMovieDetails.fileinfo.posterpath = Preferences.GetPosterPath(workingMovie.fullpathandfilename)
                workingMovieDetails.fileinfo.fanartpath = Preferences.GetFanartPath(workingMovie.fullpathandfilename)

                tempstring = Utilities.GetStackName(workingMovieDetails.fileinfo.filename, workingMovieDetails.fileinfo.fullpathandfilename)
                If tempstring = "na" Then
                    tempstring = Utilities.CleanFileName(workingMovieDetails.fileinfo.filename)
                End If
                workingMovieDetails.fileinfo.trailerpath = IO.Path.Combine(workingMovieDetails.fileinfo.path.Replace(IO.Path.GetFileName(workingMovieDetails.fileinfo.path), ""), tempstring & "-trailer.flv")
                Button3.Visible = False
                If IO.File.Exists(workingMovieDetails.fileinfo.trailerpath) Then
                    Button3.Visible = True
                    Button3.Text = "Play Trailer"
                Else
                    If workingMovieDetails.fullmoviebody.trailer <> "" Then
                        Button3.Text = "Download Trailer"
                        Button3.Visible = True
                    End If
                End If

                If workingMovieDetails.fileinfo.posterpath <> Nothing Then
                    Try
                        If IO.File.Exists(workingMovieDetails.fileinfo.posterpath) Then
                        Else
                            If IO.File.Exists(workingMovieDetails.fileinfo.posterpath.Replace(IO.Path.GetFileName(workingMovieDetails.fileinfo.fanartpath), "folder.jpg")) Then
                                workingMovieDetails.fileinfo.posterpath = workingMovieDetails.fileinfo.posterpath.Replace(IO.Path.GetFileName(workingMovieDetails.fileinfo.posterpath), "folder.jpg")
                            End If
                        End If
                    Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                    End Try
                End If
                If workingMovieDetails.fileinfo.posterpath <> Nothing Then
                    Try
                        If IO.File.Exists(workingMovieDetails.fileinfo.posterpath) Then
                            Dim OriginalImage As New Bitmap(workingMovieDetails.fileinfo.posterpath)
                            Dim Image2 As New Bitmap(OriginalImage)
                            OriginalImage.Dispose()
                            PictureBox3.Image = Image2 '7 - 2
                            moviethumb.Image = Image2 'picturebox3
                            Label19.Text = "Current Loaded Poster - " & Image2.Width.ToString & " x " & Image2.Height.ToString
                        Else
                            moviethumb.ImageLocation = defaultPoster 'picturebox3
                            moviethumb.Load()
                            PictureBox3.ImageLocation = defaultPoster '7 - 2
                            PictureBox3.Load()
                        End If
                    Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                    End Try
                End If
                If workingMovieDetails.fileinfo.fanartpath <> Nothing Then
                    Try
                        If IO.File.Exists(workingMovieDetails.fileinfo.fanartpath) Then
                            Dim OriginalImage As New Bitmap(workingMovieDetails.fileinfo.fanartpath)
                            Dim Image2 As New Bitmap(OriginalImage)
                            OriginalImage.Dispose()
                            PictureBox2.Image = Image2 'moviethumb - 3
                            PictureBox7.Image = Image2 '2
                            Label16.Text = PictureBox2.Image.Width
                            Label17.Text = PictureBox2.Image.Height
                        Else
                            Label16.Text = ""
                            Label17.Text = ""
                            PictureBox2.ImageLocation = defaultFanart 'moviethumb - 3
                            PictureBox2.Load()
                            PictureBox7.ImageLocation = defaultFanart '2
                            PictureBox7.Load()
                        End If
                    Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                    End Try
                End If

                If Convert.ToInt32(workingMovieDetails.fullmoviebody.playcount) > 0 Then
                    Button13.Text = "&Watched"
                    Button13.BackColor = Color.LawnGreen
                    Button13.Refresh()
                Else
                    Button13.Text = "Un&watched"
                    Button13.BackColor = Color.Red
                    Button13.Refresh()
                End If

                For Each actor In workingMovieDetails.listactors
                    If actor.actorname <> Nothing Then actorcb.Items.Add(actor.actorname)
                Next
                Try
                    actorcb.SelectedIndex = 0
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try

                If workingMovieDetails.fullmoviebody.movieset <> Nothing Then
                    Dim add As Boolean = True
                    For Each mset In Preferences.moviesets
                        If mset = workingMovieDetails.fullmoviebody.movieset Then
                            add = False
                        End If
                    Next
                    If add = True Then
                        Preferences.moviesets.Add(workingMovieDetails.fullmoviebody.movieset)
                        ComboBox3.Items.Add(workingMovieDetails.fullmoviebody.movieset)
                    End If
                    For f = 0 To ComboBox3.Items.Count - 1
                        If ComboBox3.Items(f) = workingMovieDetails.fullmoviebody.movieset Then
                            ComboBox3.SelectedIndex = f
                            Exit For
                        End If
                    Next
                Else
                    If ComboBox3.Items.Count = 0 Then
                        If Preferences.moviesets.Count > 0 Then
                            For Each mset In Preferences.moviesets
                                ComboBox3.Items.Add(mset)
                            Next
                        End If
                    End If
                    If ComboBox3.Items.Count = 0 Then
                        ComboBox3.Items.Add("-None-")
                    End If
                    If ComboBox3.Items(0) <> "-None-" Then
                        ComboBox3.Items.Insert(0, "-None-")
                    End If
                    ComboBox3.SelectedIndex = 0
                End If
            End If
            If ratingtxt.Text.IndexOf("/10") <> -1 Then
                ratingtxt.Text = ratingtxt.Text.Replace("/10", "")
                workingMovieDetails.fullmoviebody.rating = ratingtxt.Text
            End If
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try

        mov_SplitContainerAutoPosition()
    End Sub

    Private Function mov_FileCheckValid(ByVal fullpathandfilename As String) As Boolean
        Dim validfile As Boolean = True
        Dim tempint2 As Integer = 0
        Dim tempstring As String

        'if the file is a .vob then check it is not part of a dvd folder (Stop dvdfolders vobs getting seperate nfos)
        If IO.Path.GetExtension(fullpathandfilename) = ".vob" Then
            If IO.File.Exists(fullpathandfilename.Replace(System.IO.Path.GetFileName(fullpathandfilename), "VIDEO_TS.IFO")) Then
                validfile = False
            End If
        End If

        Dim filename2 As String = System.IO.Path.GetFileName(fullpathandfilename).ToLower
        If filename2.IndexOf("cd2") <> -1 Then validfile = False
        If filename2.IndexOf("cd3") <> -1 Then validfile = False
        If filename2.IndexOf("cd4") <> -1 Then validfile = False
        If filename2.IndexOf("cd5") <> -1 Then validfile = False
        If filename2.IndexOf("cd.2") <> -1 Then validfile = False
        If filename2.IndexOf("cd.3") <> -1 Then validfile = False
        If filename2.IndexOf("cd.4") <> -1 Then validfile = False
        If filename2.IndexOf("cd.5") <> -1 Then validfile = False
        If filename2.IndexOf("cd_2") <> -1 Then validfile = False
        If filename2.IndexOf("cd_3") <> -1 Then validfile = False
        If filename2.IndexOf("cd_4") <> -1 Then validfile = False
        If filename2.IndexOf("cd_5") <> -1 Then validfile = False
        If filename2.IndexOf("dvd2") <> -1 Then validfile = False
        If filename2.IndexOf("dvd3") <> -1 Then validfile = False
        If filename2.IndexOf("dvd4") <> -1 Then validfile = False
        If filename2.IndexOf("dvd5") <> -1 Then validfile = False
        If filename2.IndexOf("dvd.2") <> -1 Then validfile = False
        If filename2.IndexOf("dvd.3") <> -1 Then validfile = False
        If filename2.IndexOf("dvd.4") <> -1 Then validfile = False
        If filename2.IndexOf("dvd.5") <> -1 Then validfile = False
        If filename2.IndexOf("dvd_2") <> -1 Then validfile = False
        If filename2.IndexOf("dvd_3") <> -1 Then validfile = False
        If filename2.IndexOf("dvd_4") <> -1 Then validfile = False
        If filename2.IndexOf("dvd_5") <> -1 Then validfile = False
        If filename2.IndexOf("part2") <> -1 Then validfile = False
        If filename2.IndexOf("part3") <> -1 Then validfile = False
        If filename2.IndexOf("part4") <> -1 Then validfile = False
        If filename2.IndexOf("part5") <> -1 Then validfile = False
        If filename2.IndexOf("part.2") <> -1 Then validfile = False
        If filename2.IndexOf("part.3") <> -1 Then validfile = False
        If filename2.IndexOf("part.4") <> -1 Then validfile = False
        If filename2.IndexOf("part.5") <> -1 Then validfile = False
        If filename2.IndexOf("part_2") <> -1 Then validfile = False
        If filename2.IndexOf("part_3") <> -1 Then validfile = False
        If filename2.IndexOf("part_4") <> -1 Then validfile = False
        If filename2.IndexOf("part_5") <> -1 Then validfile = False
        If filename2.IndexOf("disk2") <> -1 Then validfile = False
        If filename2.IndexOf("disk3") <> -1 Then validfile = False
        If filename2.IndexOf("disk4") <> -1 Then validfile = False
        If filename2.IndexOf("disk5") <> -1 Then validfile = False
        If filename2.IndexOf("disk.2") <> -1 Then validfile = False
        If filename2.IndexOf("disk.3") <> -1 Then validfile = False
        If filename2.IndexOf("disk.4") <> -1 Then validfile = False
        If filename2.IndexOf("disk.5") <> -1 Then validfile = False
        If filename2.IndexOf("disk_2") <> -1 Then validfile = False
        If filename2.IndexOf("disk_3") <> -1 Then validfile = False
        If filename2.IndexOf("disk_4") <> -1 Then validfile = False
        If filename2.IndexOf("disk_5") <> -1 Then validfile = False
        If filename2.IndexOf("cd 2") <> -1 Then validfile = False
        If filename2.IndexOf("cd 3") <> -1 Then validfile = False
        If filename2.IndexOf("cd 4") <> -1 Then validfile = False
        If filename2.IndexOf("cd 5") <> -1 Then validfile = False
        If filename2.IndexOf("cd-2") <> -1 Then validfile = False
        If filename2.IndexOf("cd-3") <> -1 Then validfile = False
        If filename2.IndexOf("cd-4") <> -1 Then validfile = False
        If filename2.IndexOf("cd-5") <> -1 Then validfile = False
        If filename2.IndexOf("dvd 2") <> -1 Then validfile = False
        If filename2.IndexOf("dvd 3") <> -1 Then validfile = False
        If filename2.IndexOf("dvd 4") <> -1 Then validfile = False
        If filename2.IndexOf("dvd 5") <> -1 Then validfile = False
        If filename2.IndexOf("dvd-2") <> -1 Then validfile = False
        If filename2.IndexOf("dvd-3") <> -1 Then validfile = False
        If filename2.IndexOf("dvd-4") <> -1 Then validfile = False
        If filename2.IndexOf("dvd-5") <> -1 Then validfile = False
        If filename2.IndexOf("part-2") <> -1 Then validfile = False
        If filename2.IndexOf("part-3") <> -1 Then validfile = False
        If filename2.IndexOf("part-4") <> -1 Then validfile = False
        If filename2.IndexOf("part-5") <> -1 Then validfile = False
        If filename2.IndexOf("part 2") <> -1 Then validfile = False
        If filename2.IndexOf("part 3") <> -1 Then validfile = False
        If filename2.IndexOf("part 4") <> -1 Then validfile = False
        If filename2.IndexOf("part 5") <> -1 Then validfile = False
        If filename2.IndexOf("disk 2") <> -1 Then validfile = False
        If filename2.IndexOf("disk 3") <> -1 Then validfile = False
        If filename2.IndexOf("disk 4") <> -1 Then validfile = False
        If filename2.IndexOf("disk 5") <> -1 Then validfile = False
        If filename2.IndexOf("disk-2") <> -1 Then validfile = False
        If filename2.IndexOf("disk-3") <> -1 Then validfile = False
        If filename2.IndexOf("disk-4") <> -1 Then validfile = False
        If filename2.IndexOf("disk-5") <> -1 Then validfile = False
        If filename2.IndexOf("pt 2") <> -1 Then validfile = False
        If filename2.IndexOf("pt 3") <> -1 Then validfile = False
        If filename2.IndexOf("pt 4") <> -1 Then validfile = False
        If filename2.IndexOf("pt 5") <> -1 Then validfile = False
        If filename2.IndexOf("pt-2") <> -1 Then validfile = False
        If filename2.IndexOf("pt-3") <> -1 Then validfile = False
        If filename2.IndexOf("pt-4") <> -1 Then validfile = False
        If filename2.IndexOf("pt-5") <> -1 Then validfile = False
        If filename2.IndexOf("pt2") <> -1 Then validfile = False
        If filename2.IndexOf("pt3") <> -1 Then validfile = False
        If filename2.IndexOf("pt4") <> -1 Then validfile = False
        If filename2.IndexOf("pt5") <> -1 Then validfile = False
        If filename2.IndexOf("pt_2") <> -1 Then validfile = False
        If filename2.IndexOf("pt_3") <> -1 Then validfile = False
        If filename2.IndexOf("pt_4") <> -1 Then validfile = False
        If filename2.IndexOf("pt_5") <> -1 Then validfile = False
        If filename2.IndexOf("pt.2") <> -1 Then validfile = False
        If filename2.IndexOf("pt.3") <> -1 Then validfile = False
        If filename2.IndexOf("pt.4") <> -1 Then validfile = False
        If filename2.IndexOf("pt.5") <> -1 Then validfile = False
        If filename2.IndexOf("-trailer") <> -1 Then validfile = False
        If filename2.IndexOf(".trailer") <> -1 Then validfile = False
        If filename2.IndexOf("_trailer") <> -1 Then validfile = False
        If filename2.IndexOf("sample") <> -1 And filename2.IndexOf("people") = -1 Then validfile = False


        'check for movies ending a,b,c, etc (moviea, movieb) for multipart. movieb is multipart if moviea exists
        Dim extension As String
        Dim tempname As String
        extension = System.IO.Path.GetExtension(fullpathandfilename)
        tempname = fullpathandfilename.Replace(extension, "")
        If tempname.Substring(tempname.Length - 1) = "b" Or tempname.Substring(tempname.Length - 1) = "c" Or tempname.Substring(tempname.Length - 1) = "d" Or tempname.Substring(tempname.Length - 1) = "e" Or tempname.Substring(tempname.Length - 1) = "B" Or tempname.Substring(tempname.Length - 1) = "C" Or tempname.Substring(tempname.Length - 1) = "D" Or tempname.Substring(tempname.Length - 1) = "E" Then
            tempname = fullpathandfilename.Substring(0, fullpathandfilename.Length - (1 + extension.Length)) & "a" & extension
            If System.IO.File.Exists(tempname) Then validfile = False
        End If

        'now need to deal with multipart rar files
        Dim tempmovie2 As String = fullpathandfilename.Replace(".nfo", ".rar")
        Dim tempmovie As String = String.Empty
        If IO.File.Exists(tempmovie2) = True Then
            If IO.File.Exists(fullpathandfilename) = False Then
                Dim rarname As String = tempmovie2
                Dim SizeOfFile As Integer = FileLen(rarname)
                tempint2 = Convert.ToInt32(Preferences.rarsize) * 1048576
                If SizeOfFile > tempint2 Then
                    Dim mat As Match
                    mat = Regex.Match(rarname, "\.part[0-9][0-9]?[0-9]?[0-9]?.rar")
                    If mat.Success = True Then
                        rarname = mat.Value
                        If rarname.ToLower.IndexOf(".part1.rar") <> -1 Or rarname.ToLower.IndexOf(".part01.rar") <> -1 Or rarname.ToLower.IndexOf(".part001.rar") <> -1 Or rarname.ToLower.IndexOf(".part0001.rar") <> -1 Then
                            Dim stackrarexists As Boolean = False
                            rarname = fullpathandfilename.Replace(".nfo", ".rar")
                            If rarname.ToLower.IndexOf(".part1.rar") <> -1 Then
                                rarname = rarname.Replace(".part1.rar", ".nfo")
                                If IO.File.Exists(rarname) Then
                                    stackrarexists = True
                                    tempmovie = rarname
                                Else
                                    stackrarexists = False
                                    tempmovie = rarname
                                End If
                            End If
                            If rarname.ToLower.IndexOf(".part01.rar") <> -1 Then
                                rarname = rarname.Replace(".part01.rar", ".nfo")
                                If IO.File.Exists(rarname) Then
                                    stackrarexists = True
                                    tempmovie = rarname
                                Else
                                    stackrarexists = False
                                    tempmovie = rarname
                                End If
                            End If
                            If rarname.ToLower.IndexOf(".part001.rar") <> -1 Then
                                rarname = rarname.Replace(".part001.rar", ".nfo")
                                If IO.File.Exists(rarname) Then
                                    tempmovie = rarname
                                    stackrarexists = True
                                Else
                                    stackrarexists = False
                                    tempmovie = rarname
                                End If
                            End If
                            If rarname.ToLower.IndexOf(".part0001.rar") <> -1 Then
                                rarname = rarname.Replace(".part0001.rar", ".nfo")
                                If IO.File.Exists(rarname) Then
                                    tempmovie = rarname
                                    stackrarexists = True
                                Else
                                    stackrarexists = False
                                    tempmovie = rarname
                                End If
                            End If
                            If stackrarexists = True Then
                                Dim allok As Boolean = False
                                Try
                                    Dim filechck As IO.StreamReader = IO.File.OpenText(tempmovie)
                                    Do

                                        tempstring = filechck.ReadLine
                                        If tempstring = Nothing Then Exit Do

                                        If tempstring.IndexOf("<movie>") <> -1 Then
                                            allok = True
                                            Exit Do
                                        End If
                                    Loop Until tempstring.IndexOf("</movie>") <> -1
                                    filechck.Close()
                                Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                Finally
                                End Try
                                If allok = True Then
                                    validfile = False
                                End If
                            End If
                        Else
                            validfile = False
                        End If
                    End If
                Else
                    validfile = False
                End If
            End If
        End If

        'rename fullpathandfilename to that of the nfo file
        fullpathandfilename = fullpathandfilename.Replace(fullpathandfilename.Substring(fullpathandfilename.LastIndexOf("."), fullpathandfilename.Length - fullpathandfilename.LastIndexOf(".")), ".nfo")

        'check for both variations of the filename
        Dim nfopaths(1) As String
        nfopaths(0) = fullpathandfilename
        nfopaths(1) = fullpathandfilename.Replace(IO.Path.GetFileName(fullpathandfilename), "movie.nfo")
        'check if the file exists
        For f = 0 To 1
            If IO.File.Exists(nfopaths(f)) Then
                'if it does check if it is a valid xbmc nfo, if it is not then move it or delete it according to prefs
                Try
                    Dim filechck As IO.StreamReader = IO.File.OpenText(nfopaths(f))
                    tempstring = filechck.ReadToEnd
                    filechck.Close()
                    If tempstring.IndexOf("<movie>") = -1 And tempstring.IndexOf("</movie>") = -1 Then
                        If Preferences.renamenfofiles = True Then
                            Dim fi As New IO.FileInfo(nfopaths(f))
                            Dim newpath As String = nfopaths(f).Replace(nfopaths(f).Substring(nfopaths(f).LastIndexOf("."), nfopaths(f).Length - nfopaths(f).LastIndexOf(".")), ".info")
                            fi.MoveTo(newpath)
                        End If
                    Else
                        validfile = False
                    End If


                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If

                Finally
                End Try
            End If
        Next
        Return validfile
    End Function

    Private Sub mov_ListFiles2(ByVal lst As String, ByVal pattern As String, ByVal dir_info As System.IO.DirectoryInfo)
        'scraperLog &= lst & " " & pattern & " " & dir_info.ToString & vbCrLf
        Dim moviepattern As String = pattern
        Monitor.Enter(Me)
        Dim tempint2 As Integer = 0
        Dim tempstring As String
        Try
            Dim fs_infos() As System.IO.FileInfo = dir_info.GetFiles(moviepattern)
            Dim tempmovie As String
            Dim dofilter As Boolean = False
            Dim dvdfiles As Boolean
            For Each fs_info As System.IO.FileInfo In fs_infos
                If Preferences.usefoldernames = True Then
                    scraperLog &= ": '" & fs_info.Directory.Name.ToString & "'"                          'log directory name as Title due to use FOLDERNAMES
                Else
                    scraperLog &= ": '" & fs_info.ToString & "'"                                  'log title name
                End If

                Dim newmoviedetails As New str_NewMovie(SetDefaults)
                Dim title As String = String.Empty
                Dim remove As Boolean = False
                dvdfiles = False
                dofilter = False
                tempmovie = fs_info.FullName.Replace(System.IO.Path.GetExtension(fs_info.FullName), ".nfo")
                newmoviedetails.mediapathandfilename = fs_info.FullName
                newmoviedetails.nfopathandfilename = tempmovie
                Dim basicmoviename As String = tempmovie.Replace(IO.Path.GetFileName(tempmovie), "movie.nfo")
                If IO.File.Exists(basicmoviename) Then   'this removes this movie from the to scrape list if the folder contains a movie.nfo
                    remove = True
                    scraperLog &= " - 'movie.nfo' found - scrape skipped!"
                End If
                basicmoviename = Utilities.GetStackName(IO.Path.GetFileName(fs_info.FullName), fs_info.FullName)
                Dim otherformat As String = tempmovie.Replace(IO.Path.GetFileName(tempmovie), basicmoviename & ".nfo")
                If IO.File.Exists(otherformat) Then
                    Dim allok2 As Boolean = False
                    Try
                        Dim filechck As IO.StreamReader = IO.File.OpenText(otherformat)
                        Do

                            tempstring = filechck.ReadLine
                            If tempstring = Nothing Then Exit Do

                            If tempstring.IndexOf("<movie>") <> -1 Then
                                allok2 = True
                                Exit Do
                            End If
                        Loop Until tempstring.IndexOf("</movie>") <> -1
                        filechck.Close()
                    Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                    End Try
                    If allok2 = True Then
                        remove = True
                        scraperLog &= " - valid MC .nfo found ('" & otherformat & "') type other - scrape skipped!"
                    End If
                End If

                If moviepattern = "*.vob" Then
                    scraperLog &= "VOB Pattern Found!"
                    Dim lonevobfile As String = tempmovie.Replace(System.IO.Path.GetFileName(tempmovie), "VIDEO_TS.IFO")
                    scraperLog &= " -" & lonevobfile
                    dvdfiles = System.IO.File.Exists(lonevobfile)
                End If

                If dvdfiles = False Then

                    If IO.File.Exists(tempmovie) = True Then


                        Dim allok As Boolean = False
                        Try
                            Dim filechck As IO.StreamReader = IO.File.OpenText(tempmovie)
                            Do

                                tempstring = filechck.ReadLine
                                If tempstring = Nothing Then Exit Do

                                If tempstring.IndexOf("<movie>") <> -1 Then
                                    allok = True
                                    Exit Do
                                End If
                            Loop Until tempstring.IndexOf("</movie>") <> -1
                            filechck.Close()
                        Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                        Finally
                        End Try

                        If allok = False Then
                            dofilter = True
                            title = fs_info.FullName
                        Else
                            remove = True
                            scraperLog &= " - valid MC .nfo found ('" & fs_info.Name.Replace(System.IO.Path.GetExtension(fs_info.Name), ".nfo") & "') - scrape skipped!"
                        End If
                    Else
                        dofilter = True
                        title = fs_info.FullName
                    End If


                    If dofilter = True Then
                        If title <> Nothing Then
                            Dim searchboolean As Boolean = False
                            Dim filename2 As String = System.IO.Path.GetFileName(title).ToLower
                            If filename2.IndexOf("cd2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd5") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd9") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd.2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd.3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd.4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd.5") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd_2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd_3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd_4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd_5") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd_6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd_7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd_8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd_9") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd5") <> -1 Then
                                Dim tempfile As String = title.Replace("dvd5", "dvd1")
                                If IO.File.Exists(tempfile) Then
                                    searchboolean = True
                                End If
                            End If
                            If filename2.IndexOf("dvd6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd9") <> -1 Then
                                Dim tempfile As String = title.Replace("dvd9", "dvd1")
                                If IO.File.Exists(tempfile) Then
                                    searchboolean = True
                                End If
                            End If
                            If filename2.IndexOf("dvd.2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd.3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd.4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd.5") <> -1 Then
                                Dim tempfile As String = title.Replace("dvd.5", "dvd.1")
                                If IO.File.Exists(tempfile) Then
                                    searchboolean = True
                                End If
                            End If
                            If filename2.IndexOf("dvd.6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd.7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd.8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd.9") <> -1 Then
                                Dim tempfile As String = title.Replace("dvd.9", "dvd.1")
                                If IO.File.Exists(tempfile) Then
                                    searchboolean = True
                                End If
                            End If
                            If filename2.IndexOf("dvd_2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd_3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd_4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd_5") <> -1 Then
                                Dim tempfile As String = title.Replace("dvd_5", "dvd_1")
                                If IO.File.Exists(tempfile) Then
                                    searchboolean = True
                                End If
                            End If
                            If filename2.IndexOf("dvd_6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd_7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd_8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd_9") <> -1 Then
                                Dim tempfile As String = title.Replace("dvd_9", "dvd_1")
                                If IO.File.Exists(tempfile) Then
                                    searchboolean = True
                                End If
                            End If
                            If filename2.IndexOf("part2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part5") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part9") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part.2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part.3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part.4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part.5") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part_2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part_3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part_4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part_5") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part_6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part_7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part_8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part_9") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk5") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk9") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk.2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk.3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk.4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk.5") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk.6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk.7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk.8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk.9") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk_2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk_3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk_4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk_5") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk_6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk_7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk_8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk_9") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd 2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd 3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd 4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd 5") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd 6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd 7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd 8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd 9") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd-2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd-3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd-4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd-5") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd-6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd-7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd-8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("cd-9") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd 2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd 3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd 4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd 5") <> -1 Then
                                Dim tempfile As String = title.Replace("dvd 5", "dvd 1")
                                If IO.File.Exists(tempfile) Then
                                    searchboolean = True
                                End If
                            End If
                            If filename2.IndexOf("dvd 6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd 7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd 8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd 9") <> -1 Then
                                Dim tempfile As String = title.Replace("dvd 9", "dvd 1")
                                If IO.File.Exists(tempfile) Then
                                    searchboolean = True
                                End If
                            End If
                            If filename2.IndexOf("dvd-2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd-3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd-4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd-5") <> -1 Then
                                Dim tempfile As String = title.Replace("dvd-5", "dvd-1")
                                If IO.File.Exists(tempfile) Then
                                    searchboolean = True
                                End If
                            End If
                            If filename2.IndexOf("dvd-6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd-7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd-8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("dvd-9") <> -1 Then
                                Dim tempfile As String = title.Replace("dvd-9", "dvd-1")
                                If IO.File.Exists(tempfile) Then
                                    searchboolean = True
                                End If
                            End If
                            If filename2.IndexOf("part-2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part-3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part-4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part-5") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part-6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part-7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part-8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part-9") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part 2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part 3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part 4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part 5") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part 6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part 7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part 8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("part 9") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk 2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk 3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk 4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk 5") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk 6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk 7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk 8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk 9") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk-2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk-3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk-4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk-5") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk-6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk-7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk-8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("disk-9") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt 2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt 3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt 4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt 5") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt 6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt 7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt 8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt 9") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt-2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt-3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt-4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt-5") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt-6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt-7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt-8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt-9") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt5") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt9") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt_2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt_3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt_4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt_5") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt_6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt_7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt_8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt_9") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt.2") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt.3") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt.4") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt.5") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt.6") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt.7") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt.8") <> -1 Then searchboolean = True
                            If filename2.IndexOf("pt.9") <> -1 Then searchboolean = True
                            If filename2.IndexOf("-trailer") <> -1 Then searchboolean = True
                            If filename2.IndexOf(".trailer") <> -1 Then searchboolean = True
                            If filename2.IndexOf("_trailer") <> -1 Then searchboolean = True
                            If filename2.IndexOf("sample") <> -1 And filename2.IndexOf("people") = -1 Then searchboolean = True

                            Dim tempname As String
                            Dim extension As String
                            extension = System.IO.Path.GetExtension(filename2)
                            tempname = filename2.Replace(extension, "")
                            If tempname.Substring(tempname.Length - 1) = "b" Or tempname.Substring(tempname.Length - 1) = "c" Or tempname.Substring(tempname.Length - 1) = "d" Or tempname.Substring(tempname.Length - 1) = "e" Or tempname.Substring(tempname.Length - 1) = "B" Or tempname.Substring(tempname.Length - 1) = "C" Or tempname.Substring(tempname.Length - 1) = "D" Or tempname.Substring(tempname.Length - 1) = "E" Then
                                'tempname = tempname.Substring(tempname.Length - 1)
                                tempname = newmoviedetails.nfopathandfilename.Substring(0, newmoviedetails.nfopathandfilename.Length - (1 + extension.Length)) & "a" & extension
                                Dim newtempboolean As Boolean = False
                                newtempboolean = System.IO.File.Exists(tempname)
                                If newtempboolean = True Then searchboolean = True
                                If newtempboolean = False Then
                                End If
                            End If
                            If searchboolean = True Then
                                remove = True
                            End If
                        End If
                    End If
                Else
                    scraperLog &= "- DVD File Structure Found!"
                End If


                Dim tempmovie2 As String = fs_info.FullName
                If IO.Path.GetExtension(tempmovie2).ToLower = ".rar" Then
                    If IO.File.Exists(tempmovie2) = True Then
                        If IO.File.Exists(tempmovie) = False Then
                            Dim rarname As String = tempmovie2
                            Dim SizeOfFile As Integer = FileLen(rarname)
                            tempint2 = Convert.ToInt32(Preferences.rarsize) * 1048576
                            If SizeOfFile > tempint2 Then
                                Dim mat As Match
                                mat = Regex.Match(rarname, "\.part[0-9][0-9]?[0-9]?[0-9]?.rar")
                                If mat.Success = True Then
                                    rarname = mat.Value
                                    If rarname.ToLower.IndexOf(".part1.rar") <> -1 Or rarname.ToLower.IndexOf(".part01.rar") <> -1 Or rarname.ToLower.IndexOf(".part001.rar") <> -1 Or rarname.ToLower.IndexOf(".part0001.rar") <> -1 Then
                                        Dim stackrarexists As Boolean = False
                                        rarname = tempmovie.Replace(".nfo", ".rar")
                                        If rarname.ToLower.IndexOf(".part1.rar") <> -1 Then
                                            rarname = rarname.Replace(".part1.rar", ".nfo")
                                            If IO.File.Exists(rarname) Then
                                                stackrarexists = True
                                                tempmovie = rarname
                                            Else
                                                stackrarexists = False
                                                tempmovie = rarname
                                            End If
                                        End If
                                        If rarname.ToLower.IndexOf(".part01.rar") <> -1 Then
                                            rarname = rarname.Replace(".part01.rar", ".nfo")
                                            If IO.File.Exists(rarname) Then
                                                stackrarexists = True
                                                tempmovie = rarname
                                            Else
                                                stackrarexists = False
                                                tempmovie = rarname
                                            End If
                                        End If
                                        If rarname.ToLower.IndexOf(".part001.rar") <> -1 Then
                                            rarname = rarname.Replace(".part001.rar", ".nfo")
                                            If IO.File.Exists(rarname) Then
                                                tempmovie = rarname
                                                stackrarexists = True
                                            Else
                                                stackrarexists = False
                                                tempmovie = rarname
                                            End If
                                        End If
                                        If rarname.ToLower.IndexOf(".part0001.rar") <> -1 Then
                                            rarname = rarname.Replace(".part0001.rar", ".nfo")
                                            If IO.File.Exists(rarname) Then
                                                tempmovie = rarname
                                                stackrarexists = True
                                            Else
                                                stackrarexists = False
                                                tempmovie = rarname
                                            End If
                                        End If
                                        If stackrarexists = True Then
                                            Dim allok As Boolean = False
                                            Try
                                                Dim filechck As IO.StreamReader = IO.File.OpenText(tempmovie)
                                                Do

                                                    tempstring = filechck.ReadLine
                                                    If tempstring = Nothing Then Exit Do

                                                    If tempstring.IndexOf("<movie>") <> -1 Then
                                                        allok = True
                                                        Exit Do
                                                    End If
                                                Loop Until tempstring.IndexOf("</movie>") <> -1
                                                filechck.Close()
                                            Catch ex As Exception
#If SilentErrorScream Then
                                                Throw ex
#End If
                                            Finally
                                            End Try
                                            If allok = True Then
                                                remove = True
                                            Else
                                                title = tempmovie
                                            End If
                                        Else
                                            title = tempmovie
                                        End If
                                    Else
                                        remove = True
                                    End If
                                Else
                                    'remove = True
                                End If
                            Else
                                remove = True
                            End If
                        End If
                    End If
                End If
                If remove = True Then
                    remove = False
                    title = Nothing
                    newmoviedetails.mediapathandfilename = Nothing
                    newmoviedetails.nfopath = Nothing
                    newmoviedetails.nfopathandfilename = Nothing
                    newmoviedetails.title = Nothing

                Else
                    If title <> Nothing Then
                        'scraperLog &= " - TITLE: " & title
                        Dim extension As String
                        Dim filename2 As String
                        newmoviedetails.nfopathandfilename = title
                        extension = System.IO.Path.GetExtension(title)
                        filename2 = System.IO.Path.GetFileName(title)
                        newmoviedetails.nfopath = title.Replace(filename2, "")
                        newmoviedetails.title = filename2.Replace(extension, "")
                        If extension <> ".IFO" And extension <> "ttt" Then
                            'newmoviedetails.mediapathandfilename = title
                            newmoviedetails.nfopathandfilename = newmoviedetails.nfopathandfilename.Replace(extension, ".nfo")
                        End If
                        'If dvdfolder = True Then
                        If extension.ToLower = ".ifo" Then
                            newmoviedetails.mediapathandfilename = title
                            newmoviedetails.nfopathandfilename = newmoviedetails.mediapathandfilename.Replace(extension, ".nfo")
                            If IO.File.Exists(newmoviedetails.nfopathandfilename) = False Then
                                Dim paths() As String = Nothing
                                If newmoviedetails.nfopathandfilename.IndexOf("\") <> -1 Then
                                    paths = newmoviedetails.nfopathandfilename.Split("\")
                                ElseIf newmoviedetails.nfopathandfilename.IndexOf("/") <> -1 Then
                                    paths = newmoviedetails.nfopathandfilename.Split("/")
                                End If
                                Dim depthecount As Integer = paths.GetUpperBound(0)
                                newmoviedetails.title = Nothing

                                For h = depthecount To 0 Step -1
                                    Dim temppath As String
                                    temppath = paths(h)
                                    paths(h) = paths(h).ToLower
                                    If paths(h).IndexOf("video_ts") = -1 Then
                                        newmoviedetails.title = temppath
                                    End If
                                    If newmoviedetails.title <> Nothing Then Exit For
                                Next
                            Else
                                newmoviedetails.nfopathandfilename = Nothing
                                newmoviedetails.title = Nothing
                            End If
                        End If

                        'End If




                        'filenamekeeper = ""
                        If Preferences.usefoldernames = True And newmoviedetails.title <> Nothing Then
                            Dim tempstring4 As String
                            tempstring4 = newmoviedetails.nfopathandfilename.ToLower
                            If tempstring4.IndexOf("video_ts") = -1 Then
                                newmoviedetails.title = newmoviedetails.nfopath.Substring(0, newmoviedetails.nfopath.Length - 1)
                                newmoviedetails.title = newmoviedetails.title.Substring(newmoviedetails.title.LastIndexOf("\") + 1, newmoviedetails.title.Length - newmoviedetails.title.LastIndexOf("\") - 1)
                                newmoviedetails.title = Utilities.GetLastFolder(newmoviedetails.nfopathandfilename)
                            End If
                        End If
                        Dim alreadyadded As Boolean = False
                        For Each newmovie In newMovieList
                            If newmovie.nfopathandfilename = newmoviedetails.nfopathandfilename Then
                                alreadyadded = True
                                scraperLog &= " - Already Added!"
                                Exit For
                            End If
                        Next
                        If alreadyadded = False Then
                            scraperLog &= " - NEW!"
                            newMovieList.Add(newmoviedetails)
                        Else
                            alreadyadded = False
                        End If
                    End If
                End If
                Application.DoEvents()
                scraperLog &= vbCrLf
            Next fs_info
            fs_infos = Nothing


        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        Finally
            Monitor.Exit(Me)
        End Try

    End Sub

    Private Sub mov_ScanForNew()
        If Not BckWrkScnMovies.IsBusy Then
            If scrapeAndQuit = False Then
                ToolStripStatusLabel1.Visible = True
                ToolStripProgressBar1.Visible = True
            End If
            BckWrkScnMovies.RunWorkerAsync()
        Else
            MsgBox("The Movie Scraper is Already Running")
        End If
    End Sub

#Region "Auxiliary Procedures for Multithreading of Rescraping Movies Procedure Below"

    Private Sub mov_XBMCScrapingInitialization()
        Dim NewMoviesFolders As List(Of String)
        'Dim Extensions(100) As String
        'Dim ExtensionCount As Integer = 0
        Dim Progress As Integer = 0
        Dim ProgressText As String = ""
        Dim MoviePattern As String = ""
        Dim DirPath As String = ""
        Dim DirInfo As String = ""
        Dim TempInt As Integer = 0
        Dim Extension As String = ""
        Dim Filename2 As String = ""
        Dim TempString As String = ""
        Dim TempLabel As String = ""
        Dim TempProgressBarValue As Integer = 0

        TempProgressBarValue = ToolStripProgressBar1.Maximum
        TempLabel = ToolStripStatusLabel6.Text

        'Extensions(1) = "*.avi"
        'Extensions(2) = "*.xvid"
        'Extensions(3) = "*.divx"
        'Extensions(4) = "*.img"
        'Extensions(5) = "*.mpg"
        'Extensions(6) = "*.mpeg"
        'Extensions(7) = "*.mov"
        'Extensions(8) = "*.rm"
        'Extensions(9) = "*.3gp"
        'Extensions(10) = "*.m4v"
        'Extensions(11) = "*.wmv"
        'Extensions(12) = "*.asf"
        'Extensions(13) = "*.mp4"
        'Extensions(14) = "*.mkv"
        'Extensions(15) = "*.nrg"
        'Extensions(16) = "*.iso"
        'Extensions(17) = "*.rmvb"
        'Extensions(18) = "*.ogm"
        'Extensions(19) = "*.bin"
        'Extensions(20) = "*.ts"
        'Extensions(21) = "*.vob"
        'Extensions(22) = "*.m2ts"
        'Extensions(23) = "*.rar"
        'Extensions(24) = "*.dvr-ms"
        'Extensions(25) = "VIDEO_TS.IFO"
        'ExtensionCount = 25
        '--------------------------Begin Search for New Media in Normal Folders
        NewMoviesFolders = Utilities.FindAllFolders(movieFolders)

        '--------------------------Begin Search for New Media in Offline Folders
        For Each moviefolder In Preferences.offlinefolders
            Dim hg As New IO.DirectoryInfo(moviefolder)
            If hg.Exists Then
                scraperLog = scraperLog & "found" & hg.FullName.ToString & vbCrLf
                scraperLog = scraperLog & "Checking for subfolders" & vbCrLf
                Dim newlist As List(Of String)
                Try
                    newlist = Utilities.EnumerateFolders(moviefolder, 0)
                    For Each subfolder In newlist
                        scraperLog = scraperLog & "Subfolder added :- " & subfolder.ToString & vbCrLf
                        Dim temge22 As String = Utilities.GetLastFolder(subfolder & "\whatever") & ".avi"
                        Dim sTempFileName22 As String = IO.Path.Combine(subfolder, temge22)
                        Dim newtemp1 As String = sTempFileName22.Replace(IO.Path.GetExtension(sTempFileName22), ".nfo")
                        If Not IO.File.Exists(newtemp1) Then
                            If Not IO.File.Exists(IO.Path.Combine(subfolder, "tempoffline.ttt")) Then
                                Dim sTempFileName As String = IO.Path.Combine(subfolder, "tempoffline.ttt")
                                Dim fsTemp As New System.IO.FileStream(sTempFileName, IO.FileMode.Create)
                                fsTemp.Close()
                            End If
                            If Not IO.File.Exists(sTempFileName22) Then
                                Dim temge As String = Utilities.GetLastFolder(subfolder & "\whatever") & ".avi"
                                Dim sTempFileName2 As String = IO.Path.Combine(subfolder, temge)
                                Dim fsTemp2 As New System.IO.FileStream(sTempFileName2, IO.FileMode.Create)
                                fsTemp2.Close()
                            End If
                            NewMoviesFolders.Add(subfolder)
                        End If
                    Next
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
            End If
        Next
        '--------------------------End Search for New Media in Offline Folders

        newMovieList.Clear()
        Dim mediacounter As Integer = newMovieList.Count

        For g = 0 To NewMoviesFolders.Count - 1
            Progress = ((100 / NewMoviesFolders.Count) * g) * 10
            ProgressText = "Scanning folder " & g + 1 & " of " & NewMoviesFolders.Count & " " & NewMoviesFolders(g)
            ToolStripProgressBar1.Visible = True
            ToolStripProgressBar1.Value = Progress
            ToolStripProgressBar1.ProgressBar.Refresh()
            ToolStripProgressBar1.ProgressBar.PerformStep()
            ToolStripStatusLabel1.Visible = True
            ToolStripStatusLabel1.Text = ProgressText

            For Each ext In Utilities.VideoExtensions
                MoviePattern = If(ext.IndexOf(".IFO") <> -1, ext, "*" & ext)

                DirPath = NewMoviesFolders(g)
                Dim Dir_Info As New System.IO.DirectoryInfo(DirPath)
                mov_ListFiles2(DirInfo, MoviePattern, Dir_Info)
            Next

            'For f = 1 To ExtensionCount
            '    MoviePattern = Extensions(f)

            '    DirPath = NewMoviesFolders(g)
            '    Dim Dir_Info As New System.IO.DirectoryInfo(DirPath)
            '    mov_ListFiles2(DirInfo, MoviePattern, Dir_Info)
            'Next f
            TempInt = newMovieList.Count - mediacounter
            mediacounter = newMovieList.Count
        Next



        Dim movieyear As String = ""
        Dim newmoviecount As Integer = 0
        newmoviecount = newMovieList.Count.ToString
        scraperLog &= vbCrLf & vbCrLf & "Starting Main XBMC Scraper Process" & vbCrLf & vbCrLf

        If newMovieList.Count = 0 Then
            scraperLog &= "No New Movies Found..." & vbCrLf
        Else
            ToolStripProgressBar1.Maximum = newMovieList.Count + 1
            For f = 0 To newMovieList.Count - 1
                Try
                    While novaThread.IsAlive
                        Application.DoEvents()
                    End While
                Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
                End Try
                newMovieFoundTitle = newMovieList(f).title.ToString
                newMovieFoundFilename = newMovieList(f).mediapathandfilename.ToString
                scraperLog &= newMovieFoundTitle
                novaThread = New Thread(New ThreadStart(AddressOf mov_ScrapingStartTemp))
                novaThread.SetApartmentState(ApartmentState.STA)
                novaThread.Start()

                ToolStripProgressBar1.Value = f
                ToolStripProgressBar1.ProgressBar.Refresh()
                ToolStripProgressBar1.ProgressBar.PerformStep()
                ToolStripStatusLabel1.Text = Preferences.XBMC_Scraper & " XBMC Scraper - Scraping " & (f + 1).ToString & " of " & newMovieList.Count.ToString
                ToolStripStatusLabel6.Visible = True
                ToolStripStatusLabel6.Text = "Movie Name : " & newMovieFoundTitle


            Next
            Try
                While novaThread.IsAlive
                    Application.DoEvents()
                End While
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
            ToolStripProgressBar1.Visible = False
            ToolStripStatusLabel6.Visible = False
            ToolStripStatusLabel1.Visible = False
            ToolStripProgressBar1.Maximum = TempProgressBarValue
            ToolStripStatusLabel6.Text = TempLabel
        End If

    End Sub
    Private Sub mov_ScrapingStartTemp()
        Dim FullFileContent As String = ""
        Dim Scraper As String = Preferences.XBMC_Scraper
        FullFileContent = Start_XBMC_MoviesScraping(Scraper, newMovieFoundTitle, newMovieFoundFilename)
        If FullFileContent.ToLower <> "error" Then
            scraperLog &= " - OK!" & vbCrLf
            Dim Teste As Boolean = CreateMovieNfo(Utilities.GetFileName(newMovieFoundFilename), FullFileContent)
            If Teste = True Then mov_DBScrapedAdd(newMovieFoundFilename)
            mov_FiltersAndSortApply()
            If messbox.Visible = True Then messbox.Close()
            If Me.Cursor = Cursors.WaitCursor Then Me.Cursor = Cursors.Default
        Else
            scraperLog &= " - Scrape ERROR!" & vbCrLf
        End If
    End Sub
    Private Sub mov_DBScrapedAdd(ByVal Filename As String)
        Dim ExtensionPosition As Integer = Filename.LastIndexOf(".")
        Dim nfoFilename As String = Filename.Remove(ExtensionPosition, (Filename.Length - ExtensionPosition))
        nfoFilename &= ".nfo"
        Dim TempMovieToAdd As New FullMovieDetails
        TempMovieToAdd = nfoFunction.mov_NfoLoadFull(nfoFilename)
        Dim movietoadd As New str_ComboList(SetDefaults)

        Dim filecreation As New IO.FileInfo(nfoFilename)
        Dim myDate As Date = filecreation.LastWriteTime
        Try
            movietoadd.filedate = Format(myDate, "yyyyMMddHHmmss").ToString
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
        movietoadd.createdate = TempMovieToAdd.fileinfo.createdate
        movietoadd.filename = TempMovieToAdd.fileinfo.filename
        movietoadd.foldername = TempMovieToAdd.fileinfo.foldername
        movietoadd.fullpathandfilename = TempMovieToAdd.fileinfo.fullpathandfilename
        movietoadd.genre = TempMovieToAdd.fullmoviebody.genre
        movietoadd.id = TempMovieToAdd.fullmoviebody.imdbid
        movietoadd.missingdata1 = "0"
        If TempMovieToAdd.fullmoviebody.movieset Is Nothing Then
            movietoadd.movieset = ""
        Else
            movietoadd.movieset = TempMovieToAdd.fullmoviebody.movieset
        End If
        movietoadd.outline = TempMovieToAdd.fullmoviebody.outline
        movietoadd.plot = TempMovieToAdd.fullmoviebody.plot
        movietoadd.playcount = TempMovieToAdd.fullmoviebody.playcount
        movietoadd.rating = TempMovieToAdd.fullmoviebody.rating
        movietoadd.runtime = TempMovieToAdd.fullmoviebody.runtime
        movietoadd.sortorder = TempMovieToAdd.fullmoviebody.sortorder
        movietoadd.title = TempMovieToAdd.fullmoviebody.title
        movietoadd.originaltitle = TempMovieToAdd.fullmoviebody.title
        movietoadd.titleandyear = TempMovieToAdd.fullmoviebody.title & " (" & TempMovieToAdd.fullmoviebody.year & ")"
        movietoadd.top250 = TempMovieToAdd.fullmoviebody.top250
        movietoadd.year = TempMovieToAdd.fullmoviebody.year
        fullMovieList.Add(movietoadd)

    End Sub

#End Region


    Private Sub mov_StartNew()
        Dim dft As New List(Of String)
        Dim moviepattern As String
        Dim tempint As Integer = 0
        Dim tempstring As String
        Dim errorcounter As Integer = 0
        Dim trailer As String
        Dim newmoviecount As Integer = 0
        Dim dirinfo As String = String.Empty
        newMovieList.Clear()
        Dim newmoviefolders As New List(Of String)
        Dim progress As Integer = 0
        progress = 0
        Dim progresstext As String
        scraperLog = ""
        Dim dirpath As String = String.Empty

        scraperLog &= "MC " & Trim(System.Reflection.Assembly.GetExecutingAssembly.FullName.Split(",")(1)) & vbCrLf

        If Preferences.usefoldernames = True Then
            scraperLog &= "Using FOLDERNAMES to determine Movie Title...." & vbCrLf
        Else
            scraperLog &= "Using FILENAMES to determine Movie Title...." & vbCrLf
        End If


        If Preferences.movies_useXBMC_Scraper = True Then
            scraperLog &= "Using XBMC Scraper...." & vbCrLf
            mov_XBMCScrapingInitialization()
        Else
            scraperLog &= "Using MC IMDB Scraper" & vbCrLf
            If BckWrkScnMovies.CancellationPending Then
                scraperLog = scraperLog & vbCrLf & "Operation cancelled by user"
                Exit Sub
            End If
            Dim ProgressBase As String = ""
            progressbase = "Using MC IMDB scraper/"

            If Preferences.usefoldernames = True Then
                progressbase &= "FOLDERNAMES"

            Else
                progressbase &= "FILENAMES"

            End If

            'BckWrkScnMovies.ReportProgress(progress, ProgressBase)


            scraperLog &= "Starting Folder Scan" & vbCrLf & vbCrLf

            Dim extension As String
            Dim filename2 As String
            'Dim extensions(100) As String
            'Dim extensioncount As Integer
            'extensions(1) = "*.avi"
            'extensions(2) = "*.xvid"
            'extensions(3) = "*.divx"
            'extensions(4) = "*.img"
            'extensions(5) = "*.mpg"
            'extensions(6) = "*.mpeg"
            'extensions(7) = "*.mov"
            'extensions(8) = "*.rm"
            'extensions(9) = "*.3gp"
            'extensions(10) = "*.m4v"
            'extensions(11) = "*.wmv"
            'extensions(12) = "*.asf"
            'extensions(13) = "*.mp4"
            'extensions(14) = "*.mkv"
            'extensions(15) = "*.nrg"
            'extensions(16) = "*.iso"
            'extensions(17) = "*.rmvb"
            'extensions(18) = "*.ogm"
            'extensions(19) = "*.bin"
            'extensions(20) = "*.ts"
            'extensions(21) = "*.vob"
            'extensions(22) = "*.m2ts"
            'extensions(23) = "*.rar"
            'extensions(24) = "*.dvr-ms"
            'extensions(25) = "VIDEO_TS.IFO"
            'extensioncount = 25

            For Each moviefolder In movieFolders
                Dim hg As New IO.DirectoryInfo(moviefolder)
                If hg.Exists Then
                    scraperLog &= "Found Movie Folder: " & hg.FullName.ToString & vbCrLf
                    newmoviefolders.Add(moviefolder)
                    scraperLog &= "Checking for subfolders" & vbCrLf
                    Dim newlist As List(Of String)
                    Try
                        newlist = Utilities.EnumerateFolders(moviefolder, 6)
                        For Each subfolder In newlist
                            scraperLog = scraperLog & "Subfolder added :- " & subfolder.ToString & vbCrLf
                            newmoviefolders.Add(subfolder)
                        Next
                    Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                    End Try
                End If
            Next
            scraperLog &= vbCrLf
            For Each moviefolder In Preferences.offlinefolders
                Dim hg As New IO.DirectoryInfo(moviefolder)
                If hg.Exists Then
                    scraperLog = scraperLog & "Found Offline Folder: " & hg.FullName.ToString & vbCrLf
                    'newmoviefolders.Add(moviefolder)
                    scraperLog = scraperLog & "Checking for subfolders" & vbCrLf
                    Dim newlist As List(Of String)
                    Try
                        newlist = Utilities.EnumerateFolders(moviefolder, 0)
                        For Each subfolder In newlist
                            'If subfolder.IndexOf(".actors") = -1 Then
                            scraperLog = scraperLog & "Subfolder added :- " & subfolder.ToString & vbCrLf
                            Dim temge22 As String = Utilities.GetLastFolder(subfolder & "\whatever") & ".avi"
                            Dim sTempFileName22 As String = IO.Path.Combine(subfolder, temge22)
                            Dim newtemp1 As String = sTempFileName22.Replace(IO.Path.GetExtension(sTempFileName22), ".nfo")
                            If Not IO.File.Exists(newtemp1) Then
                                If Not IO.File.Exists(IO.Path.Combine(subfolder, "tempoffline.ttt")) Then
                                    Dim sTempFileName As String = IO.Path.Combine(subfolder, "tempoffline.ttt")
                                    Dim fsTemp As New System.IO.FileStream(sTempFileName, IO.FileMode.Create)
                                    fsTemp.Close()
                                End If
                                If Not IO.File.Exists(sTempFileName22) Then
                                    Dim temge As String = Utilities.GetLastFolder(subfolder & "\whatever") & ".avi"
                                    Dim sTempFileName2 As String = IO.Path.Combine(subfolder, temge)
                                    Dim fsTemp2 As New System.IO.FileStream(sTempFileName2, IO.FileMode.Create)
                                    fsTemp2.Close()
                                End If
                                newmoviefolders.Add(subfolder)
                            End If
                            'End If
                        Next
                    Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                    End Try
                End If
            Next
            scraperLog &= vbCrLf & "MC Found these Movies..." & vbCrLf
            Application.DoEvents()
            Dim mediacounter As Integer = newMovieList.Count
            For g = 0 To newmoviefolders.Count - 1
                If BckWrkScnMovies.CancellationPending Then
                    scraperLog = scraperLog & vbCrLf & "Operation Cancelled by user" & vbCrLf
                    Exit Sub
                End If
                Try
                    progress = ((100 / newmoviefolders.Count) * g) * 10
                    progresstext = "Scanning folder " & g + 1 & " of " & newmoviefolders.Count
                    BckWrkScnMovies.ReportProgress(progress, progresstext)
                    If BckWrkScnMovies.CancellationPending Then
                        scraperLog = scraperLog & vbCrLf & "Operation cancelled by user"
                        Exit Sub
                    End If

                    For Each ext In Utilities.VideoExtensions
                        If BckWrkScnMovies.CancellationPending Then
                            scraperLog = scraperLog & vbCrLf & "Operation cancelled by user"
                            Exit Sub
                        End If
                        
                        moviepattern = If((ext = "VIDEO_TS.IFO"), ext, "*" & ext)  'this bit adds the * for the extension search in mov_ListFiles2 if its not the string VIDEO_TS.IFO 

                        dirpath = newmoviefolders(g)
                        Dim dir_info As New System.IO.DirectoryInfo(dirpath)
                        mov_ListFiles2(dirinfo, moviepattern, dir_info)         'titlename is logged in here
                    Next

                    'For f = 1 To extensioncount
                    '    If BckWrkScnMovies.CancellationPending Then
                    '        scraperLog = scraperLog & vbCrLf & "Operation cancelled by user"
                    '        Exit Sub
                    '    End If
                    '    moviepattern = extensions(f)

                    '    dirpath = newmoviefolders(g)
                    '    Dim dir_info As New System.IO.DirectoryInfo(dirpath)
                    '    mov_ListFiles2(dirinfo, moviepattern, dir_info)         'titlename is logged in here
                    'Next f
                    tempint = newMovieList.Count - mediacounter

                    scraperLog &= String.Format("{0} New movies found in directory:- {1}", tempint.ToString, dirpath) & vbCrLf
                    mediacounter = newMovieList.Count
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try

            Next g
            scraperLog &= vbCrLf & vbCrLf & "MC found " & newMovieList.Count & " NEW Movies" & vbCrLf

            If newMovieList.Count > 0 Then

                scraperLog &= "Obtaining Title for each movie found, from path and filename" & vbCrLf & vbCrLf
                For Each movie In newMovieList
                    Try
                        If BckWrkScnMovies.CancellationPending Then
                            scraperLog = scraperLog & vbCrLf & "Operation cancelled by user"
                            Exit Sub
                        End If
                        extension = System.IO.Path.GetExtension(movie.nfopathandfilename)
                        filename2 = System.IO.Path.GetFileName(movie.nfopathandfilename)
                        scraperLog = scraperLog & "" & vbCrLf
                        movie.nfopath = movie.nfopathandfilename.Replace(filename2, "")
                        movie.title = filename2.Replace(extension, "")
                        If extension.ToLower <> ".ifo" Then
                            Try
                                movie.nfopathandfilename = movie.nfopathandfilename.Replace(extension, ".nfo")
                            Catch
                                scraperLog = scraperLog & "Unable to get movie title, stage1" & vbCrLf
                                scraperLog = scraperLog & "Path is: " & movie.nfopathandfilename & vbCrLf
                            End Try
                        End If

                        'If dvdfolder = True Then
                        If extension.ToLower = ".ifo" Or Preferences.usefoldernames = True Then
                            Try
                                movie.nfopathandfilename = movie.nfopathandfilename.Replace(extension, ".nfo")
                                movie.title = Utilities.GetLastFolder(movie.nfopathandfilename)
                            Catch
                                scraperLog = scraperLog & "Unable to get movie title, stage2" & vbCrLf
                                scraperLog = scraperLog & "Path is: " & movie.nfopathandfilename & vbCrLf
                            End Try
                        End If


                        If movie.title <> Nothing Then
                            If movie.title <> "" Then
                                tempstring = Utilities.CleanFileName(movie.title, False)
                                If tempstring <> Nothing Then
                                    If tempstring <> "" Then
                                        If tempstring <> "error" Then
                                            movie.title = tempstring
                                        Else
                                            scraperLog = scraperLog & "Unable to clean title: " & movie.title & vbCrLf
                                        End If
                                    Else
                                        scraperLog = scraperLog & "Cleaning title returns blank: " & movie.title & vbCrLf
                                    End If
                                Else
                                    scraperLog = scraperLog & "Cleaning title returns nothing: " & movie.title & vbCrLf
                                End If
                            End If
                        End If


                        scraperLog = scraperLog & "Filename is: " & movie.mediapathandfilename & vbCrLf
                        scraperLog = scraperLog & "Title according to settings is: """ & movie.title & """" & vbCrLf
                    Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                    End Try

                Next


                '--------------------------
                Dim movieyear As String = ""
                newmoviecount = newMovieList.Count.ToString
                scraperLog = scraperLog & vbCrLf & vbCrLf & "Starting Main Scraper Process" & vbCrLf & vbCrLf

                For f = 0 To newMovieList.Count - 1
                    If BckWrkScnMovies.CancellationPending Then
                        scraperLog = scraperLog & vbCrLf & "Operation cancelled by user"
                        Exit Sub
                    End If
                    Dim stage As Integer = 0
                    Dim bodyok As Boolean = True
                    'stage 0 = starting scraper
                    'Try
                    Dim title As String = ""
                    Dim nfopath As String = ""
                    Dim fanartpath As String = ""
                    Dim posterpath As String = ""
                    Dim year As String = ""
                    Dim thumbstring As New XmlDocument
                    progress = ((100 / newmoviecount) * (f + 1) * 10)
                    progresstext = ProgressBase & String.Concat(" Scraping " & f + 1 & " of " & newmoviecount)
                    BckWrkScnMovies.ReportProgress(progress, progresstext)
                    If newMovieList(f).title = Nothing Then
                        scraperLog = scraperLog & "No Filename found for" & newMovieList(f).nfopathandfilename & vbCrLf
                    End If
                    Dim extrapossibleID As String = Nothing
                    If newMovieList(f).title <> Nothing Then
                        title = newMovieList(f).title
                        scraperLog = scraperLog & "Scraping Title:- " & newMovieList(f).title & vbCrLf
                        progresstext &= " - " & title
                        BckWrkScnMovies.ReportProgress(progress, progresstext)
                        Application.DoEvents()
                        nfopath = newMovieList(f).nfopathandfilename
                        If Preferences.basicsavemode = True Then
                            nfopath = newMovieList(f).nfopathandfilename.Replace(IO.Path.GetFileName(newMovieList(f).nfopathandfilename), "movie.nfo")
                        End If
                        scraperLog = scraperLog & "Output filename:- " & nfopath & vbCrLf
                        posterpath = Preferences.GetPosterPath(nfopath)
                        fanartpath = Preferences.GetFanartPath(nfopath)
                        scraperLog = scraperLog & "Poster Path:- " & posterpath & vbCrLf
                        scraperLog = scraperLog & "Fanart Path:- " & fanartpath & vbCrLf

                        extrapossibleID = Nothing
                        Dim T As String
                        Dim mat As Match

                        If IO.File.Exists(nfopath) Then
                            scraperLog = scraperLog & "nfo file exists, checking for IMDB ID" & vbCrLf
                            Dim tempinfo As String = ""
                            Dim objReader As New System.IO.StreamReader(nfopath)
                            tempinfo = objReader.ReadToEnd
                            objReader.Close()
                            extrapossibleID = Nothing
                            T = tempinfo
                            mat = Nothing
                            mat = Regex.Match(T, "(tt\d{7})")
                            If mat.Success = True Then
                                scraperLog = scraperLog & "IMDB ID found in nfo file:- " & mat.Value & vbCrLf
                                progresstext &= " - " & mat.Value
                                BckWrkScnMovies.ReportProgress(progress, progresstext)
                                extrapossibleID = mat.Value
                            Else
                                scraperLog = scraperLog & "No IMDB ID found in NFO" & vbCrLf
                                extrapossibleID = Nothing
                            End If
                            If Preferences.renamenfofiles = True Then   'reenabled choice as per user preference
                                Try
                                    If Not IO.File.Exists(nfopath.Replace(".nfo", ".info")) Then
                                        IO.File.Move(nfopath, nfopath.Replace(".nfo", ".info"))
                                        scraperLog = scraperLog & "renaming nfo file to:- " & nfopath.Replace(".nfo", ".info") & vbCrLf
                                    Else
                                        scraperLog = scraperLog & "Unable to rename file, """ & nfopath & """ already exists" & vbCrLf
                                    End If
                                Catch
                                    scraperLog = scraperLog & "Unable to rename file, """ & nfopath & """ already exists" & vbCrLf
                                End Try
                            Else
                                scraperLog = scraperLog & "Current nfo file will be overwritten" & vbCrLf
                            End If
                        Else
                            Dim stackname As String = Utilities.GetStackName(nfopath, nfopath.Replace(IO.Path.GetFileName(nfopath), ""))
                            Dim path As String = stackname & ".nfo"
                            If IO.File.Exists(path) Then
                                scraperLog = scraperLog & "nfo file exists, checking for IMDB ID" & vbCrLf
                                Dim tempinfo As String = ""
                                Dim objReader As New System.IO.StreamReader(path)
                                tempinfo = objReader.ReadToEnd
                                objReader.Close()
                                extrapossibleID = Nothing
                                T = tempinfo
                                mat = Nothing
                                mat = Regex.Match(T, "(tt\d{7})")
                                If mat.Success = True Then
                                    scraperLog = scraperLog & "IMDB ID found in nfo file:- " & mat.Value & vbCrLf
                                    progresstext &= " - " & mat.Value
                                    BckWrkScnMovies.ReportProgress(progress, progresstext)
                                    extrapossibleID = mat.Value
                                Else
                                    scraperLog = scraperLog & "No IMDB ID found" & vbCrLf
                                    extrapossibleID = Nothing
                                End If
                            Else
                                scraperLog = scraperLog & "NFO does not exist" & vbCrLf
                            End If

                        End If


                        If extrapossibleID = Nothing Then
                            scraperLog = scraperLog & "Checking filename for IMDB ID" & vbCrLf
                            mat = Nothing
                            T = newMovieList(f).nfopathandfilename
                            mat = Regex.Match(T, "(tt\d{7})")
                            If mat.Success = True Then
                                scraperLog = scraperLog & "IMDB ID found in filename:- " & mat.Value & vbCrLf
                                progresstext &= " - " & mat.Value
                                BckWrkScnMovies.ReportProgress(progress, progresstext)
                                extrapossibleID = mat.Value
                            Else
                                extrapossibleID = Nothing
                                scraperLog = scraperLog & "No IMDB ID found" & vbCrLf
                            End If
                        End If

                        If extrapossibleID = Nothing Then
                            scraperLog = scraperLog & "Checking for Movie year in filename" & vbCrLf
                            If extrapossibleID = Nothing Then
                                Dim M As Match
                                M = Regex.Match(newMovieList(f).nfopathandfilename, "(\([\d]{4}\))")
                                If M.Success = True Then

                                    movieyear = M.Value
                                Else
                                    movieyear = Nothing
                                End If
                                If movieyear = Nothing Then
                                    M = Regex.Match(newMovieList(f).nfopathandfilename, "(\[[\d]{4}\])")
                                    If M.Success = True Then

                                        movieyear = M.Value
                                    Else
                                        movieyear = Nothing
                                    End If
                                End If
                            End If

                            If movieyear = Nothing Then
                                scraperLog = scraperLog & "No year found in filename" & vbCrLf
                            Else
                                movieyear = movieyear.Replace("(", "")
                                movieyear = movieyear.Replace(")", "")
                                movieyear = movieyear.Replace("[", "")
                                movieyear = movieyear.Replace("]", "")
                                scraperLog = scraperLog & "Year found for movie:- " & movieyear.ToString & vbCrLf
                            End If
                        End If
                        title = Utilities.CleanFileName(title, False)
                        progresstext &= " - using '" & title
                        If movieyear <> "" Then
                            progresstext &= " " & movieyear & "'"
                        Else
                            progresstext &= "'"
                        End If

                        BckWrkScnMovies.ReportProgress(progress, progresstext)
                        scraperLog = scraperLog & "Cleaned Title for search :- " & title & vbCrLf
                        Dim newmovie As New FullMovieDetails
                        Dim scraperfunction As New Classimdb
                        Dim body As String
                        Dim actorlist As String
                        Dim certificates As New List(Of String)

                        'Get movie body
                        stage = 1

                        If BckWrkScnMovies.CancellationPending Then
                            scraperLog = scraperLog & vbCrLf & "Operation cancelled by user"
                            Exit Sub
                        End If

                        imdbCounter += 1
                        progresstext &= " * Now Scraping..."
                        BckWrkScnMovies.ReportProgress(progress, progresstext)

                        body = scraperfunction.getimdbbody(title, movieyear, extrapossibleID, Preferences.imdbmirror, imdbCounter)
                        If BckWrkScnMovies.CancellationPending Then Exit Sub
                        Dim thisresult As XmlNode = Nothing
                        If body = "MIC" Then
                            progresstext &= " - ERROR!, please add Movie Manually!"
                            BckWrkScnMovies.ReportProgress(progress, progresstext)
                            scraperLog = scraperLog & "Unable to scrape body with refs """ & title & """, """ & movieyear & """, """ & extrapossibleID & """, """ & Preferences.imdbmirror & """" & vbCrLf
                            If imdbCounter < 50 Then
                                scraperLog = scraperLog & "Searching using Google" & vbCrLf
                            Else
                                scraperLog = scraperLog & "Google session limit reached, Searching using IMDB" & vbCrLf
                            End If
                            scraperLog = scraperLog & "To add the movie manually, go to the movie edit page and select ""Change Movie"" to manually select the correct movie" & vbCrLf
                            newmovie.fullmoviebody.genre = "problem"
                            If newmovie.fullmoviebody.title = Nothing Then
                                newmovie.fullmoviebody.title = "Unknown Title"
                            End If
                            If newmovie.fullmoviebody.title = "" Then
                                newmovie.fullmoviebody.title = "Unknown Title"
                            End If
                            If newmovie.fullmoviebody.year = Nothing Then
                                newmovie.fullmoviebody.year = "0000"
                            End If
                            If newmovie.fullmoviebody.rating = Nothing Then
                                newmovie.fullmoviebody.rating = "0"
                            End If
                            If newmovie.fullmoviebody.top250 = Nothing Then
                                newmovie.fullmoviebody.top250 = "0"
                            End If
                            If newmovie.fullmoviebody.playcount = Nothing Then
                                newmovie.fullmoviebody.playcount = "0"
                            End If
                            If newmovie.fullmoviebody.title = "Unknown Title" Then
                                newmovie.fullmoviebody.plot = "This Movie has could not be identified by Media Companion, to add the movie manually, go to the movie edit page and select ""Change Movie"" to manually select the correct movie"
                                If title <> Nothing Then
                                    If title = "" Then
                                        title = "Unknown Title"
                                    End If
                                Else
                                    title = "Unknown Title"
                                End If
                                newmovie.fullmoviebody.title = title

                            End If
                            If newmovie.fullmoviebody.title = "Unknown Title" Then
                                newmovie.fullmoviebody.genre = "Problem"
                            End If
                            If BckWrkScnMovies.CancellationPending Then
                                scraperLog = scraperLog & vbCrLf & "Operation cancelled by user"
                                Exit Sub
                            End If
                            Dim myDate2 As Date = System.DateTime.Now
                            Try
                                newmovie.fileinfo.createdate = Format(myDate2, "yyyyMMddHHmmss").ToString
                            Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                            End Try
                            nfoFunction.mov_NfoSave(nfopath, newmovie, True)

                            Dim movietoadd As New str_ComboList(SetDefaults)
                            movietoadd.fullpathandfilename = nfopath
                            movietoadd.filename = IO.Path.GetFileName(newMovieList(f).nfopathandfilename)
                            movietoadd.foldername = Utilities.GetLastFolder(newMovieList(f).nfopathandfilename)
                            movietoadd.title = newmovie.fullmoviebody.title
                            If newmovie.fullmoviebody.title <> Nothing Then
                                If newmovie.fullmoviebody.year <> Nothing Then
                                    movietoadd.titleandyear = newmovie.fullmoviebody.title & " (" & newmovie.fullmoviebody.year & ")"
                                Else
                                    movietoadd.titleandyear = newmovie.fullmoviebody.title & " (0000)"
                                End If
                            Else
                                movietoadd.titleandyear = "Unknown (0000)"
                            End If

                            movietoadd.year = newmovie.fullmoviebody.year

                            Dim filecreation As New IO.FileInfo(newMovieList(f).nfopathandfilename)
                            Dim myDate As Date = filecreation.LastWriteTime
                            Try
                                movietoadd.filedate = Format(myDate, "yyyyMMddHHmmss").ToString
                            Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                            End Try
                            myDate2 = System.DateTime.Now
                            Try
                                movietoadd.createdate = Format(myDate2, "yyyyMMddHHmmss").ToString
                            Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                            End Try
                            movietoadd.sortorder = newmovie.fullmoviebody.title
                            movietoadd.originaltitle = newmovie.fullmoviebody.title
                            movietoadd.outline = newmovie.fullmoviebody.outline
                            movietoadd.plot = newmovie.fullmoviebody.plot
                            movietoadd.id = newmovie.fullmoviebody.imdbid
                            movietoadd.rating = newmovie.fullmoviebody.rating
                            movietoadd.top250 = newmovie.fullmoviebody.top250
                            movietoadd.genre = newmovie.fullmoviebody.genre
                            movietoadd.playcount = newmovie.fullmoviebody.playcount
                            movietoadd.missingdata1 = 3
                            movietoadd.runtime = "0"
                            fullMovieList.Add(movietoadd)
                            If BckWrkScnMovies.CancellationPending Then
                                scraperLog = scraperLog & vbCrLf & "Operation cancelled by user"
                                Exit Sub
                            End If
                        Else
                            Try
                                progresstext &= " - OK!"            'movie scraped OK
                                BckWrkScnMovies.ReportProgress(progress, progresstext)
                                scraperLog = scraperLog & "Movie Body Scraped OK"
                                thumbstring.LoadXml(body)
                                For Each thisresult In thumbstring("movie")
                                    Select Case thisresult.Name
                                        Case "title"
                                            If Preferences.keepfoldername = False Then
                                                newmovie.fullmoviebody.title = thisresult.InnerText
                                            Else
                                                If Preferences.usefoldernames = False Then
                                                    tempstring = IO.Path.GetFileName(newMovieList(f).nfopathandfilename)
                                                    newmovie.fullmoviebody.title = Utilities.CleanFileName(tempstring, False)
                                                Else
                                                    newmovie.fullmoviebody.title = Utilities.CleanFileName(Utilities.GetLastFolder(newMovieList(f).nfopathandfilename), False)
                                                End If
                                            End If
                                        Case "originaltitle"
                                            newmovie.fullmoviebody.originaltitle = thisresult.InnerText
                                        Case "alternativetitle"
                                            newmovie.alternativetitles.Add(thisresult.InnerText)
                                        Case "country"
                                            newmovie.fullmoviebody.country = thisresult.InnerText
                                        Case "credits"
                                            newmovie.fullmoviebody.credits = thisresult.InnerText
                                        Case "director"
                                            newmovie.fullmoviebody.director = thisresult.InnerText
                                        Case "stars"
                                            newmovie.fullmoviebody.stars = thisresult.InnerText
                                        Case "genre"
                                            Dim strarr() As String
                                            strarr = thisresult.InnerText.Split("/")
                                            For count = 0 To strarr.Length - 1
                                                strarr(count) = strarr(count).Replace(" ", "")
                                            Next
                                            If strarr.Length <= Preferences.maxmoviegenre Then
                                                newmovie.fullmoviebody.genre = thisresult.InnerText
                                            Else
                                                For g = 0 To Preferences.maxmoviegenre - 1
                                                    If g = 0 Then
                                                        newmovie.fullmoviebody.genre = strarr(g)
                                                    Else
                                                        newmovie.fullmoviebody.genre += " / " & strarr(g)
                                                    End If
                                                Next
                                            End If
                                        Case "mpaa"
                                            newmovie.fullmoviebody.mpaa = thisresult.InnerText
                                        Case "outline"
                                            newmovie.fullmoviebody.outline = thisresult.InnerText
                                        Case "plot"
                                            newmovie.fullmoviebody.plot = thisresult.InnerText
                                        Case "premiered"
                                            newmovie.fullmoviebody.premiered = thisresult.InnerText
                                        Case "rating"
                                            newmovie.fullmoviebody.rating = thisresult.InnerText
                                        Case "runtime"
                                            newmovie.fullmoviebody.runtime = thisresult.InnerText
                                            If newmovie.fullmoviebody.runtime.IndexOf(":") <> -1 Then
                                                Try
                                                    newmovie.fullmoviebody.runtime = newmovie.fullmoviebody.runtime.Substring(newmovie.fullmoviebody.runtime.IndexOf(":") + 1, newmovie.fullmoviebody.runtime.Length - newmovie.fullmoviebody.runtime.IndexOf(":") - 1)
                                                Catch ex As Exception
#If SilentErrorScream Then
                                                Throw ex
#End If
                                                End Try
                                            End If
                                        Case "studio"
                                            newmovie.fullmoviebody.studio = thisresult.InnerText
                                        Case "tagline"
                                            newmovie.fullmoviebody.tagline = thisresult.InnerText
                                        Case "top250"
                                            newmovie.fullmoviebody.top250 = thisresult.InnerText
                                        Case "votes"
                                            newmovie.fullmoviebody.votes = thisresult.InnerText
                                        Case "year"
                                            newmovie.fullmoviebody.year = thisresult.InnerText
                                        Case "id"
                                            newmovie.fullmoviebody.imdbid = thisresult.InnerText
                                        Case "cert"
                                            certificates.Add(thisresult.InnerText)
                                    End Select
                                Next
                                ' If plot is empty, use outline
                                If newmovie.fullmoviebody.plot = "" Then newmovie.fullmoviebody.plot = newmovie.fullmoviebody.outline

                            Catch ex As Exception
                                scraperLog = scraperLog & "Error with " & newMovieList(f).nfopathandfilename & vbCrLf
                                scraperLog = scraperLog & "An error was encountered at stage 1, Downloading Movie Body" & vbCrLf
                                scraperLog = scraperLog & ex.Message.ToString & vbCrLf & vbCrLf
                                errorcounter += 1
                                If Preferences.usefoldernames = False Then
                                    tempstring = IO.Path.GetFileName(newMovieList(f).nfopathandfilename)
                                    newmovie.fullmoviebody.title = Utilities.CleanFileName(tempstring, False)

                                Else
                                    newmovie.fullmoviebody.title = Utilities.CleanFileName(Utilities.GetLastFolder(newMovieList(f).nfopathandfilename), False)

                                End If
                            End Try
                            If newmovie.fullmoviebody.playcount = Nothing Then newmovie.fullmoviebody.playcount = "0"
                            If newmovie.fullmoviebody.top250 = Nothing Then newmovie.fullmoviebody.top250 = "0"

                            Dim done As Boolean = False
                            For g = 0 To UBound(Preferences.certificatepriority)
                                For Each cert In certificates
                                    If cert.IndexOf(Preferences.certificatepriority(g)) <> -1 Then
                                        newmovie.fullmoviebody.mpaa = cert.Substring(cert.IndexOf("|") + 1, cert.Length - cert.IndexOf("|") - 1)
                                        done = True
                                        Exit For
                                    End If
                                Next
                                If done = True Then Exit For
                            Next
                            If Preferences.keepfoldername = True Then
                                If Preferences.usefoldernames = False Then
                                    tempstring = IO.Path.GetFileName(newMovieList(f).nfopathandfilename)
                                    newmovie.fullmoviebody.title = Utilities.CleanFileName(tempstring)

                                Else
                                    newmovie.fullmoviebody.title = Utilities.CleanFileName(Utilities.GetLastFolder(newMovieList(f).nfopathandfilename))

                                End If
                            End If
                            stage = 2
                            'stage 2 = get movie actors
                            progresstext &= " * Actors"
                            BckWrkScnMovies.ReportProgress(progress, progresstext)
                            actorlist = scraperfunction.getimdbactors(Preferences.imdbmirror, newmovie.fullmoviebody.imdbid, newmovie.fullmoviebody.title, Preferences.maxactors)
                            Try
                                thumbstring.LoadXml(actorlist)
                                thisresult = Nothing
                                Dim actorcount As Integer = 0
                                For Each thisresult In thumbstring("actorlist")
                                    Select Case thisresult.Name
                                        Case "actor"
                                            If actorcount > Preferences.maxactors Then
                                                Exit For
                                            End If
                                            actorcount += 1
                                            Dim newactor As New str_MovieActors(SetDefaults)
                                            Dim detail As XmlNode = Nothing
                                            For Each detail In thisresult.ChildNodes
                                                Select Case detail.Name
                                                    Case "name"
                                                        newactor.actorname = detail.InnerText
                                                    Case "role"
                                                        newactor.actorrole = detail.InnerText
                                                    Case "thumb"
                                                        newactor.actorthumb = detail.InnerText
                                                    Case "actorid"
                                                        If newactor.actorthumb <> Nothing Then
                                                            If detail.InnerText <> "" And Preferences.actorseasy = True Then
                                                                Dim workingpath As String = newMovieList(f).nfopathandfilename.Replace(IO.Path.GetFileName(newMovieList(f).nfopathandfilename), "")
                                                                workingpath = workingpath & ".actors\"
                                                                Dim hg As New IO.DirectoryInfo(workingpath)
                                                                Dim destsorted As Boolean = False
                                                                If Not hg.Exists Then
                                                                    Try
                                                                        IO.Directory.CreateDirectory(workingpath)
                                                                        destsorted = True
                                                                    Catch ex As Exception
#If SilentErrorScream Then
                                                                    Throw ex
#End If
                                                                    End Try
                                                                Else
                                                                    destsorted = True
                                                                End If
                                                                If destsorted = True Then
                                                                    Dim filename As String = newactor.actorname.Replace(" ", "_")
                                                                    filename = filename & ".tbn"
                                                                    filename = IO.Path.Combine(workingpath, filename)
                                                                    If Not IO.File.Exists(filename) Then
                                                                        Utilities.DownloadFile(newactor.actorthumb, filename)
'                                                                        Try
'                                                                            Dim buffer(4000000) As Byte
'                                                                            Dim size As Integer = 0
'                                                                            Dim bytesRead As Integer = 0
'                                                                            Dim thumburl As String = newactor.actorthumb
'                                                                            Dim req As HttpWebRequest = WebRequest.Create(thumburl)
'                                                                            Dim res As HttpWebResponse = req.GetResponse()
'                                                                            Dim contents As Stream = res.GetResponseStream()
'                                                                            Dim bytesToRead As Integer = CInt(buffer.Length)
'                                                                            While bytesToRead > 0
'                                                                                size = contents.Read(buffer, bytesRead, bytesToRead)
'                                                                                If size = 0 Then Exit While
'                                                                                bytesToRead -= size
'                                                                                bytesRead += size
'                                                                            End While

'                                                                            Dim fstrm As New FileStream(filename, FileMode.OpenOrCreate, FileAccess.Write)
'                                                                            fstrm.Write(buffer, 0, bytesRead)
'                                                                            contents.Close()
'                                                                            fstrm.Close()
'                                                                        Catch ex As Exception
'#If SilentErrorScream Then
'                                                                                                                                                Throw ex
'#End If
'                                                                        End Try
                                                                    End If
                                                                End If
                                                            End If
                                                            If Preferences.actorsave = True And detail.InnerText <> "" And Preferences.actorseasy = False Then
                                                                Dim workingpath As String = ""
                                                                Dim networkpath As String = Preferences.actorsavepath
                                                                Try
                                                                    tempstring = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2)
                                                                    Dim hg As New IO.DirectoryInfo(tempstring)
                                                                    If Not hg.Exists Then
                                                                        IO.Directory.CreateDirectory(tempstring)
                                                                    End If
                                                                    workingpath = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                                    If Not IO.File.Exists(workingpath) Then
                                                                        Utilities.DownloadFile(newactor.actorthumb, workingpath)
                                                                        'Dim buffer(4000000) As Byte
                                                                        'Dim size As Integer = 0
                                                                        'Dim bytesRead As Integer = 0
                                                                        'Dim thumburl As String = newactor.actorthumb
                                                                        'Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                                                        'Dim res As HttpWebResponse = req.GetResponse()
                                                                        'Dim contents As Stream = res.GetResponseStream()
                                                                        'Dim bytesToRead As Integer = CInt(buffer.Length)
                                                                        'While bytesToRead > 0
                                                                        '    size = contents.Read(buffer, bytesRead, bytesToRead)
                                                                        '    If size = 0 Then Exit While
                                                                        '    bytesToRead -= size
                                                                        '    bytesRead += size
                                                                        'End While

                                                                        'Dim fstrm As New FileStream(workingpath, FileMode.OpenOrCreate, FileAccess.Write)
                                                                        'fstrm.Write(buffer, 0, bytesRead)
                                                                        'contents.Close()
                                                                        'fstrm.Close()
                                                                    End If
                                                                    newactor.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, detail.InnerText.Substring(detail.InnerText.Length - 2, 2))
                                                                    If Preferences.actornetworkpath.IndexOf("/") <> -1 Then
                                                                        newactor.actorthumb = Preferences.actornetworkpath & "/" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "/" & detail.InnerText & ".jpg"
                                                                    Else
                                                                        newactor.actorthumb = Preferences.actornetworkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                                    End If
                                                                Catch ex As Exception
#If SilentErrorScream Then
                                                                Throw ex
#End If
                                                                End Try
                                                            End If
                                                        End If
                                                End Select
                                            Next
                                            newmovie.listactors.Add(newactor)

                                    End Select
                                Next
                                progresstext &= " - OK!"                                    'actors scraped OK
                                BckWrkScnMovies.ReportProgress(progress, progresstext)
                                scraperLog = scraperLog & "Actors scraped OK"
                                While newmovie.listactors.Count > Preferences.maxactors
                                    newmovie.listactors.RemoveAt(newmovie.listactors.Count - 1)
                                End While
                                For Each actor In newmovie.listactors
                                    Dim actornew As New str_ActorDatabase(SetDefaults)
                                    actornew.actorname = actor.actorname
                                    actornew.movieid = newmovie.fullmoviebody.imdbid
                                    actorDB.Add(actornew)
                                Next
                            Catch ex As Exception
                                scraperLog = scraperLog & "Error with " & newMovieList(f).nfopathandfilename & vbCrLf
                                scraperLog = scraperLog & "An error was encountered at stage 2, Downloading Actors" & vbCrLf
                                scraperLog = scraperLog & ex.Message.ToString & vbCrLf & vbCrLf
                                errorcounter += 1
                                newmovie.listactors.Clear()
                            End Try


                            stage = 3
                            'stage 3 = get movie trailer

                            If BckWrkScnMovies.CancellationPending Then
                                scraperLog = scraperLog & vbCrLf & "Operation cancelled by user"
                                Exit Sub
                            End If
                            Try
                                If Preferences.gettrailer = True Then
                                    progresstext &= " * Trailer"
                                    BckWrkScnMovies.ReportProgress(progress, progresstext)
                                    trailer = scraperfunction.gettrailerurl(newmovie.fullmoviebody.imdbid, Preferences.imdbmirror)
                                    If trailer <> Nothing Then
                                        newmovie.fullmoviebody.trailer = trailer
                                        progresstext &= " - OK"
                                        BckWrkScnMovies.ReportProgress(progress, progresstext)
                                        scraperLog = scraperLog & "Trailer URL Scraped OK" & vbCrLf
                                    End If
                                End If
                            Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                            End Try
                            stage = 4
                            'stage 4 = get movie thumblist(for nfo)
                            If BckWrkScnMovies.CancellationPending Then
                                scraperLog = scraperLog & vbCrLf & "Operation cancelled by user"
                                Exit Sub
                            End If
                            If Preferences.nfoposterscraper <> 0 Then
                                progresstext &= " * Thumb"
                                BckWrkScnMovies.ReportProgress(progress, progresstext)
                                Dim thumbs As String = ""
                                If Preferences.nfoposterscraper = 1 Or Preferences.nfoposterscraper = 3 Or Preferences.nfoposterscraper = 5 Or Preferences.nfoposterscraper = 7 Or Preferences.nfoposterscraper = 9 Or Preferences.nfoposterscraper = 11 Or Preferences.nfoposterscraper = 13 Or Preferences.nfoposterscraper = 15 Then
                                    Dim newobject3 As New IMPA.getimpaposters
                                    Dim teststring As New XmlDocument
                                    Dim testthumbs As String
                                    Try
                                        testthumbs = newobject3.getimpathumbs(newmovie.fullmoviebody.title, newmovie.fullmoviebody.year)
                                        Dim testthumbs2 As String = "<totalthumbs>" & testthumbs & "</totalthumbs>"
                                        teststring.LoadXml(testthumbs2)
                                        thumbs = thumbs & testthumbs.ToString
                                    Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                        Thread.Sleep(1)
                                    End Try
                                End If

                                If Preferences.nfoposterscraper = 2 Or Preferences.nfoposterscraper = 3 Or Preferences.nfoposterscraper = 6 Or Preferences.nfoposterscraper = 7 Or Preferences.nfoposterscraper = 10 Or Preferences.nfoposterscraper = 11 Or Preferences.nfoposterscraper = 14 Or Preferences.nfoposterscraper = 15 Then
                                    Dim newobject2 As New tmdb_posters.Class1
                                    Dim teststring As New XmlDocument
                                    Dim testthumbs As String
                                    Try
                                        testthumbs = newobject2.gettmdbposters_newapi(newmovie.fullmoviebody.imdbid)
                                        Dim bannerslist As New XmlDocument
                                        bannerslist.LoadXml(testthumbs)
                                        Dim templist As String = ""
                                        For Each item In bannerslist("tmdb_posterlist")
                                            Select Case item.name
                                                Case "poster"
                                                    For Each img In item
                                                        If img.childnodes(0).innertext = "original" Then
                                                            templist = templist & "<thumbs>" & img.childnodes(1).innertext & "</thumbs>"
                                                        End If
                                                    Next
                                            End Select
                                        Next
                                        thumbs = thumbs & templist.ToString
                                    Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                        Thread.Sleep(1)
                                    End Try
                                End If

                                If Preferences.nfoposterscraper = 4 Or Preferences.nfoposterscraper = 5 Or Preferences.nfoposterscraper = 6 Or Preferences.nfoposterscraper = 7 Or Preferences.nfoposterscraper = 12 Or Preferences.nfoposterscraper = 13 Or Preferences.nfoposterscraper = 14 Or Preferences.nfoposterscraper = 15 Then
                                    Dim newobject As New class_mpdb_thumbs.Class1
                                    Dim teststring As New XmlDocument
                                    Dim testthumbs As String
                                    Try
                                        testthumbs = newobject.get_mpdb_thumbs(newmovie.fullmoviebody.imdbid)
                                        Dim testthumbs2 As String = "<totalthumbs>" & testthumbs & "</totalthumbs>"
                                        teststring.LoadXml(testthumbs2)
                                        thumbs = thumbs & testthumbs.ToString
                                    Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                        Thread.Sleep(1)
                                    End Try
                                End If

                                If Preferences.nfoposterscraper = 8 Or Preferences.nfoposterscraper = 9 Or Preferences.nfoposterscraper = 10 Or Preferences.nfoposterscraper = 11 Or Preferences.nfoposterscraper = 12 Or Preferences.nfoposterscraper = 13 Or Preferences.nfoposterscraper = 14 Or Preferences.nfoposterscraper = 15 Then
                                    Dim thumbscraper As New imdb_thumbs.Class1
                                    Dim teststring As New XmlDocument
                                    Try
                                        Dim testthumbs As String
                                        testthumbs = thumbscraper.getimdbthumbs(newmovie.fullmoviebody.title, newmovie.fullmoviebody.year, newmovie.fullmoviebody.imdbid)
                                        Dim testthumbs2 As String = "<totalthumbs>" & testthumbs & "</totalthumbs>"
                                        teststring.LoadXml(testthumbs2)
                                        thumbs = thumbs & testthumbs.ToString
                                    Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                        Thread.Sleep(1)
                                    End Try
                                End If




                                thumbs = "<thumblist>" & thumbs & "</thumblist>"

                                Try
                                    thumbstring.LoadXml(thumbs)



                                    For Each thisresult In thumbstring("thumblist")
                                        Select Case thisresult.Name
                                            Case "thumb"
                                                newmovie.listthumbs.Add(thisresult.InnerText)
                                        End Select
                                    Next
                                    progresstext &= " - OK"
                                    BckWrkScnMovies.ReportProgress(progress, progresstext)
                                    scraperLog = scraperLog & "Poster URLs Scraped OK" & vbCrLf
                                Catch ex As Exception
                                    scraperLog = scraperLog & "Error with " & newMovieList(f).nfopathandfilename & vbCrLf
                                    scraperLog = scraperLog & "An error was encountered at stage 4, Downloading poster list for nfo file" & vbCrLf
                                    scraperLog = scraperLog & ex.Message.ToString & vbCrLf & vbCrLf
                                    errorcounter += 1
                                    newmovie.listthumbs.Clear()
                                End Try
                            End If
                            stage = 5
                            'stage 5 = get hd tags
                            Try
                                Dim tempsa As String = IO.Path.GetFileName(newMovieList(f).mediapathandfilename)
                                Dim tempsb As String = newMovieList(f).mediapathandfilename.Replace(IO.Path.GetFileName(newMovieList(f).mediapathandfilename), "")
                                tempsb = IO.Path.Combine(tempsb, "tempoffline.ttt")
                                If Not IO.File.Exists(tempsb) Then

                                    newmovie.filedetails = Preferences.Get_HdTags(newMovieList(f).mediapathandfilename)
                                    If newmovie.filedetails.filedetails_video.DurationInSeconds.Value <> Nothing And Preferences.movieRuntimeDisplay = "file" Then
                                        Try
                                            progresstext &= " - HD tags"
                                            BckWrkScnMovies.ReportProgress(progress, progresstext)
                                            '1h 24mn 48s 546ms
                                            'Dim hours As Integer = 0
                                            'Dim minutes As Integer = 0
                                            'tempstring = newmovie.filedetails.filedetails_video.DurationInSeconds.Value
                                            'tempint = tempstring.IndexOf("h")
                                            'If tempint <> -1 Then
                                            '    hours = Convert.ToInt32(tempstring.Substring(0, tempint))
                                            '    tempstring = tempstring.Substring(tempint + 1, tempstring.Length - (tempint + 1))
                                            '    tempstring = Trim(tempstring)
                                            'End If
                                            'tempint = tempstring.IndexOf("mn")
                                            'If tempint <> -1 Then
                                            '    minutes = Convert.ToInt32(tempstring.Substring(0, tempint))
                                            'End If
                                            'If hours <> 0 Then
                                            '    hours = hours * 60
                                            'End If
                                            'minutes = minutes + hours
                                            'If minutes = 0 Then
                                            '    If tempstring.IndexOf("min") <> -1 Then
                                            '        tempstring = tempstring.Replace("min", "")
                                            '        tempstring = tempstring.Replace(" ", "")
                                            '        If IsNumeric(tempstring) Then
                                            '            minutes = Convert.ToInt32(tempstring)
                                            '        End If
                                            '    End If
                                            'End If
                                            newmovie.fullmoviebody.runtime = Utilities.cleanruntime(newmovie.filedetails.filedetails_video.DurationInSeconds.Value) & " min"
                                            progresstext &= " - OK"
                                            BckWrkScnMovies.ReportProgress(progress, progresstext)
                                            scraperLog = scraperLog & "HD Tags Added OK" & vbCrLf
                                        Catch ex As Exception
                                            scraperLog = scraperLog & "Error getting HD Tags:- " & ex.Message.ToString & vbCrLf
                                        End Try
                                    End If
                                End If
                            Catch ex As Exception
                                scraperLog = scraperLog & "Error getting HD Tags:- " & ex.Message.ToString & vbCrLf
                            End Try

                            If newmovie.fullmoviebody.title = Nothing Then
                                newmovie.fullmoviebody.title = "Unknown Title"
                            End If
                            If newmovie.fullmoviebody.title = "" Then
                                newmovie.fullmoviebody.title = "Unknown Title"
                            End If

                            If newmovie.fullmoviebody.year = Nothing Then
                                newmovie.fullmoviebody.year = "0000"
                            End If
                            If newmovie.fullmoviebody.rating = Nothing Then
                                newmovie.fullmoviebody.rating = "0"
                            End If
                            If newmovie.fullmoviebody.top250 = Nothing Then
                                newmovie.fullmoviebody.top250 = "0"
                            End If
                            If newmovie.fullmoviebody.playcount = Nothing Then
                                newmovie.fullmoviebody.playcount = "0"
                            End If
                            If newmovie.fullmoviebody.title = "Unknown Title" Then
                                newmovie.fullmoviebody.plot = "This Movie has could not be identified by Media Companion, to add the movie manually, go to the movie edit page and select ""Change Movie"" to manually select the correct movie"
                                If title <> Nothing Then
                                    If title = "" Then
                                        title = "Unknown Title"
                                    End If
                                Else
                                    title = "Unknown Title"
                                End If
                                newmovie.fullmoviebody.title = title

                            End If
                            If newmovie.fullmoviebody.title = "Unknown Title" Then
                                newmovie.fullmoviebody.genre = "Problem"
                            End If
                            Dim myDate2 As Date = System.DateTime.Now
                            Try
                                newmovie.fileinfo.createdate = Format(myDate2, "yyyyMMddHHmmss").ToString
                            Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                            End Try
                            nfoFunction.mov_NfoSave(nfopath, newmovie, True)



                            Dim movietoadd As New str_ComboList(SetDefaults)
                            movietoadd.fullpathandfilename = nfopath
                            movietoadd.filename = IO.Path.GetFileName(newMovieList(f).nfopathandfilename)
                            movietoadd.foldername = Utilities.GetLastFolder(newMovieList(f).nfopathandfilename)
                            movietoadd.title = newmovie.fullmoviebody.title
                            movietoadd.originaltitle = newmovie.fullmoviebody.originaltitle
                            movietoadd.sortorder = newmovie.fullmoviebody.sortorder
                            movietoadd.runtime = newmovie.fullmoviebody.runtime
                            If newmovie.fullmoviebody.title <> Nothing Then
                                If newmovie.fullmoviebody.year <> Nothing Then
                                    If newmovie.fullmoviebody.title.ToLower.IndexOf("the") = 0 Then
                                        movietoadd.titleandyear = newmovie.fullmoviebody.title.Substring(4, newmovie.fullmoviebody.title.Length - 4) & ", The (" & newmovie.fullmoviebody.year & ")"
                                    Else
                                        movietoadd.titleandyear = newmovie.fullmoviebody.title & " (" & newmovie.fullmoviebody.year & ")"
                                    End If
                                Else
                                    movietoadd.titleandyear = newmovie.fullmoviebody.title & " (0000)"
                                End If
                                Else
                                    movietoadd.titleandyear = "Unknown (0000)"
                                End If
                            movietoadd.outline = newmovie.fullmoviebody.outline
                            movietoadd.plot = newmovie.fullmoviebody.plot
                            movietoadd.year = newmovie.fullmoviebody.year



                            Dim filecreation As New IO.FileInfo(newMovieList(f).nfopathandfilename)
                            Dim myDate As Date = filecreation.LastWriteTime
                            Try
                                movietoadd.filedate = Format(myDate, "yyyyMMddHHmmss").ToString
                            Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                            End Try
                            myDate2 = System.DateTime.Now
                            Try
                                movietoadd.createdate = Format(myDate2, "yyyyMMddHHmmss").ToString
                            Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                            End Try



                            movietoadd.id = newmovie.fullmoviebody.imdbid
                            movietoadd.rating = newmovie.fullmoviebody.rating
                            movietoadd.top250 = newmovie.fullmoviebody.top250
                            movietoadd.genre = newmovie.fullmoviebody.genre
                            movietoadd.playcount = newmovie.fullmoviebody.playcount

                            If BckWrkScnMovies.CancellationPending Then Exit Sub



                            stage = 6
                            'stage 6 = download movieposter
                            Dim moviethumburl As String = ""
                            If Preferences.scrapemovieposters = True And Preferences.overwritethumbs = True Or IO.File.Exists(Preferences.GetPosterPath(newMovieList(f).nfopathandfilename)) = False Then
                                Try
                                    If BckWrkScnMovies.CancellationPending Then
                                        scraperLog = scraperLog & vbCrLf & "Operation cancelled by user"
                                        Exit Sub
                                    End If
                                    progresstext &= " * Poster"
                                    BckWrkScnMovies.ReportProgress(progress, progresstext)
                                    Select Case Preferences.moviethumbpriority(0)
                                        Case "Internet Movie Poster Awards"
                                            moviethumburl = scraperFunction2.impathumb(newmovie.fullmoviebody.title, newmovie.fullmoviebody.year)
                                        Case "IMDB"
                                            moviethumburl = scraperFunction2.imdbthumb(newmovie.fullmoviebody.imdbid)
                                        Case "Movie Poster DB"
                                            moviethumburl = scraperFunction2.mpdbthumb(newmovie.fullmoviebody.imdbid)
                                        Case "themoviedb.org"
                                            moviethumburl = scraperFunction2.tmdbthumb(newmovie.fullmoviebody.imdbid)
                                    End Select
                                Catch
                                    moviethumburl = "na"
                                End Try
                                Try
                                    If BckWrkScnMovies.CancellationPending Then
                                        scraperLog = scraperLog & vbCrLf & "Operation cancelled by user"
                                        Exit Sub
                                    End If
                                    If moviethumburl = "na" Then
                                        Select Case Preferences.moviethumbpriority(1)
                                            Case "Internet Movie Poster Awards"
                                                moviethumburl = scraperFunction2.impathumb(newmovie.fullmoviebody.title, newmovie.fullmoviebody.year)
                                            Case "IMDB"
                                                moviethumburl = scraperFunction2.imdbthumb(newmovie.fullmoviebody.imdbid)
                                            Case "Movie Poster DB"
                                                moviethumburl = scraperFunction2.mpdbthumb(newmovie.fullmoviebody.imdbid)
                                            Case "themoviedb.org"
                                                moviethumburl = scraperFunction2.tmdbthumb(newmovie.fullmoviebody.imdbid)
                                        End Select
                                    End If
                                Catch
                                    moviethumburl = "na"
                                End Try
                                Try
                                    If BckWrkScnMovies.CancellationPending Then
                                        scraperLog = scraperLog & vbCrLf & "Operation cancelled by user"
                                        Exit Sub
                                    End If
                                    If moviethumburl = "na" Then
                                        Select Case Preferences.moviethumbpriority(2)
                                            Case "Internet Movie Poster Awards"
                                                moviethumburl = scraperFunction2.impathumb(newmovie.fullmoviebody.title, newmovie.fullmoviebody.year)
                                            Case "IMDB"
                                                moviethumburl = scraperFunction2.imdbthumb(newmovie.fullmoviebody.imdbid)
                                            Case "Movie Poster DB"
                                                moviethumburl = scraperFunction2.mpdbthumb(newmovie.fullmoviebody.imdbid)
                                            Case "themoviedb.org"
                                                moviethumburl = scraperFunction2.tmdbthumb(newmovie.fullmoviebody.imdbid)
                                        End Select
                                    End If
                                Catch
                                    moviethumburl = "na"
                                End Try
                                Try
                                    If BckWrkScnMovies.CancellationPending Then
                                        scraperLog = scraperLog & vbCrLf & "Operation cancelled by user"
                                        Exit Sub
                                    End If
                                    If moviethumburl = "na" Then
                                        Select Case Preferences.moviethumbpriority(3)
                                            Case "Internet Movie Poster Awards"
                                                moviethumburl = scraperFunction2.impathumb(newmovie.fullmoviebody.title, newmovie.fullmoviebody.year)
                                            Case "IMDB"
                                                moviethumburl = scraperFunction2.imdbthumb(newmovie.fullmoviebody.imdbid)
                                            Case "Movie Poster DB"
                                                moviethumburl = scraperFunction2.mpdbthumb(newmovie.fullmoviebody.imdbid)
                                            Case "themoviedb.org"
                                                moviethumburl = scraperFunction2.tmdbthumb(newmovie.fullmoviebody.imdbid)
                                        End Select
                                    End If
                                Catch
                                    moviethumburl = "na"
                                End Try
                                Try
                                    If BckWrkScnMovies.CancellationPending Then
                                        scraperLog = scraperLog & vbCrLf & "Operation cancelled by user"
                                        Exit Sub
                                    End If
                                    If moviethumburl <> "" And moviethumburl <> "na" Then
                                        Dim newmoviethumbpath As String = Preferences.GetPosterPath(newMovieList(f).nfopathandfilename)
                                        Try
                                            'Utilities.DownloadFile(moviethumburl, posterpath)
                                            Dim buffer(4000000) As Byte
                                            Dim size As Integer = 0
                                            Dim bytesRead As Integer = 0
                                            Dim thumburl As String = moviethumburl
                                            Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                            Dim res As HttpWebResponse = req.GetResponse()
                                            Dim contents As Stream = res.GetResponseStream()
                                            Dim bytesToRead As Integer = CInt(buffer.Length)
                                            While bytesToRead > 0
                                                size = contents.Read(buffer, bytesRead, bytesToRead)
                                                If size = 0 Then Exit While
                                                bytesToRead -= size
                                                bytesRead += size
                                            End While
                                            'scraperlog = scraperlog & "Downloading Movie Thumbnail at URL :- " & newmoviethumbpath & vbCrLf
                                            'scraperlog = scraperlog & "Unable to Download Thumb" & vbCrLf
                                            'scraperlog = scraperlog & "Saving Thumbnail To Path :- " & newmoviethumbpath & vbCrLf
                                            Dim fstrm As New FileStream(posterpath, FileMode.OpenOrCreate, FileAccess.Write)
                                            fstrm.Write(buffer, 0, bytesRead)
                                            contents.Close()
                                            fstrm.Close()

                                            progresstext &= " - OK"
                                            BckWrkScnMovies.ReportProgress(progress, progresstext)

                                            scraperLog = scraperLog & "Poster scraped and saved OK" & vbCrLf

                                            Dim temppath As String = newmoviethumbpath.Replace(System.IO.Path.GetFileName(newmoviethumbpath), "folder.jpg")
                                            If Preferences.createfolderjpg = True Then
                                                If Preferences.overwritethumbs = True Or System.IO.File.Exists(temppath) = False Then
                                                    scraperLog = scraperLog & "Saving folder.jpg To Path :- " & temppath & vbCrLf
                                                    Dim fstrm2 As New FileStream(temppath, FileMode.OpenOrCreate, FileAccess.Write)
                                                    fstrm2.Write(buffer, 0, bytesRead)
                                                    contents.Close()
                                                    fstrm2.Close()
                                                    scraperLog = scraperLog & "Poster also saved as ""folder.jpg"" OK" & vbCrLf
                                                Else
                                                    scraperLog = scraperLog & "folder.jpg Not Saved to :- " & temppath & ", file already exists" & vbCrLf
                                                End If
                                            End If
                                        Catch ex As Exception
                                            scraperLog = scraperLog & "Problem Saving Thumbnail" & vbCrLf
                                            scraperLog = scraperLog & "Error Returned :- " & ex.ToString & vbCrLf & vbCrLf
                                        End Try
                                    End If
                                Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                                End Try
                            End If




                            stage = 7
                            'stage 7 = download fanart
                            If Preferences.overwritethumbs = True Or Preferences.overwritethumbs = False And IO.File.Exists(Preferences.GetFanartPath(newMovieList(f).nfopathandfilename)) = False Then
                                If Preferences.savefanart = False Then
                                    'scraperlog = scraperlog & "Fanart Not Downloaded - Disabled in preferences, use browser to find and add Fanart" & vbCrLf
                                Else
                                    Try
                                        If BckWrkScnMovies.CancellationPending Then
                                            scraperLog = scraperLog & vbCrLf & "Operation cancelled by user"
                                            Exit Sub
                                        End If

                                        progresstext &= " * Fanart"
                                        BckWrkScnMovies.ReportProgress(progress, progresstext)

                                        Dim moviefanartexists As Boolean
                                        Dim fanarturlpath As String = Preferences.GetFanartPath(newMovieList(f).nfopathandfilename)

                                        moviethumburl = ""
                                        moviefanartexists = System.IO.File.Exists(fanarturlpath)
                                        If moviefanartexists = False Or Preferences.overwritethumbs = True Then

                                            Dim temp As String = newmovie.fullmoviebody.imdbid

                                            Dim fanarturl As String = "http://api.themoviedb.org/2.1/Movie.imdbLookup/en/xml/3f026194412846e530a208cf8a39e9cb/" & temp
                                            Dim apple2(2000) As String
                                            Dim fanartlinecount As Integer = 0
                                            Try
                                                Dim wrGETURL As WebRequest

                                                wrGETURL = WebRequest.Create(fanarturl)
                                                Dim myProxy As New WebProxy("myproxy", 80)
                                                myProxy.BypassProxyOnLocal = True
                                                Dim objStream As Stream
                                                objStream = wrGETURL.GetResponse.GetResponseStream()
                                                Dim objReader As New StreamReader(objStream)
                                                Dim sLine As String = ""
                                                fanartlinecount = 0

                                                Do While Not sLine Is Nothing
                                                    fanartlinecount += 1
                                                    sLine = objReader.ReadLine
                                                    apple2(fanartlinecount) = sLine
                                                Loop

                                                fanartlinecount -= 1
                                                Dim fanartfound As Boolean = False
                                                For g = 1 To fanartlinecount
                                                    ' vou mudar para ser compativel com api 2.1'                                           If apple2(g).IndexOf("<backdrop size=""original"">") <> -1 Then
                                                    If apple2(g).IndexOf("<image type=""backdrop""") <> -1 Then
                                                        If apple2(g).IndexOf("size=""original""") <> -1 Then
                                                            Dim StartofURL As Integer = apple2(g).IndexOf("url=""") + 5
                                                            Dim EndofURL As Integer = apple2(g).IndexOf("size=""original""") - 2

                                                            '                                                    apple2(g) = apple2(g).Replace("<image type=""backdrop""", "")
                                                            '                                                    apple2(g) = apple2(g).Replace("</backdrop>", "")
                                                            '                                                    apple2(g) = apple2(g).Replace("  ", "")
                                                            apple2(g) = apple2(g).Substring(StartofURL, (EndofURL - StartofURL))
                                                            '                                                    Dim teste1 As String = apple2(g).Substring(posicaoinicial, 10)
                                                            '                                                    Dim teste2 As String = apple2(g).Substring(posicaoinicial, posicaofinal)
                                                            '                                                    Dim teste3 As String = apple2(g).Substring(posicaoinicial, ((posicaofinal - posicaoinicial) - 15))

                                                            apple2(g) = apple2(g).Trim
                                                            If apple2(g).ToLower.IndexOf("http") <> -1 And apple2(g).ToLower.IndexOf(".jpg") <> -1 Or apple2(g).IndexOf(".jpeg") <> -1 Or apple2(g).IndexOf(".png") <> -1 Then
                                                                moviethumburl = apple2(g)
                                                                fanartfound = True
                                                            End If
                                                        End If
                                                        Exit For
                                                    End If
                                                Next
                                                If fanartfound = False Then moviethumburl = ""
                                            Catch ex As Exception
#If SilentErrorScream Then
                                            Throw ex
#End If
                                            End Try

                                            If moviethumburl <> "" Then
                                                progresstext &= " - OK!"
                                                BckWrkScnMovies.ReportProgress(progress, progresstext)
                                                'scraperlog = scraperlog & "Fanart URL is " & fanarturl & vbCrLf
                                                scraperLog = scraperLog & "Saving Fanart As :- " & fanarturlpath & vbCrLf

                                                'need to resize thumbs

                                                Try
                                                    Dim buffer(8000000) As Byte
                                                    Dim size As Integer = 0
                                                    Dim bytesRead As Integer = 0

                                                    Dim thumburl As String = moviethumburl
                                                    Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                                    Dim res As HttpWebResponse = req.GetResponse()
                                                    Dim contents As Stream = res.GetResponseStream()
                                                    Dim bytesToRead As Integer = CInt(buffer.Length)
                                                    Dim bmp As New Bitmap(contents)



                                                    While bytesToRead > 0
                                                        size = contents.Read(buffer, bytesRead, bytesToRead)
                                                        If size = 0 Then Exit While
                                                        bytesToRead -= size
                                                        bytesRead += size
                                                    End While



                                                    If Preferences.resizefanart = 1 Then
                                                        bmp.Save(fanartpath, Imaging.ImageFormat.Jpeg)
                                                        scraperLog = scraperLog & "Fanart not resized" & vbCrLf
                                                    ElseIf Preferences.resizefanart = 2 Then
                                                        If bmp.Width > 1280 Or bmp.Height > 720 Then
                                                            Dim bm_source As New Bitmap(bmp)
                                                            Dim bm_dest As New Bitmap(1280, 720)
                                                            Dim gr As Graphics = Graphics.FromImage(bm_dest)
                                                            gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                                                            gr.DrawImage(bm_source, 0, 0, 1280 - 1, 720 - 1)
                                                            bm_dest.Save(fanarturlpath, Imaging.ImageFormat.Jpeg)
                                                            scraperLog = scraperLog & "Farart Resized to 1280x720" & vbCrLf
                                                        Else
                                                            scraperLog = scraperLog & "Fanart not resized, already =< required size" & vbCrLf
                                                            bmp.Save(fanarturlpath, Imaging.ImageFormat.Jpeg)
                                                        End If
                                                    ElseIf Preferences.resizefanart = 3 Then
                                                        If bmp.Width > 960 Or bmp.Height > 540 Then
                                                            Dim bm_source As New Bitmap(bmp)
                                                            Dim bm_dest As New Bitmap(960, 540)
                                                            Dim gr As Graphics = Graphics.FromImage(bm_dest)
                                                            gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                                                            gr.DrawImage(bm_source, 0, 0, 960 - 1, 540 - 1)
                                                            bm_dest.Save(fanarturlpath, Imaging.ImageFormat.Jpeg)
                                                            scraperLog = scraperLog & "Farart Resized to 960x540" & vbCrLf
                                                        Else
                                                            scraperLog = scraperLog & "Fanart not resized, already =< required size" & vbCrLf
                                                            bmp.Save(fanarturlpath, Imaging.ImageFormat.Jpeg)
                                                        End If

                                                    End If
                                                Catch ex As Exception
                                                    Try
                                                        scraperLog = scraperLog & "Fanart Not Saved to :- " & fanarturlpath & vbCrLf
                                                        scraperLog = scraperLog & "Error received :- " & ex.ToString & vbCrLf & vbCrLf
                                                    Catch ex2 As Exception
#If SilentErrorScream Then
                                                    Throw ex2
#End If
                                                    End Try
                                                End Try

                                            Else
                                                'scraperlog = scraperlog & "No Fanart is Available For This Movie" & moviethumbpath & vbCrLf
                                            End If
                                        Else
                                            'scraperlog = scraperlog & "Fanart Not Saved to :- " & moviethumbpath & ", file already exists" & vbCrLf
                                        End If

                                    Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                    End Try
                                End If

                            End If
                            Dim tempst As String = movietoadd.fullpathandfilename
                            tempst = tempst.Replace(IO.Path.GetFileName(tempst), "tempoffline.ttt")
                            If IO.File.Exists(tempst) Then
                                IO.File.Delete(tempst)
                                Call mov_OfflineDvdProcess(movietoadd.fullpathandfilename, movietoadd.title, Utilities.GetFileName(movietoadd.fullpathandfilename))
                            End If
                            Dim completebyte1 As Byte = 0
                            Dim fanartexists As Boolean = IO.File.Exists(Preferences.GetFanartPath(movietoadd.fullpathandfilename))
                            Dim posterexists As Boolean = IO.File.Exists(Preferences.GetPosterPath(movietoadd.fullpathandfilename))
                            If fanartexists = False Then
                                completebyte1 += 1
                            End If
                            If posterexists = False Then
                                completebyte1 += 2
                            End If
                            movietoadd.missingdata1 = completebyte1
                            fullMovieList.Add(movietoadd)
                        End If

                        scraperLog = scraperLog & "Movie added to list" & vbCrLf
                        progress = 999999
                        ' progresstext = String.Concat("Scraping Movie " & f + 1 & " of " & newmoviecount)
                        'BckWrkScnMovies.ReportProgress(progress, progresstext)
                    End If



                    'Catch ex As Exception
                    '    Dim stagestring As String = ""
                    '    Select Case stage
                    '        Case 0
                    '            scraperlog = scraperlog & "Error with " & newmovielist(f).nfopathandfilename & vbCrLf
                    '            scraperlog = scraperlog & "An error was encountered at stage 0, Starting movie scraper" & vbCrLf
                    '            scraperlog = scraperlog & ex.Message.ToString & vbCrLf & vbCrLf
                    '            errorcounter += 1
                    '        Case 1
                    '            scraperlog = scraperlog & "Error with " & newmovielist(f).nfopathandfilename & vbCrLf
                    '            scraperlog = scraperlog & "And error was encountered at stage 1, scraping the main movie body" & vbCrLf
                    '            scraperlog = scraperlog & ex.Message.ToString & vbCrLf & vbCrLf & vbCrLf
                    '            errorcounter += 1
                    '        Case 2
                    '            scraperlog = scraperlog & "Error with " & newmovielist(f).nfopathandfilename & vbCrLf
                    '            scraperlog = scraperlog & "And error was encountered at stage 2, scraping the movie actors" & vbCrLf
                    '            scraperlog = scraperlog & ex.Message.ToString & vbCrLf & vbCrLf & vbCrLf
                    '            errorcounter += 1
                    '        Case 3
                    '            scraperlog = scraperlog & "Error with " & newmovielist(f).nfopathandfilename & vbCrLf
                    '            scraperlog = scraperlog & "And error was encountered at stage 3, scraping the movie trailer" & vbCrLf
                    '            scraperlog = scraperlog & ex.Message.ToString & vbCrLf & vbCrLf & vbCrLf
                    '            errorcounter += 1
                    '        Case 4
                    '            scraperlog = scraperlog & "Error with " & newmovielist(f).nfopathandfilename & vbCrLf
                    '            scraperlog = scraperlog & "And error was encountered at stage 4, scraping list of movie posters" & vbCrLf
                    '            scraperlog = scraperlog & ex.Message.ToString & vbCrLf & vbCrLf & vbCrLf
                    '            errorcounter += 1
                    '        Case 5
                    '            scraperlog = scraperlog & "Error with " & newmovielist(f).nfopathandfilename & vbCrLf
                    '            scraperlog = scraperlog & "And error was encountered at stage 5, creating HD tags" & vbCrLf
                    '            scraperlog = scraperlog & ex.Message.ToString & vbCrLf & vbCrLf & vbCrLf
                    '            errorcounter += 1
                    '        Case 6
                    '            scraperlog = scraperlog & "Error with " & newmovielist(f).nfopathandfilename & vbCrLf
                    '            scraperlog = scraperlog & "And error was encountered at stage 6, downloading poster" & vbCrLf
                    '            scraperlog = scraperlog & ex.Message.ToString & vbCrLf & vbCrLf & vbCrLf
                    '            errorcounter += 1
                    '        Case 7
                    '            scraperlog = scraperlog & "Error with " & newmovielist(f).nfopathandfilename & vbCrLf
                    '            scraperlog = scraperlog & "And error was encountered at stage 7, downloading fanart" & vbCrLf
                    '            scraperlog = scraperlog & ex.Message.ToString & vbCrLf & vbCrLf & vbCrLf
                    '            errorcounter += 1
                    '    End Select
                    '    progress = 999999
                    '    progresstext = String.Concat("Scraping Movie " & f + 1 & " of " & newmoviecount)
                    '    BckWrkScnMovies.ReportProgress(progress, progresstext)
                    'End Try
                    scraperLog = scraperLog & vbCrLf & vbCrLf & vbCrLf

                Next

            End If
        End If
        scraperLog &= vbCrLf & "Search for New Movies Complete." & vbCrLf
    End Sub

    Private Sub ReloadMovieCacheToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ReloadMovieCacheToolStripMenuItem.Click
        Call mov_CacheReload()
    End Sub

    Private Sub mov_CacheReload()
        Dim movielist As New XmlDocument
        dList.Clear()
        fullMovieList.Clear()
        filteredList.Clear()


        movielist.Load(workingProfile.moviecache)
        Dim thisresult As XmlNode = Nothing
        For Each thisresult In movielist("movie_cache")
            Select Case thisresult.Name
                Case "movie"
                    Dim newmovie As New str_ComboList(SetDefaults)
                    Dim detail As XmlNode = Nothing
                    For Each detail In thisresult.ChildNodes
                        Select Case detail.Name
                            Case "filedate"
                                newmovie.filedate = detail.InnerText
                            Case "filename"
                                newmovie.filename = detail.InnerText
                            Case "foldername"
                                newmovie.foldername = detail.InnerText
                            Case "fullpathandfilename"
                                newmovie.fullpathandfilename = detail.InnerText
                            Case "genre"
                                newmovie.genre = detail.InnerText
                            Case "id"
                                newmovie.id = detail.InnerText
                            Case "playcount"
                                newmovie.playcount = detail.InnerText
                            Case "rating"
                                newmovie.rating = detail.InnerText
                            Case "title"
                                newmovie.title = detail.InnerText
                            Case "originaltitle"
                                newmovie.originaltitle = detail.InnerText
                            Case "titleandyear"
                                newmovie.titleandyear = detail.InnerText
                            Case "top250"
                                newmovie.top250 = detail.InnerText
                            Case "runtime"
                                newmovie.runtime = detail.InnerText
                            Case "outline"
                                newmovie.outline = detail.InnerText
                            Case "plot"
                                newmovie.plot = detail.InnerText
                            Case "year"
                                newmovie.year = detail.InnerText
                                'Dim allok As Boolean = False
                                'If IO.File.Exists(newmovie.fullpathandfilename) Then
                                fullMovieList.Add(newmovie)
                                filteredList.Add(newmovie)
                                'End If
                            Case "set"
                                newmovie.movieset = detail.InnerText
                            Case "sortorder"
                                newmovie.sortorder = detail.InnerText
                        End Select

                    Next
            End Select
        Next

        If fullMovieList.Count = 0 Then
            Call mov_CacheRebuild(movieFolders)
            Exit Sub
        End If

        Call mov_MovieComboListSort()
        Call mov_MovieComboLoad()
        Try
            'ignore = False
            MovieListComboBox.SelectedIndex = 0
            If MovieListComboBox.SelectedItem.value <> "" Then
                'loadinfofile()
            End If
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
    End Sub

    Private Sub mov_CacheRebuild(ByVal folderlist As List(Of String))
        Me.Enabled = False

        frmSplash2.Text = "Rebuild Movies..."
        frmSplash2.Label1.Text = "Searching for Movie Folders....."
        frmSplash2.Label2.Visible = False
        frmSplash2.Show()
        Application.DoEvents()

        dList.Clear()
        fullMovieList.Clear()
        filteredList.Clear()
        '----------------------------------------------Progess Bar Addition
        If Preferences.usefoldernames = True Then         'use TRUE if folder contains nfo's, False if folder contains folders which contain nfo's
            progressmode = False
        Else
            progressmode = True
        End If

        Call mov_NfoLoad(movieFolders, progressmode)


        frmSplash2.Label1.Text = "Searching for Offline Movie Folders....."
        Application.DoEvents()                                  ' If not called previous progress bar is not hidden as requested 
        progressmode = False                                            'offlines folders always are folders of folders that contain nfo's
        Call mov_NfoLoad(Preferences.offlinefolders, progressmode)
        Application.DoEvents()
        '----------------------------------------------

        frmSplash2.Label1.Text = "Processing...."
        Try
            For Each movie In fullMovieList
                Try
                    If Preferences.usefoldernames = False Then
                        If movie.filename <> Nothing Then
                            movie.filename = movie.filename.Replace(".nfo", "")
                            'Dim tempstring4 As String = ""                         'not sure of the purpose of this, tempstring4 is never used.....
                            'tempstring4 = movie.fullpathandfilename.ToLower
                        End If
                    End If
                Catch
                    Exit For
                End Try
            Next
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
        frmSplash2.Label2.Visible = True
        frmSplash2.Label2.Text = "Save Data..."
        Call mov_CacheSave()

        'Call sortorder()    ApplyFilters calls sortorder()
        frmSplash2.Label2.Text = "Apply Filters..."
        Call mov_FiltersAndSortApply()
        frmSplash2.Label2.Text = "Reload Main Page..."
        Call mov_FormPopulate()
        Try
            MovieListComboBox.SelectionMode = SelectionMode.One         'if we just select index 0 (the top one) & we already had selected another other than 0 before callingthis function then both will be selected
            MovieListComboBox.SelectedIndex = 0
            MovieListComboBox.SelectionMode = SelectionMode.MultiExtended

        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try


        Me.Activate()
        Me.Enabled = True
        frmSplash2.Hide()
    End Sub

    Private Sub util_VideoMode1(ByVal tempstring As String)
        Dim action As String
        Dim errors As String
        Try
            Dim myProc As Process = Process.Start(tempstring)
        Catch ex As Exception
            errors = ex.ToString
            action = "Dim myProc As Process = Process.Start(" & tempstring & ")"
            Call util_ErrorLog(action, errors)
        End Try
    End Sub

    Private Sub util_VideoMode2(ByVal tempstring As String)
        Dim action As String
        Dim errors As String
        Try
            Dim thePSI As New System.Diagnostics.ProcessStartInfo("wmplayer")
            thePSI.Arguments = """" & tempstring & """"
            System.Diagnostics.Process.Start(thePSI)
        Catch ex As Exception
            errors = ex.ToString
            action = "Dim thePSI As New System.Diagnostics.ProcessStartInfo(""wmplayer"")" & vbCrLf & "thePSI.Arguments = "" & tempstring & """ & vbCrLf & "System.Diagnostics.Process.Start(thePSI)"
            Call util_ErrorLog(action, errors)
        End Try
    End Sub

    Private Sub util_VideoMode4(ByVal tempstring As String)
        Dim action As String
        Dim errors As String
        Try
            Dim myProc As Process = Process.Start("""" & Preferences.selectedvideoplayer & """", """" & tempstring & """")
        Catch ex As Exception
            errors = ex.ToString
            action = "Dim myProc As Process = Process.Start(""" & Preferences.selectedvideoplayer & """," & """" & tempstring & """)"
            Call util_ErrorLog(action, errors)
        End Try
    End Sub

    Private Sub util_ErrorLog(ByVal action As String, Optional ByVal errors As String = "")
        Dim errpath As String = applicationPath & "\error.log"
        Try

            Dim objWriter As New System.IO.StreamWriter(errpath, True)
            objWriter.WriteLine(errors)
            objWriter.WriteLine(action)
            objWriter.WriteLine() '(Chr(13))
            objWriter.Close()
        Catch ex As Exception
            MsgBox("Error, cant write to " & errpath & vbCrLf & vbCrLf & ex.ToString)
        End Try

    End Sub

    Public Sub tv_RebuildLog(ByVal action As String, Optional ByVal errors As String = "", Optional ByVal clear As Boolean = False)
        If Preferences.tvshowrebuildlog = False Then
            Exit Sub
        End If

        Dim errpath As String = IO.Path.Combine(applicationPath, "tvrebuild.log")
        If clear = True Then
            If IO.File.Exists(errpath) Then
                Try
                    IO.File.Delete(errpath)
                Catch ex As Exception
                    MsgBox("Error deleting: " & errpath & vbCrLf & vbCrLf & ex.ToString)
                End Try
            End If
        End If
        Try

            Dim objWriter As New System.IO.StreamWriter(errpath, True)
            objWriter.WriteLine(action)
            If errors <> "" Then
                objWriter.WriteLine(errors)
            End If
            'objWriter.WriteLine() '(Chr(13))
            'objWriter.WriteLine()
            objWriter.Close()
        Catch ex As Exception
            MsgBox("Error, cant write to " & errpath & vbCrLf & vbCrLf & ex.ToString)
        End Try

    End Sub

    Private Sub _Downloader_FileDownloadSizeObtained(ByVal iFileSize As Long) Handles FileToBeDownloaded.FileDownloadSizeObtained
        Try
            ProgBar.Value = 0
            ProgBar.Maximum = Convert.ToInt32(iFileSize)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    'FIRES WHEN DOWNLOAD IS COMPLETE
    Private Sub _Downloader_FileDownloadComplete() Handles FileToBeDownloaded.FileDownloadComplete
        Try
            ProgBar.Value = ProgBar.Maximum
            ' message_box.Show("File Download Complete")
            trailerdownloadpanel.Visible = False
            lblProgress.Text = " Please Wait, attempting to connect....."
            Button3.Text = "Play Trailer"
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    'FIRES WHEN DOWNLOAD FAILES. PASSES IN EXCEPTION INFO
    Private Sub _Downloader_FileDownloadFailed(ByVal ex As System.Exception) Handles FileToBeDownloaded.FileDownloadFailed
        Try
            'message_box.Show("An error has occured during download: " & ex.Message)
        Catch except As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    'FIRES WHEN MORE OF THE FILE HAS BEEN DOWNLOADED
    Private Sub _Downloader_AmountDownloadedChanged(ByVal iNewProgress As Long) Handles FileToBeDownloaded.AmountDownloadedChanged
        Try
            ProgBar.Value = Convert.ToInt32(iNewProgress)
            lblProgress.Text = WebFileDownloader.FormatFileSize(iNewProgress) & " of " & WebFileDownloader.FormatFileSize(ProgBar.Maximum) & " downloaded"
            ProgBar.Refresh()
            lblProgress.Refresh()
            Application.DoEvents()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    'Private Sub ToolStripButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    Call PreferencesRefactor()
    'End Sub

    Private Sub tv_PreferencesRefactor()                    'this is not called from anywhere.....
        'If formsize2 = False Then options.chk_rememberformsize.CheckState = CheckState.Unchecked
        Dim movielistcheck As New List(Of String)
        Dim tvlistcheck As New List(Of String)

        For Each folder In movieFolders
            movielistcheck.Add(folder)
        Next

        For Each folder In tvFolders
            tvlistcheck.Add(folder)
        Next

        Dim save As New Preferences
        'Call save.saveconfig()
        Dim MyFormObject As New frmOptions
        MyFormObject.ShowDialog()

        Call util_RegexSave()


        Preferences.moviesets.Clear()
        movieFolders.Clear()
        tvFolders.Clear()
        Me.util_ConfigLoad()
        Dim result As Boolean = True

        If movielistcheck.Count <> movieFolders.Count Then
            result = False
        End If

        If result = True Then
            For f = 0 To movielistcheck.Count - 1
                If movielistcheck(f) <> movieFolders(f) Then
                    result = False
                    Exit For
                End If
            Next
        End If

        If result = False Then
            Dim messbox As frmMessageBox = New frmMessageBox("Please wait, Movie Folders have Changed", "", "Rebuilding Movie DB")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            Me.Refresh()
            messbox.Refresh()
            Call mov_CacheRebuild(movieFolders)
            messbox.Close()
        End If

        result = True
        If tvlistcheck.Count <> tvFolders.Count Then
            result = False
        End If
        If result = True Then
            For f = 0 To tvlistcheck.Count - 1
                If tvlistcheck(f) <> tvFolders(f) Then
                    result = False
                    Exit For
                End If
            Next
        End If
        If result = False Then
            Dim messbox As frmMessageBox = New frmMessageBox("Please wait, TV Folders have Changed", "", "Rebuilding TV DB")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            Me.Refresh()
            messbox.Refresh()
            Call tv_CacheRebuild()
            messbox.Close()
        End If


    End Sub

    Private Function mov_TagsGet(ByVal text As String, ByVal movie As str_ComboList, ByVal counter As Integer, Optional ByVal thumbpath As String = "")
        Dim tokenCol As MatchCollection
        Dim tokenRegExp As New Regex("<<[\w_:]+>>")
        tokenCol = tokenRegExp.Matches(text)
        Dim token As Match

        For Each token In tokenCol
            Dim strNFOprop As String = ""
            Dim valToken As String = token.Value.Substring(2, token.Value.Length - 4)
            Dim tokenInstr() As String = valToken.Split(":")
            Select Case tokenInstr(0)
                Case "smallimage", "createimage"
                    If thumbpath <> "" Then
                        Dim origImage = Preferences.GetPosterPath(movie.fullpathandfilename)
                        Try
                            strNFOprop = "images/" & util_ImageCreate(origImage, If(tokenInstr(0) = "createimage" And tokenInstr.Length > 1, Val(tokenInstr(1)), 200), thumbpath)
                        Catch ex As Exception
                            MsgBox(ex.ToString)
                        End Try
                    End If

                Case "moviecount"
                    strNFOprop = If(filteredList.Count, filteredList.Count.ToString, "0000")

                Case "counter"
                    strNFOprop = counter.ToString

                Case "imdb_id"
                    strNFOprop = If(movie.id <> Nothing, movie.id, "")

                Case "imdb_url"
                    strNFOprop = If(movie.id <> Nothing, Preferences.imdbmirror & "title/" & movie.id & "/", Preferences.imdbmirror)

                Case "title"
                    strNFOprop = If(movie.title <> Nothing, movie.title, "")

                Case "movieyear"
                    strNFOprop = If(movie.year <> Nothing, movie.year, "0000")

                Case "movietitleandyear"
                    strNFOprop = If(movie.title <> Nothing, movie.title, "") & " (" & If(movie.year <> Nothing, movie.year, "0000") & ")"

                Case "rating"
                    strNFOprop = If(movie.rating <> Nothing, movie.rating, "")

                Case "runtime"
                    strNFOprop = If(movie.runtime <> Nothing, movie.runtime, "")

                Case "outline"
                    strNFOprop = If(movie.outline <> Nothing, movie.outline, "")

                Case "fullpathandfilename"
                    strNFOprop = If(movie.fullpathandfilename <> Nothing, movie.fullpathandfilename, "")

                    ' These tokens (except 'nfo') are included for backwards compatibility
                Case "fullplot", "director", "stars", "writer", "moviegenre", "format", "releasedate", "nfo"
                    Dim newplotdetails As New FullMovieDetails
                    newplotdetails = nfoFunction.mov_NfoLoadFull(movie.fullpathandfilename)
                    If tokenInstr(0) = "fullplot" Then
                        strNFOprop = newplotdetails.fullmoviebody.plot
                    End If
                    If tokenInstr(0) = "director" Then
                        strNFOprop = newplotdetails.fullmoviebody.director
                    End If
                    If tokenInstr(0) = "stars" Then
                        strNFOprop = newplotdetails.fullmoviebody.stars
                    End If
                    If tokenInstr(0) = "writer" Then
                        strNFOprop = newplotdetails.fullmoviebody.credits
                    End If
                    If tokenInstr(0) = "moviegenre" Then
                        strNFOprop = newplotdetails.fullmoviebody.genre
                    End If
                    If tokenInstr(0) = "format" Then
                        'strNFOprop = newplotdetails.filedetails.filedetails_video.Container.Remove(0, 1)
                    End If
                    If tokenInstr(0) = "releasedate" Then
                        strNFOprop = newplotdetails.fullmoviebody.premiered
                    End If
                    If tokenInstr(0) = "nfo" Then
                        Try
                            Select Case tokenInstr(1)

                                Case "file"
                                    Select Case tokenInstr(2)
                                        Case "video"
                                            strNFOprop = CallByName(newplotdetails.filedetails.filedetails_video, tokenInstr(3), vbGet)
                                        Case "audio"
                                            Dim i As Integer = 1
                                            For Each audioStream In newplotdetails.filedetails.filedetails_audio
                                                strNFOprop = strNFOprop & CallByName(audioStream, tokenInstr(3), vbGet)
                                                If (newplotdetails.filedetails.filedetails_audio.Count > 1 And i <> newplotdetails.filedetails.filedetails_audio.Count) Then
                                                    strNFOprop = strNFOprop & " / "
                                                End If
                                                i += 1
                                            Next
                                        Case "subtitles"
                                            Dim i As Integer = 1
                                            For Each subLang In newplotdetails.filedetails.filedetails_subtitles
                                                strNFOprop = strNFOprop & CallByName(subLang, tokenInstr(3), vbGet)
                                                If (newplotdetails.filedetails.filedetails_subtitles.Count > 1 And i <> newplotdetails.filedetails.filedetails_subtitles.Count) Then
                                                    strNFOprop = strNFOprop & " / "
                                                End If
                                                i += 1
                                            Next
                                    End Select
                                Case "sorttitle"
                                    strNFOprop = newplotdetails.fullmoviebody.sortorder
                                Case "set"
                                    strNFOprop = newplotdetails.fullmoviebody.movieset
                                Case "actor"                                        ' No support for actor list
                                    strNFOprop = "No support"
                                Case "alternativetitle"                             ' No support for alternative titles
                                    strNFOprop = "No support"
                                Case Else
                                    strNFOprop = CallByName(newplotdetails.fullmoviebody, tokenInstr(1), vbGet)
                            End Select
                            If tokenInstr(1) <> "file" And tokenInstr.Length > 2 Then
                                Dim intCharLimit = CInt(tokenInstr(2))
                                If strNFOprop.Length > intCharLimit Then
                                    strNFOprop = strNFOprop.Substring(0, strNFOprop.LastIndexOf(" ", intCharLimit - 3)) & "<font class=dim>...</font>"
                                End If
                            End If

                        Catch
                            strNFOprop = "Error in token"
                        End Try
                    End If

            End Select
            Try
                strNFOprop = strNFOprop.Replace(Chr(34), "&quot;")
                text = text.Replace(token.Value, strNFOprop)
            Catch
                text = text.Replace(token.Value, "")
            End Try
        Next

        Return text
    End Function

    Private Function tv_TagsGetAll(ByVal text As String, ByVal tvShow As Media_Companion.TvShow, ByVal showCounter As Integer, Optional ByVal imagepath As String = "")
        Dim inclShow As Boolean = False
        If imagepath.Equals("!HEADER!") Then    'A hack to process the header
            inclShow = True
            imagepath = ""                      'No images allowed in header!
        End If

        Dim blockShow As String = text
        Dim blockSeason As String = ""
        Dim blockEpisode As String = ""
        Dim strHTML As String = ""
        Dim counterSeason = 0
        If text.IndexOf("<<season") <> -1 And text.IndexOf("<</season>>") <> -1 Or text.IndexOf("<<episode") <> -1 And text.IndexOf("<</episode>>") <> -1 Then
            Dim setTVshows = New SortedList(Of String, TvEpisode)(New SeasonEpisodeComparer)
            Dim keySE As String
            Dim arrSeasonPresent(0 To 0) As Boolean
            Dim firstSeason As Integer = 99999
            Dim inclSeason As Boolean = False
            Dim inclEpisode As Boolean = False
            Dim inclMissingSeason As Boolean = False
            Dim inclMissingEpisode As Boolean = False
            If text.IndexOf("<<season>>") <> -1 Or text.IndexOf("<<season:all>>") <> -1 Or text.IndexOf("<<episode>>") <> -1 Or text.IndexOf("<<episode:all>>") <> -1 Then
                If text.IndexOf("<<season") <> -1 Then inclSeason = True
                If text.IndexOf("<<episode") <> -1 Then inclEpisode = True
                For Each episode In tvShow.Episodes
                    If episode.Season.Value <> "-1" And episode.Episode.Value <> "-1" Then
                        keySE = episode.Season.Value & "-" & episode.Episode.Value
                        episode.IsMissing = False
                        If Not setTVshows.ContainsKey(keySE) Then setTVshows.Add(keySE, episode)
                        If episode.Season.Value > UBound(arrSeasonPresent) Then
                            ReDim Preserve arrSeasonPresent(episode.Season.Value)
                            arrSeasonPresent(episode.Season.Value) = True
                        End If
                        If episode.Season.Value < firstSeason Then
                            firstSeason = episode.Season.Value
                            If episode.Season.Value = 0 Then arrSeasonPresent(0) = True
                        End If
                    End If
                Next
            End If
            If text.IndexOf("<<season:missing>>") <> -1 Or text.IndexOf("<<season:all>>") <> -1 Or text.IndexOf("<<episode:missing>>") <> -1 Or text.IndexOf("<<episode:all>>") <> -1 Then
                If tvShow.missingepisodes.Count > 0 Then
                    If text.IndexOf("<<season") <> -1 Then inclMissingSeason = True
                    If text.IndexOf("<<episode") <> -1 Then inclMissingEpisode = True
                    For Each episode In tvShow.missingepisodes
                        If episode.Season.value <> "-1" And episode.Episode.Value <> "-1" Then
                            keySE = episode.Season.value & "-" & episode.Episode.Value
                            episode.IsMissing = True
                            If Not setTVshows.ContainsKey(keySE) Then setTVshows.Add(keySE, episode)
                            If episode.Season.value > UBound(arrSeasonPresent) Then
                                ReDim Preserve arrSeasonPresent(episode.Season.value)
                                arrSeasonPresent(episode.Season.value) = True
                            End If
                            If episode.Season.value < firstSeason Then
                                firstSeason = episode.Season.value
                                If episode.Season.value = 0 Then arrSeasonPresent(0) = True
                            End If
                        End If
                    Next
                End If
            End If
            If setTVshows.Count Then
                Dim separator As String = "<<|separator|>>"
                If inclSeason Or inclMissingSeason Then
                    blockSeason = text.Substring(text.IndexOf("<<season"), text.IndexOf("<</season>>") - text.IndexOf("<<season") + 11)
                    blockShow = blockShow.Replace(blockSeason, separator)
                End If
                If inclEpisode Or inclMissingEpisode Then
                    blockEpisode = text.Substring(text.IndexOf("<<episode"), text.IndexOf("<</episode>>") - text.IndexOf("<<episode") + 12)
                    If blockSeason <> "" Then
                        blockSeason = blockSeason.Replace(blockEpisode, separator)
                    Else
                        blockShow = blockShow.Replace(blockEpisode, separator)
                    End If
                    blockEpisode = blockEpisode.Substring(blockEpisode.IndexOf(">>") + 2, blockEpisode.IndexOf("<</episode>>") - blockEpisode.IndexOf(">>") - 2)
                End If
                If blockSeason <> "" Then
                    blockSeason = blockSeason.Substring(blockSeason.IndexOf(">>") + 2, blockSeason.IndexOf("<</season>>") - blockSeason.IndexOf(">>") - 2)
                End If
                Dim strHTMLseason As String = ""
                Dim strHTMLepisode As String = ""
                Dim strTempEpisode As String = ""
                Dim strHTMLseasonSpecials As String = ""
                Dim currSeason As Integer = firstSeason
                Dim counterSeasonEpisodes = 0
                Dim counterSeasonMissingEpisodes = 0
                Dim counterSeasonTotalEpisodes = 0
                Dim lastEpisode As Boolean = False
                'Build string
                For Each episode In setTVshows
                    If Not (episode.Value.IsMissing And Not inclMissingEpisode) Then
                        strTempEpisode = If(inclEpisode Or inclMissingEpisode, tv_TagsEpisodeGet(blockEpisode, episode.Value, showCounter, counterSeasonTotalEpisodes), "")
                        inclShow = True
                    End If
                    If setTVshows.IndexOfKey(episode.Key) = setTVshows.Count - 1 Then   'This is the last episode
                        If strTempEpisode <> "" Then
                            strHTMLepisode = strHTMLepisode & strTempEpisode
                            counterSeasonTotalEpisodes += 1
                            If episode.Value.IsMissing Then
                                counterSeasonMissingEpisodes += 1
                            Else
                                counterSeasonEpisodes += 1
                            End If
                        End If
                        lastEpisode = True
                    End If
                    ' If season changes or reach end of sorted list, aggregate season and episode HTML
                    If lastEpisode Or episode.Value.Season.Value > currSeason Then
                        If inclSeason Or inclMissingSeason Then
                            strHTMLseason = tv_TagsSeasonGet(blockSeason, tvShow, showCounter, currSeason, counterSeasonEpisodes, counterSeasonMissingEpisodes, _
                                                            counterSeasonTotalEpisodes, arrSeasonPresent(currSeason), imagepath)
                            strHTMLseason = strHTMLseason.Replace(separator, If(inclMissingSeason And Not inclMissingEpisode Or inclSeason And Not inclEpisode, _
                                                                                "", strHTMLepisode))
                            inclShow = True
                        Else
                            strHTMLseason = strHTMLepisode
                        End If
                        If currSeason = 0 Then
                            strHTMLseasonSpecials = strHTMLseason
                        Else
                            strHTML = strHTML & strHTMLseason
                        End If
                        strHTMLseason = ""
                        strHTMLepisode = ""
                        currSeason = episode.Value.Season.Value
                        counterSeason += 1
                        counterSeasonEpisodes = 0
                        counterSeasonMissingEpisodes = 0
                        counterSeasonTotalEpisodes = 0
                    End If
                    If episode.Value.IsMissing Then
                        counterSeasonMissingEpisodes += 1
                    Else
                        counterSeasonEpisodes += 1
                    End If
                    counterSeasonTotalEpisodes += 1
                    strHTMLepisode = strHTMLepisode & strTempEpisode
                Next
                strHTML = strHTML & strHTMLseasonSpecials
                blockShow = blockShow.Replace(separator, strHTML)
            End If

        End If

        blockShow = tv_TagsShowGet(blockShow, tvShow, showCounter, counterSeason, imagepath)
        If Not inclShow Then blockShow = ""
        Return blockShow
    End Function
    Private Function tv_TagsShowGet(ByRef text As String, ByVal tvShow As TvShow, ByVal counter As Integer, ByVal numSeasons As Integer, Optional ByVal imagepath As String = "")
        Dim tokenCol As MatchCollection
        Dim tokenRegExp As New Regex("<<[\w_:]+>>")
        tokenCol = tokenRegExp.Matches(text)
        Dim token As Match

        For Each token In tokenCol
            Dim strNFOprop As String = ""
            Dim valToken As String = token.Value.Substring(2, token.Value.Length - 4)
            Dim tokenInstr() As String = valToken.Split(":")
            Dim addText As Boolean = False
            Dim padNumber As Boolean = False
            If tokenInstr.Length > 1 Then
                If tokenInstr(1).IndexOf("text") <> -1 Then addText = True
                If tokenInstr(1).IndexOf("pad") <> -1 Then padNumber = True
            End If
            Select Case tokenInstr(0)
                Case "createimage"
                    If imagepath <> "" And tokenInstr.Length > 1 Then
                        Dim origImage = Preferences.GetPosterPath(tvShow.NfoFilePath)
                        origImage = origImage.Replace(IO.Path.GetFileName(origImage), "folder.jpg")
                        Dim imageType As String = "poster"
                        Dim imgTest As Image = Image.FromFile(origImage)
                        If tokenInstr.Length > 2 And tokenInstr(2) = "banner" Then
                            imageType = "banner"
                            If imgTest.Height / imgTest.Width > 1 Then
                                origImage = origImage.Replace(IO.Path.GetFileName(origImage), "season-all.tbn")
                            End If
                        Else
                            If imgTest.Height / imgTest.Width < 1 Then
                                origImage = origImage.Replace(IO.Path.GetFileName(origImage), "season-all.tbn")
                            End If
                        End If

                        strNFOprop = "tvimages/" & util_ImageCreate(origImage, tokenInstr(1), imagepath, imageType)
                    End If

                Case "show_title"
                    strNFOprop = tvShow.Title.Value

                Case "show_year"
                    strNFOprop = tvShow.Year.Value

                Case "show_titleandyear"
                    strNFOprop = tvShow.titleandyear

                Case "show_imdbid"
                    strNFOprop = tvShow.ImdbId.Value

                Case "show_imdburl"
                    strNFOprop = If(tvShow.ImdbId <> Nothing, Preferences.imdbmirror & "title/" & tvShow.ImdbId.Value & "/", Preferences.imdbmirror)

                Case "show_tvdbid"
                    strNFOprop = tvShow.TvdbId.Value

                Case "show_tvdburl"
                    strNFOprop = If(tvShow.TvdbId <> Nothing, "http://thetvdb.com/?tab=series&id=" & tvShow.TvdbId.Value, "http://thetvdb.com/")

                Case "show_genre"
                    strNFOprop = tvShow.Genre.Value

                Case "show_episodeactorsource"
                    strNFOprop = tvShow.EpisodeActorSource.Value

                Case "show_language"
                    strNFOprop = tvShow.Language.Value

                Case "show_locked"
                    strNFOprop = tvShow.State

                Case "show_rating"
                    strNFOprop = If(tvShow.Rating <> Nothing, tvShow.Rating.Value & If(tvShow.Rating.Value.IndexOf(".") <> -1, "", ".0"), "")

                Case "show_sortorder"
                    strNFOprop = tvShow.SortOrder.Value

                Case "show_status"
                    strNFOprop = tvShow.Status.Value

                Case "show_count"
                    strNFOprop = If(Cache.TvCache.Shows.Count, Cache.TvCache.Shows.Count.ToString, "00")

                Case "show_counter"
                    strNFOprop = counter.ToString

                Case "show_seasons"
                    strNFOprop = numSeasons.ToString
                    If addText Then strNFOprop = strNFOprop & " Season" & If(numSeasons <> 1, "s", "")

                Case "class"
                    If tokenInstr.Length > 1 Then
                        If tokenInstr(1).IndexOf("row") <> -1 Then
                            strNFOprop = " class=show_row_" & If(counter Mod 2, "odd", "even")
                        Else
                            strNFOprop = " class=" & tokenInstr(1)
                        End If
                    End If

                Case "show_nfo"
                    Dim fullTVShowDetails As New TvShow
                    fullTVShowDetails.Load(tvShow.NfoFilePath)
                    Try
                        Select Case tokenInstr(1)
                            Case "id"
                                strNFOprop = fullTVShowDetails.ImdbId.Value
                            Case "episodeguide"
                                strNFOprop = fullTVShowDetails.EpisodeGuideUrl.Value
                            Case "actor"                                        ' No support for actor list
                                strNFOprop = "No support"
                            Case "thumb"                                        ' No support for thumbnail list
                                strNFOprop = "No support"
                            Case "fanart"                                       ' No support for fanart list
                                strNFOprop = "No support"
                            Case Else
                                strNFOprop = CallByName(fullTVShowDetails, tokenInstr(1), vbGet)
                        End Select
                        If tokenInstr(1) <> "episodeguide" And tokenInstr.Length > 2 Then
                            Dim intCharLimit = CInt(tokenInstr(2))
                            If strNFOprop.Length > intCharLimit Then
                                strNFOprop = strNFOprop.Substring(0, strNFOprop.LastIndexOf(" ", intCharLimit - 3)) & "<font class=dim>...</font>"
                            End If
                        End If

                    Catch
                        strNFOprop = "Error in token"
                    End Try

            End Select

            Try
                strNFOprop = strNFOprop.Replace(Chr(34), "&quot;")
                text = text.Replace(token.Value, strNFOprop)
            Catch
                text = text.Replace(token.Value, "")
            End Try
        Next
        Return text
    End Function
    Private Function tv_TagsSeasonGet(ByVal text As String, ByVal tvShow As TvShow, ByVal showCounter As Integer, _
                                     ByVal currSeason As Integer, ByVal numEpisodes As Integer, ByVal numMissingEpisodes As Integer, _
                                     ByVal numTotalEpisodes As Integer, ByVal seasonPresent As Boolean, Optional ByVal imagepath As String = "")
        Dim tokenCol As MatchCollection
        Dim tokenRegExp As New Regex("<<[\w_:]+>>")
        tokenCol = tokenRegExp.Matches(text)
        Dim token As Match

        For Each token In tokenCol
            Dim strNFOprop As String = ""
            Dim valToken As String = token.Value.Substring(2, token.Value.Length - 4)
            Dim tokenInstr() As String = valToken.Split(":")
            Dim addText As Boolean = False
            Dim padNumber As Boolean = False
            Dim specials As Boolean = False
            If tokenInstr.Length > 1 Then
                If tokenInstr(1).IndexOf("text") <> -1 Then addText = True
                If tokenInstr(1).IndexOf("pad") <> -1 Then padNumber = True
                If tokenInstr(1).IndexOf("special") <> -1 Then specials = True
            End If
            Select Case tokenInstr(0)
                Case "createimage"
                    If imagepath <> "" And tokenInstr.Length > 1 Then
                        Dim origImage = Preferences.GetPosterPath(tvShow.NfoFilePath)
                        Dim imageName As String = "season" & If(currSeason >= 10, "", "0") & currSeason.ToString & ".tbn"
                        If currSeason = 0 Then imageName = "season-specials.tbn"
                        origImage = origImage.Replace(IO.Path.GetFileName(origImage), imageName)

                        strNFOprop = "tvimages/" & util_ImageCreate(origImage, tokenInstr(1), imagepath)
                    End If

                Case "show_counter"
                    strNFOprop = showCounter.ToString
                Case "seas_number"
                    If currSeason = 0 And specials Then
                        Dim endOfPrevTag = text.LastIndexOf(">", text.IndexOf(token.Value)) + 1
                        text = text.Remove(endOfPrevTag, text.IndexOf(token.Value) - endOfPrevTag)
                        strNFOprop = "Specials"
                    Else
                        strNFOprop = If(currSeason.ToString.Length = 1 And padNumber, "0", "") & currSeason.ToString
                        If addText Then strNFOprop = strNFOprop & " Season" & If(numTotalEpisodes <> 1, "s", "")
                    End If
                Case "seas_episodes"
                    strNFOprop = If(numTotalEpisodes.ToString.Length = 1 And padNumber, "0", "") & numTotalEpisodes.ToString
                    If addText Then strNFOprop = strNFOprop & " Episode" & If(numTotalEpisodes <> 1, "s", "")
                Case "seas_episodesof"
                    strNFOprop = numEpisodes.ToString
                    If numEpisodes = numTotalEpisodes Then
                        ' Do nothing
                    ElseIf numMissingEpisodes Then
                        strNFOprop = strNFOprop & " of " & numTotalEpisodes.ToString
                    End If
                    If addText Then strNFOprop = strNFOprop & " Episode" & If(numTotalEpisodes <> 1, "s", "")
                Case "class"
                    If tokenInstr.Length > 1 Then
                        If tokenInstr(1).IndexOf("missing") <> -1 Then
                            ' Special case where we want to know if the season contains missing episodes
                            If tokenInstr(1).IndexOf("episode") <> -1 And numMissingEpisodes Then
                                strNFOprop = " class=missingseason"
                            ElseIf Not seasonPresent Then
                                strNFOprop = " class=" & tokenInstr(1)
                            End If
                        ElseIf tokenInstr(1).IndexOf("row") <> -1 Then
                            strNFOprop = " class=seas_row_" & If(currSeason Mod 2, "odd", "even")
                        Else
                            strNFOprop = " class=" & tokenInstr(1)
                        End If
                    End If
            End Select

            Try
                strNFOprop = strNFOprop.Replace(Chr(34), "&quot;")
                text = text.Replace(token.Value, strNFOprop)
            Catch
                text = text.Replace(token.Value, "")
            End Try
        Next
        Return text
    End Function
    Private Function tv_TagsEpisodeGet(ByVal text As String, ByVal tvEpisode As TvEpisode, ByVal showCounter As Integer, ByVal episodeCounter As Integer, Optional ByVal imagepath As String = "")
        Dim tokenCol As MatchCollection
        Dim tokenRegExp As New Regex("<<[\w_:]+>>")
        tokenCol = tokenRegExp.Matches(text)
        Dim token As Match

        For Each token In tokenCol
            Dim strNFOprop As String = ""
            Dim valToken As String = token.Value.Substring(2, token.Value.Length - 4)
            Dim tokenInstr() As String = valToken.Split(":")
            Dim addText As Boolean = False
            Dim padNumber As Boolean = False
            If tokenInstr.Length > 1 Then
                If tokenInstr(1).IndexOf("text") <> -1 Then addText = True
                If tokenInstr(1).IndexOf("pad") <> -1 Then padNumber = True
            End If
            Select Case tokenInstr(0)
                Case "show_counter"
                    strNFOprop = showCounter.ToString
                Case "ep_title"
                    strNFOprop = tvEpisode.Title.Value

                Case "ep_season"
                    strNFOprop = If(tvEpisode.Season.value.Length = 1 And padNumber, "0", "") & tvEpisode.Season.value

                Case "ep_number"
                    strNFOprop = If(tvEpisode.Episode.Value.Length = 1 And padNumber, "0", "") & tvEpisode.Episode.Value

                Case "ep_rating"
                    strNFOprop = If(tvEpisode.Rating <> Nothing, tvEpisode.Rating.Value & If(tvEpisode.Rating.Value.IndexOf(".") <> -1, "", ".0"), "")

                Case "ep_playcount"
                    strNFOprop = tvEpisode.PlayCount.Value

                Case "ep_imdbid"
                    strNFOprop = tvEpisode.ImdbId.Value

                Case "ep_imdburl"
                    strNFOprop = If(tvEpisode.ImdbId <> Nothing, Preferences.imdbmirror & "title/" & tvEpisode.ImdbId.Value & "/", Preferences.imdbmirror)

                Case "ep_tvdbid"
                    strNFOprop = tvEpisode.TvdbId.Value

                Case "class"
                    If tokenInstr.Length > 1 Then
                        If tokenInstr(1).IndexOf("missing") <> -1 And Not tvEpisode.IsMissing Then
                            ' Do nothing
                        ElseIf tokenInstr(1).IndexOf("row") <> -1 Then
                            strNFOprop = " class=ep_row_" & If(episodeCounter Mod 2, "odd", "even")
                        Else
                            strNFOprop = " class=" & tokenInstr(1)
                        End If
                    End If

                Case "ep_nfo"
                    Dim TVEpisodeNFO As List(Of TvEpisode) = nfoFunction.ep_NfoLoadGeneric(tvEpisode.VideoFilePath)
                    Dim fullTVEpisodeDetails As TvEpisode = TVEpisodeNFO(0)
                    Try
                        Select Case tokenInstr(1)
                            Case "file"
                                Select Case tokenInstr(2)
                                    Case "video"
                                        strNFOprop = CallByName(fullTVEpisodeDetails.Details.StreamDetails.Video, tokenInstr(3), vbGet)
                                    Case "audio"
                                        Dim i As Integer = 1
                                        For Each audioStream In fullTVEpisodeDetails.Details.StreamDetails.Audio
                                            strNFOprop = strNFOprop & CallByName(audioStream, tokenInstr(3), vbGet)
                                            If (fullTVEpisodeDetails.Details.StreamDetails.Audio.Count > 1 And i <> fullTVEpisodeDetails.Details.StreamDetails.Audio.Count) Then
                                                strNFOprop = strNFOprop & " / "
                                            End If
                                            i += 1
                                        Next
                                    Case "subtitles"
                                        Dim i As Integer = 1
                                        For Each subLang In fullTVEpisodeDetails.Details.StreamDetails.Subtitles
                                            strNFOprop = strNFOprop & CallByName(subLang, tokenInstr(3), vbGet)
                                            If (fullTVEpisodeDetails.Details.StreamDetails.Subtitles.Count > 1 And i <> fullTVEpisodeDetails.Details.StreamDetails.Subtitles.Count) Then
                                                strNFOprop = strNFOprop & " / "
                                            End If
                                            i += 1
                                        Next
                                End Select
                            Case "actor"                                        ' No support for actor list
                                strNFOprop = "No support"
                            Case "thumb"                                        ' No support for thumbnail list
                                strNFOprop = "No support"
                            Case "fanart"                                       ' No support for fanart list
                                strNFOprop = "No support"
                            Case Else
                                strNFOprop = CallByName(fullTVEpisodeDetails, tokenInstr(1), vbGet)
                        End Select
                        If tokenInstr.Length > 2 Then
                            Dim intCharLimit = CInt(tokenInstr(2))
                            If strNFOprop.Length > intCharLimit Then
                                strNFOprop = strNFOprop.Substring(0, strNFOprop.LastIndexOf(" ", intCharLimit - 3)) & "<font class=dim>...</font>"
                            End If
                        End If

                    Catch
                        strNFOprop = "Error in token"
                    End Try
            End Select

            Try
                strNFOprop = strNFOprop.Replace(Chr(34), "&quot;")
                text = text.Replace(token.Value, strNFOprop)
            Catch
                text = text.Replace(token.Value, "")
            End Try
        Next
        Return text
    End Function
    Private Function util_ImageCreate(ByVal origImage As String, ByVal sizeLimit As Integer, ByVal target As String, Optional ByVal picType As String = "poster")

        Dim isPoster As Boolean = Equals(picType, "poster")
        Dim filename As String = If(isPoster, "DefaultPoster", "DefaultBanner") & If(sizeLimit <> 0, "_" & sizeLimit.ToString, "") & ".jpg"
        Dim imgPoster As String = If(isPoster, defaultPoster, defaultBanner)
        If IO.File.Exists(origImage) Then
            Dim origBitmap As Image = Image.FromFile(origImage)
            Dim origRatio As Single = 0
            origRatio = origBitmap.Height / origBitmap.Width
            If isPoster And origRatio >= 1 Or Not isPoster And origRatio < 1 Then
                If sizeLimit = 0 Then sizeLimit = If(isPoster, origBitmap.Height, origBitmap.Width)
                filename = IO.File.GetLastWriteTime(origImage).ToFileTimeUtc & "_" & Utilities.GetCRC32(origImage) & "_" & sizeLimit.ToString & ".jpg"
                imgPoster = origImage
            End If
            origBitmap.Dispose()
        End If
        If Not IO.File.Exists(IO.Path.Combine(target, filename)) Then
            Try
                Dim srcBitmap As New Bitmap(imgPoster)
                Dim height As Integer = srcBitmap.Height
                Dim width As Integer = srcBitmap.Width
                Dim dstBitmap As New Bitmap(srcBitmap)
                If sizeLimit <> 0 Then
                    If isPoster Then
                        height = sizeLimit
                        width = Math.Truncate(height * (srcBitmap.Width / srcBitmap.Height))
                    Else
                        width = sizeLimit
                        height = Math.Truncate(width * (srcBitmap.Height / srcBitmap.Width))
                    End If
                End If
                srcBitmap.Dispose()
                dstBitmap = Utilities.ResizeImage(dstBitmap, width, height)
                dstBitmap.Save(IO.Path.Combine(target, filename), System.Drawing.Imaging.ImageFormat.Jpeg)
            Catch
            End Try
        End If
        Return filename
    End Function
    Private Sub mov_BckWrkScnMovies_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles BckWrkScnMovies.DoWork
        Try
            'ToolStripButton10.Visible = True
            globalThreadCounter += 1
            Call mov_StartNew()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_BckWrkScnMovies_ProgressChanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles BckWrkScnMovies.ProgressChanged
        Try
            If scrapeAndQuit = False Then
                If e.ProgressPercentage <> 999999 Then
                    ToolStripProgressBar1.Value = e.ProgressPercentage
                    ToolStripProgressBar1.ProgressBar.Refresh()
                    ToolStripProgressBar1.ProgressBar.PerformStep()
                    ToolStripStatusLabel1.Text = e.UserState
                Else
                    Call mov_FiltersAndSortApply()
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_BckWrkScnMovies_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles BckWrkScnMovies.RunWorkerCompleted
        Try
            If scrapeAndQuit = True Then
                Me.Close()
            End If


            If Not (e.Error Is Nothing) Then
                scraperLog = scraperLog & vbCrLf
                scraperLog = scraperLog & "Error, exiting movie scraper" & vbCrLf
                scraperLog = scraperLog & "Error:-" & vbCrLf
                scraperLog = scraperLog & e.Error.ToString & vbCrLf
            End If


            ToolStripProgressBar1.Value = 0
            ToolStripProgressBar1.ProgressBar.Refresh()
            ToolStripProgressBar1.Visible = False
            ToolStripStatusLabel1.Text = "Movie Scan Progress"
            ToolStripStatusLabel1.Visible = False
            TabPage14.Text = "Search for new movies"
            TabPage14.ToolTipText = "Scan movie folders for new media files"
            If Preferences.disablelogfiles = False Then
                Dim MyFormObject As New frmoutputlog(scraperLog, True)
                Try
                    MyFormObject.ShowDialog()
                Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
                End Try
            End If

            globalThreadCounter -= 1
            Call util_ThreadsRunningCheck()
            Call mov_FiltersAndSortApply()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub util_ThreadsRunningCheck()
        'If globalthreadcounter = 0 Then
        '    ToolStripButton10.Visible = False
        'Else
        '    ToolStripButton10.Visible = True
        'End If
    End Sub

    'Private Sub btnmoviescrapercancel_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    BckWrkScnMovies.CancelAsync()
    'End Sub

    'Private Sub ToolStripButton2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    If outlinetxt.Text = "MC cannot find this file, either the file no longer exists, or MC cannot access the file path" Then
    '        MsgBox("MC cannot find this file, either the file no longer exists, or MC cannot access the file path")
    '        Exit Sub
    '    End If
    '    Dim t As New frmCoverArt
    '    t.ShowDialog()
    'End Sub

    '    Private Sub ToolStripButton9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '        If outlinetxt.Text = "MC cannot find this file, either the file no longer exists, or MC cannot access the file path" Then
    '            MsgBox("MC cannot find this file, either the file no longer exists, or MC cannot access the file path")
    '            Exit Sub
    '        End If
    '        Dim t As New frmMovieFanart
    '        t.ShowDialog()
    '        Try
    '            If IO.File.Exists(workingMovieDetails.fileinfo.fanartpath) Then
    '                PictureBox7.ImageLocation = workingMovieDetails.fileinfo.fanartpath
    '                PictureBox7.Load()
    '            Else
    '                PictureBox7.Image = Nothing
    '            End If

    '        Catch ex As Exception
    '#If SilentErrorScream Then
    '            Throw ex
    '#End If
    '        End Try
    '    End Sub

    'paypal
    'Private Sub ToolStripButton11_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    Dim webAddress As String = "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=4696771"
    '    Process.Start(webAddress)
    'End Sub

    Private Sub util_ThreadsAllExit()
        Dim busy As Boolean = False
        Try
            If bckgrounddroppedfiles.IsBusy Then
                busy = True
                bckgrounddroppedfiles.CancelAsync()
            End If
            If bckgroundfanart.IsBusy Then
                busy = True
                bckgroundfanart.CancelAsync()
            End If
            If bckgroundscanepisodes.IsBusy Then
                busy = True
                bckgroundscanepisodes.CancelAsync()
            End If
            If bckgrounddroppedfiles.IsBusy Then
                busy = True
                bckgrounddroppedfiles.CancelAsync()
            End If
            If bckrescrapewizard.IsBusy Then
                busy = True
                bckrescrapewizard.CancelAsync()
            End If
            If BckWrkScnMovies.IsBusy Then
                busy = True
                BckWrkScnMovies.CancelAsync()
            End If
            If bckepisodethumb.IsBusy Then
                busy = True
                bckepisodethumb.CancelAsync()
            End If

            Dim exitnowok As Boolean = False
            If busy = True Then
                messbox.TextBox1.Text = "Please Wait"
                messbox.TextBox2.Text = ""
                messbox.TextBox3.Text = "Stopping threads when it is Safe to do so"
                messbox.Refresh()
                messbox.Visible = True
            End If
            Do Until busy = False
                If Not bckgroundfanart.IsBusy And Not bckepisodethumb.IsBusy And Not bckgroundscanepisodes.IsBusy And Not bckgrounddroppedfiles.IsBusy And Not bckrescrapewizard.IsBusy And Not BckWrkScnMovies.IsBusy Then
                    busy = False
                    Exit Do
                End If
                Threading.Thread.Sleep(100)
                Application.DoEvents()
            Loop
            messbox.Visible = False
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        Finally

        End Try
    End Sub

    'Private Sub ToolStripButton10_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    Call exitallthreads()
    'End Sub



    Private Sub actorcb_MouseEnter(ByVal sender As Object, ByVal e As System.EventArgs) Handles actorcb.MouseEnter
        Try
            actorcb.Focus()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    'Browse Actors
    Private Sub actorcb_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles actorcb.SelectedIndexChanged
        Try
            For Each actor In workingMovieDetails.listactors
                If actor.actorname = actorcb.SelectedItem Then
                    If actor.actorrole <> "" Then
                        roletxt.Text = actor.actorrole
                    End If
                    Dim temppath As String = workingMovieDetails.fileinfo.fullpathandfilename.Replace(IO.Path.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename), "")
                    Dim tempname As String = actor.actorname.Replace(" ", "_") & ".tbn"
                    temppath = temppath & ".actors\" & tempname
                    If IO.File.Exists(temppath) Then
                        PictureBox1.ImageLocation = temppath
                        PictureBox1.Load()
                        Exit Sub
                    End If
                    If actor.actorthumb <> Nothing Then
                        Dim actorthumbpath As String = Preferences.GetActorThumbPath(actor.actorthumb)
                        If actorthumbpath <> "none" Then
                            If IO.File.Exists(actorthumbpath) Or actorthumbpath.ToLower.IndexOf("http") <> -1 Then
                                PictureBox1.ImageLocation = actorthumbpath
                                PictureBox1.Load()
                            Else
                                PictureBox1.ImageLocation = defaultActor
                                PictureBox1.Load()
                            End If
                        Else
                            PictureBox1.ImageLocation = defaultActor
                            PictureBox1.Load()
                        End If
                    Else
                        PictureBox1.ImageLocation = defaultActor
                        PictureBox1.Load()
                    End If
                    Exit For
                Else
                    PictureBox1.ImageLocation = defaultActor
                    PictureBox1.Load()
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_FiltersAndSortApply(Optional ByVal Filter As String = "blabla")
        Monitor.Enter(Me)
        Try
            Dim tempint2 As Integer = filteredList.Count - 1
            For f = tempint2 To 0 Step -1
                filteredList.RemoveAt(f)
            Next
            Dim dupes2 As Boolean = False
            Dim top250 As Boolean = False
            Dim offline As Boolean = False
            Dim watched As Boolean = False
            Dim unwatched As Boolean = False
            Dim missposters As Boolean = False
            Dim missfanart As Boolean = False
            Dim oktoadd As Boolean = True
            Dim tempint As Integer = fullMovieList.Count - 1

            If tempint < 0 Then
                Exit Sub
                Monitor.Exit(Me)
            End If

            ' Added this section because ApplyFilter is often called as ApplyFilter() & doesn't take into account that a filter choice may have been set.... 
            If RadioButton46.Checked = True Then Filter = "watched"
            If RadioButton47.Checked = True Then Filter = "unwatched"
            If RadioButton48.Checked = True Then Filter = "duplicates"
            If RadioButton49.Checked = True Then Filter = "missing posters"
            If RadioButtonMissingFanart.Checked = True Then Filter = "missing fanart"


            'If Filter = "blabla" Then           'i.e. applyFilters() {NONE}
            'RadioButton45.Checked = True    'reset filter radio buttons indcation to ALL
            'ComboBox11.SelectedIndex = 0    'reset filename video type filter to ALL       
            'End If



            For f = 0 To tempint
                dupes2 = False
                offline = False
                top250 = False
                watched = False
                unwatched = False
                missposters = False
                missfanart = False
                oktoadd = True
                If Filter.ToLower = "duplicates" Then dupes2 = True
                If Filter.ToLower = "offline movies" Then offline = True
                If Filter.ToLower = "watched" Then watched = True
                If Filter.ToLower = "unwatched" Then unwatched = True
                If Filter.ToLower = "missing posters" Then missposters = True
                If Filter.ToLower = "missing fanart" Then missfanart = True
                If oktoadd = True And top250 = True Then
                    If fullMovieList(f).top250 = "0" Then
                        oktoadd = False
                    End If
                End If
                If oktoadd = True And missposters = True Then
                    If fullMovieList(f).missingdata1 <> 2 And fullMovieList(f).missingdata1 <> 3 Then
                        oktoadd = False
                    End If
                End If
                If oktoadd = True And missfanart = True Then
                    If fullMovieList(f).missingdata1 <> 1 And fullMovieList(f).missingdata1 <> 3 Then
                        oktoadd = False
                    End If
                End If
                If oktoadd = True And watched = True Then
                    If fullMovieList(f).playcount <> Nothing Then
                        If Convert.ToInt32(fullMovieList(f).playcount) = 0 Then
                            oktoadd = False
                        End If
                    Else
                        oktoadd = False
                    End If
                Else
                End If
                If oktoadd = True And unwatched = True Then
                    If fullMovieList(f).playcount <> Nothing Then
                        If Convert.ToInt32(fullMovieList(f).playcount) <> 0 Then
                            oktoadd = False
                        End If
                    End If
                End If
                If oktoadd = True And offline = True Then
                    For Each paths In Preferences.offlinefolders
                        If fullMovieList(f).fullpathandfilename.IndexOf(paths) = -1 Then
                            oktoadd = False
                            Exit For
                        End If
                    Next
                End If
                If oktoadd = True Then
                    filteredList.Add(fullMovieList(f))
                End If
            Next
            Dim add As Boolean = False
            Dim newlist As New List(Of str_ComboList)
            For Each movie In filteredList
                Dim tempstring As String = String.Empty
                If RadioButton1.Checked = True And ComboBox10.SelectedItem = "List" Then tempstring = movie.titleandyear.ToLower
                If RadioButton2.Checked = True And ComboBox10.SelectedItem = "List" Then tempstring = movie.filename.ToLower
                If RadioButton6.Checked = True And ComboBox10.SelectedItem = "List" Then tempstring = movie.foldername.ToLower
                If RadioButton19.Checked = True And ComboBox10.SelectedItem = "List" Then tempstring = movie.sortorder.ToLower
                If ComboBox10.SelectedItem = "Outline" Then tempstring = movie.outline
                If ComboBox10.SelectedItem = "Year" Then tempstring = movie.year
                If ComboBox10.SelectedItem = "IMDB ID" Then tempstring = movie.id
                If ComboBox10.SelectedItem = "Filename" Then tempstring = movie.filename
                If ComboBox10.SelectedItem = "Foldername" Then tempstring = movie.foldername
                If ComboBox10.SelectedItem = "Genre" Then tempstring = movie.genre
                If ComboBox10.SelectedItem = "Rating" Then tempstring = movie.rating
                If ComboBox10.SelectedItem = "Runtime" Then tempstring = movie.runtime
                If TextBox1.Text = "" And txt_titlesearch.Text = "" Then
                    add = True
                ElseIf TextBox1.Text <> "" And txt_titlesearch.Text = "" Then
                    If tempstring.ToLower.IndexOf(TextBox1.Text.ToLower) = 0 Then
                        add = True
                    End If
                ElseIf TextBox1.Text = "" And txt_titlesearch.Text <> "" Then
                    If tempstring.ToLower.IndexOf(txt_titlesearch.Text.ToLower) <> -1 Then
                        add = True
                    End If
                ElseIf TextBox1.Text <> "" And txt_titlesearch.Text <> "" Then
                    If tempstring.ToLower.IndexOf(TextBox1.Text.ToLower) = 0 And tempstring.ToLower.IndexOf(txt_titlesearch.Text.ToLower) <> -1 Then
                        add = True
                    End If
                End If
                If add = True Then
                    add = False
                    newlist.Add(movie)
                End If
            Next
            filteredList = newlist
            '----------------------------------------------------------------------------------------------------
            Dim ValuetoSearch As String = ComboBox11.SelectedItem.ToString.ToLower
            Dim newlist1 As New List(Of str_ComboList)
            For Each movie In filteredList
                Select Case ValuetoSearch.ToLower
                    Case "all"
                        TextBox_GenreFilter.Enabled = True
                        newlist1.Add(movie)
                    Case "dvdrip"
                        If movie.filename.ToLower.IndexOf("dvdrip") <> -1 Then
                            newlist1.Add(movie)
                        End If
                    Case "dvdr5"
                        If (movie.filename.ToLower.IndexOf("dvdr5") <> -1) Or (movie.filename.ToLower.IndexOf(".r5") <> -1) Then
                            newlist1.Add(movie)
                        End If
                    Case "dvdscreener"
                        If (movie.filename.ToLower.IndexOf("dvdscreener") <> -1) Or (movie.filename.ToLower.IndexOf("dvdscr") <> -1) Or _
                        (movie.filename.ToLower.IndexOf("screener") <> -1) Then
                            newlist1.Add(movie)
                        End If
                    Case "bluray"
                        If (movie.filename.ToLower.IndexOf("bluray") <> -1) Or (movie.filename.ToLower.IndexOf("brrip") <> -1) Or _
                        (movie.filename.ToLower.IndexOf("bdrip") <> -1) Then
                            newlist1.Add(movie)
                        End If
                    Case "telesync"
                        If (movie.filename.ToLower.IndexOf("telesync") <> -1) Or (movie.filename.ToLower.IndexOf(".ts") <> -1) Then
                            newlist1.Add(movie)
                        End If
                    Case "cam"
                        If (movie.filename.ToLower.IndexOf("cam") <> -1) Then
                            newlist1.Add(movie)
                        End If
                    Case "pdtv"
                        If (movie.filename.ToLower.IndexOf("pdtv") <> -1) Or (movie.filename.ToLower.IndexOf("ppvrip") <> -1) Then
                            newlist1.Add(movie)
                        End If
                End Select
            Next
            filteredList = newlist1

            '----------------------------------------------------------------------------------------------------


            Dim genres As New List(Of String)
            Dim newlist2 As New List(Of str_ComboList)
            TextBox_GenreFilter.Text = ""
            For Each CheckBox In CheckedListBox1.CheckedItems
                genres.Add(CheckBox.ToString.ToLower)
                If Len(TextBox_GenreFilter.Text) = 0 Then
                    TextBox_GenreFilter.Text = CheckBox.ToString
                Else
                    TextBox_GenreFilter.Text = TextBox_GenreFilter.Text & ", " & CheckBox.ToString
                End If
                If CheckBox.ToString.ToLower = "duplicates" Then dupes2 = True
            Next
            If genres.Count = 0 Then TextBox_GenreFilter.Text = "Genre Filter (AND)"
            oktoadd = True
            tempint = filteredList.Count - 1
            For f = 0 To tempint
                top250 = False
                watched = False
                unwatched = False
                oktoadd = True
                For Each gen In genres
                    If gen <> Nothing Then
                        If filteredList(f).genre.ToLower.IndexOf(gen) = -1 Then
                            oktoadd = False
                        End If
                    End If
                Next
                If oktoadd = True Then
                    newlist2.Add(filteredList(f))
                End If
            Next
            filteredList = newlist2
            '----------------------------------------------------------------------------------------------------
            If dupes2 = True Then
                Dim dupelist As New List(Of str_ComboList)
                For f = 0 To filteredList.Count - 1
                    For g = 0 To filteredList.Count - 1
                        If g <> f Then
                            If filteredList(f).id = filteredList(g).id And filteredList(g).id <> "" Then
                                Dim exists As Boolean = False
                                For Each movie In filteredList
                                    If movie.fullpathandfilename = filteredList(f).fullpathandfilename Then exists = True
                                    If movie.fullpathandfilename = filteredList(g).fullpathandfilename Then exists = True
                                Next
                                If exists = True Then
                                    dupelist.Add(filteredList(f))
                                    'dupelist.Add(filteredList(g))          'SK : Not required since duplicates will be found twice - imagine just two movies with the same ID.
                                    '                                       'We check if 1=1 & skip that because g <> f
                                    '                                       'We check if 1=2 & it is true so we add movie f i.e. '1' to our list
                                    '                                       'We check if 2=1 & it is also true so we just add movie f i.e. '2' to our list
                                    '                                       'We check if 2=2 & skip due to g <> f
                                    '                                       'We end up with the two movies in our list '1' & '2'
                                End If
                            End If
                        End If
                    Next
                Next
                filteredList = dupelist
            End If
            'Call applyotherfilters()
            Call mov_MovieComboListSort()
        Catch ex As Exception
            MsgBox(ex.ToString)
        Finally
            Monitor.Exit(Me)
        End Try
    End Sub

    'create list to browse
    Private Sub mov_MovieComboLoad()
        Dim tempint As Integer = MovieListComboBox.SelectedIndex
        Dim oldmovie As String = ""
        Try
            oldmovie = CType(MovieListComboBox.SelectedItem, ValueDescriptionPair).value
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
        MovieListComboBox.Items.Clear()

        For Each movie In filteredList
            If RadioButton21.Checked = False And RadioButton7.Checked = False And RadioButton4.Checked = False And RadioButtonSortCreate.Checked = False And RadioButtonSortModified.Checked = False Then
                If RadioButton1.Checked = True Then
                    MovieListComboBox.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.titleandyear))
                ElseIf RadioButton2.Checked = True Then
                    MovieListComboBox.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.filename))
                ElseIf RadioButton6.Checked = True Then
                    MovieListComboBox.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.foldername))
                End If
            ElseIf RadioButton21.Checked = True Then

                Dim tempstring As String = movie.runtime
                Try
                    If tempstring = "" Then tempstring = "00 mins"
                    tempstring = tempstring.Substring(0, tempstring.IndexOf("min"))
                    tempstring = tempstring.Replace(" ", "")
                    Do Until IsNumeric(tempstring.Substring(0, 1))
                        If Not IsNumeric(tempstring.Substring(0, 1)) Then
                            tempstring = tempstring.Substring(1, tempstring.Length - 1)
                        End If
                    Loop
                    tempstring = tempstring.Replace(" min", "")
                    If IsNumeric(tempstring) Then
                        If tempstring.Length = 1 Then
                            tempstring = "00" & tempstring
                        End If
                        If tempstring.Length = 2 Then
                            tempstring = "0" & tempstring
                        End If
                    Else
                        tempstring = "000"
                    End If
                    tempstring = tempstring & " min - "
                Catch
                    tempstring = "000 min - "
                End Try
                If RadioButton1.Checked = True Then
                    MovieListComboBox.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, tempstring & movie.titleandyear))
                ElseIf RadioButton2.Checked = True Then
                    MovieListComboBox.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, tempstring & movie.filename))
                ElseIf RadioButton6.Checked = True Then
                    MovieListComboBox.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, tempstring & movie.foldername))
                End If
            ElseIf RadioButton7.Checked = True Then         'rating sort button selected
                Dim tempstring As String = movie.rating
                If tempstring = "" Then tempstring = "0.0"
                Try
                    Do Until IsNumeric(tempstring.Substring(0, 1))
                        If Not IsNumeric(tempstring.Substring(0, 1)) Then
                            tempstring = tempstring.Substring(1, tempstring.Length - 1)
                        End If
                    Loop
                Catch
                    tempstring = 0.0
                End Try
                If IsNumeric(tempstring) Then
                    If tempstring.Length = 1 Then
                        tempstring = "0" & tempstring
                    End If
                    If tempstring.Length = 0 Then
                        tempstring = "00" & tempstring
                    End If
                Else
                    tempstring = "00"
                End If
                tempstring = tempstring & " - "
                If RadioButton1.Checked = True Then
                    MovieListComboBox.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, tempstring & movie.titleandyear))
                ElseIf RadioButton2.Checked = True Then
                    MovieListComboBox.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, tempstring & movie.filename))
                ElseIf RadioButton6.Checked = True Then
                    MovieListComboBox.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, tempstring & movie.foldername))
                End If
            ElseIf RadioButton4.Checked = True Then
                Dim tempstring As String = movie.year
                Try
                    Do Until IsNumeric(tempstring.Substring(0, 1))
                        If Not IsNumeric(tempstring.Substring(0, 1)) Then
                            tempstring = tempstring.Substring(1, tempstring.Length - 1)
                        End If
                    Loop
                Catch
                    tempstring = "0000"
                End Try
                If IsNumeric(tempstring) Then
                    If tempstring.Length = 1 Then
                        tempstring = "0000"
                    End If
                    If tempstring.Length = 0 Then
                        tempstring = "0000" & tempstring
                    End If
                    If tempstring.Length = 3 Then
                        tempstring = "0000"
                    End If
                    If tempstring.Length = 2 Then
                        tempstring = "0000"
                    End If
                Else
                    tempstring = "0000"
                End If
                tempstring = tempstring & " - "
                If RadioButton1.Checked = True Then
                    MovieListComboBox.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, tempstring & movie.title))
                ElseIf RadioButton2.Checked = True Then
                    MovieListComboBox.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, tempstring & movie.filename))
                ElseIf RadioButton6.Checked = True Then
                    MovieListComboBox.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, tempstring & movie.foldername))
                End If

            ElseIf RadioButtonSortCreate.Checked = True Or RadioButtonSortModified.Checked = True Then    'Sort by CreateDate (date in nfo) OR FileDate (date of nfo from Operating System)
                Dim tempstring As String = ""
                If CheckBox_ShowDateOnMovieList.Checked = True Then             'If this is false tempstring will stay as "" in the list below
                    Dim tempdate As Date = Nothing
                    If RadioButtonSortCreate.Checked = True Then 'create=create modified=filedate
                        tempdate = DateSerial(movie.createdate.Substring(0, 4), movie.createdate.Substring(4, 2), movie.createdate.Substring(6, 2))
                    Else
                        tempdate = DateSerial(movie.filedate.Substring(0, 4), movie.filedate.Substring(4, 2), movie.filedate.Substring(6, 2))
                    End If
                    tempstring = tempdate.ToShortDateString   'This is the format set in your regional settings in control panel for shortdate
                    tempstring = tempstring & " - "
                End If

                If RadioButton1.Checked = True Then
                    MovieListComboBox.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, tempstring & movie.titleandyear))
                ElseIf RadioButton2.Checked = True Then
                    MovieListComboBox.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, tempstring & movie.filename))
                ElseIf RadioButton6.Checked = True Then
                    MovieListComboBox.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, tempstring & movie.foldername))
                End If
            End If


        Next
        If oldmovie <> "" Then
            Dim counted As Integer = MovieListComboBox.Items.Count - 1
            For f = 0 To counted
                If CType(MovieListComboBox.Items(f), ValueDescriptionPair).value = oldmovie Then
                    MovieListComboBox.SelectedIndex = f
                    Exit For
                End If
            Next
            If MovieListComboBox.SelectedIndex = -1 Then
                Try
                    MovieListComboBox.SelectedIndex = tempint
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                    Try
                        MovieListComboBox.SelectedIndex = tempint - 1
                    Catch
                        Try
                            MovieListComboBox.SelectedIndex = 0
                        Catch
                        End Try
                    End Try
                End Try
            End If
        End If
        Label39.Text = "Displaying " & filteredList.Count & " of  " & fullMovieList.Count & " movies"

    End Sub

    'View Title, Filename, or Foldername
    Private Sub mov_MovieComboListSort()
        Monitor.Enter(Me)
        'Try
        Dim comboarray2 As New List(Of str_ComboList)
        If RadioButton3.Checked = True Then
            ListBox2.Items.Clear()
            For Each movie In filteredList
                If RadioButton1.Checked = True Then
                    ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.titleandyear))
                ElseIf RadioButton2.Checked = True Then
                    ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.filename))
                ElseIf RadioButton6.Checked = True Then
                    ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.foldername))
                End If
            Next
            ListBox2.Sorted = True
            For Each movie In ListBox2.Items
                For Each film In filteredList
                    If film.fullpathandfilename Is CType(movie, ValueDescriptionPair).Value Then
                        comboarray2.Add(film)
                        Exit For
                    End If
                Next
            Next
        End If

        If RadioButton4.Checked = True Then
            MovieListComboBox.Sorted = False
            ListBox2.Items.Clear()
            For Each movie In filteredList
                ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.year))
            Next
            ListBox2.Sorted = True

            For Each movie In ListBox2.Items
                For Each film In filteredList
                    If film.fullpathandfilename Is CType(movie, ValueDescriptionPair).Value Then
                        comboarray2.Add(film)
                        Exit For
                    End If
                Next
            Next
        End If

        If RadioButton21.Checked = True Then
            MovieListComboBox.Sorted = False
            ListBox2.Items.Clear()
            For Each movie In filteredList
                Dim tempstring As String = movie.runtime
                If tempstring = "" Then tempstring = "00 mins"
                Try
                    tempstring = tempstring.Substring(0, tempstring.IndexOf("min"))
                    tempstring = tempstring.Replace(" ", "")
                    Do Until IsNumeric(tempstring.Substring(0, 1))
                        If Not IsNumeric(tempstring.Substring(0, 1)) Then
                            tempstring = tempstring.Substring(1, tempstring.Length - 1)
                        End If
                    Loop
                    tempstring = tempstring.Replace(" min", "")
                    If IsNumeric(tempstring) Then
                        If tempstring.Length = 1 Then
                            tempstring = "00" & tempstring
                        End If
                        If tempstring.Length = 2 Then
                            tempstring = "0" & tempstring
                        End If
                    Else
                        tempstring = "000"
                    End If
                Catch
                    tempstring = "- mins"
                End Try
                ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, tempstring))
            Next
            ListBox2.Sorted = True

            For Each movie In ListBox2.Items
                For Each film In filteredList
                    If film.fullpathandfilename Is CType(movie, ValueDescriptionPair).Value Then
                        comboarray2.Add(film)
                        Exit For
                    End If
                Next
            Next
        End If




        If RadioButtonSortCreate.Checked = True Then        'Date Added button
            MovieListComboBox.Sorted = False
            ListBox2.Items.Clear()
            For Each movie In filteredList
                If IsNumeric(movie.createdate) Then
                    ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.createdate))
                Else
                    ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.filedate))
                End If
            Next
            ListBox2.Sorted = True

            For Each movie In ListBox2.Items
                For Each film In filteredList
                    If film.fullpathandfilename Is CType(movie, ValueDescriptionPair).Value Then
                        comboarray2.Add(film)
                        Exit For
                    End If
                Next

            Next
        End If



        If RadioButton19.Checked = True Then
            MovieListComboBox.Sorted = False
            ListBox2.Items.Clear()
            For Each movie In filteredList
                If movie.sortorder <> Nothing Then
                    If movie.sortorder <> "" Then
                        ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.sortorder))
                    Else
                        ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.title))
                    End If
                Else
                    ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.title))
                End If
            Next
            ListBox2.Sorted = True

            For Each movie In ListBox2.Items
                For Each film In filteredList
                    If film.fullpathandfilename Is CType(movie, ValueDescriptionPair).Value Then
                        comboarray2.Add(film)
                        Exit For
                    End If
                Next
            Next
        End If




        If RadioButtonSortModified.Checked = True Then   'in nfo as createdate'
            MovieListComboBox.Sorted = False
            ListBox2.Items.Clear()
            For Each movie In filteredList
                ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.createdate)) '.ToString))
            Next
            ListBox2.Sorted = True


            For Each movie In ListBox2.Items
                For Each film In filteredList
                    If film.fullpathandfilename Is CType(movie, ValueDescriptionPair).Value Then
                        comboarray2.Add(film)
                        Exit For
                    End If
                Next
            Next

        End If
        If RadioButton7.Checked = True Then
            MovieListComboBox.Sorted = False
            ListBox2.Items.Clear()
            ListBox2.Sorted = False
            For Each movie In filteredList
                If RadioButton1.Checked = True Then
                    ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.rating & " - " & movie.title))
                ElseIf RadioButton2.Checked = True Then
                    ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.rating & " - " & movie.filename))
                ElseIf RadioButton6.Checked = True Then
                    ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.rating & " - " & movie.foldername))
                End If
            Next
            ListBox2.Sorted = True
            MovieListComboBox.Sorted = False

            For Each movie In ListBox2.Items
                For Each film In filteredList
                    If film.fullpathandfilename Is CType(movie, ValueDescriptionPair).Value Then
                        comboarray2.Add(film)
                        Exit For
                    End If
                Next
            Next

        End If
        'filteredlist.Clear()

        If RadioButtonSortModified.Checked = False And RadioButton4.Checked = False And RadioButton7.Checked = False And RadioButtonSortCreate.Checked = False Then
            If btnreverse.CheckState = CheckState.Unchecked Then
                filteredList = comboarray2
            Else
                filteredList.Clear()
                For f = comboarray2.Count - 1 To 0 Step -1
                    Dim movietoadd As New str_ComboList(SetDefaults)
                    movietoadd.plot = comboarray2(f).plot
                    movietoadd.fullpathandfilename = comboarray2(f).fullpathandfilename
                    movietoadd.titleandyear = comboarray2(f).titleandyear
                    movietoadd.filename = comboarray2(f).filename
                    movietoadd.year = comboarray2(f).year
                    movietoadd.filedate = comboarray2(f).filedate
                    movietoadd.foldername = comboarray2(f).foldername
                    movietoadd.runtime = comboarray2(f).runtime
                    movietoadd.outline = comboarray2(f).outline
                    movietoadd.rating = comboarray2(f).rating
                    If comboarray2(f).sortorder = Nothing Then
                        movietoadd.sortorder = comboarray2(f).sortorder
                    ElseIf comboarray2(f).sortorder = "" Then
                        movietoadd.sortorder = comboarray2(f).sortorder
                    Else
                        movietoadd.sortorder = comboarray2(f).sortorder
                    End If
                    movietoadd.createdate = comboarray2(f).createdate
                    movietoadd.id = comboarray2(f).id
                    movietoadd.genre = comboarray2(f).genre
                    movietoadd.sortorder = comboarray2(f).sortorder
                    movietoadd.title = comboarray2(f).title
                    movietoadd.originaltitle = comboarray2(f).originaltitle
                    movietoadd.movieset = comboarray2(f).movieset
                    movietoadd.filedate = comboarray2(f).filedate

                    filteredList.Add(movietoadd)
                Next
            End If
        Else
            If btnreverse.CheckState = CheckState.Checked Then
                filteredList = comboarray2
            Else
                filteredList.Clear()
                For f = comboarray2.Count - 1 To 0 Step -1
                    Dim movietoadd As New str_ComboList(SetDefaults)
                    movietoadd.plot = comboarray2(f).plot
                    movietoadd.fullpathandfilename = comboarray2(f).fullpathandfilename
                    movietoadd.titleandyear = comboarray2(f).titleandyear
                    movietoadd.filename = comboarray2(f).filename
                    movietoadd.year = comboarray2(f).year
                    movietoadd.filedate = comboarray2(f).filedate
                    movietoadd.foldername = comboarray2(f).foldername
                    movietoadd.rating = comboarray2(f).rating
                    movietoadd.top250 = comboarray2(f).top250
                    movietoadd.createdate = comboarray2(f).createdate
                    movietoadd.id = comboarray2(f).id
                    movietoadd.outline = comboarray2(f).outline
                    movietoadd.rating = comboarray2(f).rating
                    movietoadd.genre = comboarray2(f).genre
                    movietoadd.runtime = comboarray2(f).runtime
                    movietoadd.title = comboarray2(f).title
                    movietoadd.originaltitle = comboarray2(f).originaltitle
                    If comboarray2(f).sortorder = Nothing Then
                        movietoadd.sortorder = comboarray2(f).sortorder
                    ElseIf comboarray2(f).sortorder = "" Then
                        movietoadd.sortorder = comboarray2(f).sortorder
                    Else
                        movietoadd.sortorder = comboarray2(f).sortorder
                    End If
                    movietoadd.movieset = comboarray2(f).movieset
                    movietoadd.filedate = comboarray2(f).filedate
                    filteredList.Add(movietoadd)
                Next
            End If
        End If
        mov_MovieComboLoad()
        'Catch
        'Finally
        Monitor.Exit(Me)
        'End Try

    End Sub

    'zoom images
    Private Sub moviethumb_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles moviethumb.DoubleClick
        Try
            Try
                If workingMovieDetails.fileinfo.posterpath <> Nothing Then
                    If IO.File.Exists(workingMovieDetails.fileinfo.posterpath) Then
                        Me.ControlBox = False
                        MenuStrip1.Enabled = False
                        Using newimage As New Bitmap(workingMovieDetails.fileinfo.posterpath)
                            util_ZoomImage(newimage)
                        End Using
                    End If
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub PictureBox7_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles PictureBox7.DoubleClick
        Try
            Try
                If workingMovieDetails.fileinfo.fanartpath <> Nothing Then
                    If IO.File.Exists(workingMovieDetails.fileinfo.fanartpath) Then
                        Me.ControlBox = False
                        MenuStrip1.Enabled = False
                        Using newimage As New Bitmap(workingMovieDetails.fileinfo.fanartpath)
                            util_ZoomImage(newimage)
                        End Using
                    End If
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub util_ZoomImage(ByVal file As Bitmap)
        bigPanel = New Panel
        With bigPanel
            .Width = Me.Width
            .Height = Me.Height
            .BringToFront()
            .Dock = DockStyle.Fill
        End With

        bigPictureBox = New PictureBox()

        With bigPictureBox
            .Location = New Point(0, 0)
            .Width = bigPanel.Width
            .Height = bigPanel.Height
            .SizeMode = PictureBoxSizeMode.Zoom
            '.Image = sender.image
            .Image = file
            .Visible = True
            .BorderStyle = BorderStyle.Fixed3D
            AddHandler bigPictureBox.DoubleClick, AddressOf util_PicBoxClose
            .Dock = DockStyle.Fill
        End With

        'Dim sizex As Integer = bigpicbox.Width
        'Dim sizey As Integer = bigpicbox.Height

        Dim bigpanellabel As Label
        bigpanellabel = New Label
        With bigpanellabel
            .Location = New Point(20, 200)
            .Width = 150
            .Height = 50
            .Visible = True
            .Text = "Double Click Image To" & vbCrLf & "Return To Browser"
            '   .BringToFront()
        End With

        Me.bigPanel.Controls.Add(bigpanellabel)
        bigpanellabel.BringToFront()
        Application.DoEvents()



        If Not bigPictureBox.Image Is Nothing And bigPictureBox.Image.Width > 20 Then

            Dim sizey As Integer = bigPictureBox.Image.Height
            Dim sizex As Integer = bigPictureBox.Image.Width
            Dim tempstring As String
            tempstring = "Full Image Resolution :- " & sizex.ToString & " x " & sizey.ToString
            Dim resolutionlbl As New Label
            With resolutionlbl
                .Location = New Point(20, 450)
                .Width = 300
                .Text = tempstring
                .BackColor = Color.Transparent
            End With

            Me.bigPanel.Controls.Add(resolutionlbl)
            resolutionlbl.BringToFront()
            Me.Refresh()
            Application.DoEvents()
            Dim tempstring2 As String = resolutionlbl.Text
        Else
            'bigpicbox.ImageLocation = posterurls(rememberint + 1, 1)
        End If


        Me.Controls.Add(bigPanel)
        bigPanel.BringToFront()
        Me.bigPanel.Controls.Add(bigPictureBox)
        Me.Refresh()
    End Sub

    Private Sub bigpicbox_LoadCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs) Handles bigPictureBox.LoadCompleted
        Try
            Dim bigpanellabel As Label
            bigpanellabel = New Label
            Dim resolutionlbl As Label
            With bigpanellabel
                .Location = New Point(20, 200)
                .Width = 150
                .Height = 50
                .Visible = True
                .Text = "Double Click Image To" & vbCrLf & "Return To Browser"
                '   .BringToFront()
            End With

            Me.bigPanel.Controls.Add(bigpanellabel)
            bigpanellabel.BringToFront()
            Application.DoEvents()



            If Not bigPictureBox.Image Is Nothing And bigPictureBox.Image.Width > 20 Then

                Dim sizey As Integer = bigPictureBox.Image.Height
                Dim sizex As Integer = bigPictureBox.Image.Width
                Dim tempstring As String
                tempstring = "Full Image Resolution :- " & sizex.ToString & " x " & sizey.ToString
                resolutionlbl = New Label
                With resolutionlbl
                    .Location = New Point(20, 450)
                    .Width = 180
                    .Text = tempstring
                    .BackColor = Color.Transparent
                End With

                Me.bigPanel.Controls.Add(resolutionlbl)
                resolutionlbl.BringToFront()
                Me.Refresh()
                Application.DoEvents()
                Dim tempstring2 As String = resolutionlbl.Text
            Else
                'bigpicbox.ImageLocation = posterurls(rememberint + 1, 1)
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub util_PicBoxClose()
        Me.Controls.Remove(bigPanel)
        bigPanel = Nothing
        Me.Controls.Remove(bigPictureBox)
        bigPictureBox = Nothing
        Me.ControlBox = True
        MenuStrip1.Enabled = True
        'ToolStrip1.Enabled = True
    End Sub

    'reset all filters
    Private Sub Button2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ButtonResetFilters.Click
        Try
            filterOverride = False
            TextBox1.Text = ""
            txt_titlesearch.Text = ""
            txt_titlesearch.BackColor = Color.White
            TextBox1.BackColor = Color.White

            ButtonNextFanart.Visible = False   'hide next movie button on fanart tab used for missing fanart
            ButtonNextFanart.Text = "Click here to move to next Movie without Fanart"  'resetthe button text back to default for when its next show
            For i = 0 To CheckedListBox1.Items.Count - 1
                CheckedListBox1.SetItemChecked(i, False)
            Next
            RadioButton45.Checked = True     'set movie filters indication back to all
            ComboBox11.SelectedIndex = 0   'set filename filetype filter back to all
            Call mov_FiltersAndSortApply()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    'Medianfo.dll to outputlog
    Private Sub util_FileDetailsGet()
        Dim tempstring As String = String.Empty
        Dim exists As Boolean
        Dim movieinfo As String = String.Empty
        Dim medianfoexists As Boolean = False
        If applicationPath.IndexOf("/") <> -1 Then tempstring = applicationPath & "/" & "MediaInfo.dll"
        If applicationPath.IndexOf("\") <> -1 Then tempstring = applicationPath & "\" & "MediaInfo.dll"
        exists = IO.File.Exists(tempstring)
        If exists = True Then
            medianfoexists = True
        End If
        If medianfoexists = False Then
            MsgBox("Unable to find th file ""MediaInfo.dll""" & vbCrLf & vbCrLf & "Please make sure this file is available in the programs root directory")
            Exit Sub
        End If
        Dim To_Display As String = ""
        Dim tempstring5 As String
        Dim MI As mediainfo
        MI = New mediainfo
        tempstring5 = MI.Option_("Info_Version", "0.7.0.0;MediaInfoDLL_Example_MSVB;0.7.0.0")
        If (tempstring5.Length() = 0) Then
            TextBox1.Text = "MediaInfo.Dll: this version of the DLL is not compatible"
            Exit Sub
        End If
        tempstring = Utilities.GetFileName(pathtxt.Text)
        If IO.Path.GetFileName(tempstring).ToLower = "video_ts.ifo" Then
            Dim temppath As String = tempstring.Replace(IO.Path.GetFileName(tempstring), "VTS_01_0.IFO")
            If IO.File.Exists(temppath) Then
                tempstring = temppath
            End If
        End If
        If IO.File.Exists(tempstring) Then
            MI.Open(tempstring)
            To_Display = MI.Inform
            movieinfo = To_Display
            MI.Close()
        End If

        TextBox8.Text = movieinfo
    End Sub

#Region "Auxiliary Procedures for Multithreading of Rescraping Movies Procedure Below"

    Private Sub mov_ReScrapingStartTemp()
        Dim FullFileContent As String = ""
        Dim Scraper As String = Preferences.XBMC_Scraper
        FullFileContent = Start_XBMC_MoviesReScraping(Scraper, workingMovieDetails.fullmoviebody.imdbid, Utilities.GetFileName(CType(MovieListComboBox.SelectedItem, ValueDescriptionPair).Value))
        If FullFileContent.ToLower <> "error" Then
            Dim Teste As Boolean = CreateMovieNfo(Utilities.GetFileName(CType(MovieListComboBox.SelectedItem, ValueDescriptionPair).Value), FullFileContent)
            mov_ListRefresh()
        End If
        If messbox.Visible = True Then messbox.Close()
        If Me.Cursor = Cursors.WaitCursor Then Me.Cursor = Cursors.Default
    End Sub
    Private Sub mov_ListRefresh()
        Call mov_FormPopulate()

        For f = 0 To fullMovieList.Count - 1
            If fullMovieList(f).fullpathandfilename = workingMovieDetails.fileinfo.fullpathandfilename Then

                Dim newfullmovie As New str_ComboList(SetDefaults) 'this should be new to initialise values
                newfullmovie = fullMovieList(f)
                '-------------- Aqui
                If Preferences.ignorearticle = True Then
                    If workingMovieDetails.fullmoviebody.title.ToLower.IndexOf("the ") = 0 Then
                        newfullmovie.titleandyear = workingMovieDetails.fullmoviebody.title.Substring(4, workingMovieDetails.fullmoviebody.title.Length - 4) & ", The" & " (" & workingMovieDetails.fullmoviebody.year & ")"
                    Else
                        newfullmovie.titleandyear = workingMovieDetails.fullmoviebody.title & " (" & workingMovieDetails.fullmoviebody.year & ")"
                    End If
                Else
                    newfullmovie.titleandyear = workingMovieDetails.fullmoviebody.title & " (" & workingMovieDetails.fullmoviebody.year & ")"
                End If
                newfullmovie.genre = workingMovieDetails.fullmoviebody.genre
                Dim filecreation2 As New IO.FileInfo(workingMovieDetails.fileinfo.fullpathandfilename)
                Dim myDate2 As Date = filecreation2.LastWriteTime
                Try
                    newfullmovie.filedate = Format(myDate2, "yyyyMMddHHmmss").ToString
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
                If workingMovieDetails.fileinfo.createdate <> Nothing Then
                    newfullmovie.createdate = workingMovieDetails.fileinfo.createdate
                ElseIf workingMovieDetails.fileinfo.createdate <> "" Then
                    newfullmovie.createdate = workingMovieDetails.fileinfo.createdate = workingMovieDetails.fileinfo.createdate
                Else
                    newfullmovie.createdate = newfullmovie.filedate
                End If
                newfullmovie.originaltitle = workingMovieDetails.fullmoviebody.originaltitle
                newfullmovie.outline = workingMovieDetails.fullmoviebody.outline
                newfullmovie.playcount = workingMovieDetails.fullmoviebody.playcount
                newfullmovie.rating = workingMovieDetails.fullmoviebody.rating
                newfullmovie.top250 = workingMovieDetails.fullmoviebody.top250
                newfullmovie.runtime = workingMovieDetails.fullmoviebody.runtime
                If workingMovieDetails.fullmoviebody.runtime.IndexOf(":") <> -1 Then
                    Try
                        workingMovieDetails.fullmoviebody.runtime = workingMovieDetails.fullmoviebody.runtime.Substring(workingMovieDetails.fullmoviebody.runtime.IndexOf(":") + 1, workingMovieDetails.fullmoviebody.runtime.Length - workingMovieDetails.fullmoviebody.runtime.IndexOf(":") - 1)
                    Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                    End Try
                End If
                fullMovieList.RemoveAt(f)
                fullMovieList.Add(newfullmovie)
                Exit For
            End If
        Next

        Call mov_FiltersAndSortApply()
        If messbox.Visible = True Then messbox.Close()

        If Me.Cursor = Cursors.WaitCursor Then Me.Cursor = Cursors.Default

    End Sub
#End Region

    Private Sub mov_Rescrape()
        Dim tempstring As String = ""
        Dim tempint As Integer = 0
        If outlinetxt.Text = "MC cannot find this file, either the file no longer exists, or MC cannot access the file path" Then
            MsgBox("MC cannot find this file, either the file no longer exists, or MC cannot access the file path")
            Exit Sub
        End If
        tempint = MessageBox.Show("Rescraping the movie will Overwrite all the current details" & vbCrLf & "Do you wish to continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
        If tempint = DialogResult.No Then
            Exit Sub
        End If
        messbox = New frmMessageBox("", "", "The Selected Movie is being Rescraped....")
        System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
        messbox.Show()
        messbox.Refresh()
        Application.DoEvents()
        If Preferences.movies_useXBMC_Scraper = True Then
            If workingMovieDetails.fullmoviebody.title = Nothing And workingMovieDetails.fullmoviebody.imdbid = Nothing Then
                messbox.Close()
                MsgBox("Can't rescrape this movie because it doesn't have any NFO File" & vbCrLf & "rebuild movie database, and search for new movies", MsgBoxStyle.OkOnly, "Error")
                Exit Sub
            Else
                ' If NovaThread.IsAlive Then NovaThread.Abort()
                novaThread = New Thread(New ThreadStart(AddressOf mov_ReScrapingStartTemp))
                novaThread.SetApartmentState(ApartmentState.STA)
                novaThread.Start()
            End If
        Else
            Try
                messbox.TextBox1.Text = "Clearing Variables"
                If workingMovieDetails Is Nothing Then Exit Sub
                If workingMovieDetails.fullmoviebody.title = Nothing And workingMovieDetails.fullmoviebody.imdbid = Nothing Then Exit Sub
                Me.Cursor = Cursors.WaitCursor
                'Dim scraper As New imdb.Classimdbscraper
                Dim scraper As New Classimdb
                Dim body As String = String.Empty
                Dim actorlist As String = String.Empty
                Dim trailer As String = String.Empty
                Dim thumbstring As New XmlDocument
                Dim thisresult As XmlNode = Nothing
                workingMovieDetails.alternativetitles.Clear()
                workingMovieDetails.fullmoviebody.credits = Nothing
                workingMovieDetails.fullmoviebody.director = Nothing
                workingMovieDetails.fullmoviebody.stars = Nothing
                workingMovieDetails.fullmoviebody.genre = Nothing
                workingMovieDetails.fullmoviebody.mpaa = Nothing
                workingMovieDetails.fullmoviebody.outline = Nothing
                workingMovieDetails.fullmoviebody.plot = Nothing
                workingMovieDetails.fullmoviebody.premiered = Nothing
                workingMovieDetails.fullmoviebody.rating = Nothing
                workingMovieDetails.fullmoviebody.runtime = Nothing
                workingMovieDetails.fullmoviebody.studio = Nothing
                workingMovieDetails.fullmoviebody.tagline = Nothing
                workingMovieDetails.fullmoviebody.thumbnails = Nothing
                workingMovieDetails.fullmoviebody.title = Nothing
                workingMovieDetails.fullmoviebody.originaltitle = Nothing
                workingMovieDetails.fullmoviebody.top250 = Nothing
                workingMovieDetails.fullmoviebody.trailer = Nothing
                workingMovieDetails.fullmoviebody.votes = Nothing
                workingMovieDetails.fullmoviebody.year = Nothing
                workingMovieDetails.fullmoviebody.sortorder = Nothing
                workingMovieDetails.fullmoviebody.country = Nothing

                'Dim newscraper As New Classimdb
                'body = newscraper.getimdbbody(workingmoviedetails.fullmoviebody.title, workingmoviedetails.fullmoviebody.year, workingmoviedetails.fullmoviebody.imdbid, Preferences.imdbmirror)
                'trailer = newscraper.gettrailerurl(workingmoviedetails.fullmoviebody.imdbid, Preferences.imdbmirror)
                messbox.TextBox1.Text = "Get IMDB Body"
                body = scraper.getimdbbody(workingMovieDetails.fullmoviebody.title, workingMovieDetails.fullmoviebody.year, workingMovieDetails.fullmoviebody.imdbid, Preferences.imdbmirror)
                messbox.TextBox1.Text = "Get Trailer"
                trailer = scraper.gettrailerurl(workingMovieDetails.fullmoviebody.imdbid, Preferences.imdbmirror)
                'Dim actors As String
                messbox.TextBox1.Text = "Get Actors"
                'actors = scraper.getimdbactors(Preferences.imdbmirror, workingMovieDetails.fullmoviebody.imdbid, workingMovieDetails.fullmoviebody.title)
                messbox.TextBox1.Text = "Processing..."
                If body = "MIC" Then
                    workingMovieDetails.fullmoviebody.genre = "problem"
                Else

                    thumbstring.LoadXml(body)



                    Dim certificates As New List(Of String)

                    For Each thisresult In thumbstring("movie")
                        Select Case thisresult.Name
                            Case "title"
                                If Preferences.keepfoldername = False Then
                                    workingMovieDetails.fullmoviebody.title = thisresult.InnerText
                                Else
                                    If Preferences.usefoldernames = False Then
                                        tempstring = IO.Path.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename)
                                        workingMovieDetails.fullmoviebody.title = Utilities.CleanFileName(tempstring)
                                        workingMovieDetails.fullmoviebody.originaltitle = workingMovieDetails.fullmoviebody.title
                                    Else
                                        workingMovieDetails.fullmoviebody.title = Utilities.CleanFileName(workingMovieDetails.fileinfo.foldername, False)
                                        workingMovieDetails.fullmoviebody.originaltitle = workingMovieDetails.fullmoviebody.title
                                    End If
                                End If

                            Case "country"
                                workingMovieDetails.fullmoviebody.country = thisresult.InnerText
                            Case "alternativetitle"
                                workingMovieDetails.alternativetitles.Add(thisresult.InnerText)
                            Case "credits"
                                workingMovieDetails.fullmoviebody.credits = thisresult.InnerText
                            Case "director"
                                workingMovieDetails.fullmoviebody.director = thisresult.InnerText
                            Case "stars"
                                workingMovieDetails.fullmoviebody.stars = thisresult.InnerText
                            Case "genre"
                                Dim strarr() As String
                                strarr = thisresult.InnerText.Split("/")
                                For count = 0 To strarr.Length - 1
                                    strarr(count) = strarr(count).Replace(" ", "")
                                Next
                                If strarr.Length <= Preferences.maxmoviegenre Then
                                    workingMovieDetails.fullmoviebody.genre = thisresult.InnerText
                                Else
                                    For f = 0 To Preferences.maxmoviegenre - 1
                                        If f = 0 Then
                                            workingMovieDetails.fullmoviebody.genre = strarr(f)
                                        Else
                                            workingMovieDetails.fullmoviebody.genre += " / " & strarr(f)
                                        End If
                                    Next
                                End If
                            Case "mpaa"
                                workingMovieDetails.fullmoviebody.mpaa = thisresult.InnerText
                            Case "outline"
                                workingMovieDetails.fullmoviebody.outline = thisresult.InnerText
                            Case "plot"
                                workingMovieDetails.fullmoviebody.plot = thisresult.InnerText
                            Case "premiered"
                                workingMovieDetails.fullmoviebody.premiered = thisresult.InnerText
                            Case "rating"
                                workingMovieDetails.fullmoviebody.rating = thisresult.InnerText
                            Case "runtime"
                                workingMovieDetails.fullmoviebody.runtime = thisresult.InnerText
                                If workingMovieDetails.fullmoviebody.runtime.IndexOf(":") <> -1 Then
                                    Try
                                        workingMovieDetails.fullmoviebody.runtime = workingMovieDetails.fullmoviebody.runtime.Substring(workingMovieDetails.fullmoviebody.runtime.IndexOf(":") + 1, workingMovieDetails.fullmoviebody.runtime.Length - workingMovieDetails.fullmoviebody.runtime.IndexOf(":") - 1)
                                    Catch ex As Exception
#If SilentErrorScream Then
                                        Throw ex
#End If
                                    End Try
                                End If
                            Case "studio"
                                workingMovieDetails.fullmoviebody.studio = thisresult.InnerText
                            Case "tagline"
                                workingMovieDetails.fullmoviebody.tagline = thisresult.InnerText
                            Case "top250"
                                workingMovieDetails.fullmoviebody.top250 = thisresult.InnerText
                            Case "votes"
                                workingMovieDetails.fullmoviebody.votes = thisresult.InnerText
                            Case "year"
                                workingMovieDetails.fullmoviebody.year = thisresult.InnerText
                            Case "cert"
                                certificates.Add(thisresult.InnerText)
                            Case "id"
                                workingMovieDetails.fullmoviebody.imdbid = thisresult.InnerText
                        End Select
                    Next

                    ' Save the original title
                    workingMovieDetails.fullmoviebody.originaltitle = workingMovieDetails.fullmoviebody.title

                    ' If plot is empty, use outline
                    If workingMovieDetails.fullmoviebody.plot = "" Then workingMovieDetails.fullmoviebody.plot = workingMovieDetails.fullmoviebody.outline

                    Try
                        If Preferences.gettrailer = True Then
                            If trailer <> String.Empty And trailer <> "Error" Then
                                workingMovieDetails.fullmoviebody.trailer = trailer
                            End If
                        End If
                    Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                    End Try
                    messbox.TextBox1.Text = "Get actorlist"
                    actorlist = scraper.getimdbactors(Preferences.imdbmirror, workingMovieDetails.fullmoviebody.imdbid, workingMovieDetails.fullmoviebody.title, Preferences.maxactors)
                    'actorlist = getimdbactors(Preferences.imdbmirror, workingmoviedetails.fullmoviebody.imdbid, workingmoviedetails.fullmoviebody.title, Preferences.maxactors)
                    Dim done As Boolean = False
                    For f = 0 To UBound(Preferences.certificatepriority)
                        Try
                            For Each cert In certificates
                                If cert.IndexOf(Preferences.certificatepriority(f)) <> -1 Then
                                    workingMovieDetails.fullmoviebody.mpaa = cert.Substring(cert.IndexOf("|") + 1, cert.Length - cert.IndexOf("|") - 1)
                                    done = True
                                    Exit For
                                End If
                            Next
                        Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                        End Try
                        If done = True Then Exit For
                    Next
                End If
                messbox.TextBox1.Text = "Get Thumbs"
                'Preferences.certificatepriority(1)
                workingMovieDetails.listthumbs.Clear()
                If Preferences.nfoposterscraper <> 0 Then
                    Dim thumbs As String = ""

                    If Preferences.nfoposterscraper = 1 Or Preferences.nfoposterscraper = 3 Or Preferences.nfoposterscraper = 5 Or Preferences.nfoposterscraper = 7 Or Preferences.nfoposterscraper = 9 Or Preferences.nfoposterscraper = 11 Or Preferences.nfoposterscraper = 13 Or Preferences.nfoposterscraper = 15 Then
                        Dim newobject3 As New IMPA.getimpaposters
                        tempstring = newobject3.getimpathumbs(workingMovieDetails.fullmoviebody.title, workingMovieDetails.fullmoviebody.year)
                        If tempstring <> Nothing Then thumbs = thumbs & tempstring
                    End If

                    If Preferences.nfoposterscraper = 2 Or Preferences.nfoposterscraper = 3 Or Preferences.nfoposterscraper = 6 Or Preferences.nfoposterscraper = 7 Or Preferences.nfoposterscraper = 10 Or Preferences.nfoposterscraper = 11 Or Preferences.nfoposterscraper = 14 Or Preferences.nfoposterscraper = 15 Then
                        Dim newobject2 As New tmdb_posters.Class1
                        tempstring = newobject2.gettmdbposters(workingMovieDetails.fullmoviebody.imdbid)
                        If tempstring <> Nothing Then thumbs = thumbs & tempstring
                    End If

                    If Preferences.nfoposterscraper = 4 Or Preferences.nfoposterscraper = 5 Or Preferences.nfoposterscraper = 6 Or Preferences.nfoposterscraper = 7 Or Preferences.nfoposterscraper = 12 Or Preferences.nfoposterscraper = 13 Or Preferences.nfoposterscraper = 14 Or Preferences.nfoposterscraper = 15 Then
                        Dim newobject As New class_mpdb_thumbs.Class1
                        tempstring = newobject.get_mpdb_thumbs(workingMovieDetails.fullmoviebody.imdbid)
                        If tempstring <> Nothing Then thumbs = thumbs & tempstring
                    End If

                    If Preferences.nfoposterscraper = 8 Or Preferences.nfoposterscraper = 9 Or Preferences.nfoposterscraper = 10 Or Preferences.nfoposterscraper = 11 Or Preferences.nfoposterscraper = 12 Or Preferences.nfoposterscraper = 13 Or Preferences.nfoposterscraper = 14 Or Preferences.nfoposterscraper = 15 Then
                        Dim thumbscraper As New imdb_thumbs.Class1
                        tempstring = thumbscraper.getimdbthumbs(workingMovieDetails.fullmoviebody.title, workingMovieDetails.fullmoviebody.year, workingMovieDetails.fullmoviebody.imdbid)
                        If tempstring <> Nothing Then thumbs = thumbs & tempstring
                    End If



                    thumbs = "<thumblist>" & thumbs & "</thumblist>"

                    Try
                        thumbstring.LoadXml(thumbs)



                        For Each thisresult In thumbstring("thumblist")
                            Select Case thisresult.Name
                                Case "thumb"
                                    workingMovieDetails.listthumbs.Add(thisresult.InnerText)
                            End Select
                        Next
                    Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                    End Try
                End If
                messbox.TextBox1.Text = "List Actors"
                workingMovieDetails.listactors.Clear()
                If actorlist <> Nothing Then
                    Try
                        thumbstring.LoadXml(actorlist)
                        thisresult = Nothing
                        Dim actorcount As Integer = 0
                        For Each thisresult In thumbstring("actorlist")
                            Select Case thisresult.Name
                                Case "actor"
                                    If actorcount > Preferences.maxactors Then
                                        Exit For
                                    End If
                                    actorcount += 1
                                    Dim newactor As New str_MovieActors(SetDefaults)
                                    Dim detail As XmlNode = Nothing
                                    For Each detail In thisresult.ChildNodes
                                        Select Case detail.Name
                                            Case "name"
                                                newactor.actorname = detail.InnerText
                                            Case "role"
                                                newactor.actorrole = detail.InnerText
                                            Case "thumb"
                                                newactor.actorthumb = detail.InnerText
                                            Case "actorid"
                                                If newactor.actorthumb <> Nothing Then
                                                    If detail.InnerText <> "" And Preferences.actorseasy = True Then
                                                        Dim workingpath As String = workingMovieDetails.fileinfo.fullpathandfilename.Replace(IO.Path.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename), "")
                                                        workingpath = workingpath & ".actors\"
                                                        Dim hg As New IO.DirectoryInfo(workingpath)
                                                        Dim destsorted As Boolean = False
                                                        If Not hg.Exists Then
                                                            Try
                                                                IO.Directory.CreateDirectory(workingpath)
                                                                destsorted = True
                                                            Catch ex As Exception
#If SilentErrorScream Then
                                                                Throw ex
#End If
                                                            End Try
                                                        Else
                                                            destsorted = True
                                                        End If
                                                        If destsorted = True Then
                                                            Dim filename As String = newactor.actorname.Replace(" ", "_")
                                                            filename = filename & ".tbn"
                                                            filename = IO.Path.Combine(workingpath, filename)
                                                            If Not IO.File.Exists(filename) Then
                                                                Utilities.DownloadFile(newactor.actorthumb, filename)
'                                                                Try
'                                                                    Dim buffer(4000000) As Byte
'                                                                    Dim size As Integer = 0
'                                                                    Dim bytesRead As Integer = 0
'                                                                    Dim thumburl As String = newactor.actorthumb
'                                                                    Dim req As HttpWebRequest = WebRequest.Create(thumburl)
'                                                                    Dim res As HttpWebResponse = req.GetResponse()
'                                                                    Dim contents As Stream = res.GetResponseStream()
'                                                                    Dim bytesToRead As Integer = CInt(buffer.Length)
'                                                                    While bytesToRead > 0
'                                                                        size = contents.Read(buffer, bytesRead, bytesToRead)
'                                                                        If size = 0 Then Exit While
'                                                                        bytesToRead -= size
'                                                                        bytesRead += size
'                                                                    End While

'                                                                    Dim fstrm As New FileStream(filename, FileMode.OpenOrCreate, FileAccess.Write)
'                                                                    fstrm.Write(buffer, 0, bytesRead)
'                                                                    contents.Close()
'                                                                    fstrm.Close()
'                                                                Catch ex As Exception
'#If SilentErrorScream Then
'                                                                    Throw ex
'#End If
'                                                                End Try
                                                            End If
                                                        End If
                                                    End If
                                                    If Preferences.actorsave = True And detail.InnerText <> "" And Preferences.actorseasy = False Then
                                                        Dim workingpath As String = ""
                                                        Dim networkpath As String = Preferences.actorsavepath
                                                        Try
                                                            tempstring = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2)
                                                            Dim hg As New IO.DirectoryInfo(tempstring)
                                                            If Not hg.Exists Then
                                                                IO.Directory.CreateDirectory(tempstring)
                                                            End If
                                                            workingpath = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                            If Not IO.File.Exists(workingpath) Then
                                                                Utilities.DownloadFile(newactor.actorthumb, workingpath)
                                                                'Dim buffer(4000000) As Byte
                                                                'Dim size As Integer = 0
                                                                'Dim bytesRead As Integer = 0
                                                                'Dim thumburl As String = newactor.actorthumb
                                                                'Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                                                'Dim res As HttpWebResponse = req.GetResponse()
                                                                'Dim contents As Stream = res.GetResponseStream()
                                                                'Dim bytesToRead As Integer = CInt(buffer.Length)
                                                                'While bytesToRead > 0
                                                                '    size = contents.Read(buffer, bytesRead, bytesToRead)
                                                                '    If size = 0 Then Exit While
                                                                '    bytesToRead -= size
                                                                '    bytesRead += size
                                                                'End While

                                                                'Dim fstrm As New FileStream(workingpath, FileMode.OpenOrCreate, FileAccess.Write)
                                                                'fstrm.Write(buffer, 0, bytesRead)
                                                                'contents.Close()
                                                                'fstrm.Close()
                                                            End If
                                                            newactor.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, detail.InnerText & ".jpg")
                                                        Catch ex As Exception
#If SilentErrorScream Then
                                                            Throw ex
#End If
                                                        End Try
                                                    End If
                                                End If
                                        End Select
                                    Next
                                    workingMovieDetails.listactors.Add(newactor)
                                    Dim actornew As New str_ActorDatabase(SetDefaults)
                                    actornew.actorname = newactor.actorname
                                    actornew.movieid = workingMovieDetails.fullmoviebody.imdbid
                                    actorDB.Add(actornew)
                            End Select
                        Next
                    Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                    End Try
                End If

                Try
                    Dim tempname As String = Utilities.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename)
                    If tempname <> Nothing Then workingMovieDetails.filedetails = Preferences.Get_HdTags(tempname)
                    messbox.TextBox1.Text = "Video Duration"
                    If workingMovieDetails.filedetails.filedetails_video.DurationInSeconds.Value <> Nothing And Preferences.movieRuntimeDisplay = "file" Then
                        Try
                            '1h 24mn 48s 546ms
                            'Dim hours As Integer = 0
                            'Dim minutes As Integer = 0
                            'tempstring = workingMovieDetails.filedetails.filedetails_video.DurationInSeconds.Value
                            'tempint = tempstring.IndexOf("h")
                            'If tempint <> -1 Then
                            '    hours = Convert.ToInt32(tempstring.Substring(0, tempint))
                            '    tempstring = tempstring.Substring(tempint + 1, tempstring.Length - (tempint + 1))
                            '    tempstring = Trim(tempstring)
                            'End If
                            'tempint = tempstring.IndexOf("mn")
                            'If tempint <> -1 Then
                            '    minutes = Convert.ToInt32(tempstring.Substring(0, tempint))
                            'End If
                            'If hours <> 0 Then
                            '    hours = hours * 60
                            'End If
                            'minutes = minutes + hours
                            'If minutes = 0 Then
                            '    If tempstring.IndexOf("min") <> -1 Then
                            '        tempstring = tempstring.Replace("min", "")
                            '        tempstring = tempstring.Replace(" ", "")
                            '        If IsNumeric(tempstring) Then
                            '            minutes = Convert.ToInt32(tempstring)
                            '        End If
                            '    End If
                            'End If
                            'If minutes = 0 Then
                            '    If tempstring.IndexOf("min") <> -1 Then
                            '        tempstring = tempstring.Replace("min", "")
                            '        tempstring = tempstring.Replace(" ", "")
                            '        If IsNumeric(tempstring) Then
                            '            minutes = Convert.ToInt32(tempstring)
                            '        End If
                            '    End If
                            'End If
                            'If minutes <> 0 Then
                            workingMovieDetails.fullmoviebody.runtime = Utilities.cleanruntime(workingMovieDetails.filedetails.filedetails_video.DurationInSeconds.Value) & " min"
                            'End If
                        Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If

                        End Try
                    End If
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
                messbox.TextBox1.Text = "Save Nfo"
                nfoFunction.mov_NfoSave(workingMovieDetails.fileinfo.fullpathandfilename, workingMovieDetails, True)
                messbox.TextBox1.Text = "Load Nfo"
                Call mov_FormPopulate()
                messbox.TextBox1.Text = "Refesh Movie List"
                For f = 0 To fullMovieList.Count - 1
                    If fullMovieList(f).fullpathandfilename = workingMovieDetails.fileinfo.fullpathandfilename Then

                        Dim newfullmovie As New str_ComboList(SetDefaults) 'added new to initialise varibles in structure to avoid NOTHING & unhandled exceptions
                        newfullmovie = fullMovieList(f)
                        '-------------- Aqui
                        If Preferences.ignorearticle = True Then
                            If workingMovieDetails.fullmoviebody.title.ToLower.IndexOf("the ") = 0 Then
                                newfullmovie.titleandyear = workingMovieDetails.fullmoviebody.title.Substring(4, workingMovieDetails.fullmoviebody.title.Length - 4) & ", The" & " (" & workingMovieDetails.fullmoviebody.year & ")"
                            Else
                                newfullmovie.titleandyear = workingMovieDetails.fullmoviebody.title & " (" & workingMovieDetails.fullmoviebody.year & ")"
                            End If
                        Else
                            newfullmovie.titleandyear = workingMovieDetails.fullmoviebody.title & " (" & workingMovieDetails.fullmoviebody.year & ")"
                        End If
                        newfullmovie.genre = workingMovieDetails.fullmoviebody.genre
                        Dim filecreation2 As New IO.FileInfo(workingMovieDetails.fileinfo.fullpathandfilename)
                        Dim myDate2 As Date = filecreation2.LastWriteTime
                        Try
                            newfullmovie.filedate = Format(myDate2, "yyyyMMddHHmmss").ToString
                        Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                        End Try
                        If workingMovieDetails.fileinfo.createdate <> Nothing Then
                            newfullmovie.createdate = workingMovieDetails.fileinfo.createdate
                        ElseIf workingMovieDetails.fileinfo.createdate <> "" Then
                            newfullmovie.createdate = workingMovieDetails.fileinfo.createdate = workingMovieDetails.fileinfo.createdate
                        Else
                            newfullmovie.createdate = newfullmovie.filedate
                        End If
                        newfullmovie.originaltitle = workingMovieDetails.fullmoviebody.originaltitle
                        newfullmovie.outline = workingMovieDetails.fullmoviebody.outline
                        newfullmovie.playcount = workingMovieDetails.fullmoviebody.playcount
                        newfullmovie.rating = workingMovieDetails.fullmoviebody.rating
                        newfullmovie.top250 = workingMovieDetails.fullmoviebody.top250
                        newfullmovie.runtime = workingMovieDetails.fullmoviebody.runtime
                        If workingMovieDetails.fullmoviebody.runtime.IndexOf(":") <> -1 Then
                            Try
                                workingMovieDetails.fullmoviebody.runtime = workingMovieDetails.fullmoviebody.runtime.Substring(workingMovieDetails.fullmoviebody.runtime.IndexOf(":") + 1, workingMovieDetails.fullmoviebody.runtime.Length - workingMovieDetails.fullmoviebody.runtime.IndexOf(":") - 1)
                            Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                            End Try
                        End If
                        fullMovieList.RemoveAt(f)
                        fullMovieList.Add(newfullmovie)
                        Exit For
                    End If
                Next

                Call mov_FiltersAndSortApply()
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            Finally

                messbox.Close()

                Me.Cursor = Cursors.Default
            End Try
        End If
    End Sub

    'Private Sub ToolStripButton4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    Call rescrapemovie()
    'End Sub

    'quicksavenfo
    Private Sub mov_SaveQuick()
        If MovieListComboBox.SelectedItems.Count = 0 Then
            Exit Sub
        End If
        If MovieListComboBox.SelectedItems.Count = 1 Then   'Only one movie selected from movie list 
            Dim tempstring As String = ""
            Dim oldmovietitle As String = workingMovieDetails.fullmoviebody.title
            '-------------- Aqui       'SK This should be applied only when loading data into MC for Display, not when saving to cache or NFO
            'If Preferences.ignorearticle = True Then
            '    If oldmovietitle.ToLower.IndexOf("the") = 0 Then
            '        oldmovietitle = oldmovietitle.Substring(4, oldmovietitle.Length - 4) & ", The"
            '    End If
            'Else
            '    oldmovietitle = oldmovietitle & " (" & workingMovieDetails.fullmoviebody.year & ")"
            'End If
            tempstring = " (" & workingMovieDetails.fullmoviebody.year & ")"
            workingMovieDetails.fullmoviebody.title = titletxt.Text.Replace(tempstring, "")
            If workingMovieDetails.fullmoviebody.originaltitle = Nothing Or workingMovieDetails.fullmoviebody.originaltitle = "" Then workingMovieDetails.fullmoviebody.originaltitle = workingMovieDetails.fullmoviebody.title
            workingMovieDetails.fullmoviebody.director = directortxt.Text
            'workingMovieDetails.fullmoviebody.stars = starstxt.Text            'starstxt.Text textbox not implemented yet
            workingMovieDetails.fullmoviebody.credits = creditstxt.Text
            workingMovieDetails.fullmoviebody.studio = studiotxt.Text
            workingMovieDetails.fullmoviebody.genre = genretxt.Text
            workingMovieDetails.fullmoviebody.votes = votestxt.Text
            workingMovieDetails.fullmoviebody.rating = ratingtxt.Text
            workingMovieDetails.fullmoviebody.runtime = runtimetxt.Text
            workingMovieDetails.fullmoviebody.outline = outlinetxt.Text
            workingMovieDetails.fullmoviebody.plot = plottxt.Text
            workingMovieDetails.fullmoviebody.tagline = taglinetxt.Text
            workingMovieDetails.fullmoviebody.stars = txtStars.Text
            workingMovieDetails.fullmoviebody.mpaa = certtxt.Text
            workingMovieDetails.fullmoviebody.sortorder = TextBox34.Text
            If ComboBox3.SelectedItem = Nothing Then ComboBox3.SelectedItem = "-None-"
            If ComboBox3.SelectedItem <> "-None-" Then
                workingMovieDetails.fullmoviebody.movieset = ComboBox3.Items(ComboBox3.SelectedIndex)
            Else
                workingMovieDetails.fullmoviebody.movieset = Nothing
            End If
            nfoFunction.mov_NfoSave(workingMovieDetails.fileinfo.fullpathandfilename, workingMovieDetails, True)

            'Dim newmovietitle As String = workingmoviedetails.fullmoviebody.title & " (" & workingmoviedetails.fullmoviebody.year & ")"
            'change 
            'title
            'title & year
            Dim newmovietitle As String = ""
            Dim newmovietitleandyear As String = ""
            newmovietitle = workingMovieDetails.fullmoviebody.title
            '-------------- Aqui
            'If Preferences.ignorearticle = True Then
            '    If newmovietitle.ToLower.IndexOf("the") = 0 Then
            '        newmovietitleandyear = newmovietitle.Substring(4, newmovietitle.Length - 4) & ", The (" & workingMovieDetails.fullmoviebody.year & ")"
            '        newmovietitle = newmovietitle.Substring(4, newmovietitle.Length - 4) & ", The"
            '    Else
            '        newmovietitleandyear = newmovietitle & " (" & workingMovieDetails.fullmoviebody.year & ")"
            '    End If
            'Else
            '    newmovietitleandyear = newmovietitle & " (" & workingMovieDetails.fullmoviebody.year & ")"
            'End If
            For f = 0 To fullMovieList.Count - 1
                If fullMovieList(f).title = oldmovietitle Then
                    Dim newfullmovie As New str_ComboList(SetDefaults) 'added new to initialise varibles in structure
                    newfullmovie = fullMovieList(f)
                    Dim filecreation2 As New IO.FileInfo(workingMovieDetails.fileinfo.fullpathandfilename)
                    Dim myDate2 As Date = filecreation2.LastWriteTime
                    Try
                        newfullmovie.filedate = Format(myDate2, "yyyyMMddHHmmss").ToString
                    Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                    End Try

                    newfullmovie.title = newmovietitle
                    newfullmovie.titleandyear = newmovietitle & " (" & workingMovieDetails.fullmoviebody.year & ")"
                    newfullmovie.genre = workingMovieDetails.fullmoviebody.genre
                    newfullmovie.playcount = workingMovieDetails.fullmoviebody.playcount
                    newfullmovie.rating = workingMovieDetails.fullmoviebody.rating
                    newfullmovie.top250 = workingMovieDetails.fullmoviebody.top250
                    newfullmovie.sortorder = workingMovieDetails.fullmoviebody.sortorder
                    newfullmovie.createdate = workingMovieDetails.fileinfo.createdate
                    newfullmovie.runtime = workingMovieDetails.fullmoviebody.runtime
                    newfullmovie.id = workingMovieDetails.fullmoviebody.imdbid
                    newfullmovie.outline = workingMovieDetails.fullmoviebody.outline
                    newfullmovie.plot = workingMovieDetails.fullmoviebody.plot
                    newfullmovie.movieset = workingMovieDetails.fullmoviebody.movieset
                    newfullmovie.year = workingMovieDetails.fullmoviebody.year
                    If newfullmovie.movieset = Nothing Then
                        newfullmovie.movieset = "-None-"
                    End If
                    If newfullmovie.movieset = "" Then
                        newfullmovie.movieset = "-None-"
                    End If
                    fullMovieList.RemoveAt(f)
                    fullMovieList.Add(newfullmovie)

                    Exit For
                End If
            Next
            Call mov_CacheSave()
            If Label39.Text.ToLower.IndexOf(" of ") <> -1 Then
                Call mov_FiltersAndSortApply()
                Call mov_FormPopulate()
            End If
        Else
            Dim mess As New frmMessageBox("Saving Selected Movies", , "     Please Wait.     ")  'Multiple movies selected
            mess.Show()
            mess.Refresh()
            Application.DoEvents()
            Dim startindex As Integer = MovieListComboBox.SelectedIndex
            For Each item In MovieListComboBox.SelectedItems
                Dim filepath As String = item.value
                Dim movie As New FullMovieDetails
                movie = nfoFunction.mov_NfoLoadFull(filepath)
                If directortxt.Text <> "" Then
                    movie.fullmoviebody.director = directortxt.Text
                End If
                If creditstxt.Text <> "" Then
                    movie.fullmoviebody.credits = creditstxt.Text
                End If
                If genretxt.Text <> "" Then
                    movie.fullmoviebody.genre = genretxt.Text
                End If
                If certtxt.Text <> "" Then
                    movie.fullmoviebody.mpaa = certtxt.Text
                End If
                If outlinetxt.Text <> "" Then
                    movie.fullmoviebody.outline = outlinetxt.Text
                End If
                If runtimetxt.Text <> "" Then
                    movie.fullmoviebody.runtime = runtimetxt.Text
                End If
                If studiotxt.Text <> "" Then
                    movie.fullmoviebody.studio = studiotxt.Text
                End If
                If plottxt.Text <> "" Then
                    movie.fullmoviebody.plot = plottxt.Text
                End If
                If taglinetxt.Text <> "" Then
                    movie.fullmoviebody.tagline = taglinetxt.Text
                End If
                If txtStars.Text <> "" Then
                    movie.fullmoviebody.stars = txtStars.Text
                End If
                If ratingtxt.Text <> "" Then
                    movie.fullmoviebody.rating = ratingtxt.Text
                End If
                If votestxt.Text <> "" Then
                    movie.fullmoviebody.votes = votestxt.Text
                End If
                If ComboBox3.SelectedIndex <> -1 Then
                    movie.fullmoviebody.movieset = ComboBox3.SelectedItem
                End If
                nfoFunction.mov_NfoSave(filepath, movie, True)
                For f = 0 To fullMovieList.Count - 1
                    If fullMovieList(f).fullpathandfilename = movie.fileinfo.fullpathandfilename Then
                        Dim newfullmovie As New str_ComboList(SetDefaults) 'added new to initialise varibles in structure
                        newfullmovie = fullMovieList(f)
                        Dim filecreation2 As New IO.FileInfo(workingMovieDetails.fileinfo.fullpathandfilename)
                        Dim myDate2 As Date = filecreation2.LastWriteTime
                        Try
                            newfullmovie.filedate = Format(myDate2, "yyyyMMddHHmmss").ToString
                        Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                        End Try
                        If newfullmovie.movieset = Nothing Then
                            newfullmovie.movieset = "-None-"
                        End If
                        If newfullmovie.movieset = "" Then
                            newfullmovie.movieset = "-None-"
                        End If
                        'Commented out items are not saved when multiple movies are selected
                        '              newfullmovie.title = movie.fullmoviebody.title
                        '              newfullmovie.titleandyear = newfullmovie.title & " (" & movie.fullmoviebody.year & ")"
                        newfullmovie.genre = movie.fullmoviebody.genre
                        newfullmovie.playcount = movie.fullmoviebody.playcount
                        newfullmovie.rating = movie.fullmoviebody.rating
                        newfullmovie.top250 = movie.fullmoviebody.top250
                        newfullmovie.sortorder = movie.fullmoviebody.sortorder
                        '              newfullmovie.createdate = movie.fileinfo.createdate
                        newfullmovie.runtime = movie.fullmoviebody.runtime
                        '              newfullmovie.id = movie.fullmoviebody.imdbid
                        newfullmovie.outline = movie.fullmoviebody.outline
                        newfullmovie.movieset = movie.fullmoviebody.movieset
                        '              newfullmovie.year = movie.fullmoviebody.year
                        fullMovieList.RemoveAt(f)
                        fullMovieList.Add(newfullmovie)

                        Exit For
                    End If
                Next
            Next
            Call mov_CacheSave()
            workingMovie.fullpathandfilename = MovieListComboBox.Items(startindex).description
            Call mov_FiltersAndSortApply()
            Call mov_FormPopulate()

            mess.Close()
        End If
    End Sub

    'change watched status
    Private Sub Button13_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button13.Click
        Try
            If MovieListComboBox.SelectedItems.Count = 1 Then
                If Button13.Text = "&Watched" Then
                    Button13.Text = "Un&watched"
                    Button13.BackColor = Color.Red
                    Button13.Refresh()
                    workingMovieDetails.fullmoviebody.playcount = "0"
                Else
                    Button13.Text = "&Watched"
                    Button13.BackColor = Color.LawnGreen
                    Button13.Refresh()
                    workingMovieDetails.fullmoviebody.playcount = "1"
                End If
                Call mov_SaveQuick()
            ElseIf MovieListComboBox.SelectedItems.Count > 1 Then
                Dim mess As New frmMessageBox("Saving Selected Movies", , "     Please Wait.     ")
                mess.Show()
                mess.Refresh()
                Dim watched As String = ""
                If Button13.Text = "&Watched" Then
                    Button13.Text = "Un&watched"
                    Button13.BackColor = Color.Red
                    Button13.Refresh()
                    watched = "0"
                ElseIf Button13.Text = "Un&watched" Then
                    Button13.Text = "&Watched"
                    Button13.BackColor = Color.LawnGreen
                    Button13.Refresh()
                    watched = "1"
                ElseIf Button13.Text = "" Then
                    Button13.Text = "&Watched"
                    Button13.BackColor = Color.LawnGreen
                    Button13.Refresh()
                    watched = "1"
                End If
                For Each item In MovieListComboBox.SelectedItems
                    Dim filepath As String = item.value
                    Dim movie As New FullMovieDetails
                    movie = nfoFunction.mov_NfoLoadFull(filepath)
                    movie.fullmoviebody.playcount = watched
                    nfoFunction.mov_NfoSave(filepath, movie, True)
                    For f = 0 To fullMovieList.Count - 1
                        If fullMovieList(f).fullpathandfilename = filepath Then
                            Dim newfullmovie As New str_ComboList(SetDefaults) 'added new to initialise varibles in structure
                            newfullmovie = fullMovieList(f)
                            newfullmovie.playcount = watched
                            fullMovieList.RemoveAt(f)
                            fullMovieList.Add(newfullmovie)
                            Exit For
                        End If
                    Next
                Next
                mess.Close()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Mov_OpenMovieFolderToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Mov_OpenMovieFolderToolStripMenuItem.Click
        Try
            'Try
            If Not workingMovieDetails.fileinfo.fullpathandfilename Is Nothing Then
                Call util_OpenFolder(workingMovieDetails.fileinfo.fullpathandfilename)
            Else
                MsgBox("There is no Movie selected to open")
            End If
            'Catch
            'End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Mov_OpenFileToolStripMenuItem2(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Mov_OpenFileToolStripMenuItem.Click
        Try
            Utilities.NfoNotepadDisplay(workingMovieDetails.fileinfo.fullpathandfilename)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
        
    End Sub

    Private Sub PosterBrowserToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PosterBrowserToolStripMenuItem.Click
        Try
            Dim t As New frmCoverArt
            t.ShowDialog()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub BrowseFanartToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BrowseFanartToolStripMenuItem.Click
        Try
            Dim t As New frmMovieFanart
            t.ShowDialog()
            Try
                If IO.File.Exists(workingMovieDetails.fileinfo.fanartpath) Then
                    PictureBox7.ImageLocation = workingMovieDetails.fileinfo.fanartpath
                    PictureBox7.Load()

                Else
                    PictureBox7.Image = Nothing
                End If

            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    'Private Sub ToolStripButton3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    Call movieedit()
    'End Sub

    Private Sub EditMovieToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles EditMovieToolStripMenuItem.Click
        Try
            Call mov_Edit()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_Edit()
        If outlinetxt.Text = "MC cannot find this file, either the file no longer exists, or MC cannot access the file path" Then
            MsgBox("MC cannot find this file, either the file no longer exists, or MC cannot access the file path")
            Exit Sub
        End If
        Dim oldmovietitle As String = workingMovieDetails.fileinfo.fullpathandfilename
        Dim newmovietitle As String = ""
        Dim MyFormObject As New Form2()
        MyFormObject.ShowDialog()
        newmovietitle = workingMovieDetails.fileinfo.fullpathandfilename


        For f = 0 To fullMovieList.Count - 1
            If fullMovieList(f).fullpathandfilename = newmovietitle Then
                Dim newfullmovie As New str_ComboList(SetDefaults) 'added new to initialise varibles in structure

                fullMovieList.RemoveAt(f)

                newfullmovie = nfoFunction.mov_NfoLoadBasic(workingMovieDetails.fileinfo.fullpathandfilename, "movielist")
                If workingMovie.title <> "ERROR" Then   'if there is a problem with the nfo being invalid we need to skip
                    fullMovieList.Add(newfullmovie)
                End If
                Exit For
            End If
        Next


        'Todo: need to update all details after edit.


        For f = 0 To filteredList.Count - 1
            Dim newfullmovie As New str_ComboList(SetDefaults) 'added new to initialise varibles in structure
            newfullmovie = filteredList(f)
            If filteredList(f).fullpathandfilename = oldmovietitle Then
                Dim newfullmovie2 As New str_ComboList(SetDefaults) 'added new to initialise varibles in structure
                newfullmovie2 = filteredList(f)
                newfullmovie2.titleandyear = newmovietitle
                filteredList.RemoveAt(f)
                Dim filecreation2 As New IO.FileInfo(workingMovieDetails.fileinfo.fullpathandfilename)
                Dim myDate2 As Date = filecreation2.LastWriteTime
                Try
                    newfullmovie2.filedate = Format(myDate2, "yyyyMMddHHmmss").ToString
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
                newfullmovie2.filename = workingMovieDetails.fileinfo.filename
                newfullmovie2.foldername = workingMovieDetails.fileinfo.foldername
                newfullmovie2.fullpathandfilename = workingMovieDetails.fileinfo.fullpathandfilename
                newfullmovie2.genre = workingMovieDetails.fullmoviebody.genre
                newfullmovie2.id = workingMovieDetails.fullmoviebody.imdbid
                newfullmovie2.playcount = workingMovieDetails.fullmoviebody.playcount
                newfullmovie2.rating = workingMovieDetails.fullmoviebody.rating
                newfullmovie2.titleandyear = workingMovieDetails.fullmoviebody.title & " (" & workingMovieDetails.fullmoviebody.year & ")"
                newfullmovie2.year = workingMovieDetails.fullmoviebody.year

                filteredList.Add(newfullmovie2)
                Exit For
            End If
        Next
        Call mov_FormPopulate()
        mov_FiltersAndSortApply()
    End Sub

    Private Sub MediaCompanionForumToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MediaCompanionForumToolStripMenuItem.Click
        Try
            Dim webAddress As String = "http://billyad2000.darkbb.com/forum.htm"
            Process.Start(webAddress)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub XBMCMCThreadToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles XBMCMCThreadToolStripMenuItem.Click
        Try
            Dim webAddress As String = "http://forum.xbmc.org/showthread.php?t=53640"
            Process.Start(webAddress)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button3.Click
        Try
            Try
                If Not IO.File.Exists(workingMovieDetails.fileinfo.trailerpath) Then

                    If workingMovieDetails.fullmoviebody.trailer <> "" Then
                        Dim trailerurl As String = workingMovieDetails.fullmoviebody.trailer
                        Dim wc As New Net.WebClient()

                        Try
                            trailerdownloadpanel.Visible = True
                            FileToBeDownloaded = New WebFileDownloader
                            FileToBeDownloaded.DownloadFileWithProgress(trailerurl, workingMovieDetails.fileinfo.trailerpath)
                        Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                        End Try
                    End If
                Else
                    Try
                        Dim tempstring As String
                        tempstring = applicationPath & "\settings\temp.m3u"

                        Dim file As IO.StreamWriter = IO.File.CreateText(tempstring)

                        file.WriteLine(workingMovieDetails.fileinfo.trailerpath)
                        file.Close()

                        If Preferences.videomode = 1 Then Call util_VideoMode1(tempstring)
                        If Preferences.videomode = 2 Then Call util_VideoMode2(tempstring)
                        If Preferences.videomode = 3 Then
                            Preferences.videomode = 2
                            Call util_VideoMode2(tempstring)
                        End If
                        If Preferences.videomode >= 4 Then
                            If Preferences.selectedvideoplayer <> Nothing Then
                                Call util_VideoMode4(tempstring)
                            Else
                                Call util_VideoMode1(tempstring)
                            End If
                        End If
                    Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                    End Try
                End If
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try


    End Sub

    Private Sub RebuildMoviesToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RebuildMoviesToolStripMenuItem1.Click
        Try
            'messbox = New frmMessageBox("Please wait,", "", "Rebuilding Movie DB")
            'System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            'messbox.Show()
            'Me.Refresh()
            'messbox.Refresh()
            Call mov_CacheRebuild(movieFolders)
            'messbox.Close()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ListMoviesWithoutFanartToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ListMoviesWithoutFanartToolStripMenuItem.Click
        Try
            filterOverride = True
            Dim newlist As New List(Of str_ComboList)
            newlist.Clear()
            For Each movie In fullMovieList
                If Not IO.File.Exists(Preferences.GetFanartPath(movie.fullpathandfilename)) Then
                    Dim movietoadd As New str_ComboList(SetDefaults)
                    movietoadd.fullpathandfilename = movie.fullpathandfilename
                    movietoadd.titleandyear = movie.titleandyear
                    movietoadd.filename = movie.filename
                    movietoadd.year = movie.year
                    movietoadd.filedate = movie.filedate
                    movietoadd.foldername = movie.foldername
                    movietoadd.rating = movie.rating
                    movietoadd.top250 = movie.top250
                    newlist.Add(movietoadd)
                End If
            Next

            filteredList = newlist
            Call mov_MovieComboLoad()
            filterOverride = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ListMoviesWithoutPostersToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ListMoviesWithoutPostersToolStripMenuItem.Click
        Try
            filterOverride = True
            Dim newlist As New List(Of str_ComboList)
            newlist.Clear()
            For Each movie In fullMovieList
                If Not IO.File.Exists(Preferences.GetPosterPath(movie.fullpathandfilename)) Then
                    Dim movietoadd As New str_ComboList(SetDefaults)
                    movietoadd.fullpathandfilename = movie.fullpathandfilename
                    movietoadd.titleandyear = movie.titleandyear
                    movietoadd.filename = movie.filename
                    movietoadd.year = movie.year
                    movietoadd.filedate = movie.filedate
                    movietoadd.foldername = movie.foldername
                    movietoadd.rating = movie.rating
                    movietoadd.top250 = movie.top250
                    newlist.Add(movietoadd)
                End If
            Next

            filteredList = newlist
            Call mov_MovieComboLoad()
            filterOverride = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub BatchRescraperToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BatchRescraperToolStripMenuItem.Click
        Try
            If Not bckrescrapewizard.IsBusy Then

                batchList.credits = False
                batchList.director = False
                batchList.stars = False
                batchList.genre = False
                batchList.mediatags = False

                batchList.mpaa = False
                batchList.outline = False
                batchList.plot = False

                batchList.premiered = False
                batchList.rating = False
                batchList.runtime = False
                batchList.studio = False
                batchList.tagline = False
                batchList.title = False
                batchList.top250 = False
                batchList.trailer = False
                batchList.votes = False
                batchList.year = False
                batchList.posterurls = False
                batchList.missingposters = False
                batchList.actors = False
                batchList.missingfanart = False

                batchList.activate = False

                Dim displaywizard As New frmBatchScraper
                displaywizard.ShowDialog()

                If batchList.activate = True Then
                    ToolStripStatusLabel7.Visible = True
                    'ToolStripProgressBar6.Visible = True
                    bckrescrapewizard.RunWorkerAsync()
                End If
            Else
                MsgBox("The update Wizard is Already Running")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub


    Private Sub bckrescrapewizard_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bckrescrapewizard.DoWork
        Try
            'Now works on the filtered list rather than the full list V3.407
            globalThreadCounter += 1

            Dim bodyscraper As Boolean = False
            Dim trailerscraper As Boolean = False
            Dim actorscraper As Boolean = False
            Dim thumburlscraper As Boolean = False
            Dim mediatagscraper As Boolean = False
            Dim missingposter As Boolean = False
            Dim missingfanart As Boolean = False
            Dim mediatags As Boolean = False

            If batchList.credits = True Then bodyscraper = True
            If batchList.director = True Then bodyscraper = True
            If batchList.stars = True Then bodyscraper = True
            If batchList.genre = True Then bodyscraper = True
            If batchList.mpaa = True Then bodyscraper = True
            If batchList.plot = True Then bodyscraper = True
            If batchList.premiered = True Then bodyscraper = True
            If batchList.rating = True Then bodyscraper = True
            If batchList.runtime = True Then bodyscraper = True
            If batchList.studio = True Then bodyscraper = True
            If batchList.tagline = True Then bodyscraper = True
            If batchList.outline = True Then bodyscraper = True
            If batchList.top250 = True Then bodyscraper = True
            If batchList.votes = True Then bodyscraper = True
            If batchList.country = True Then bodyscraper = True
            If batchList.year = True Then bodyscraper = True
            If batchList.trailer = True Then trailerscraper = True

            If batchList.posterurls = True Then thumburlscraper = True

            If batchList.actors = True Then actorscraper = True

            If batchList.missingposters = True Then missingposter = True

            If batchList.missingfanart = True Then missingfanart = True

            If batchList.mediatags = True Then mediatags = True

            Dim tempmovielist As New List(Of String)
            For Each movie In filteredList    'fullMovieList
                tempmovielist.Add(movie.fullpathandfilename)
            Next

            Dim moviecount As Integer = tempmovielist.Count - 1


            For f = 0 To moviecount
                Try
                    Dim movietemplate As New FullMovieDetails
                    Dim movietoalter As New FullMovieDetails
                    Dim counter As Integer = moviecount
                    Dim progresstext As String = "Batch Scraping Movies, " & (counter - f) + 1 & " item(s) remaining     "
                    bckrescrapewizard.ReportProgress(999999, progresstext)
                    movietemplate.fullmoviebody.credits = Nothing
                    movietemplate.fullmoviebody.director = Nothing
                    movietemplate.fullmoviebody.stars = Nothing
                    movietemplate.fullmoviebody.fanart = Nothing
                    movietemplate.fullmoviebody.filename = Nothing
                    movietemplate.fullmoviebody.genre = Nothing
                    movietemplate.fullmoviebody.imdbid = Nothing
                    movietemplate.fullmoviebody.mpaa = Nothing
                    movietemplate.fullmoviebody.outline = Nothing
                    movietemplate.fullmoviebody.playcount = Nothing
                    movietemplate.fullmoviebody.plot = Nothing
                    movietemplate.fullmoviebody.premiered = Nothing
                    movietemplate.fullmoviebody.rating = Nothing
                    movietemplate.fullmoviebody.runtime = Nothing
                    movietemplate.fullmoviebody.studio = Nothing
                    movietemplate.fullmoviebody.title = Nothing
                    movietemplate.fullmoviebody.originaltitle = Nothing
                    movietemplate.fullmoviebody.tagline = Nothing
                    movietemplate.fullmoviebody.thumbnails = Nothing
                    movietemplate.fullmoviebody.trailer = Nothing
                    movietemplate.fullmoviebody.votes = Nothing
                    movietemplate.fullmoviebody.year = Nothing
                    movietemplate.fullmoviebody.country = Nothing
                    movietemplate.listactors.Clear()
                    movietemplate.listthumbs.Clear()
                    movietemplate.filedetails.filedetails_audio.Clear()
                    movietemplate.filedetails.filedetails_subtitles.Clear()
                    movietemplate.filedetails.filedetails_video.bitrate = Nothing
                    movietemplate.filedetails.filedetails_video.bitratemax = Nothing
                    movietemplate.filedetails.filedetails_video.bitratemode = Nothing
                    movietemplate.filedetails.filedetails_video.codec = Nothing
                    movietemplate.filedetails.filedetails_video.codecid = Nothing
                    movietemplate.filedetails.filedetails_video.codecinfo = Nothing
                    movietemplate.filedetails.filedetails_video.container = Nothing
                    movietemplate.filedetails.filedetails_video.DurationInSeconds.Value = Nothing
                    movietemplate.filedetails.filedetails_video.formatinfo = Nothing
                    movietemplate.filedetails.filedetails_video.height = Nothing
                    movietemplate.filedetails.filedetails_video.scantype = Nothing
                    movietemplate.filedetails.filedetails_video.width = Nothing

                    movietemplate.fileinfo.fanartpath = Nothing
                    movietemplate.fileinfo.filename = Nothing
                    movietemplate.fileinfo.foldername = Nothing
                    movietemplate.fileinfo.fullpathandfilename = Nothing
                    movietemplate.fileinfo.path = Nothing
                    movietemplate.fileinfo.posterpath = Nothing
                    movietemplate.fileinfo.trailerpath = Nothing

                    movietoalter.fullmoviebody.credits = Nothing
                    movietoalter.fullmoviebody.director = Nothing
                    movietoalter.fullmoviebody.stars = Nothing
                    movietoalter.fullmoviebody.fanart = Nothing
                    movietoalter.fullmoviebody.filename = Nothing
                    movietoalter.fullmoviebody.genre = Nothing
                    movietoalter.fullmoviebody.imdbid = Nothing
                    movietoalter.fullmoviebody.mpaa = Nothing
                    movietoalter.fullmoviebody.outline = Nothing
                    movietoalter.fullmoviebody.playcount = Nothing
                    movietoalter.fullmoviebody.plot = Nothing
                    movietoalter.fullmoviebody.premiered = Nothing
                    movietoalter.fullmoviebody.rating = Nothing
                    movietoalter.fullmoviebody.runtime = Nothing
                    movietoalter.fullmoviebody.studio = Nothing
                    movietoalter.fullmoviebody.title = Nothing
                    movietoalter.fullmoviebody.originaltitle = Nothing
                    movietoalter.fullmoviebody.tagline = Nothing
                    movietoalter.fullmoviebody.thumbnails = Nothing
                    movietoalter.fullmoviebody.trailer = Nothing
                    movietoalter.fullmoviebody.votes = Nothing
                    movietoalter.fullmoviebody.year = Nothing
                    movietoalter.fullmoviebody.country = Nothing
                    movietoalter.listactors.Clear()
                    movietoalter.listthumbs.Clear()
                    movietoalter.filedetails.filedetails_audio.Clear()
                    movietoalter.filedetails.filedetails_subtitles.Clear()
                    movietoalter.filedetails.filedetails_video.bitrate = Nothing
                    movietoalter.filedetails.filedetails_video.bitratemax = Nothing
                    movietoalter.filedetails.filedetails_video.bitratemode = Nothing
                    movietoalter.filedetails.filedetails_video.codec = Nothing
                    movietoalter.filedetails.filedetails_video.codecid = Nothing
                    movietoalter.filedetails.filedetails_video.codecinfo = Nothing
                    movietoalter.filedetails.filedetails_video.container = Nothing
                    movietoalter.filedetails.filedetails_video.DurationInSeconds.Value = Nothing
                    movietoalter.filedetails.filedetails_video.formatinfo = Nothing
                    movietoalter.filedetails.filedetails_video.height = Nothing
                    movietoalter.filedetails.filedetails_video.scantype = Nothing
                    movietoalter.filedetails.filedetails_video.width = Nothing

                    movietoalter.fileinfo.fanartpath = Nothing
                    movietoalter.fileinfo.filename = Nothing
                    movietoalter.fileinfo.foldername = Nothing
                    movietoalter.fileinfo.fullpathandfilename = Nothing
                    movietoalter.fileinfo.path = Nothing
                    movietoalter.fileinfo.posterpath = Nothing
                    movietoalter.fileinfo.trailerpath = Nothing


                    movietoalter = nfoFunction.mov_NfoLoadFull(tempmovielist(f))
                    If Not movietoalter Is Nothing Then
                        '            Dim scraperfunction As New imdb.Classimdbscraper ' add to comment this one because of changes i made to the Class "Scraper" (ClassimdbScraper)
                        Dim scraperfunction As New Classimdb
                        If bodyscraper = True Then
                            Dim certificates As New List(Of String)
                            Dim body As String
                            body = scraperfunction.getimdbbody(movietoalter.fullmoviebody.title, movietoalter.fullmoviebody.year, movietoalter.fullmoviebody.imdbid, Preferences.imdbmirror)
                            If body <> "MIC" Then
                                Try

                                    Dim thumbstring As New XmlDocument
                                    thumbstring.LoadXml(body)
                                    For Each thisresult In thumbstring("movie")
                                        Select Case thisresult.Name
                                            Case "year"
                                                movietemplate.fullmoviebody.year = thisresult.InnerText
                                            Case "credits"
                                                movietemplate.fullmoviebody.credits = thisresult.InnerText
                                            Case "director"
                                                movietemplate.fullmoviebody.director = thisresult.InnerText
                                            Case "stars"
                                                movietemplate.fullmoviebody.stars = thisresult.InnerText
                                            Case "country"
                                                movietemplate.fullmoviebody.country = thisresult.InnerText
                                            Case "genre"
                                                Dim strarr() As String
                                                strarr = thisresult.InnerText.Split("/")
                                                For count = 0 To strarr.Length - 1
                                                    strarr(count) = strarr(count).Replace(" ", "")
                                                Next
                                                If strarr.Length <= Preferences.maxmoviegenre Then
                                                    movietemplate.fullmoviebody.genre = thisresult.InnerText
                                                Else
                                                    For g = 0 To Preferences.maxmoviegenre - 1
                                                        If g = 0 Then
                                                            movietemplate.fullmoviebody.genre = strarr(g)
                                                        Else
                                                            movietemplate.fullmoviebody.genre += " / " & strarr(g)
                                                        End If
                                                    Next
                                                End If
                                            Case "mpaa"
                                                movietemplate.fullmoviebody.mpaa = thisresult.InnerText
                                            Case "outline"
                                                movietemplate.fullmoviebody.outline = thisresult.InnerText
                                            Case "plot"
                                                movietemplate.fullmoviebody.plot = thisresult.InnerText
                                            Case "premiered"
                                                movietemplate.fullmoviebody.premiered = thisresult.InnerText
                                            Case "rating"
                                                movietemplate.fullmoviebody.rating = thisresult.InnerText
                                            Case "runtime"
                                                movietemplate.fullmoviebody.runtime = thisresult.InnerText
                                            Case "studio"
                                                movietemplate.fullmoviebody.studio = thisresult.InnerText
                                            Case "tagline"
                                                movietemplate.fullmoviebody.tagline = thisresult.InnerText
                                            Case "top250"
                                                movietemplate.fullmoviebody.top250 = thisresult.InnerText
                                            Case "votes"
                                                movietemplate.fullmoviebody.votes = thisresult.InnerText
                                            Case "id"
                                                movietemplate.fullmoviebody.imdbid = thisresult.InnerText
                                            Case "cert"
                                                certificates.Add(thisresult.InnerText)
                                        End Select


                                    Next
                                    For g = 0 To UBound(Preferences.certificatepriority)
                                        Dim done As Boolean = False
                                        For Each cert In certificates
                                            If cert.IndexOf(Preferences.certificatepriority(g)) <> -1 Then
                                                movietemplate.fullmoviebody.mpaa = cert.Substring(cert.IndexOf("|") + 1, cert.Length - cert.IndexOf("|") - 1)
                                                done = True
                                                Exit For
                                            End If
                                        Next
                                        If done = True Then Exit For
                                    Next
                                Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                                End Try
                            End If
                        End If
                        If actorscraper = True Then
                            Dim actorlist As String
                            movietemplate.listactors.Clear()
                            actorlist = scraperfunction.getimdbactors(Preferences.imdbmirror, movietoalter.fullmoviebody.imdbid, movietoalter.fullmoviebody.title, Preferences.maxactors)
                            Try
                                Dim thumbstring As New XmlDocument
                                thumbstring.LoadXml(actorlist)
                                Dim actorcount As Integer = 0
                                For Each thisresult In thumbstring("actorlist")
                                    Select Case thisresult.Name
                                        Case "actor"
                                            If actorcount > Preferences.maxactors Then
                                                Exit For
                                            End If
                                            actorcount += 1
                                            Dim newactor As New str_MovieActors(SetDefaults)
                                            Dim detail As XmlNode = Nothing
                                            For Each detail In thisresult.ChildNodes
                                                Select Case detail.Name
                                                    Case "name"
                                                        newactor.actorname = detail.InnerText
                                                    Case "role"
                                                        newactor.actorrole = detail.InnerText
                                                    Case "thumb"

                                                        newactor.actorthumb = detail.InnerText
                                                    Case "actorid"
                                                        If newactor.actorthumb <> Nothing Then
                                                            If detail.InnerText <> "" And Preferences.actorseasy = True Then
                                                                Dim workingpath As String = movietoalter.fileinfo.fullpathandfilename.Replace(IO.Path.GetFileName(movietoalter.fileinfo.fullpathandfilename), "")
                                                                workingpath = workingpath & ".actors\"
                                                                Dim hg As New IO.DirectoryInfo(workingpath)
                                                                Dim destsorted As Boolean = False
                                                                If Not hg.Exists Then
                                                                    Try
                                                                        IO.Directory.CreateDirectory(workingpath)
                                                                        destsorted = True
                                                                    Catch ex As Exception
#If SilentErrorScream Then
                                                                    Throw ex
#End If
                                                                    End Try
                                                                Else
                                                                    destsorted = True
                                                                End If
                                                                If destsorted = True Then

                                                                    Dim filename As String = newactor.actorname.Replace(" ", "_")
                                                                    filename = filename & ".tbn"
                                                                    filename = IO.Path.Combine(workingpath, filename)
                                                                    If Not IO.File.Exists(filename) Then
                                                                        Utilities.DownloadFile(newactor.actorthumb, filename)
'                                                                        Try
'                                                                            Dim buffer(4000000) As Byte
'                                                                            Dim size As Integer = 0
'                                                                            Dim bytesRead As Integer = 0
'                                                                            Dim thumburl As String = newactor.actorthumb
'                                                                            Dim req As HttpWebRequest = WebRequest.Create(thumburl)
'                                                                            Dim res As HttpWebResponse = req.GetResponse()
'                                                                            Dim contents As Stream = res.GetResponseStream()
'                                                                            Dim bytesToRead As Integer = CInt(buffer.Length)
'                                                                            While bytesToRead > 0
'                                                                                size = contents.Read(buffer, bytesRead, bytesToRead)
'                                                                                If size = 0 Then Exit While
'                                                                                bytesToRead -= size
'                                                                                bytesRead += size
'                                                                            End While

'                                                                            Dim fstrm As New FileStream(filename, FileMode.OpenOrCreate, FileAccess.Write)
'                                                                            fstrm.Write(buffer, 0, bytesRead)
'                                                                            contents.Close()
'                                                                            fstrm.Close()
'                                                                        Catch ex As Exception
'#If SilentErrorScream Then
'                                                                        Throw ex
'#End If
'                                                                        End Try
                                                                    End If
                                                                End If
                                                            End If
                                                            If Preferences.actorsave = True And detail.InnerText <> "" And Preferences.actorseasy = False Then
                                                                Dim workingpath As String = ""
                                                                Dim networkpath As String = Preferences.actorsavepath
                                                                Try
                                                                    Dim tempstring As String = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2)
                                                                    Dim hg As New IO.DirectoryInfo(tempstring)
                                                                    If Not hg.Exists Then
                                                                        IO.Directory.CreateDirectory(tempstring)
                                                                    End If
                                                                    workingpath = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                                    If Not IO.File.Exists(workingpath) Then
                                                                        Utilities.DownloadFile(newactor.actorthumb, workingpath)
                                                                        'Dim buffer(4000000) As Byte
                                                                        'Dim size As Integer = 0
                                                                        'Dim bytesRead As Integer = 0
                                                                        'Dim thumburl As String = newactor.actorthumb
                                                                        'Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                                                        'Dim res As HttpWebResponse = req.GetResponse()
                                                                        'Dim contents As Stream = res.GetResponseStream()
                                                                        'Dim bytesToRead As Integer = CInt(buffer.Length)
                                                                        'While bytesToRead > 0
                                                                        '    size = contents.Read(buffer, bytesRead, bytesToRead)
                                                                        '    If size = 0 Then Exit While
                                                                        '    bytesToRead -= size
                                                                        '    bytesRead += size
                                                                        'End While

                                                                        'Dim fstrm As New FileStream(workingpath, FileMode.OpenOrCreate, FileAccess.Write)
                                                                        'fstrm.Write(buffer, 0, bytesRead)
                                                                        'contents.Close()
                                                                        'fstrm.Close()
                                                                    End If
                                                                    newactor.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, detail.InnerText.Substring(detail.InnerText.Length - 2, 2))
                                                                    If Preferences.actornetworkpath.IndexOf("/") <> -1 Then
                                                                        newactor.actorthumb = Preferences.actornetworkpath & "/" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "/" & detail.InnerText & ".jpg"
                                                                    Else
                                                                        newactor.actorthumb = Preferences.actornetworkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                                    End If
                                                                Catch ex As Exception
#If SilentErrorScream Then
                                                                Throw ex
#End If
                                                                End Try
                                                            End If
                                                        End If
                                                End Select
                                            Next
                                            movietemplate.listactors.Add(newactor)
                                    End Select
                                Next
                                While movietemplate.listactors.Count > Preferences.maxactors
                                    movietemplate.listactors.RemoveAt(movietemplate.listactors.Count - 1)
                                End While
                            Catch ex As Exception
                                movietemplate.listactors = Nothing
                            End Try
                        End If

                        If trailerscraper = True Then
                            Try
                                Dim trailer As String = String.Empty
                                trailer = scraperfunction.gettrailerurl(movietoalter.fullmoviebody.imdbid, Preferences.imdbmirror)
                                If trailer <> String.Empty And trailer <> "Error" Then
                                    movietemplate.fullmoviebody.trailer = trailer
                                End If
                            Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                            End Try
                        End If

                        If thumburlscraper = True Then
                            Try
                                If Preferences.nfoposterscraper <> 0 Then
                                    Dim thumbs As String = ""
                                    If Preferences.nfoposterscraper = 1 Or Preferences.nfoposterscraper = 3 Or Preferences.nfoposterscraper = 5 Or Preferences.nfoposterscraper = 7 Or Preferences.nfoposterscraper = 9 Or Preferences.nfoposterscraper = 11 Or Preferences.nfoposterscraper = 13 Or Preferences.nfoposterscraper = 15 Then
                                        Dim newobject3 As New IMPA.getimpaposters
                                        Dim teststring As New XmlDocument
                                        Dim testthumbs As String
                                        Try
                                            testthumbs = newobject3.getimpathumbs(movietoalter.fullmoviebody.title, movietoalter.fullmoviebody.year)
                                            Dim testthumbs2 As String = "<totalthumbs>" & testthumbs & "</totalthumbs>"
                                            teststring.LoadXml(testthumbs2)
                                            thumbs = thumbs & testthumbs.ToString
                                        Catch ex As Exception
#If SilentErrorScream Then
                                        Throw ex
#End If
                                            Thread.Sleep(1)
                                        End Try
                                    End If


                                    If Preferences.nfoposterscraper = 2 Or Preferences.nfoposterscraper = 3 Or Preferences.nfoposterscraper = 6 Or Preferences.nfoposterscraper = 7 Or Preferences.nfoposterscraper = 10 Or Preferences.nfoposterscraper = 11 Or Preferences.nfoposterscraper = 14 Or Preferences.nfoposterscraper = 15 Then
                                        Dim newobject2 As New tmdb_posters.Class1
                                        Dim teststring As New XmlDocument
                                        Dim testthumbs As String
                                        Try
                                            testthumbs = newobject2.gettmdbposters(movietoalter.fullmoviebody.imdbid)
                                            Dim testthumbs2 As String = "<totalthumbs>" & testthumbs & "</totalthumbs>"
                                            teststring.LoadXml(testthumbs2)
                                            thumbs = thumbs & testthumbs.ToString
                                        Catch ex As Exception
#If SilentErrorScream Then
                                        Throw ex
#End If
                                            Thread.Sleep(1)
                                        End Try
                                    End If

                                    If Preferences.nfoposterscraper = 4 Or Preferences.nfoposterscraper = 5 Or Preferences.nfoposterscraper = 6 Or Preferences.nfoposterscraper = 7 Or Preferences.nfoposterscraper = 12 Or Preferences.nfoposterscraper = 13 Or Preferences.nfoposterscraper = 14 Or Preferences.nfoposterscraper = 15 Then
                                        Dim newobject As New class_mpdb_thumbs.Class1
                                        Dim teststring As New XmlDocument
                                        Dim testthumbs As String
                                        Try
                                            testthumbs = newobject.get_mpdb_thumbs(movietoalter.fullmoviebody.imdbid)
                                            Dim testthumbs2 As String = "<totalthumbs>" & testthumbs & "</totalthumbs>"
                                            teststring.LoadXml(testthumbs2)
                                            thumbs = thumbs & testthumbs.ToString
                                        Catch ex As Exception
#If SilentErrorScream Then
                                        Throw ex
#End If
                                            Thread.Sleep(1)
                                        End Try
                                    End If

                                    If Preferences.nfoposterscraper = 8 Or Preferences.nfoposterscraper = 9 Or Preferences.nfoposterscraper = 10 Or Preferences.nfoposterscraper = 11 Or Preferences.nfoposterscraper = 12 Or Preferences.nfoposterscraper = 13 Or Preferences.nfoposterscraper = 14 Or Preferences.nfoposterscraper = 15 Then
                                        Dim thumbscraper As New imdb_thumbs.Class1
                                        Dim teststring As New XmlDocument
                                        Try
                                            Dim testthumbs As String
                                            testthumbs = thumbscraper.getimdbthumbs(movietoalter.fullmoviebody.title, movietoalter.fullmoviebody.year, movietoalter.fullmoviebody.imdbid)
                                            Dim testthumbs2 As String = "<totalthumbs>" & testthumbs & "</totalthumbs>"
                                            teststring.LoadXml(testthumbs2)
                                            thumbs = thumbs & testthumbs.ToString
                                        Catch ex As Exception
#If SilentErrorScream Then
                                        Throw ex
#End If
                                            Thread.Sleep(1)
                                        End Try
                                    End If




                                    thumbs = "<thumblist>" & thumbs & "</thumblist>"

                                    Try
                                        Dim thumbstring As New XmlDocument
                                        thumbstring.LoadXml(thumbs)
                                        For Each thisresult In thumbstring("thumblist")
                                            Select Case thisresult.Name
                                                Case "thumb"
                                                    movietemplate.listthumbs.Add(thisresult.InnerText)
                                            End Select
                                        Next
                                    Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                    End Try
                                End If
                            Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                            End Try
                        End If



                        If mediatags = True Or (batchList.runtime = True And Preferences.movieRuntimeDisplay = "file") Then
                            Try
                                Dim mediapath As String = Utilities.GetFileName(movietoalter.fileinfo.fullpathandfilename)
                                Dim tempFileDetails As FullFileDetails = Preferences.Get_HdTags(mediapath)
                                If Preferences.enablehdtags = True Then
                                    '    Dim tempstring As String
                                    '    Dim tempint As Integer = 0
                                    '    Dim hours As Integer = 0
                                    '    Dim minutes As Integer = 0
                                    '    tempstring = movietemplate.filedetails.filedetails_video.DurationInSeconds.Value
                                    '    tempint = tempstring.IndexOf("h")
                                    '    If tempint <> -1 Then
                                    '        hours = Convert.ToInt32(tempstring.Substring(0, tempint))
                                    '        tempstring = tempstring.Substring(tempint + 1, tempstring.Length - (tempint + 1))
                                    '        tempstring = Trim(tempstring)
                                    '    End If
                                    '    tempint = tempstring.IndexOf("mn")
                                    '    If tempint <> -1 Then
                                    '        minutes = Convert.ToInt32(tempstring.Substring(0, tempint))
                                    '    End If
                                    '    If hours <> 0 Then
                                    '        hours = hours * 60
                                    '    End If
                                    '    minutes = minutes + hours
                                    '    If minutes = 0 Then
                                    '        If tempstring.IndexOf("min") <> -1 Then
                                    '            tempstring = tempstring.Replace("min", "")
                                    '            tempstring = tempstring.Replace(" ", "")
                                    '            If IsNumeric(tempstring) Then
                                    '                minutes = Convert.ToInt32(tempstring)
                                    '            End If
                                    '        End If
                                    '    End If
                                    '    movietemplate.fullmoviebody.runtime = minutes.ToString & " min"
                                    'Catch ex As Exception
                                    'End Try
                                    movietemplate.filedetails = tempFileDetails
                                Else
                                    movietemplate.filedetails = Nothing
                                End If

                                If batchList.runtime = True And tempFileDetails.filedetails_video.DurationInSeconds.Value <> Nothing Then
                                    movietemplate.fullmoviebody.runtime = Utilities.cleanruntime(tempFileDetails.filedetails_video.DurationInSeconds.Value) & " min"
                                End If
                            Catch ex As Exception
                                movietemplate.filedetails = Nothing
                            End Try
                        End If
                        If batchList.runtime = True Then
                            If movietemplate.fullmoviebody.runtime <> Nothing Then
                                If movietemplate.fullmoviebody.runtime <> "" Then
                                    movietoalter.fullmoviebody.runtime = movietemplate.fullmoviebody.runtime
                                End If
                            End If
                        End If

                        If batchList.director = True Then
                            If movietemplate.fullmoviebody.director <> Nothing Then
                                If movietemplate.fullmoviebody.director <> "" Then
                                    movietoalter.fullmoviebody.director = movietemplate.fullmoviebody.director
                                End If
                            End If
                        End If

                        If batchList.year = True Then
                            If movietemplate.fullmoviebody.year <> Nothing Then
                                If movietemplate.fullmoviebody.year <> "" Then
                                    movietoalter.fullmoviebody.year = movietemplate.fullmoviebody.year
                                End If
                            End If
                        End If

                        If batchList.stars = True Then
                            If movietemplate.fullmoviebody.stars <> Nothing Then
                                If movietemplate.fullmoviebody.stars <> "" Then
                                    movietoalter.fullmoviebody.stars = movietemplate.fullmoviebody.stars
                                End If
                            End If
                        End If

                        If batchList.credits = True Then
                            If movietemplate.fullmoviebody.credits <> Nothing Then
                                If movietemplate.fullmoviebody.credits <> "" Then
                                    movietoalter.fullmoviebody.credits = movietemplate.fullmoviebody.credits
                                End If
                            End If
                        End If
                        If batchList.country = True Then
                            If movietemplate.fullmoviebody.country <> Nothing Then
                                If movietemplate.fullmoviebody.country <> "" Then
                                    movietoalter.fullmoviebody.country = movietemplate.fullmoviebody.country
                                End If
                            End If
                        End If
                        If batchList.genre = True Then
                            If movietemplate.fullmoviebody.genre <> Nothing Then
                                If movietemplate.fullmoviebody.genre <> "" Then
                                    movietoalter.fullmoviebody.genre = movietemplate.fullmoviebody.genre
                                End If
                            End If
                        End If

                        If batchList.mpaa = True Then
                            If movietemplate.fullmoviebody.mpaa <> Nothing Then
                                If movietemplate.fullmoviebody.mpaa <> "" Then
                                    movietoalter.fullmoviebody.mpaa = movietemplate.fullmoviebody.mpaa
                                End If
                            End If
                        End If

                        If batchList.plot = True Then
                            If movietemplate.fullmoviebody.plot <> Nothing Then
                                If movietemplate.fullmoviebody.plot <> "" Then
                                    movietoalter.fullmoviebody.plot = movietemplate.fullmoviebody.plot
                                End If
                            End If
                        End If

                        If batchList.premiered = True Then
                            If movietemplate.fullmoviebody.premiered <> Nothing Then
                                If movietemplate.fullmoviebody.premiered <> "" Then
                                    movietoalter.fullmoviebody.premiered = movietemplate.fullmoviebody.premiered
                                End If
                            End If
                        End If

                        If batchList.rating = True Then
                            If movietemplate.fullmoviebody.rating <> Nothing Then
                                If movietemplate.fullmoviebody.rating <> "" Then
                                    movietoalter.fullmoviebody.rating = movietemplate.fullmoviebody.rating
                                End If
                            End If
                        End If



                        If batchList.studio = True Then
                            If movietemplate.fullmoviebody.studio <> Nothing Then
                                If movietemplate.fullmoviebody.studio <> "" Then
                                    movietoalter.fullmoviebody.studio = movietemplate.fullmoviebody.studio
                                End If
                            End If
                        End If

                        If batchList.tagline = True Then
                            If movietemplate.fullmoviebody.tagline <> Nothing Then
                                If movietemplate.fullmoviebody.tagline <> "" Then
                                    movietoalter.fullmoviebody.tagline = movietemplate.fullmoviebody.tagline
                                End If
                            End If
                        End If

                        If batchList.outline = True Then
                            If movietemplate.fullmoviebody.outline <> Nothing Then
                                If movietemplate.fullmoviebody.outline <> "" Then
                                    movietoalter.fullmoviebody.outline = movietemplate.fullmoviebody.outline
                                End If
                            End If
                        End If

                        If batchList.top250 = True Then
                            If movietemplate.fullmoviebody.top250 <> Nothing Then
                                If movietemplate.fullmoviebody.top250 <> "" Then
                                    movietoalter.fullmoviebody.top250 = movietemplate.fullmoviebody.top250
                                End If
                            End If
                        End If

                        If batchList.votes = True Then
                            If movietemplate.fullmoviebody.votes <> Nothing Then
                                If movietemplate.fullmoviebody.votes <> "" Then
                                    movietoalter.fullmoviebody.votes = movietemplate.fullmoviebody.votes
                                End If
                            End If
                        End If

                        If batchList.trailer = True Then
                            If movietoalter.fullmoviebody.trailer = "Error" then
                                movietoalter.fullmoviebody.trailer = ""
                            End If
                            If movietemplate.fullmoviebody.trailer <> Nothing Then
                                If movietemplate.fullmoviebody.trailer <> "" Then
                                    movietoalter.fullmoviebody.trailer = movietemplate.fullmoviebody.trailer
                                End If
                            End If
                        End If

                        If batchList.actors = True Then
                            If Not movietemplate.listactors Is Nothing Then
                                movietoalter.listactors = movietemplate.listactors
                            End If
                        End If

                        If batchList.posterurls = True Then
                            If Not movietemplate.listthumbs Is Nothing Then
                                movietoalter.listthumbs = movietemplate.listthumbs
                            End If
                        End If
                        If batchList.mediatags = True Then
                            If Not movietemplate.filedetails Is Nothing Then
                                movietoalter.filedetails = movietemplate.filedetails
                            End If
                        End If

                        nfoFunction.mov_NfoSave(movietoalter.fileinfo.fullpathandfilename, movietoalter, True)
                        Thread.Sleep(0)



                        If missingposter = True Then
                            Try
                                Dim moviethumburl As String = ""
                                If IO.File.Exists(movietoalter.fileinfo.posterpath) = False Or Preferences.createfolderjpg = True And IO.File.Exists(movietoalter.fileinfo.posterpath.Replace(IO.Path.GetFileName(movietoalter.fileinfo.posterpath), "folder.fpg")) = False Then
                                    Try
                                        Select Case Preferences.moviethumbpriority(0)
                                            Case "Internet Movie Poster Awards"
                                                moviethumburl = scraperFunction2.impathumb(movietoalter.fullmoviebody.title, movietoalter.fullmoviebody.year)
                                            Case "IMDB"
                                                moviethumburl = scraperFunction2.imdbthumb(movietoalter.fullmoviebody.imdbid)
                                            Case "Movie Poster DB"
                                                moviethumburl = scraperFunction2.mpdbthumb(movietoalter.fullmoviebody.imdbid)
                                            Case "themoviedb.org"
                                                moviethumburl = scraperFunction2.tmdbthumb(movietoalter.fullmoviebody.imdbid)
                                        End Select
                                    Catch
                                        moviethumburl = "na"
                                    End Try
                                    Try
                                        If moviethumburl = "na" Then
                                            Select Case Preferences.moviethumbpriority(1)
                                                Case "Internet Movie Poster Awards"
                                                    moviethumburl = scraperFunction2.impathumb(movietoalter.fullmoviebody.title, movietoalter.fullmoviebody.year)
                                                Case "IMDB"
                                                    moviethumburl = scraperFunction2.imdbthumb(movietoalter.fullmoviebody.imdbid)
                                                Case "Movie Poster DB"
                                                    moviethumburl = scraperFunction2.mpdbthumb(movietoalter.fullmoviebody.imdbid)
                                                Case "themoviedb.org"
                                                    moviethumburl = scraperFunction2.tmdbthumb(movietoalter.fullmoviebody.imdbid)
                                            End Select
                                        End If
                                    Catch
                                        moviethumburl = "na"
                                    End Try
                                    Try
                                        If moviethumburl = "na" Then
                                            Select Case Preferences.moviethumbpriority(2)
                                                Case "Internet Movie Poster Awards"
                                                    moviethumburl = scraperFunction2.impathumb(movietoalter.fullmoviebody.title, movietoalter.fullmoviebody.year)
                                                Case "IMDB"
                                                    moviethumburl = scraperFunction2.imdbthumb(movietoalter.fullmoviebody.imdbid)
                                                Case "Movie Poster DB"
                                                    moviethumburl = scraperFunction2.mpdbthumb(movietoalter.fullmoviebody.imdbid)
                                                Case "themoviedb.org"
                                                    moviethumburl = scraperFunction2.tmdbthumb(movietoalter.fullmoviebody.imdbid)
                                            End Select
                                        End If
                                    Catch
                                        moviethumburl = "na"
                                    End Try
                                    Try
                                        If moviethumburl = "na" Then
                                            Select Case Preferences.moviethumbpriority(3)
                                                Case "Internet Movie Poster Awards"
                                                    moviethumburl = scraperFunction2.impathumb(movietoalter.fullmoviebody.title, movietoalter.fullmoviebody.year)
                                                Case "IMDB"
                                                    moviethumburl = scraperFunction2.imdbthumb(movietoalter.fullmoviebody.imdbid)
                                                Case "Movie Poster DB"
                                                    moviethumburl = scraperFunction2.mpdbthumb(movietoalter.fullmoviebody.imdbid)
                                                Case "themoviedb.org"
                                                    moviethumburl = scraperFunction2.tmdbthumb(movietoalter.fullmoviebody.imdbid)
                                            End Select
                                        End If
                                    Catch
                                        moviethumburl = "na"
                                    End Try
                                    Try
                                        If moviethumburl <> "" And moviethumburl <> "na" Then
                                            Dim newmoviethumbpath As String = movietoalter.fileinfo.posterpath
                                            'Utilities.DownloadFile(moviethumburl, movietoalter.fileinfo.posterpath)
                                            Try
                                                Dim buffer(4000000) As Byte
                                                Dim size As Integer = 0
                                                Dim bytesRead As Integer = 0
                                                Dim thumburl As String = moviethumburl
                                                Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                                Dim res As HttpWebResponse = req.GetResponse()
                                                Dim contents As Stream = res.GetResponseStream()
                                                Dim bytesToRead As Integer = CInt(buffer.Length)
                                                While bytesToRead > 0
                                                    size = contents.Read(buffer, bytesRead, bytesToRead)
                                                    If size = 0 Then Exit While
                                                    bytesToRead -= size
                                                    bytesRead += size
                                                End While

                                                If IO.File.Exists(movietoalter.fileinfo.posterpath) = False Then
                                                    Dim fstrm As New FileStream(movietoalter.fileinfo.posterpath, FileMode.OpenOrCreate, FileAccess.Write)
                                                    fstrm.Write(buffer, 0, bytesRead)
                                                    contents.Close()
                                                    fstrm.Close()
                                                End If

                                                Dim temppath As String = movietoalter.fileinfo.posterpath.Replace(System.IO.Path.GetFileName(newmoviethumbpath), "folder.jpg")
                                                If Preferences.createfolderjpg = True Then
                                                    If System.IO.File.Exists(temppath) = False Then
                                                        Dim fstrm2 As New FileStream(temppath, FileMode.OpenOrCreate, FileAccess.Write)
                                                        fstrm2.Write(buffer, 0, bytesRead)
                                                        contents.Close()
                                                        fstrm2.Close()
                                                    End If
                                                End If
                                            Catch ex As Exception
#If SilentErrorScream Then
                                            Throw ex
#End If
                                            End Try
                                        End If
                                    Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                    End Try
                                End If
                            Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                            End Try
                        End If


                        If missingfanart = True Then
                            Dim moviefanarturl As String = String.Empty
                            If IO.File.Exists(movietoalter.fileinfo.fanartpath) = False Then
                                Try
                                    If BckWrkScnMovies.CancellationPending Then Exit Sub
                                    Dim temp As String = movietoalter.fullmoviebody.imdbid
                                    Dim fanarturl As String = "http://api.themoviedb.org/2.1/Movie.imdbLookup/en/xml/3f026194412846e530a208cf8a39e9cb/" & temp
                                    Dim apple2(2000) As String
                                    Dim fanartlinecount As Integer = 0
                                    Try
                                        Dim wrGETURL As WebRequest
                                        wrGETURL = WebRequest.Create(fanarturl)
                                        Dim myProxy As New WebProxy("myproxy", 80)
                                        myProxy.BypassProxyOnLocal = True
                                        Dim objStream As Stream
                                        objStream = wrGETURL.GetResponse.GetResponseStream()
                                        Dim objReader As New StreamReader(objStream)
                                        Dim sLine As String = ""
                                        fanartlinecount = 0
                                        Do While Not sLine Is Nothing
                                            fanartlinecount += 1
                                            sLine = objReader.ReadLine
                                            apple2(fanartlinecount) = sLine
                                        Loop
                                        fanartlinecount -= 1
                                        Dim fanartfound As Boolean = False
                                        For g = 1 To fanartlinecount
                                            If apple2(g).IndexOf("<image type=""backdrop""") <> -1 Then
                                                If apple2(g).IndexOf("size=""original""") <> -1 Then
                                                    Dim StartofURL As Integer = apple2(g).IndexOf("url=""") + 5
                                                    Dim EndofURL As Integer = apple2(g).IndexOf("size=""original""") - 2
                                                    apple2(g) = apple2(g).Substring(StartofURL, (EndofURL - StartofURL))
                                                    apple2(g) = apple2(g).Trim
                                                    If apple2(g).ToLower.IndexOf("http") <> -1 And apple2(g).ToLower.IndexOf(".jpg") <> -1 Or apple2(g).IndexOf(".jpeg") <> -1 Or apple2(g).IndexOf(".png") <> -1 Then
                                                        moviefanarturl = apple2(g)
                                                        fanartfound = True
                                                    End If
                                                End If
                                                Exit For
                                            End If
                                        Next
                                        If fanartfound = False Then moviefanarturl = ""
                                    Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                    End Try

                                    If moviefanarturl <> "" Then



                                        'need to resize thumbs
                                        'Utilities.DownloadFile(moviefanarturl, workingpath)
                                        Try
                                            Dim buffer(4000000) As Byte
                                            Dim size As Integer = 0
                                            Dim bytesRead As Integer = 0

                                            Dim req As HttpWebRequest = WebRequest.Create(moviefanarturl)
                                            Dim res As HttpWebResponse = req.GetResponse()
                                            Dim contents As Stream = res.GetResponseStream()
                                            Dim bytesToRead As Integer = CInt(buffer.Length)
                                            Dim bmp As New Bitmap(contents)



                                            While bytesToRead > 0
                                                size = contents.Read(buffer, bytesRead, bytesToRead)
                                                If size = 0 Then Exit While
                                                bytesToRead -= size
                                                bytesRead += size
                                            End While



                                            If Preferences.resizefanart = 1 Then
                                                bmp.Save(movietoalter.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                                            ElseIf Preferences.resizefanart = 2 Then
                                                If bmp.Width > 1280 Or bmp.Height > 720 Then
                                                    Dim bm_source As New Bitmap(bmp)
                                                    Dim bm_dest As New Bitmap(1280, 720)
                                                    Dim gr As Graphics = Graphics.FromImage(bm_dest)
                                                    gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                                                    gr.DrawImage(bm_source, 0, 0, 1280 - 1, 720 - 1)
                                                    bm_dest.Save(movietoalter.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                                                Else
                                                    bmp.Save(movietoalter.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                                                End If
                                            ElseIf Preferences.resizefanart = 3 Then
                                                If bmp.Width > 960 Or bmp.Height > 540 Then
                                                    Dim bm_source As New Bitmap(bmp)
                                                    Dim bm_dest As New Bitmap(960, 540)
                                                    Dim gr As Graphics = Graphics.FromImage(bm_dest)
                                                    gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                                                    gr.DrawImage(bm_source, 0, 0, 960 - 1, 540 - 1)
                                                    bm_dest.Save(movietoalter.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                                                Else
                                                    bmp.Save(movietoalter.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                                                End If

                                            End If
                                            If IO.File.Exists(movietoalter.fileinfo.fanartpath) Then
                                                For Each paths In Preferences.offlinefolders
                                                    Dim offlinepath As String = paths & "\"
                                                    If movietoalter.fileinfo.fanartpath.IndexOf(offlinepath) <> -1 Then
                                                        Dim mediapath As String
                                                        mediapath = Utilities.GetFileName(movietoalter.fileinfo.fullpathandfilename)
                                                        Call mov_OfflineDvdProcess(movietoalter.fileinfo.fullpathandfilename, movietoalter.fullmoviebody.title, mediapath)
                                                    End If
                                                Next
                                            End If
                                        Catch ex As Exception
#If SilentErrorScream Then
                                        Throw ex
#End If
                                        End Try
                                    End If
                                Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                                End Try
                            End If
                        End If

                    End If
                    For g = 0 To filteredList.Count - 1 'fullMovieList.Count - 1
                        Try
                            'If fullMovieList(g).fullpathandfilename = movietoalter.fileinfo.fullpathandfilename Then
                            If filteredList(g).fullpathandfilename = movietoalter.fileinfo.fullpathandfilename Then

                                Dim newfullmovie As New str_ComboList(SetDefaults) ' = Nothing   'added new to initialise varibles in structure
                                newfullmovie.fullpathandfilename = tempmovielist(f)
                                newfullmovie.foldername = Utilities.GetLastFolder(tempmovielist(f))
                                newfullmovie.filename = IO.Path.GetFileName(tempmovielist(f))
                                newfullmovie.id = movietoalter.fullmoviebody.imdbid
                                Dim filecreation2 As New IO.FileInfo(workingMovieDetails.fileinfo.fullpathandfilename)
                                Dim myDate2 As Date = filecreation2.LastWriteTime
                                Try
                                    newfullmovie.filedate = Format(myDate2, "yyyyMMddHHmmss").ToString
                                Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                                End Try
                                newfullmovie.titleandyear = movietoalter.fullmoviebody.title & " (" & movietoalter.fullmoviebody.year & ")"
                                newfullmovie.title = movietoalter.fullmoviebody.title
                                newfullmovie.originaltitle = movietoalter.fullmoviebody.title
                                newfullmovie.year = movietoalter.fullmoviebody.year
                                newfullmovie.genre = movietoalter.fullmoviebody.genre
                                newfullmovie.playcount = movietoalter.fullmoviebody.playcount
                                newfullmovie.rating = movietoalter.fullmoviebody.rating
                                newfullmovie.top250 = movietoalter.fullmoviebody.top250
                                newfullmovie.runtime = movietoalter.fullmoviebody.runtime
                                newfullmovie.outline = movietoalter.fullmoviebody.outline
                                'If fullMovieList(g).sortorder <> Nothing Then
                                If filteredList(g).sortorder <> Nothing Then
                                    'If fullMovieList(g).sortorder <> "" Then
                                    If filteredList(g).sortorder <> "" Then
                                        'newfullmovie.sortorder = fullMovieList(g).sortorder
                                        newfullmovie.sortorder = filteredList(g).sortorder
                                    Else
                                        newfullmovie.sortorder = movietoalter.fullmoviebody.title
                                    End If
                                Else
                                    newfullmovie.sortorder = movietoalter.fullmoviebody.title
                                End If
                                Dim completebyte1 As Byte = 0
                                Dim fanartexists As Boolean = IO.File.Exists(Preferences.GetFanartPath(newfullmovie.fullpathandfilename))
                                Dim posterexists As Boolean = IO.File.Exists(Preferences.GetPosterPath(newfullmovie.fullpathandfilename))
                                If fanartexists = False Then
                                    completebyte1 += 1
                                End If
                                If posterexists = False Then
                                    completebyte1 += 2
                                End If
                                newfullmovie.missingdata1 = completebyte1
                                'fullMovieList.RemoveAt(g)                  'removed since we are working on filtered list now
                                'fullMovieList.Add(newfullmovie)

                                filteredList.RemoveAt(g)
                                filteredList.Add(newfullmovie)

                                If workingMovie.fullpathandfilename = newfullmovie.fullpathandfilename Then





                                End If
                                Exit For
                            End If
                        Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                        End Try
                    Next

                    progresstext = tempmovielist(f)
                    bckrescrapewizard.ReportProgress(888888, progresstext)
                Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
                End Try
            Next
            Call mov_FilteredToFullMovieList()
            Call mov_MovieComboListSort()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try


    End Sub
    Private Sub mov_FilteredToFullMovieList()
        Dim FullCount As Integer = fullMovieList.Count - 1
        Dim FilterCount As Integer = filteredList.Count - 1
        For FullPass = 0 To FullCount
            For FilterPass = 0 To FilterCount
                If fullMovieList(FullPass).fullpathandfilename = filteredList(FilterPass).fullpathandfilename Then
                    fullMovieList(FullPass) = filteredList(FilterPass) 'replace entry in FullMovie List with entry from Filtered List
                    Exit For
                End If
            Next
        Next
    End Sub

    Private Sub bckrescrapewizard_ProgressChanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bckrescrapewizard.ProgressChanged
        Try
            If e.ProgressPercentage = 999999 Then
                ToolStripStatusLabel7.Text = e.UserState
            ElseIf e.ProgressPercentage = 888888 Then
                If e.UserState = workingMovieDetails.fileinfo.fullpathandfilename Then
                    Call mov_FormPopulate()
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub bckrescrapewizard_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bckrescrapewizard.RunWorkerCompleted
        Try
            If Not (e.Error Is Nothing) Then
                MsgBox(e.Error.ToString)
            End If
            globalThreadCounter -= 1

            ToolStripProgressBar6.Value = 0
            ToolStripProgressBar6.ProgressBar.Refresh()
            ToolStripProgressBar6.Visible = False
            ToolStripStatusLabel7.Text = "Full Movie Update"
            ToolStripStatusLabel7.Visible = False

            Call util_ThreadsRunningCheck()
            mov_FiltersAndSortApply()
            'Mov_RebuildMoviesFromNfoToXML(movieFolders)      'we do this because the wizard writes to the nfo's & not the cache - this reloads the cache from the nfo's & reloads
            ' movie list with the new data (required if year updated)

        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub bckgrounddroppedfiles_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bckgrounddroppedfiles.DoWork
        Try
            Dim tempint As Integer = 0
            Dim tempstring As String = ""
            globalThreadCounter += 1
            Dim added As Boolean = False
            Dim filecounter As Integer = 0
            Do While droppedItems.Count > 0
                filecounter += 1
                Dim progresstext As String = "Adding Dropped file(s), " & droppedItems.Count.ToString & " items remaining"
                bckgrounddroppedfiles.ReportProgress(999999, progresstext)
                If bckgrounddroppedfiles.CancellationPending Then Exit Sub
                Dim path As String = droppedItems(0)
                Dim extension As String = IO.Path.GetExtension(path)
                Dim validfile As Boolean = False
                Select Case extension.ToLower
                    Case ".avi"
                        validfile = True
                    Case ".xvid"
                        validfile = True
                    Case ".divx"
                        validfile = True
                    Case ".img"
                        validfile = True
                    Case ".mpg"
                        validfile = True
                    Case ".mpeg"
                        validfile = True
                    Case ".mov"
                        validfile = True
                    Case ".rm"
                        validfile = True
                    Case ".3gp"
                        validfile = True
                    Case ".m4v"
                        validfile = True
                    Case ".wmv"
                        validfile = True
                    Case ".asf"
                        validfile = True
                    Case ".mp4"
                        validfile = True
                    Case ".mkv"
                        validfile = True
                    Case ".nrg"
                        validfile = True
                    Case ".iso"
                        validfile = True
                    Case ".rmvb"
                        validfile = True
                    Case ".ogm"
                        validfile = True
                    Case ".bin"
                        validfile = True
                    Case ".ts"
                        validfile = True
                    Case ".vob"
                        validfile = True
                    Case ".m2ts"
                        validfile = True
                    Case ".rar"
                        validfile = True
                    Case ".ifo"
                        validfile = True
                End Select
                If validfile = True Then

                    Dim posterpath As String = ""
                    Dim fanartpath As String = ""
                    Dim thumbstring As New XmlDocument

                    Dim newmovie As New FullMovieDetails
                    Dim newdetails As New str_NewMovie(SetDefaults)
                    Dim mediapath As String = path
                    Dim firsttitle As String = ""
                    If Preferences.basicsavemode = False Then
                        newdetails.nfopathandfilename = path.Replace(IO.Path.GetExtension(path), ".nfo")
                    Else
                        newdetails.nfopathandfilename = path.Replace(IO.Path.GetFileName(path), "movie.nfo")
                    End If
                    newdetails.mediapathandfilename = path

                    newdetails.title = IO.Path.GetFileName(path).Replace(IO.Path.GetExtension(path), "")

                    If Preferences.usefoldernames = True Then
                        Dim tempstring4 As String
                        tempstring4 = newdetails.nfopathandfilename.ToLower
                        If tempstring4.ToLower.IndexOf("video_ts") = -1 Then
                            newdetails.title = newdetails.nfopathandfilename.Replace(IO.Path.GetFileName(newdetails.nfopathandfilename), "")
                            newdetails.title = newdetails.title.Substring(0, newdetails.title.Length - 1)
                            newdetails.title = newdetails.title.Substring(newdetails.title.LastIndexOf("\") + 1, newdetails.title.Length - newdetails.title.LastIndexOf("\") - 1)
                        End If
                    End If

                    If extension.ToLower = ".ifo" Then
                        If IO.File.Exists(newdetails.nfopathandfilename) = False Then
                            Dim paths() As String = Nothing
                            If newdetails.nfopathandfilename.IndexOf("\") <> -1 Then
                                paths = newdetails.nfopathandfilename.Split("\")
                            ElseIf newdetails.nfopathandfilename.IndexOf("/") <> -1 Then
                                paths = newdetails.nfopathandfilename.Split("/")
                            End If
                            Dim depthecount As Integer = 0
                            depthecount = paths.GetUpperBound(0)
                            newdetails.title = Nothing

                            For h = depthecount To 0 Step -1
                                Dim temppath As String
                                temppath = paths(h)
                                paths(h) = paths(h).ToLower
                                If paths(h).ToLower.IndexOf("video_ts") = -1 Then
                                    newdetails.title = temppath
                                    Exit For
                                End If
                            Next
                        Else
                            newdetails.nfopathandfilename = Nothing
                            newdetails.title = Nothing
                        End If
                    End If

                    If newdetails.title <> Nothing Then
                        If newdetails.title <> "" Then
                            Dim year As String = String.Empty
                            Dim extrapossibleID As String
                            extrapossibleID = Nothing
                            If IO.File.Exists(newdetails.nfopathandfilename) Then
                                Dim tempinfo As String = ""
                                Dim objReader As New System.IO.StreamReader(newdetails.nfopathandfilename)
                                tempinfo = objReader.ReadToEnd
                                objReader.Close()
                                extrapossibleID = Nothing
                                Dim T As String = tempinfo
                                Dim mat As Match
                                mat = Nothing
                                mat = Regex.Match(T, "(tt\d{7})")
                                If mat.Success = True Then
                                    extrapossibleID = mat.Value
                                    If Preferences.renamenfofiles = True Then
                                        IO.File.Move(newdetails.nfopathandfilename, newdetails.nfopathandfilename.Replace(".nfo", ".info"))
                                    End If
                                Else
                                    extrapossibleID = Nothing
                                End If

                                If extrapossibleID = Nothing Then
                                    mat = Nothing
                                    T = newdetails.nfopathandfilename
                                    mat = Regex.Match(T, "(tt\d{7})")
                                    If mat.Success = True Then
                                        extrapossibleID = mat.Value
                                    Else
                                        extrapossibleID = Nothing
                                    End If
                                End If

                                If extrapossibleID = Nothing Then
                                    Dim M As Match
                                    M = Regex.Match(newdetails.title, "(\([\d]{4}\))")
                                    If M.Success = True Then
                                        year = M.Value
                                    Else
                                        year = Nothing
                                    End If
                                    If year = Nothing Then
                                        M = Regex.Match(newdetails.title, "(\[[\d]{4}\])")
                                        If M.Success = True Then
                                            year = M.Value
                                        Else
                                            year = Nothing
                                        End If
                                    End If
                                End If
                            End If
                            newdetails.title = Utilities.CleanFileName(newdetails.title)
                            If bckgrounddroppedfiles.CancellationPending Then Exit Sub
                            Dim scraperfunction As New Classimdb
                            Dim body As String
                            Dim actorlist As String
                            Dim certificates As New List(Of String)
                            If bckgrounddroppedfiles.CancellationPending Then Exit Sub
                            progresstext = "Adding Dropped file(s), " & droppedItems.Count.ToString & " items remaining"
                            bckgrounddroppedfiles.ReportProgress(999999, progresstext)

                            body = scraperfunction.getimdbbody(newdetails.title, year, extrapossibleID, Preferences.imdbmirror, imdbCounter)
                            imdbCounter += 1
                            progresstext = "Adding Dropped file(s), " & droppedItems.Count.ToString & " items remaining"
                            bckgrounddroppedfiles.ReportProgress(999999, progresstext)
                            If bckgrounddroppedfiles.CancellationPending Then Exit Sub
                            Dim thisresult As XmlNode = Nothing
                            If body = "MIC" Then
                                newmovie.fullmoviebody.genre = "problem"
                                If newmovie.fullmoviebody.title = Nothing Then
                                    newmovie.fullmoviebody.title = "Unknown Title"
                                End If
                                If newmovie.fullmoviebody.title = "" Then
                                    newmovie.fullmoviebody.title = "Unknown Title"
                                End If
                                If newmovie.fullmoviebody.year = Nothing Then
                                    newmovie.fullmoviebody.year = "0000"
                                End If
                                If newmovie.fullmoviebody.rating = Nothing Then
                                    newmovie.fullmoviebody.rating = "0"
                                End If
                                If newmovie.fullmoviebody.top250 = Nothing Then
                                    newmovie.fullmoviebody.top250 = "0"
                                End If
                                If newmovie.fullmoviebody.playcount = Nothing Then
                                    newmovie.fullmoviebody.playcount = "0"
                                End If
                                If newmovie.fullmoviebody.title = "Unknown Title" Then
                                    newmovie.fullmoviebody.plot = "This Movie has could not be identified by Media Companion, to add the movie manually, go to the movie edit page and select ""Change Movie"" to manually select the correct movie"
                                    If newdetails.title <> Nothing Then
                                        If newdetails.title = "" Then
                                            newdetails.title = "Unknown Title"
                                        End If
                                    Else
                                        newdetails.title = "Unknown Title"
                                    End If
                                    newmovie.fullmoviebody.title = newdetails.title
                                End If
                                If newmovie.fullmoviebody.title = "Unknown Title" Then
                                    newmovie.fullmoviebody.genre = "Problem"
                                End If
                                Dim myDate2 As Date = System.DateTime.Now
                                Try
                                    newmovie.fileinfo.createdate = Format(myDate2, "yyyyMMddHHmmss").ToString
                                Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                                End Try
                                If bckgrounddroppedfiles.CancellationPending Then Exit Sub
                                progresstext = "Adding Dropped file(s), " & droppedItems.Count.ToString & " items remaining"
                                bckgrounddroppedfiles.ReportProgress(999999, progresstext)
                                nfoFunction.mov_NfoSave(newdetails.nfopathandfilename, newmovie, True)
                                If bckgrounddroppedfiles.CancellationPending Then Exit Sub
                                Dim movietoadd As New str_ComboList(SetDefaults)
                                movietoadd.fullpathandfilename = newdetails.nfopathandfilename
                                movietoadd.filename = IO.Path.GetFileName(newdetails.nfopathandfilename)
                                movietoadd.foldername = Utilities.GetLastFolder(newdetails.nfopathandfilename)
                                movietoadd.title = newmovie.fullmoviebody.title
                                If newmovie.fullmoviebody.title <> Nothing Then
                                    If newmovie.fullmoviebody.year <> Nothing Then
                                        movietoadd.titleandyear = newmovie.fullmoviebody.title & " (" & newmovie.fullmoviebody.year & ")"
                                    Else
                                        movietoadd.titleandyear = newmovie.fullmoviebody.title & " (0000)"
                                    End If
                                Else
                                    movietoadd.titleandyear = "Unknown (0000)"
                                End If
                                movietoadd.runtime = "0"
                                movietoadd.year = newmovie.fullmoviebody.year

                                Dim filecreation As New IO.FileInfo(newdetails.nfopathandfilename)
                                Dim myDate As Date = filecreation.LastWriteTime
                                Try
                                    movietoadd.filedate = Format(myDate, "yyyyMMddHHmmss").ToString
                                Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                                End Try
                                movietoadd.outline = newmovie.fullmoviebody.outline
                                movietoadd.id = newmovie.fullmoviebody.imdbid
                                movietoadd.rating = newmovie.fullmoviebody.rating
                                movietoadd.top250 = newmovie.fullmoviebody.top250
                                movietoadd.genre = newmovie.fullmoviebody.genre
                                movietoadd.playcount = newmovie.fullmoviebody.playcount
                                movietoadd.missingdata1 = 3
                                added = False
                                For Each path In movieFolders
                                    If movietoadd.fullpathandfilename.IndexOf(path) <> -1 Then
                                        added = True
                                        fullMovieList.Add(movietoadd)
                                        Exit For
                                    End If
                                Next
                                If bckgrounddroppedfiles.CancellationPending Then Exit Sub
                                progresstext = "Adding Dropped file(s), " & droppedItems.Count.ToString & " items remaining"
                                bckgrounddroppedfiles.ReportProgress(999999, progresstext)
                            Else
                                Try
                                    thumbstring.LoadXml(body)
                                    For Each thisresult In thumbstring("movie")
                                        Select Case thisresult.Name
                                            Case "title"
                                                If Preferences.keepfoldername = False Then
                                                    newmovie.fullmoviebody.title = thisresult.InnerText
                                                Else
                                                    If Preferences.usefoldernames = False Then
                                                        tempstring = IO.Path.GetFileName(newdetails.nfopathandfilename)
                                                        newmovie.fullmoviebody.title = Utilities.CleanFileName(tempstring)
                                                    Else
                                                        newmovie.fullmoviebody.title = Utilities.CleanFileName(Utilities.GetLastFolder(newdetails.nfopathandfilename))
                                                    End If
                                                End If
                                                Try
                                                    If newmovie.fullmoviebody.title.ToLower.IndexOf("the ") <> -1 Then
                                                        newmovie.fullmoviebody.title = newmovie.fullmoviebody.title.Substring(4, newmovie.fullmoviebody.title.Length - 4) & " , The"
                                                    End If
                                                Catch ex As Exception
#If SilentErrorScream Then
                                                Throw ex
#End If
                                                End Try
                                            Case "credits"
                                                newmovie.fullmoviebody.credits = thisresult.InnerText
                                            Case "director"
                                                newmovie.fullmoviebody.director = thisresult.InnerText
                                            Case "stars"
                                                newmovie.fullmoviebody.stars = thisresult.InnerText
                                            Case "genre"
                                                newmovie.fullmoviebody.genre = thisresult.InnerText
                                            Case "mpaa"
                                                newmovie.fullmoviebody.mpaa = thisresult.InnerText
                                            Case "outline"
                                                newmovie.fullmoviebody.outline = thisresult.InnerText
                                            Case "plot"
                                                newmovie.fullmoviebody.plot = thisresult.InnerText
                                            Case "premiered"
                                                newmovie.fullmoviebody.premiered = thisresult.InnerText
                                            Case "rating"
                                                newmovie.fullmoviebody.rating = thisresult.InnerText
                                            Case "runtime"
                                                newmovie.fullmoviebody.runtime = thisresult.InnerText
                                            Case "studio"
                                                newmovie.fullmoviebody.studio = thisresult.InnerText
                                            Case "tagline"
                                                newmovie.fullmoviebody.tagline = thisresult.InnerText
                                            Case "top250"
                                                newmovie.fullmoviebody.top250 = thisresult.InnerText
                                            Case "votes"
                                                newmovie.fullmoviebody.votes = thisresult.InnerText
                                            Case "year"
                                                newmovie.fullmoviebody.year = thisresult.InnerText
                                            Case "id"
                                                newmovie.fullmoviebody.imdbid = thisresult.InnerText
                                            Case "cert"
                                                certificates.Add(thisresult.InnerText)
                                        End Select
                                    Next
                                Catch ex As Exception

                                    If Preferences.usefoldernames = False Then
                                        tempstring = IO.Path.GetFileName(newdetails.nfopathandfilename)
                                        newmovie.fullmoviebody.title = Utilities.CleanFileName(tempstring)
                                    Else
                                        newmovie.fullmoviebody.title = Utilities.CleanFileName(Utilities.GetLastFolder(newdetails.nfopathandfilename))
                                    End If
                                End Try
                                If newmovie.fullmoviebody.playcount = Nothing Then newmovie.fullmoviebody.playcount = "0"
                                If newmovie.fullmoviebody.top250 = Nothing Then newmovie.fullmoviebody.top250 = "0"
                                Dim myDate2 As Date = System.DateTime.Now
                                Try
                                    newmovie.fileinfo.createdate = Format(myDate2, "yyyyMMddHHmmss").ToString
                                Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                                End Try
                                Dim done As Boolean = False
                                For g = 0 To UBound(Preferences.certificatepriority)
                                    For Each cert In certificates
                                        If cert.IndexOf(Preferences.certificatepriority(g)) <> -1 Then
                                            newmovie.fullmoviebody.mpaa = cert.Substring(cert.IndexOf("|") + 1, cert.Length - cert.IndexOf("|") - 1)
                                            done = True
                                            Exit For
                                        End If
                                    Next
                                    If done = True Then Exit For
                                Next

                                actorlist = scraperfunction.getimdbactors(Preferences.imdbmirror, newmovie.fullmoviebody.imdbid, newmovie.fullmoviebody.title, Preferences.maxactors)
                                Try
                                    thumbstring.LoadXml(actorlist)
                                    For g = 0 To actorDB.Count - 1
                                        If actorDB(g).movieid = newmovie.fullmoviebody.imdbid Then
                                            actorDB.RemoveAt(g)
                                        End If
                                    Next
                                    thisresult = Nothing
                                    For Each thisresult In thumbstring("actorlist")
                                        Select Case thisresult.Name
                                            Case "actor"
                                                Dim newactor As New str_MovieActors(SetDefaults)
                                                Dim detail As XmlNode = Nothing
                                                For Each detail In thisresult.ChildNodes
                                                    Select Case detail.Name
                                                        Case "name"
                                                            newactor.actorname = detail.InnerText
                                                        Case "role"
                                                            newactor.actorrole = detail.InnerText
                                                        Case "thumb"
                                                            newactor.actorthumb = detail.InnerText
                                                        Case "actorid"
                                                            If newactor.actorthumb <> Nothing Then
                                                                If Preferences.actorsave = True And detail.InnerText <> "" Then
                                                                    Dim workingpath As String = ""
                                                                    Dim networkpath As String = Preferences.actorsavepath
                                                                    Try
                                                                        tempstring = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2)
                                                                        Dim hg As New IO.DirectoryInfo(tempstring)
                                                                        If Not hg.Exists Then
                                                                            IO.Directory.CreateDirectory(tempstring)
                                                                        End If
                                                                        workingpath = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                                        If Not IO.File.Exists(workingpath) Then
                                                                            Utilities.DownloadFile(newactor.actorthumb, workingpath)
                                                                            'Dim buffer(4000000) As Byte
                                                                            'Dim size As Integer = 0
                                                                            'Dim bytesRead As Integer = 0
                                                                            'Dim thumburl As String = newactor.actorthumb
                                                                            'Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                                                            'Dim res As HttpWebResponse = req.GetResponse()
                                                                            'Dim contents As Stream = res.GetResponseStream()
                                                                            'Dim bytesToRead As Integer = CInt(buffer.Length)
                                                                            'While bytesToRead > 0
                                                                            '    size = contents.Read(buffer, bytesRead, bytesToRead)
                                                                            '    If size = 0 Then Exit While
                                                                            '    bytesToRead -= size
                                                                            '    bytesRead += size
                                                                            'End While

                                                                            'Dim fstrm As New FileStream(workingpath, FileMode.OpenOrCreate, FileAccess.Write)
                                                                            'fstrm.Write(buffer, 0, bytesRead)
                                                                            'contents.Close()
                                                                            'fstrm.Close()
                                                                        End If
                                                                        newactor.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, detail.InnerText.Substring(detail.InnerText.Length - 2, 2))
                                                                        If Preferences.actornetworkpath.IndexOf("/") <> -1 Then
                                                                            newactor.actorthumb = Preferences.actornetworkpath & "/" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "/" & detail.InnerText & ".jpg"
                                                                        Else
                                                                            newactor.actorthumb = Preferences.actornetworkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                                        End If
                                                                    Catch ex As Exception
#If SilentErrorScream Then
                                                                    Throw ex
#End If
                                                                    End Try
                                                                End If
                                                            End If
                                                    End Select
                                                Next
                                                newmovie.listactors.Add(newactor)
                                                Dim actornew As New str_ActorDatabase(SetDefaults)
                                                actornew.actorname = newactor.actorname
                                                actornew.movieid = newmovie.fullmoviebody.imdbid
                                                actorDB.Add(actornew)
                                        End Select
                                    Next

                                    While newmovie.listactors.Count > Preferences.maxactors
                                        newmovie.listactors.RemoveAt(newmovie.listactors.Count - 1)
                                    End While
                                Catch ex As Exception
                                    newmovie.listactors.Clear()
                                End Try

                                Try
                                    Dim trailer As String = String.Empty
                                    progresstext = "Adding Dropped file(s), " & droppedItems.Count.ToString & " items remaining"
                                    bckgrounddroppedfiles.ReportProgress(999999, progresstext)
                                    If Preferences.gettrailer = True Then
                                        trailer = scraperfunction.gettrailerurl(newmovie.fullmoviebody.imdbid, Preferences.imdbmirror)
                                        If trailer <> String.Empty And trailer <> "Error" Then
                                            newmovie.fullmoviebody.trailer = trailer
                                        End If
                                    End If
                                Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                                End Try
                                If bckgrounddroppedfiles.CancellationPending Then Exit Sub
                                progresstext = "Adding Dropped file(s), " & droppedItems.Count.ToString & " items remaining"
                                bckgrounddroppedfiles.ReportProgress(999999, progresstext)
                                If Preferences.nfoposterscraper <> 0 Then
                                    Dim thumbs As String = ""
                                    If Preferences.nfoposterscraper = 1 Or Preferences.nfoposterscraper = 3 Or Preferences.nfoposterscraper = 5 Or Preferences.nfoposterscraper = 7 Or Preferences.nfoposterscraper = 9 Or Preferences.nfoposterscraper = 11 Or Preferences.nfoposterscraper = 13 Or Preferences.nfoposterscraper = 15 Then
                                        Dim newobject3 As New IMPA.getimpaposters
                                        Dim teststring As New XmlDocument
                                        Dim testthumbs As String
                                        Try
                                            testthumbs = newobject3.getimpathumbs(newmovie.fullmoviebody.title, newmovie.fullmoviebody.year)
                                            Dim testthumbs2 As String = "<totalthumbs>" & testthumbs & "</totalthumbs>"
                                            teststring.LoadXml(testthumbs2)
                                            thumbs = thumbs & testthumbs.ToString
                                        Catch ex As Exception
#If SilentErrorScream Then
                                        Throw ex
#End If
                                            Thread.Sleep(1)
                                        End Try
                                    End If

                                    If bckgrounddroppedfiles.CancellationPending Then Exit Sub
                                    progresstext = "Adding Dropped file(s), " & droppedItems.Count.ToString & " items remaining"
                                    bckgrounddroppedfiles.ReportProgress(999999, progresstext)
                                    If Preferences.nfoposterscraper = 2 Or Preferences.nfoposterscraper = 3 Or Preferences.nfoposterscraper = 6 Or Preferences.nfoposterscraper = 7 Or Preferences.nfoposterscraper = 10 Or Preferences.nfoposterscraper = 11 Or Preferences.nfoposterscraper = 14 Or Preferences.nfoposterscraper = 15 Then
                                        Dim newobject2 As New tmdb_posters.Class1
                                        Dim teststring As New XmlDocument
                                        Dim testthumbs As String
                                        Try
                                            testthumbs = newobject2.gettmdbposters(newmovie.fullmoviebody.imdbid)
                                            Dim testthumbs2 As String = "<totalthumbs>" & testthumbs & "</totalthumbs>"
                                            teststring.LoadXml(testthumbs2)
                                            thumbs = thumbs & testthumbs.ToString
                                        Catch ex As Exception
#If SilentErrorScream Then
                                        Throw ex
#End If
                                            Thread.Sleep(1)
                                        End Try
                                    End If
                                    If bckgrounddroppedfiles.CancellationPending Then Exit Sub
                                    progresstext = "Adding Dropped file(s), " & droppedItems.Count.ToString & " items remaining"
                                    bckgrounddroppedfiles.ReportProgress(999999, progresstext)
                                    If Preferences.nfoposterscraper = 4 Or Preferences.nfoposterscraper = 5 Or Preferences.nfoposterscraper = 6 Or Preferences.nfoposterscraper = 7 Or Preferences.nfoposterscraper = 12 Or Preferences.nfoposterscraper = 13 Or Preferences.nfoposterscraper = 14 Or Preferences.nfoposterscraper = 15 Then
                                        Dim newobject As New class_mpdb_thumbs.Class1
                                        Dim teststring As New XmlDocument
                                        Dim testthumbs As String
                                        Try
                                            testthumbs = newobject.get_mpdb_thumbs(newmovie.fullmoviebody.imdbid)
                                            Dim testthumbs2 As String = "<totalthumbs>" & testthumbs & "</totalthumbs>"
                                            teststring.LoadXml(testthumbs2)
                                            thumbs = thumbs & testthumbs.ToString
                                        Catch ex As Exception
#If SilentErrorScream Then
                                        Throw ex
#End If
                                            Thread.Sleep(1)
                                        End Try
                                    End If
                                    If bckgrounddroppedfiles.CancellationPending Then Exit Sub
                                    progresstext = "Adding Dropped file(s), " & droppedItems.Count.ToString & " items remaining"
                                    bckgrounddroppedfiles.ReportProgress(999999, progresstext)
                                    If Preferences.nfoposterscraper = 8 Or Preferences.nfoposterscraper = 9 Or Preferences.nfoposterscraper = 10 Or Preferences.nfoposterscraper = 11 Or Preferences.nfoposterscraper = 12 Or Preferences.nfoposterscraper = 13 Or Preferences.nfoposterscraper = 14 Or Preferences.nfoposterscraper = 15 Then
                                        Dim thumbscraper As New imdb_thumbs.Class1
                                        Dim teststring As New XmlDocument
                                        Try
                                            Dim testthumbs As String
                                            testthumbs = thumbscraper.getimdbthumbs(newmovie.fullmoviebody.title, newmovie.fullmoviebody.year, newmovie.fullmoviebody.imdbid)
                                            Dim testthumbs2 As String = "<totalthumbs>" & testthumbs & "</totalthumbs>"
                                            teststring.LoadXml(testthumbs2)
                                            thumbs = thumbs & testthumbs.ToString
                                        Catch ex As Exception
#If SilentErrorScream Then
                                        Throw ex
#End If
                                            Thread.Sleep(1)
                                        End Try
                                    End If

                                    thumbs = "<thumblist>" & thumbs & "</thumblist>"

                                    Try
                                        thumbstring.LoadXml(thumbs)



                                        For Each thisresult In thumbstring("thumblist")
                                            Select Case thisresult.Name
                                                Case "thumb"
                                                    newmovie.listthumbs.Add(thisresult.InnerText)
                                            End Select
                                        Next
                                    Catch ex As Exception

                                        newmovie.listthumbs.Clear()
                                    End Try
                                End If
                                If bckgrounddroppedfiles.CancellationPending Then Exit Sub
                                progresstext = "Adding Dropped file(s), " & droppedItems.Count.ToString & " items remaining"
                                bckgrounddroppedfiles.ReportProgress(999999, progresstext)

                                Try
                                    newmovie.filedetails = Preferences.Get_HdTags(newdetails.mediapathandfilename)
                                    If newmovie.filedetails.filedetails_video.DurationInSeconds.Value <> Nothing And Preferences.movieRuntimeDisplay = "file" Then
                                        Try
                                            '1h 24mn 48s 546ms
                                            'Dim hours As Integer = 0
                                            'Dim minutes As Integer = 0
                                            'tempstring = newmovie.filedetails.filedetails_video.DurationInSeconds.Value
                                            'tempint = tempstring.IndexOf("h")
                                            'If tempint <> -1 Then
                                            '    hours = Convert.ToInt32(tempstring.Substring(0, tempint))
                                            '    tempstring = tempstring.Substring(tempint + 1, tempstring.Length - (tempint + 1))
                                            '    tempstring = Trim(tempstring)
                                            'End If
                                            'tempint = tempstring.IndexOf("mn")
                                            'If tempint <> -1 Then
                                            '    minutes = Convert.ToInt32(tempstring.Substring(0, tempint))
                                            'End If
                                            'If hours <> 0 Then
                                            '    hours = hours * 60
                                            'End If
                                            'minutes = minutes + hours
                                            'If minutes = 0 Then
                                            '    If tempstring.IndexOf("min") <> -1 Then
                                            '        tempstring = tempstring.Replace("min", "")
                                            '        tempstring = tempstring.Replace(" ", "")
                                            '        If IsNumeric(tempstring) Then
                                            '            minutes = Convert.ToInt32(tempstring)
                                            '        End If
                                            '    End If
                                            'End If
                                            newmovie.fullmoviebody.runtime = Utilities.cleanruntime(newmovie.filedetails.filedetails_video.DurationInSeconds.Value) & " min"
                                            scraperLog = scraperLog & "HD Tags Added OK" & vbCrLf
                                        Catch ex As Exception
#If SilentErrorScream Then
                                        Throw ex
#End If
                                        End Try
                                    End If
                                Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                                End Try






                                If newmovie.fullmoviebody.title = Nothing Then
                                    newmovie.fullmoviebody.title = "Unknown Title"
                                End If
                                If newmovie.fullmoviebody.title = "" Then
                                    newmovie.fullmoviebody.title = "Unknown Title"
                                End If
                                If newmovie.fullmoviebody.year = Nothing Then
                                    newmovie.fullmoviebody.year = "0000"
                                End If
                                If newmovie.fullmoviebody.rating = Nothing Then
                                    newmovie.fullmoviebody.rating = "0"
                                End If
                                If newmovie.fullmoviebody.top250 = Nothing Then
                                    newmovie.fullmoviebody.top250 = "0"
                                End If
                                If newmovie.fullmoviebody.playcount = Nothing Then
                                    newmovie.fullmoviebody.playcount = "0"
                                End If
                                If newmovie.fullmoviebody.title = "Unknown Title" Then
                                    newmovie.fullmoviebody.plot = "This Movie has could not be identified by Media Companion, to add the movie manually, go to the movie edit page and select ""Change Movie"" to manually select the correct movie"
                                    If newdetails.title <> Nothing Then
                                        If newdetails.title = "" Then
                                            newdetails.title = "Unknown Title"
                                        End If
                                    Else
                                        newdetails.title = "Unknown Title"
                                    End If
                                    newmovie.fullmoviebody.title = newdetails.title
                                End If
                                If newmovie.fullmoviebody.title = "Unknown Title" Then
                                    newmovie.fullmoviebody.genre = "Problem"
                                End If
                                If newmovie.fullmoviebody.runtime = Nothing Then
                                    newmovie.fullmoviebody.runtime = "0"
                                End If
                                nfoFunction.mov_NfoSave(newdetails.nfopathandfilename, newmovie, True)
                                If bckgrounddroppedfiles.CancellationPending Then Exit Sub
                                progresstext = "Adding Dropped file(s), " & droppedItems.Count.ToString & " items remaining"
                                bckgrounddroppedfiles.ReportProgress(999999, progresstext)

                                Dim movietoadd As New str_ComboList(SetDefaults)
                                movietoadd.runtime = newmovie.fullmoviebody.runtime
                                movietoadd.fullpathandfilename = newdetails.nfopathandfilename
                                movietoadd.filename = IO.Path.GetFileName(newdetails.nfopathandfilename)
                                movietoadd.foldername = Utilities.GetLastFolder(newdetails.nfopathandfilename)
                                movietoadd.title = newmovie.fullmoviebody.title
                                If newmovie.fullmoviebody.title <> Nothing Then
                                    If newmovie.fullmoviebody.year <> Nothing Then
                                        movietoadd.titleandyear = newmovie.fullmoviebody.title & " (" & newmovie.fullmoviebody.year & ")"
                                    Else
                                        movietoadd.titleandyear = newmovie.fullmoviebody.title & " (0000)"
                                    End If
                                Else
                                    movietoadd.titleandyear = "Unknown (0000)"
                                End If
                                movietoadd.year = newmovie.fullmoviebody.year

                                Dim filecreation As New IO.FileInfo(newdetails.nfopathandfilename)
                                Dim myDate As Date = filecreation.LastWriteTime
                                Try
                                    movietoadd.filedate = Format(myDate, "yyyyMMddHHmmss").ToString
                                    movietoadd.createdate = Format(myDate, "yyyyMMddHHmmss").ToString
                                Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                                End Try
                                movietoadd.outline = newmovie.fullmoviebody.outline
                                movietoadd.id = newmovie.fullmoviebody.imdbid
                                movietoadd.rating = newmovie.fullmoviebody.rating
                                movietoadd.top250 = newmovie.fullmoviebody.top250
                                movietoadd.genre = newmovie.fullmoviebody.genre
                                movietoadd.playcount = newmovie.fullmoviebody.playcount
                                movietoadd.sortorder = newmovie.fullmoviebody.title
                                movietoadd.playcount = "0"
                                Dim completebyte1 As Byte = 0
                                Dim fanartexists As Boolean = IO.File.Exists(Preferences.GetFanartPath(movietoadd.fullpathandfilename))
                                Dim posterexists As Boolean = IO.File.Exists(Preferences.GetPosterPath(movietoadd.fullpathandfilename))
                                If fanartexists = False Then
                                    completebyte1 += 1
                                End If
                                If posterexists = False Then
                                    completebyte1 += 2
                                End If
                                movietoadd.missingdata1 = completebyte1
                                added = False
                                For Each path In movieFolders
                                    If movietoadd.fullpathandfilename.IndexOf(path) <> -1 Then
                                        added = True
                                        fullMovieList.Add(movietoadd)
                                        Exit For
                                    End If
                                Next
                                If bckgrounddroppedfiles.CancellationPending Then Exit Sub
                                progresstext = "Adding Dropped file(s), " & droppedItems.Count.ToString & " items remaining"
                                bckgrounddroppedfiles.ReportProgress(999999, progresstext)

                                Dim moviethumburl As String = ""
                                If Preferences.scrapemovieposters = True And Preferences.overwritethumbs = True Or IO.File.Exists(Preferences.GetPosterPath(newdetails.nfopathandfilename)) = False Then
                                    Try
                                        If bckgrounddroppedfiles.CancellationPending Then Exit Sub
                                        progresstext = "Adding Dropped file(s), " & droppedItems.Count.ToString & " items remaining"
                                        bckgrounddroppedfiles.ReportProgress(999999, progresstext)
                                        Select Case Preferences.moviethumbpriority(0)
                                            Case "Internet Movie Poster Awards"
                                                moviethumburl = scraperFunction2.impathumb(newmovie.fullmoviebody.title, newmovie.fullmoviebody.year)
                                            Case "IMDB"
                                                moviethumburl = scraperFunction2.imdbthumb(newmovie.fullmoviebody.imdbid)
                                            Case "Movie Poster DB"
                                                moviethumburl = scraperFunction2.mpdbthumb(newmovie.fullmoviebody.imdbid)
                                            Case "themoviedb.org"
                                                moviethumburl = scraperFunction2.tmdbthumb(newmovie.fullmoviebody.imdbid)
                                        End Select
                                    Catch
                                        moviethumburl = "na"
                                    End Try
                                    Try
                                        If bckgrounddroppedfiles.CancellationPending Then Exit Sub
                                        progresstext = "Adding Dropped file(s), " & droppedItems.Count.ToString & " items remaining"
                                        bckgrounddroppedfiles.ReportProgress(999999, progresstext)
                                        If moviethumburl = "na" Then
                                            Select Case Preferences.moviethumbpriority(1)
                                                Case "Internet Movie Poster Awards"
                                                    moviethumburl = scraperFunction2.impathumb(newmovie.fullmoviebody.title, newmovie.fullmoviebody.year)
                                                Case "IMDB"
                                                    moviethumburl = scraperFunction2.imdbthumb(newmovie.fullmoviebody.imdbid)
                                                Case "Movie Poster DB"
                                                    moviethumburl = scraperFunction2.mpdbthumb(newmovie.fullmoviebody.imdbid)
                                                Case "themoviedb.org"
                                                    moviethumburl = scraperFunction2.tmdbthumb(newmovie.fullmoviebody.imdbid)
                                            End Select
                                        End If
                                    Catch
                                        moviethumburl = "na"
                                    End Try
                                    Try
                                        If bckgrounddroppedfiles.CancellationPending Then Exit Sub
                                        progresstext = "Adding Dropped file(s), " & droppedItems.Count.ToString & " items remaining"
                                        bckgrounddroppedfiles.ReportProgress(999999, progresstext)
                                        If moviethumburl = "na" Then
                                            Select Case Preferences.moviethumbpriority(2)
                                                Case "Internet Movie Poster Awards"
                                                    moviethumburl = scraperFunction2.impathumb(newmovie.fullmoviebody.title, newmovie.fullmoviebody.year)
                                                Case "IMDB"
                                                    moviethumburl = scraperFunction2.imdbthumb(newmovie.fullmoviebody.imdbid)
                                                Case "Movie Poster DB"
                                                    moviethumburl = scraperFunction2.mpdbthumb(newmovie.fullmoviebody.imdbid)
                                                Case "themoviedb.org"
                                                    moviethumburl = scraperFunction2.tmdbthumb(newmovie.fullmoviebody.imdbid)
                                            End Select
                                        End If
                                    Catch
                                        moviethumburl = "na"
                                    End Try
                                    Try
                                        If bckgrounddroppedfiles.CancellationPending Then Exit Sub
                                        progresstext = "Adding Dropped file(s), " & droppedItems.Count.ToString & " items remaining"
                                        bckgrounddroppedfiles.ReportProgress(999999, progresstext)
                                        If moviethumburl = "na" Then
                                            Select Case Preferences.moviethumbpriority(3)
                                                Case "Internet Movie Poster Awards"
                                                    moviethumburl = scraperFunction2.impathumb(newmovie.fullmoviebody.title, newmovie.fullmoviebody.year)
                                                Case "IMDB"
                                                    moviethumburl = scraperFunction2.imdbthumb(newmovie.fullmoviebody.imdbid)
                                                Case "Movie Poster DB"
                                                    moviethumburl = scraperFunction2.mpdbthumb(newmovie.fullmoviebody.imdbid)
                                                Case "themoviedb.org"
                                                    moviethumburl = scraperFunction2.tmdbthumb(newmovie.fullmoviebody.imdbid)
                                            End Select
                                        End If
                                    Catch
                                        moviethumburl = "na"
                                    End Try
                                    Try
                                        If bckgrounddroppedfiles.CancellationPending Then Exit Sub
                                        progresstext = "Adding Dropped file(s), " & droppedItems.Count.ToString & " items remaining"
                                        bckgrounddroppedfiles.ReportProgress(999999, progresstext)
                                        If moviethumburl <> "" And moviethumburl <> "na" Then
                                            Dim newmoviethumbpath As String = Preferences.GetPosterPath(newdetails.nfopathandfilename)
                                            Try
                                                'Utilities.DownloadFile(moviethumburl, newmoviethumbpath)
                                                Dim buffer(4000000) As Byte
                                                Dim size As Integer = 0
                                                Dim bytesRead As Integer = 0
                                                Dim thumburl As String = moviethumburl
                                                Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                                Dim res As HttpWebResponse = req.GetResponse()
                                                Dim contents As Stream = res.GetResponseStream()
                                                Dim bytesToRead As Integer = CInt(buffer.Length)
                                                While bytesToRead > 0
                                                    size = contents.Read(buffer, bytesRead, bytesToRead)
                                                    If size = 0 Then Exit While
                                                    bytesToRead -= size
                                                    bytesRead += size
                                                End While
                                                Dim fstrm As New FileStream(newmoviethumbpath, FileMode.OpenOrCreate, FileAccess.Write)
                                                fstrm.Write(buffer, 0, bytesRead)
                                                contents.Close()
                                                fstrm.Close()


                                                Dim temppath As String = newmoviethumbpath.Replace(System.IO.Path.GetFileName(newmoviethumbpath), "folder.jpg")
                                                If Preferences.createfolderjpg = True Then
                                                    If Preferences.overwritethumbs = True Or System.IO.File.Exists(temppath) = False Then
                                                        scraperLog = scraperLog & "Saving folder.jpg To Path :- " & temppath & vbCrLf
                                                        Dim fstrm2 As New FileStream(temppath, FileMode.OpenOrCreate, FileAccess.Write)
                                                        fstrm2.Write(buffer, 0, bytesRead)
                                                        contents.Close()
                                                        fstrm2.Close()
                                                    Else
                                                        scraperLog = scraperLog & "folder.jpg Not Saved to :- " & temppath & ", file already exists" & vbCrLf
                                                    End If
                                                End If
                                            Catch ex As Exception
                                                scraperLog = scraperLog & "Problem Saving Thumbnail" & vbCrLf
                                                scraperLog = scraperLog & "Error Returned :- " & ex.ToString & vbCrLf & vbCrLf
                                            End Try
                                        End If
                                    Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                    End Try
                                End If




                                If Preferences.overwritethumbs = True Or Preferences.overwritethumbs = False And IO.File.Exists(Preferences.GetFanartPath(newdetails.nfopathandfilename)) = False Then
                                    If Preferences.savefanart = False Then
                                        'scraperlog = scraperlog & "Fanart Not Downloaded - Disabled in preferences, use browser to find and add Fanart" & vbCrLf
                                    Else
                                        Try
                                            If bckgrounddroppedfiles.CancellationPending Then Exit Sub
                                            progresstext = "Adding Dropped file(s), " & droppedItems.Count.ToString & " items remaining"
                                            bckgrounddroppedfiles.ReportProgress(999999, progresstext)
                                            Dim moviefanartexists As Boolean
                                            Dim fanarturlpath As String = Preferences.GetFanartPath(newdetails.nfopathandfilename)

                                            moviethumburl = ""
                                            moviefanartexists = System.IO.File.Exists(fanarturlpath)
                                            If moviefanartexists = False Or Preferences.overwritethumbs = True Then

                                                Dim temp As String = newmovie.fullmoviebody.imdbid

                                                Dim fanarturl As String = "http://api.themoviedb.org/2.1/Movie.imdbLookup/en/xml/3f026194412846e530a208cf8a39e9cb/" & temp
                                                Dim apple2(2000) As String
                                                Dim fanartlinecount As Integer = 0
                                                Try
                                                    Dim wrGETURL As WebRequest
                                                    wrGETURL = WebRequest.Create(fanarturl)
                                                    Dim myProxy As New WebProxy("myproxy", 80)
                                                    myProxy.BypassProxyOnLocal = True
                                                    Dim objStream As Stream
                                                    objStream = wrGETURL.GetResponse.GetResponseStream()
                                                    Dim objReader As New StreamReader(objStream)
                                                    Dim sLine As String = ""
                                                    fanartlinecount = 0
                                                    Do While Not sLine Is Nothing
                                                        fanartlinecount += 1
                                                        sLine = objReader.ReadLine
                                                        apple2(fanartlinecount) = sLine
                                                    Loop
                                                    fanartlinecount -= 1
                                                    Dim fanartfound As Boolean = False
                                                    For g = 1 To fanartlinecount
                                                        If apple2(g).IndexOf("<image type=""backdrop""") <> -1 Then
                                                            If apple2(g).IndexOf("size=""original""") <> -1 Then
                                                                Dim StartofURL As Integer = apple2(g).IndexOf("url=""") + 5
                                                                Dim EndofURL As Integer = apple2(g).IndexOf("size=""original""") - 2
                                                                apple2(g) = apple2(g).Substring(StartofURL, (EndofURL - StartofURL))
                                                                apple2(g) = apple2(g).Trim
                                                                If apple2(g).ToLower.IndexOf("http") <> -1 And apple2(g).ToLower.IndexOf(".jpg") <> -1 Or apple2(g).IndexOf(".jpeg") <> -1 Or apple2(g).IndexOf(".png") <> -1 Then
                                                                    moviethumburl = apple2(g)
                                                                    fanartfound = True
                                                                End If
                                                            End If
                                                            Exit For
                                                        End If
                                                    Next
                                                    If fanartfound = False Then moviethumburl = ""
                                                Catch ex As Exception
#If SilentErrorScream Then
                                                Throw ex
#End If
                                                End Try
                                                If moviethumburl <> "" Then


                                                    scraperLog = scraperLog & "Fanart URL is " & fanarturl & vbCrLf
                                                    scraperLog = scraperLog & "Saving Fanart As :- " & fanarturlpath & vbCrLf

                                                    'need to resize thumbs

                                                    Try
                                                        'Utilities.DownloadFile(moviethumburl, bmp)
                                                        Dim buffer(4000000) As Byte
                                                        Dim size As Integer = 0
                                                        Dim bytesRead As Integer = 0

                                                        Dim req As HttpWebRequest = WebRequest.Create(moviethumburl)
                                                        Dim res As HttpWebResponse = req.GetResponse()
                                                        Dim contents As Stream = res.GetResponseStream()
                                                        Dim bytesToRead As Integer = CInt(buffer.Length)
                                                        Dim bmp As New Bitmap(contents)



                                                        While bytesToRead > 0
                                                            size = contents.Read(buffer, bytesRead, bytesToRead)
                                                            If size = 0 Then Exit While
                                                            bytesToRead -= size
                                                            bytesRead += size
                                                        End While



                                                        If Preferences.resizefanart = 1 Then
                                                            bmp.Save(fanarturlpath, Imaging.ImageFormat.Jpeg)
                                                        ElseIf Preferences.resizefanart = 2 Then
                                                            If bmp.Width > 1280 Or bmp.Height > 720 Then
                                                                Dim bm_source As New Bitmap(bmp)
                                                                Dim bm_dest As New Bitmap(1280, 720)
                                                                Dim gr As Graphics = Graphics.FromImage(bm_dest)
                                                                gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                                                                gr.DrawImage(bm_source, 0, 0, 1280 - 1, 720 - 1)
                                                                bm_dest.Save(fanarturlpath, Imaging.ImageFormat.Jpeg)
                                                            Else
                                                                bmp.Save(fanarturlpath, Imaging.ImageFormat.Jpeg)
                                                            End If
                                                        ElseIf Preferences.resizefanart = 3 Then
                                                            If bmp.Width > 960 Or bmp.Height > 540 Then
                                                                Dim bm_source As New Bitmap(bmp)
                                                                Dim bm_dest As New Bitmap(960, 540)
                                                                Dim gr As Graphics = Graphics.FromImage(bm_dest)
                                                                gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                                                                gr.DrawImage(bm_source, 0, 0, 960 - 1, 540 - 1)
                                                                bm_dest.Save(fanarturlpath, Imaging.ImageFormat.Jpeg)
                                                            Else
                                                                bmp.Save(fanarturlpath, Imaging.ImageFormat.Jpeg)
                                                            End If

                                                        End If
                                                    Catch ex As Exception
                                                        Try
                                                            scraperLog = scraperLog & "Fanart Not Saved to :- " ' & moviethumbpath & vbCrLf
                                                            scraperLog = scraperLog & "Error received :- " & ex.ToString & vbCrLf & vbCrLf
                                                        Catch
                                                        End Try
                                                    End Try
                                                Else
                                                    'scraperlog = scraperlog & "No Fanart is Available For This Movie" & moviethumbpath & vbCrLf
                                                End If
                                            Else
                                                'scraperlog = scraperlog & "Fanart Not Saved to :- " & moviethumbpath & ", file already exists" & vbCrLf
                                            End If
                                        Catch ex As Exception
#If SilentErrorScream Then
                                        Throw ex
#End If
                                        End Try
                                    End If
                                End If
                            End If
                        End If
                    End If


                End If
                droppedItems.RemoveAt(0)
                If added = True Then
                    bckgrounddroppedfiles.ReportProgress(999998, progresstext)
                Else
                    bckgrounddroppedfiles.ReportProgress(999999, progresstext)
                End If
            Loop
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub bckgrounddroppedfiles_ProgressChanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bckgrounddroppedfiles.ProgressChanged
        Try
            If e.ProgressPercentage = 999999 Then
                ToolStripStatusLabel4.Text = e.UserState
            ElseIf e.ProgressPercentage = 999998 Then
                Call mov_FiltersAndSortApply()
                ToolStripStatusLabel4.Text = e.UserState
            End If
            'ToolStrip1.Refresh()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub bckgrounddroppedfiles_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bckgrounddroppedfiles.RunWorkerCompleted
        Try
            'ToolStripProgressBar4.Value = 0
            'ToolStripProgressBar4.ProgressBar.Refresh()
            'ToolStripProgressBar4.Visible = False
            ToolStripStatusLabel4.Text = "Dropped Movie Scan Progress"
            ToolStripStatusLabel4.Visible = False
            globalThreadCounter -= 1
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub
    Private Sub mov_Play()
        If MovieListComboBox.SelectedItems.Count = 0 Then Return
        Dim tempstring As String
        tempstring = CType(MovieListComboBox.SelectedItem, ValueDescriptionPair).Value
        Dim playlist As New List(Of String)
        tempstring = Utilities.GetFileName(tempstring)
        playlist = Utilities.GetMediaList(tempstring)

        frmSplash2.Text = "Playing Movie..."
        frmSplash2.Label1.Text = "Creating m3u file....." & vbCrLf & tempstring
        frmSplash2.Label1.Visible = True
        frmSplash2.Label2.Visible = False
        frmSplash2.ProgressBar1.Visible = False
        frmSplash2.Show()
        Application.DoEvents()

        If playlist.Count <= 0 Then
            MsgBox("No Media File Found For This nfo")
            Exit Sub
        End If


        tempstring = applicationPath & "\settings\temp.m3u"


        Dim file As IO.StreamWriter = IO.File.CreateText(tempstring)

        For Each part In playlist
            If part <> Nothing Then file.WriteLine(part)
        Next
        file.Close()

        frmSplash2.Label1.Text = "Launching Player....."

        If Preferences.videomode = 1 Then Call util_VideoMode1(tempstring)
        If Preferences.videomode = 2 Then Call util_VideoMode2(tempstring)
        If Preferences.videomode = 3 Then
            Preferences.videomode = 2
            Call util_VideoMode2(tempstring)
        End If
        If Preferences.videomode >= 4 Then
            If Preferences.selectedvideoplayer <> Nothing Then
                Call util_VideoMode4(tempstring)
            Else
                Call util_VideoMode1(tempstring)
            End If
        End If

        frmSplash2.Hide()
    End Sub
    Private Sub ComboBox1_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles MovieListComboBox.DoubleClick
        Try
            mov_Play()

            'Dim tempstring As String
            'tempstring = CType(MovieListComboBox.SelectedItem, ValueDescriptionPair).value
            'Dim playlist As New List(Of String)
            'tempstring = Utilities.GetFileName(tempstring)
            'playlist = Utilities.GetMediaList(tempstring)

            'frmSplash2.Text = "Playing Movie..."
            'frmSplash2.Label1.Text = "Creating m3u file....." & vbCrLf & tempstring
            'frmSplash2.Label1.Visible = True
            'frmSplash2.Label2.Visible = False
            'frmSplash2.ProgressBar1.Visible = False
            'frmSplash2.Show()
            'Application.DoEvents()


            'If IO.File.Exists(tempstring) Then
            '    playlist.Add(tempstring)
            'End If
            'If tempstring.IndexOf("cd1") <> -1 Then
            '    tempstring = tempstring.Replace("cd1", "cd2")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("cd2", "cd3")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("cd3", "cd4")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("cd4", "cd5")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            'End If
            'If tempstring.IndexOf("cd_1") <> -1 Then
            '    tempstring = tempstring.Replace("cd_1", "cd_2")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("cd_2", "cd_3")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("cd_3", "cd_4")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("cd_4", "cd_5")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            'End If
            'If tempstring.IndexOf("cd 1") <> -1 Then
            '    tempstring = tempstring.Replace("cd 1", "cd 2")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("cd 2", "cd 3")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("cd 3", "cd 4")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("cd 4", "cd 5")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            'End If
            'If tempstring.IndexOf("cd.1") <> -1 Then
            '    tempstring = tempstring.Replace("cd.1", "cd.2")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("cd.2", "cd.3")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("cd.3", "cd.4")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("cd.4", "cd.5")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            'End If
            'If tempstring.IndexOf("dvd1") <> -1 Then
            '    tempstring = tempstring.Replace("dvd1", "dvd2")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("dvd2", "dvd3")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("dvd3", "dvd4")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("dvd4", "dvd5")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            'End If
            'If tempstring.IndexOf("dvd_1") <> -1 Then
            '    tempstring = tempstring.Replace("dvd_1", "dvd_2")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("dvd_2", "dvd_3")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("dvd_3", "dvd_4")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("dvd_4", "dvd_5")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            'End If
            'If tempstring.IndexOf("dvd 1") <> -1 Then
            '    tempstring = tempstring.Replace("dvd 1", "dvd 2")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("dvd 2", "dvd 3")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("dvd 3", "dvd 4")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("dvd 4", "dvd 5")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            'End If
            'If tempstring.IndexOf("dvd.1") <> -1 Then
            '    tempstring = tempstring.Replace("dvd.1", "dvd.2")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("dvd.2", "dvd.3")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("dvd.3", "dvd.4")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("dvd.4", "dvd.5")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            'End If
            'If tempstring.IndexOf("part1") <> -1 Then
            '    tempstring = tempstring.Replace("part1", "part2")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("part2", "part3")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("part3", "part4")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("part4", "part5")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            'End If
            'If tempstring.IndexOf("part_1") <> -1 Then
            '    tempstring = tempstring.Replace("part_1", "part_2")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("part_2", "part_3")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("part_3", "part_4")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("part_4", "part_5")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            'End If
            'If tempstring.IndexOf("part 1") <> -1 Then
            '    tempstring = tempstring.Replace("part 1", "part 2")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("part 2", "part 3")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("part 3", "part 4")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("part 4", "part 5")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            'End If
            'If tempstring.IndexOf("part.1") <> -1 Then
            '    tempstring = tempstring.Replace("part.1", "part.2")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("part.2", "part.3")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("part.3", "part.4")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("part.4", "part.5")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            'End If
            'If tempstring.IndexOf("disk1") <> -1 Then
            '    tempstring = tempstring.Replace("disk1", "disk2")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("disk2", "disk3")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("disk3", "disk4")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("disk4", "disk5")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            'End If
            'If tempstring.IndexOf("disk_1") <> -1 Then
            '    tempstring = tempstring.Replace("disk_1", "disk_2")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("disk_2", "disk_3")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("disk_3", "disk_4")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("disk_4", "disk_5")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            'End If
            'If tempstring.IndexOf("disk 1") <> -1 Then
            '    tempstring = tempstring.Replace("disk 1", "disk 2")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("disk 2", "disk 3")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("disk 3", "disk 4")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("disk 4", "disk 5")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            'End If
            'If tempstring.IndexOf("disk.1") <> -1 Then
            '    tempstring = tempstring.Replace("disk.1", "disk.2")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("disk.2", "disk.3")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("disk.3", "disk.4")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("disk.4", "disk.5")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            'End If
            'If tempstring.IndexOf("pt1") <> -1 Then
            '    tempstring = tempstring.Replace("pt1", "pt2")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("pt2", "pt3")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("pt3", "pt4")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("pt4", "pt5")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            'End If
            'If tempstring.IndexOf("pt_1") <> -1 Then
            '    tempstring = tempstring.Replace("pt_1", "pt_2")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("pt_2", "pt_3")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("pt_3", "pt_4")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("pt_4", "pt_5")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            'End If
            'If tempstring.IndexOf("pt 1") <> -1 Then
            '    tempstring = tempstring.Replace("pt 1", "pt 2")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("pt 2", "pt 3")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("pt 3", "pt 4")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("pt 4", "pt 5")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            'End If
            'If tempstring.IndexOf("pt.1") <> -1 Then
            '    tempstring = tempstring.Replace("pt.1", "pt.2")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("pt.2", "pt.3")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("pt.3", "pt.4")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            '    tempstring = tempstring.Replace("pt.4", "pt.5")
            '    If IO.File.Exists(tempstring) Then
            '        playlist.Add(tempstring)
            '    End If
            'End If

            'If playlist.Count <= 0 Then
            '    MsgBox("No Media File Found For This nfo")
            '    Exit Sub
            'End If


            'tempstring = applicationPath & "\settings\temp.m3u"


            'Dim file As IO.StreamWriter = IO.File.CreateText(tempstring)

            'For Each part In playlist
            '    If part <> Nothing Then file.WriteLine(part)
            'Next
            'file.Close()

            'frmSplash2.Label1.Text = "Launching Player....."

            'If Preferences.videomode = 1 Then Call videomode1(tempstring)
            'If Preferences.videomode = 2 Then Call videomode2(tempstring)
            'If Preferences.videomode = 3 Then
            '    Preferences.videomode = 2
            '    Call videomode2(tempstring)
            'End If
            'If Preferences.videomode >= 4 Then
            '    If Preferences.selectedvideoplayer <> Nothing Then
            '        Call videomode4(tempstring)
            '    Else
            '        Call videomode1(tempstring)
            '    End If
            'End If

            'frmSplash2.Hide()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try


    End Sub

    Private Sub ComboBox1_DragDrop(ByVal sender As Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles MovieListComboBox.DragDrop
        Try
            Dim files() As String
            files = e.Data.GetData(DataFormats.FileDrop)
            For f = 0 To UBound(files)
                If IO.File.Exists(files(f)) Then
                    ' This path is a file.
                    Try
                        Dim skip As Boolean = False
                        For Each item In fullMovieList
                            If item.fullpathandfilename = files(f) Then
                                skip = True
                                Exit For
                            End If
                        Next
                        For Each item In droppedItems
                            If item = files(f) Then
                                skip = True
                                Exit For
                            End If
                        Next
                        If mov_FileCheckValid(files(f)) = True Then
                            If skip = False Then droppedItems.Add(files(f))
                        End If
                    Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                    End Try
                Else
                    If IO.Directory.Exists(files(f)) Then
                        ' This path is a directory.
                        Dim di As New IO.DirectoryInfo(files(f))
                        Dim diar1 As IO.FileInfo() = di.GetFiles()
                        Dim dra As IO.FileInfo

                        'list the names of all files in the specified directory
                        For Each dra In diar1
                            Try
                                Dim skip As Boolean = False
                                For Each item In fullMovieList
                                    If item.fullpathandfilename = dra.FullName Then
                                        skip = True
                                        Exit For
                                    End If
                                Next
                                For Each item In droppedItems
                                    If item = dra.FullName Then
                                        skip = True
                                        Exit For
                                    End If
                                Next
                                If mov_FileCheckValid(dra.FullName) = True Then
                                    If skip = False Then droppedItems.Add(dra.FullName)
                                End If
                            Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                            End Try
                        Next
                    End If
                End If
            Next


            If droppedItems.Count > 0 Then
                If Not bckgrounddroppedfiles.IsBusy Then
                    ToolStripStatusLabel4.Visible = True
                    'ToolStripProgressBar4.Visible = True
                    bckgrounddroppedfiles.RunWorkerAsync()
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub ComboBox1_DragEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles MovieListComboBox.DragEnter
        Try
            e.Effect = DragDropEffects.Copy
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ComboBox1_MouseEnter(ByVal sender As Object, ByVal e As System.EventArgs) Handles MovieListComboBox.MouseEnter
        Try
            MovieListComboBox.Focus()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ComboBox1_MouseMove(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles MovieListComboBox.MouseMove
        Try
            ToolTip1.IsBalloon = False
            'Dim tootip5 As New ToolTip
            'tootip4.Active = False
            'tootip4.Active = True
            'tootip5.SetToolTip(Me.ComboBox1, "")
            Dim MousePositionInClientCoords As Point = New Point(e.X, e.Y)
            Dim indexunderthemouse As Integer = Me.MovieListComboBox.IndexFromPoint(MousePositionInClientCoords)
            If indexunderthemouse > -1 Then
                Dim s As String = "Double Click item to Play" & vbCrLf & vbCrLf
                Dim tempstring As String = CType(MovieListComboBox.Items(indexunderthemouse), ValueDescriptionPair).Value
                If overItem <> tempstring Then
                    overItem = tempstring
                    For Each movie In fullMovieList
                        If movie.fullpathandfilename = tempstring Then
                            s = s & movie.title & " (" & movie.year & ")" & vbCrLf & vbCrLf
                            Dim tempstring2 As String
                            Try
                                tempstring2 = movie.runtime.Substring(0, movie.runtime.IndexOf("min") + 3)
                            Catch
                                tempstring2 = movie.runtime
                            End Try
                            s = s & "Rating: " & movie.rating & "     Runtime: " & tempstring2 & vbCrLf & vbCrLf
                            Dim newoutline As List(Of String) = util_TextWrap(movie.outline, 50)
                            For Each line In newoutline
                                s = s & line & vbCrLf
                            Next
                            Exit For
                        End If
                    Next

                    With tootip5
                        .AutomaticDelay = 1000
                        .AutoPopDelay = 3000
                    End With
                    tootip5.SetToolTip(Me.MovieListComboBox, s)
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try


    End Sub

    Private Sub ComboBox1_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles MovieListComboBox.MouseUp
        Try
            If e.Button = MouseButtons.Right AndAlso MovieListComboBox.SelectedItems.Count > 0 Then
                Dim newSelection As Boolean = True
                Dim pt As Point
                pt.X = e.X
                pt.Y = e.Y
                Dim ptIndex As Integer = MovieListComboBox.IndexFromPoint(pt)
                'If more than one movie is selected, check if right-click is on the selection.
                If MovieListComboBox.SelectedItems.Count > 1 And MovieListComboBox.GetSelected(ptIndex) Then
                    newSelection = False
                End If
                'Otherwise, bring up the context menu for a single movie
                If newSelection Then
                    MovieListComboBox.SelectedItems.Clear()
                    MovieListComboBox.SelectedIndex = ptIndex
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ComboBox11_SelectedValueChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles ComboBox11.SelectedValueChanged
        Try
            mov_FiltersAndSortApply()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ComboBox1_SelectedValueChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles MovieListComboBox.SelectedValueChanged
        Try
            Dim myBool As Boolean = True
            If MovieListComboBox.SelectedItems.Count > 1 Then
                myBool = False
            End If

            PlayMovieToolStripMenuItem1.Visible = myBool
            Mov_OpenMovieFolderToolStripMenuItem.Visible = myBool
            Mov_OpenFileToolStripMenuItem.Visible = myBool
            ToolStripSeparator17.Visible = myBool
            ToolStripSeparator5.Visible = myBool
            ToolStripSeparator4.Visible = myBool
            BrowseFanartToolStripMenuItem.Visible = myBool
            PosterBrowserToolStripMenuItem.Visible = myBool
            EditMovieToolStripMenuItem.Visible = myBool
            ReloadItemToolStripMenuItem1.Visible = myBool

            Try
                Dim needtoload As Boolean = False
                If MovieListComboBox.SelectedItems.Count = 1 Then
                    If titletxt.Visible = False Then
                        needtoload = True
                    End If
                    titletxt.Visible = True
                    Label127.Visible = False
                    SplitContainer2.Visible = True
                    Label128.Visible = False
                    Label75.Visible = True
                    TextBox34.Visible = True
                    Dim done As Boolean = False
                    For Each movie In filteredList
                        If movie.fullpathandfilename Is CType(MovieListComboBox.SelectedItem, ValueDescriptionPair).Value Then
                            If IO.File.Exists(movie.fullpathandfilename) Then
                                If workingMovie.fullpathandfilename <> movie.fullpathandfilename Then
                                    workingMovie.filedate = movie.filedate
                                    workingMovie.filename = movie.foldername
                                    workingMovie.foldername = movie.foldername
                                    workingMovie.fullpathandfilename = movie.fullpathandfilename
                                    workingMovie.genre = movie.genre
                                    workingMovie.id = movie.id
                                    workingMovie.playcount = movie.playcount
                                    workingMovie.rating = movie.rating
                                    workingMovie.title = movie.title
                                    workingMovie.titleandyear = movie.titleandyear
                                    workingMovie.top250 = movie.top250
                                    workingMovie.year = movie.year
                                    Call mov_FormPopulate()
                                Else
                                    If needtoload = True Then Call mov_FormPopulate()
                                End If
                                done = True
                                Exit For
                            Else
                                workingMovie.filedate = Nothing
                                workingMovie.filename = Nothing
                                workingMovie.foldername = Nothing
                                workingMovie.fullpathandfilename = Nothing
                                workingMovie.genre = Nothing
                                workingMovie.id = Nothing
                                workingMovie.playcount = Nothing
                                workingMovie.rating = Nothing
                                workingMovie.title = Nothing
                                workingMovie.titleandyear = Nothing
                                workingMovie.top250 = Nothing
                                workingMovie.year = Nothing
                                titletxt.Text = ""
                                TextBox3.Text = ""
                                outlinetxt.Text = "MC cannot find this file, either the file no longer exists, or MC cannot access the file path"
                                plottxt.Text = ""
                                taglinetxt.Text = ""
                                txtStars.Text = ""
                                genretxt.Text = ""
                                creditstxt.Text = ""
                                directortxt.Text = ""
                                studiotxt.Text = ""
                                pathtxt.Text = ""
                                actorcb.Items.Clear()
                                ratingtxt.Text = ""
                                runtimetxt.Text = ""
                                votestxt.Text = ""
                                certtxt.Text = ""
                                PictureBox7.Image = Nothing
                                moviethumb.Image = Nothing
                                roletxt.Text = ""
                                PictureBox1.Image = Nothing
                            End If
                        End If
                    Next
                ElseIf MovieListComboBox.SelectedItems.Count = 0 Then
                    titletxt.Text = ""
                    TextBox3.Text = ""
                    outlinetxt.Text = ""
                    plottxt.Text = ""
                    taglinetxt.Text = ""
                    txtStars.Text = ""
                    genretxt.Text = ""
                    creditstxt.Text = ""
                    directortxt.Text = ""
                    studiotxt.Text = ""
                    pathtxt.Text = ""
                    actorcb.Items.Clear()
                    ratingtxt.Text = ""
                    runtimetxt.Text = ""
                    votestxt.Text = ""
                    certtxt.Text = ""
                    PictureBox7.Image = Nothing
                    moviethumb.Image = Nothing
                    roletxt.Text = ""
                    PictureBox1.Image = Nothing
                Else
                    titletxt.Text = ""
                    TextBox3.Text = ""
                    outlinetxt.Text = ""
                    plottxt.Text = ""
                    taglinetxt.Text = ""
                    txtStars.Text = ""
                    genretxt.Text = ""
                    creditstxt.Text = ""
                    directortxt.Text = ""
                    studiotxt.Text = ""
                    pathtxt.Text = ""
                    actorcb.Items.Clear()
                    ratingtxt.Text = ""
                    runtimetxt.Text = ""
                    votestxt.Text = ""
                    certtxt.Text = ""
                    PictureBox7.Image = Nothing
                    moviethumb.Image = Nothing
                    roletxt.Text = ""
                    PictureBox1.Image = Nothing
                    SplitContainer2.Visible = False
                    titletxt.Visible = False
                    Label75.Visible = False
                    TextBox34.Visible = False
                    Label127.Visible = True
                    Label128.Visible = True
                    'ComboBox3.SelectedIndex = -1
                    Dim add As Boolean = True
                    Dim watched As String = ""
                    For Each mov In MovieListComboBox.SelectedItems
                        Dim old As String = watched
                        For Each item In fullMovieList
                            If item.fullpathandfilename = mov.value Then
                                If watched = "" Then
                                    watched = item.playcount
                                    old = watched
                                Else
                                    watched = item.playcount
                                End If
                                If watched <> old Then
                                    add = False
                                End If
                                Exit For
                            End If
                        Next
                    Next
                    If add = False Then
                        Button13.Text = ""
                        Button13.BackColor = Color.Gray
                    Else
                        If watched = "1" Then
                            Button13.Text = "&Watched"
                            Button13.BackColor = Color.LawnGreen
                            Button13.Refresh()
                        Else
                            Button13.Text = "Un&watched"
                            Button13.BackColor = Color.Red
                            Button13.Refresh()
                        End If
                    End If
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
            'mov_SplitContainerAutoPosition("Selected Movie Changed")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub TextBox1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles TextBox1.KeyUp
        Try
            If filterOverride = False Then
                If TextBox1.Text.Length > 0 Then
                    TextBox1.BackColor = Color.Pink
                Else
                    TextBox1.BackColor = Color.White
                End If
                TextBox1.Refresh()
                Call mov_FiltersAndSortApply()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub txt_titlesearch_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles txt_titlesearch.KeyUp
        Try
            If filterOverride = False Then
                If txt_titlesearch.Text.Length > 0 Then
                    txt_titlesearch.BackColor = Color.Pink
                Else
                    txt_titlesearch.BackColor = Color.White
                End If
                txt_titlesearch.Refresh()
                Call mov_FiltersAndSortApply()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckedListBox1_MouseMove(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles CheckedListBox1.MouseMove
        Try
            ToolTip1.IsBalloon = False
            Dim MousePositionInClientCoords As Point = New Point(e.X, e.Y)
            Dim indexUnderTheMouse As Integer = Me.CheckedListBox1.IndexFromPoint(MousePositionInClientCoords)
            If indexUnderTheMouse > -1 Then
                Dim tempstring As String = CheckedListBox1.Items(indexUnderTheMouse).ToString
                If overItem <> tempstring Then
                    overItem = tempstring
                    Me.ToolTip1.SetToolTip(Me.CheckedListBox1, tempstring)
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TextBox_GenreFilter_EnabledChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles TextBox_GenreFilter.EnabledChanged
        Try
            If TextBox_GenreFilter.Enabled = False Then Panel4.Visible = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TextBox_GenreFilter_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles TextBox_GenreFilter.MouseDown
        Try
            If lockedList = False Then
                lockedList = True
            Else
                lockedList = False
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TextBox_GenreFilter_MouseHover(ByVal sender As Object, ByVal e As System.EventArgs) Handles TextBox_GenreFilter.MouseHover
        Try
            Panel4.Visible = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TextBox_GenreFilter_MouseLeave(ByVal sender As Object, ByVal e As System.EventArgs) Handles TextBox_GenreFilter.MouseLeave
        Try
            If lockedList = False Then
                Panel4.Visible = False
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TextBox_GenreFilter_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles TextBox_GenreFilter.MouseUp
        Try
            Panel4.Visible = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub LinkLabel1_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkLabelLinkClickedEventArgs) Handles LinkLabel1.LinkClicked
        Try
            Panel4.Visible = False
            lockedList = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckedListBox1_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles CheckedListBox1.SelectedIndexChanged
        Try
            If filterOverride = False Then
                CheckedListBox1.Enabled = False
                '            Call applyfilters()
                mov_FiltersAndSortApply()
                CheckedListBox1.Enabled = True
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton1_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton1.CheckedChanged
        Try
            If RadioButton1.Checked = True Then
                Preferences.moviedefaultlist = 0

                'Preferences.SaveConfig()   'we don't need to save this till MC Closes
                'Call applyfilters()
                Call mov_MovieComboListSort()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton2_CheckedChanged_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton2.CheckedChanged
        Try
            If RadioButton2.Checked = True Then
                Preferences.moviedefaultlist = 1

                'Preferences.SaveConfig()'we don't need to save this till MC Closes
                Call mov_MovieComboListSort()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton6_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton6.CheckedChanged
        Try
            If RadioButton6.Checked = True Then
                Preferences.moviedefaultlist = 2

                'Preferences.SaveConfig()'we don't need to save this till MC Closes
                Call mov_MovieComboListSort()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    'Sort by A-Z, Movie Date, File Date, rating, top250
    Private Sub RadioButton3_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton3.CheckedChanged
        Try
            If RadioButton3.Checked = True Then
                Preferences.moviesortorder = 0

                'Preferences.SaveConfig()'we don't need to save this till MC Closes
                mov_MovieComboListSort()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton4_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton4.CheckedChanged
        Try
            If RadioButton4.Checked = True Then
                Preferences.moviesortorder = 1

                'Preferences.SaveConfig()'we don't need to save this till MC Closes
                Call mov_MovieComboListSort()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton5_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButtonSortModified.CheckedChanged
        Try
            If RadioButtonSortModified.Checked = True Then
                Preferences.moviesortorder = 2

                ' Preferences.SaveConfig()'we don't need to save this till MC Closes
                Call mov_MovieComboListSort()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton7_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton7.CheckedChanged
        Try
            If RadioButton7.Checked = True Then
                Preferences.moviesortorder = 4

                'Preferences.SaveConfig()'we don't need to save this till MC Closes
                Call mov_MovieComboListSort()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    'reverse order
    Private Sub btnreverse_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnreverse.CheckedChanged
        Try
            'If btnreverse.Checked = True Then
            '    Preferences.moviesortorder = 7
            'End If
            Call mov_MovieComboListSort()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TabControl2_MouseWheel(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles TabControl2.MouseWheel
        Try
            If TabControl2.SelectedIndex = 1 Then
                mouseDelta = e.Delta / 120
                Try
                    TabPage22.AutoScrollPosition = New Point(0, TabPage22.VerticalScroll.Value - (mouseDelta * 30))
                Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
                End Try
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TabControl2_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles TabControl2.SelectedIndexChanged
        Try
            Dim tempstring As String = ""
            Dim tab As String = TabControl2.SelectedTab.Text
            If tab <> "Main Browser" And tab <> "Folders" And tab <> "Movie Preferences" Then
                If workingMovieDetails Is Nothing And movieFolders.Count = 0 And Preferences.offlinefolders.Count = 0 Then
                    Me.TabControl2.SelectedIndex = currentTabIndex
                    MsgBox("There are no movies in your list to work on" & vbCrLf & "Add movie folders in the Folders Tab" & vbCrLf & "Then select the ""Search For New Movies"" Tab")
                    Exit Sub
                ElseIf workingMovieDetails Is Nothing And movieFolders.Count > 0 And tab <> "Search for new movies" Then
                    Me.TabControl2.SelectedIndex = currentTabIndex
                    If fullMovieList.Count > 0 Then
                        MsgBox("No Movie is selected")
                        Exit Sub
                    Else
                        MsgBox("There are no movies in your list to work on" & vbCrLf & "If The Folders You Have Added In The" & vbCrLf & "Preferences Menu Contain Movie Files" & vbCrLf & "Then select the ""Search For New Movies"" Tab")
                        Exit Sub
                    End If
                End If
            Else
                currentTabIndex = Me.TabControl2.SelectedIndex

            End If
            If tab = "" Then
                If workingMovieDetails.fullmoviebody.imdbid <> Nothing Then
                    If Preferences.externalbrowser = True Then
                        Me.TabControl2.SelectedIndex = currentTabIndex
                        tempstring = "http://www.imdb.com/title/" & workingMovieDetails.fullmoviebody.imdbid & "/"
                        Process.Start(tempstring)
                    Else

                        Dim url As String
                        url = "http://www.imdb.com/title/" & workingMovieDetails.fullmoviebody.imdbid & "/"
                        Try
                            If WebBrowser2.Url.AbsoluteUri.ToLower.ToString <> url Then
                                WebBrowser2.Stop()
                                WebBrowser2.ScriptErrorsSuppressed = True

                                WebBrowser2.Navigate(url)
                                WebBrowser2.Refresh()
                                currentTabIndex = TabControl2.SelectedIndex
                            End If
                        Catch
                            WebBrowser2.Stop()
                            WebBrowser2.ScriptErrorsSuppressed = True

                            WebBrowser2.Navigate(url)
                            WebBrowser2.Refresh()
                            currentTabIndex = TabControl2.SelectedIndex
                        End Try
                    End If
                Else
                    MsgBox("No IMDB ID is available for this movie")
                End If
            ElseIf tab.ToLower = "file details" Then
                'Me.TabControl2.SelectedIndex = m_CurrentTabIndex
                currentTabIndex = TabControl2.SelectedIndex
                If TextBox8.Text = "" Then Call util_FileDetailsGet()
            ElseIf tab.ToLower = "fanart" Then
                If Panel2.Controls.Count = 0 Then
                    Call mov_FanartLoad()
                End If
                currentTabIndex = TabControl2.SelectedIndex
            ElseIf tab.ToLower = "open folder" Then
                Me.TabControl2.SelectedIndex = currentTabIndex
                Call util_OpenFolder(workingMovieDetails.fileinfo.fullpathandfilename)
            ElseIf tab.ToLower = "Posters" Then
                Me.TabControl2.SelectedIndex = currentTabIndex
            ElseIf tab.ToLower = "rescrape movie" Then
                Me.TabControl2.SelectedIndex = currentTabIndex
                Call mov_Rescrape()
            ElseIf tab.ToLower = "change movie" Then
                Call mov_ChangeMovieSetup()
                currentTabIndex = TabControl2.SelectedIndex
            ElseIf tab.ToLower = "search for new movies" Then
                Me.TabControl2.SelectedIndex = currentTabIndex
                If Not BckWrkScnMovies.IsBusy Then
                    'ToolStripButton10.Visible = True
                    'ToolStripProgressBar4.Visible = True
                    ToolStripStatusLabel1.Visible = True
                    ToolStripProgressBar1.Visible = True
                    TabPage14.Text = "Cancel Movie Search"
                    TabPage14.ToolTipText = "This cancels the movie search" & vbCrLf & "and Movie scraper thread"
                    BckWrkScnMovies.RunWorkerAsync()
                Else
                    MsgBox("This task is already running")
                End If
            ElseIf (tab.ToLower = "cancel movie search" Or tab.ToLower = "...cancelling...") Then   'remember the to.lower - added OR incase user clicks cancelling button   use ... to pad button as it sizes to text size
                TabPage14.Text = "...Cancelling..."
                Me.TabControl2.SelectedIndex = currentTabIndex
                BckWrkScnMovies.CancelAsync()
            ElseIf tab.ToLower = "wall" Then
                Call mov_WallSetup()
            ElseIf tab.ToLower = "movie sets" Then
                ListBox4.Items.Clear()
                For Each mset In Preferences.moviesets
                    If mset <> "-None-" Then ListBox4.Items.Add(mset)
                Next
            ElseIf tab.ToLower = "movie preferences" Then
                Call mov_PreferencesSetup()
            ElseIf tab.ToLower = "table" Then
                currentTabIndex = TabControl2.SelectedIndex
                Call mov_TableSetup()
            Else
                currentTabIndex = TabControl2.SelectedIndex
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub mov_ChangeMovieSetup()
        Dim tempstring As String = ""
        If Preferences.usefoldernames = False Then
            tempstring = Utilities.CleanFileName(IO.Path.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename))
        Else
            tempstring = Utilities.GetLastFolder(workingMovieDetails.fileinfo.fullpathandfilename)
        End If
        If workingMovieDetails.fileinfo.fullpathandfilename.ToLower.IndexOf("\video_ts\") <> -1 Then
            tempstring = Utilities.GetLastFolder(workingMovieDetails.fileinfo.fullpathandfilename)
        End If
        Dim url As String
        url = Preferences.imdbmirror & "find?s=tt&q=" & tempstring
        WebBrowser1.Stop()
        WebBrowser1.ScriptErrorsSuppressed = True
        WebBrowser1.Navigate(url)
        WebBrowser1.Refresh()
        Panel2.Visible = True
    End Sub

    Private Sub util_OpenFolder(ByVal path As String)
        Dim tempstring As String = ""
        Dim action As String = String.Empty
        Dim errors As String = String.Empty
        Try
            If path <> "" Then
                tempstring = path
                Try
                    Call Shell("explorer /select," & """" & tempstring & """", AppWinStyle.NormalFocus) 'this shows the item as selected provided as tempstring i.e. a folder or a file (.nfo)
                    'Process.Start(pathtxt.Text)
                    errors = "Trying to open Folder :- " & tempstring
                    action = "Command - ""Call Shell(""explorer /select,""" & tempstring & ", AppWinStyle.NormalFocus)"""
                Catch ex As Exception
                    MsgBox("Can't open folder :- " & path)
                    Call util_ErrorLog(action, errors)
                End Try
            Else
                MsgBox("No Folder To Open")
            End If


        Catch
            MsgBox("No Folder To Open")
        End Try
    End Sub

    Private Sub PictureBox2_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles PictureBox2.DoubleClick
        Try
            If Not PictureBox2.Image Is Nothing Then
                Me.ControlBox = False
                MenuStrip1.Enabled = False
                'ToolStrip1.Enabled = False
                Dim newimage As New Bitmap(PictureBox2.Image)
                Call util_ZoomImage(newimage)
            Else
                MsgBox("No Image Available To Zoom")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_FanartLoad()

        '            Dim scraperfunction As New imdb.Classimdbscraper ' add to comment this one because of changes i made to the Class "Scraper" (ClassimdbScraper)
        Dim scraperfunction As New Classimdb
        Dim tmdbposterscraper As New tmdb_posters.Class1
        fanartArray.Clear()
        noFanart = False
        ButtonNextFanart.Visible = False
        Dim tmdbimageresults As String = tmdbposterscraper.gettmdbposters_newapi(workingMovieDetails.fullmoviebody.imdbid)
        'Dim tmdbimageresults As String = gettmdbposters_newapi(workingmoviedetails.fullmoviebody.imdbid)
        Dim bannerslist As New XmlDocument
        Try
            bannerslist.LoadXml(tmdbimageresults)
            Dim thisresult As XmlNode = Nothing
            For Each item In bannerslist("tmdb_posterlist")
                Select Case item.name
                    Case "fanart"
                        Dim newfanart As New str_ListOfPosters(SetDefaults)
                        For Each backdrop In item
                            If backdrop.childnodes(0).innertext = "original" Then
                                newfanart.hdposter = backdrop.childnodes(1).innertext
                                newfanart.hdwidth = backdrop.childnodes(2).innertext
                                newfanart.hdheight = backdrop.childnodes(3).innertext
                            End If
                            If backdrop.childnodes(0).innertext = "poster" Then
                                newfanart.ldposter = backdrop.childnodes(1).innertext
                                newfanart.ldwidth = backdrop.childnodes(2).innertext
                                newfanart.ldheight = backdrop.childnodes(3).innertext
                            End If
                            If newfanart.hdposter <> Nothing And newfanart.ldposter <> Nothing Then
                                If newfanart.hdposter <> "" And newfanart.ldposter <> "" Then
                                    If newfanart.hdposter.IndexOf("http") <> -1 And newfanart.ldposter.IndexOf("http") <> -1 Then
                                        If newfanart.hdposter.IndexOf(".jpg") <> -1 Or newfanart.hdposter.IndexOf(".png") <> -1 Then
                                            If newfanart.ldposter.IndexOf(".jpg") <> -1 Or newfanart.ldposter.IndexOf(".png") <> -1 Then
                                                fanartArray.Add(newfanart)
                                                Exit For
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        Next

                End Select
            Next
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try


        Try
            If fanartArray.Count > 0 Then


                Dim location As Integer = 0
                Dim itemcounter As Integer = 0
                For Each item In fanartArray
                    fanartboxes() = New PictureBox()

                    With fanartBoxes
                        .Location = New Point(0, location)
                        If fanartArray.Count > 2 Then
                            .Width = 410
                            .Height = 233
                        Else
                            .Width = 424
                            .Height = 243
                        End If
                        .SizeMode = PictureBoxSizeMode.Zoom
                        .ImageLocation = item.ldposter
                        .Visible = True
                        .BorderStyle = BorderStyle.Fixed3D
                        .Name = "moviefanart" & itemcounter.ToString
                        AddHandler fanartBoxes.DoubleClick, AddressOf util_ZoomImage2
                    End With
                    If fanartArray.Count > 2 Then
                        fanartcheckboxes() = New RadioButton()
                        With fanartCheckBoxes
                            .BringToFront()
                            .Location = New Point(199, location + 229)
                            .Name = "moviefanartcheckbox" & itemcounter.ToString
                        End With


                        resLabels = New Label()
                        With resLabels
                            .BringToFront()
                            .Location = New Point(0, location + 235)
                            .Name = "label" & itemcounter.ToString
                            .Text = "(" & item.hdwidth & " x " & item.hdheight & ") (" & item.ldwidth & " x " & item.ldheight & ")"
                            .Width = 200
                        End With

                        itemcounter += 1
                        location += 260
                    Else
                        fanartcheckboxes() = New RadioButton()
                        With fanartCheckBoxes
                            .BringToFront()
                            .Location = New Point(199, location + 243)
                            .Name = "moviefanartcheckbox" & itemcounter.ToString
                        End With


                        resLabels = New Label()
                        With resLabels
                            .BringToFront()
                            .Location = New Point(0, location + 249)
                            .Name = "label" & itemcounter.ToString
                            .Text = "(" & item.hdwidth & " x " & item.hdheight & ") (" & item.ldwidth & " x " & item.ldheight & ")"
                            .Width = 200
                        End With

                        itemcounter += 1
                        location += 275
                    End If
                    Me.Panel2.Controls.Add(fanartboxes())
                    Me.Panel2.Controls.Add(fanartcheckboxes())
                    Me.Panel2.Controls.Add(resLabels)
                    Me.Refresh()
                    Application.DoEvents()
                Next
            Else
                Dim mainlabel2 As Label
                mainlabel2 = New Label
                With mainlabel2
                    .Location = New Point(0, 100)
                    .AutoSize = False
                    .TextAlign = ContentAlignment.MiddleCenter
                    .Width = 500
                    .Height = 400
                    .Font = New System.Drawing.Font("Arial", 15, FontStyle.Bold)
                    .Text = "No Fanart Was Found At" & Environment.NewLine & "www.themoviedb.org For This Movie"
                End With

                Me.Panel2.Controls.Add(mainlabel2)

                If RadioButtonMissingFanart.Checked = True Then     'If no fanart found & If the Missing Fanart RadioButton is checked
                    ButtonNextFanart.Enabled = True
                    ButtonNextFanart.Visible = True            'then show the next movie button so we can go to the next movie without saving
                    noFanart = True                             'only required if this button is visible
                End If
            End If
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
    End Sub

    Private Sub util_ZoomImage2(ByVal sender As Object, ByVal e As EventArgs)

        Dim tempstring As String = sender.name
        Dim tempstring2 As String = String.Empty
        Dim tempint As Integer = 0
        If tempstring.IndexOf("poster") <> -1 Then
            tempstring = tempstring.Replace("poster", "")
            tempint = Convert.ToDecimal(tempstring)
            'tempstring2 = posterarray(tempint + 1).hdposter
            If tempstring2 = Nothing Then
                tempint = Convert.ToDecimal(tempstring)
                tempint = tempint + ((currentPage - 1) * 10)
                tempstring2 = posterArray(tempint).hdposter
            End If
        End If
        If tempstring.IndexOf("picture") <> -1 Then
            tempstring = tempstring.Replace("picture", "")
            tempint = Convert.ToDecimal(tempstring)
            tempstring2 = fanartUrls(tempint + 1, 0)
        End If
        If tempstring.IndexOf("moviefanart") <> -1 Then
            tempstring = tempstring.Replace("moviefanart", "")
            tempint = Convert.ToDecimal(tempstring)
            tempstring2 = fanartArray(tempint).hdposter
        End If
        If tempstring.IndexOf("tvfanart") <> -1 Then
            tempstring = tempstring.Replace("tvfanart", "")
            tempint = Convert.ToDecimal(tempstring)
            tempstring2 = listOfTvFanarts(tempint).bigUrl
        End If
        Dim buffer(4000000) As Byte
        Dim size As Integer = 0
        Dim bytesRead As Integer = 0

        bigPanel = New Panel
        With bigPanel
            .Width = Me.Width
            .Height = Me.Height
            .BringToFront()
            .Dock = DockStyle.Fill
        End With
        Me.Controls.Add(bigPanel)
        bigPanel.BringToFront()
        bigPictureBox = New PictureBox()

        With bigPictureBox
            .Location = New Point(0, 0)
            .Width = bigPanel.Width
            .Height = bigPanel.Height
            .SizeMode = PictureBoxSizeMode.Zoom
            '.Image = sender.image
            .WaitOnLoad = True

            .Visible = False
            .BorderStyle = BorderStyle.Fixed3D
            AddHandler bigPictureBox.DoubleClick, AddressOf util_PicBoxClose
            .Dock = DockStyle.Fill
        End With
        Try
            bigPictureBox.ImageLocation = tempstring2
            bigPictureBox.Load()
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try



        Me.bigPanel.Controls.Add(bigPictureBox)
        Dim bigpanellabel As Label
        bigpanellabel = New Label
        With bigpanellabel
            .Location = New Point(20, 200)
            .Width = 150
            .Height = 50
            .Visible = True
            .Text = "Double Click Image To" & vbCrLf & "Return To Browser"
            '   .BringToFront()
        End With

        Me.bigPanel.Controls.Add(bigpanellabel)
        bigpanellabel.BringToFront()
        Application.DoEvents()


        Me.Refresh()
        Try
            If bigPictureBox.Image Is Nothing Then
                tempstring2 = posterArray(tempint).ldposter
                bigPictureBox.ImageLocation = tempstring2
                bigPictureBox.Load()
            End If
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
        Try
            If bigPictureBox.Image.Width < 20 Then
                tempstring2 = posterArray(tempint).ldposter
                bigPictureBox.ImageLocation = tempstring2
                bigPictureBox.Load()
            End If
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
        Dim sizex As Integer = bigPictureBox.Image.Width
        Dim sizey As Integer = bigPictureBox.Image.Height
        tempstring = "Full Image Resolution :- " & sizex.ToString & " x " & sizey.ToString
        Dim resolutionlbl As New Label
        With resolutionlbl
            .Location = New Point(20, 450)
            .Width = 180
            .Text = tempstring
            .BackColor = Color.Transparent
        End With

        Me.bigPanel.Controls.Add(resolutionlbl)
        resolutionlbl.BringToFront()
        bigPictureBox.Visible = True
        bigPictureBox.Refresh()

    End Sub

    Private Sub Button4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ButtonFanrtSaveHiRes.Click
        Try
            messbox = New frmMessageBox("Please wait,", "", "Downloading Fanart")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            Me.Refresh()
            messbox.Refresh()
            Me.Refresh()
            Application.DoEvents()

            Dim tempstring As String
            Dim tempint As Integer = 0
            Dim tempstring2 As String = String.Empty
            Dim allok As Boolean = False
            For Each button As Control In Me.Panel2.Controls
                If button.Name.IndexOf("checkbox") <> -1 Then
                    Dim b1 As RadioButton = CType(button, RadioButton)
                    If b1.Checked = True Then
                        tempstring = b1.Name
                        tempstring = tempstring.Replace("moviefanartcheckbox", "")
                        tempint = Convert.ToDecimal(tempstring)
                        tempstring2 = fanartArray(tempint).hdposter
                        allok = True
                        Exit For
                    End If
                End If
            Next
            If allok = False Then
                MsgBox("No Fanart Is Selected")
            Else
                Try
                    Panel1.Controls.Remove(Label1)
                    'Utilities.DownloadFile(fanartthumburl, bmp)
                    Dim buffer(40000000) As Byte
                    Dim size As Integer = 0
                    Dim bytesRead As Integer = 0

                    Dim fanartthumburl As String = tempstring2
                    Dim req As HttpWebRequest = WebRequest.Create(fanartthumburl)
                    Dim res As HttpWebResponse = req.GetResponse()
                    Dim contents As Stream = res.GetResponseStream()
                    Dim bmp As New Bitmap(contents)


                    Dim bytesToRead As Integer = CInt(buffer.Length)

                    While bytesToRead > 0
                        size = contents.Read(buffer, bytesRead, bytesToRead)
                        If size = 0 Then Exit While
                        bytesToRead -= size
                        bytesRead += size
                    End While
                    If Preferences.resizefanart = 1 Then
                        Try
                            Dim tempbitmap As Bitmap = New Bitmap(bmp)
                            tempbitmap.Save(workingMovieDetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                        Catch ex As Exception
                            tempstring = ex.Message.ToString
                        End Try
                    ElseIf Preferences.resizefanart = 2 Then
                        If bmp.Width > 1280 Or bmp.Height > 720 Then
                            Dim bm_source As New Bitmap(bmp)
                            Dim bm_dest As New Bitmap(1280, 720)
                            Dim gr As Graphics = Graphics.FromImage(bm_dest)
                            gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                            gr.DrawImage(bm_source, 0, 0, 1280 - 1, 720 - 1)
                            Dim tempbitmap As Bitmap = New Bitmap(bm_dest)
                            tempbitmap.Save(workingMovieDetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                        Else
                            Thread.Sleep(30)
                            bmp.Save(workingMovieDetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                        End If
                    ElseIf Preferences.resizefanart = 3 Then
                        If bmp.Width > 960 Or bmp.Height > 540 Then
                            Dim bm_source As New Bitmap(bmp)
                            Dim bm_dest As New Bitmap(960, 540)
                            Dim gr As Graphics = Graphics.FromImage(bm_dest)
                            gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                            gr.DrawImage(bm_source, 0, 0, 960 - 1, 540 - 1)
                            Dim tempbitmap As Bitmap = New Bitmap(bm_dest)
                            tempbitmap.Save(workingMovieDetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                        Else
                            Thread.Sleep(30)
                            bmp.Save(workingMovieDetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                        End If
                    End If
                    Dim exists As Boolean = System.IO.File.Exists(workingMovieDetails.fileinfo.fanartpath)
                    If exists = True Then


                        PictureBox2.ImageLocation = workingMovieDetails.fileinfo.fanartpath
                        PictureBox2.Load()
                        PictureBox7.ImageLocation = workingMovieDetails.fileinfo.fanartpath
                        PictureBox7.Load()
                        For Each paths In Preferences.offlinefolders
                            Dim offlinepath As String = paths & "\"
                            If workingMovieDetails.fileinfo.fanartpath.IndexOf(offlinepath) <> -1 Then
                                Dim mediapath As String
                                mediapath = Utilities.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename)
                                Call mov_OfflineDvdProcess(workingMovieDetails.fileinfo.fullpathandfilename, workingMovieDetails.fullmoviebody.title, mediapath)
                            End If
                        Next
                    Else
                        PictureBox2.ImageLocation = defaultFanart
                        PictureBox2.Load()
                    End If
                    Label16.Text = PictureBox2.Image.Width
                    Label17.Text = PictureBox2.Image.Height
                    Dim result As Boolean = mov_FanartSaved()
                    If result = True Then
                        If RadioButtonMissingFanart.Checked = True Then
                            ButtonNextFanart.Text = "Click here to move to next Movie"
                            ButtonNextFanart.Enabled = True
                            ButtonNextFanart.Visible = True 'show next movie button
                        Else
                            Call mov_FiltersAndSortApply() 'Apply Filters to movielist combobox
                        End If

                        'Call loadinfofile() 'reloads main page information     'not required as we no longer move back to main page
                        'TabControl2.SelectedIndex = 0                        'Commented Out so that MC doesn't switch back to Movie/Main Tab after changing Fanart 
                        'currentTabIndex = TabControl2.SelectedIndex
                    End If
                Catch ex As WebException
                    MsgBox(ex.Message)
                End Try
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        Finally
            messbox.Close()
        End Try


    End Sub

    Private Function mov_FanartSaved()
        Dim replace As Boolean = False
        For f = 0 To fullMovieList.Count - 1
            Dim newmovie As New str_ComboList(SetDefaults)
            newmovie = fullMovieList(f)
            If newmovie.fullpathandfilename = workingMovieDetails.fileinfo.fullpathandfilename Then
                If newmovie.missingdata1 = 3 Then
                    newmovie.missingdata1 = 2
                    replace = True
                ElseIf newmovie.missingdata1 = 1 Then
                    newmovie.missingdata1 = 0
                    replace = True
                End If
                fullMovieList.RemoveAt(f)
                fullMovieList.Add(newmovie)
                Exit For
            End If
        Next

        'If replace = true
        '    Call ApplyFilters()
        '    'Call loadinfofile() 'reloads main page information     'not required is not moving back to main page
        '    'TabControl2.SelectedIndex = 0                        'Commented Out so that MC doesn't switch back to Movie/Main Tab after changing Fanart 
        '   currentTabIndex = TabControl2.SelectedIndex
        'end if
        Return replace
    End Function

    Private Sub mov_PosterSaved()
        Dim replace As Boolean = False
        For f = 0 To fullMovieList.Count - 1
            Dim newmovie As New str_ComboList(SetDefaults)
            newmovie = fullMovieList(f)
            If newmovie.fullpathandfilename = workingMovieDetails.fileinfo.fullpathandfilename Then
                If newmovie.missingdata1 = 3 Then
                    newmovie.missingdata1 = 1
                    replace = True
                ElseIf newmovie.missingdata1 = 2 Then
                    newmovie.missingdata1 = 0
                    replace = True
                End If
                fullMovieList.RemoveAt(f)
                fullMovieList.Add(newmovie)
                Exit For
            End If
        Next

        If replace = True Then
            Call mov_FiltersAndSortApply()
            Call mov_FormPopulate()
            'TabControl2.SelectedIndex = 0                      'Commented Out so that MC doesn't switch back to Movie/Main Tab after changing Poster
            'currentTabIndex = TabControl2.SelectedIndex
        End If
    End Sub

    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Try
            Panel3.Visible = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btnthumbbrowse_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnthumbbrowse.Click
        Try
            openFD.InitialDirectory = workingMovieDetails.fileinfo.fullpathandfilename.Replace(IO.Path.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename), "")
            openFD.Title = "Select a jpeg image file"
            openFD.FileName = ""
            openFD.Filter = "Media Companion Image Files|*.jpg;*.tbn|All Files|*.*"
            openFD.FilterIndex = 0
            openFD.ShowDialog()
            TextBox5.Text = openFD.FileName
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btngetthumb_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btngetthumb.Click
        Try
            Dim MyWebClient As New System.Net.WebClient
            Try
                Dim ImageInBytes() As Byte = MyWebClient.DownloadData(TextBox5.Text)
                Dim ImageStream As New IO.MemoryStream(ImageInBytes)

                'mainfanart.Image = New System.Drawing.Bitmap(ImageStream)





                Dim tempstring As String

                Dim bmp As New Bitmap(ImageStream)


                If Preferences.resizefanart = 1 Then
                    Try
                        Dim tempbitmap As Bitmap = bmp
                        tempbitmap.Save(workingMovieDetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                    Catch ex As Exception
                        tempstring = ex.Message.ToString
                    End Try
                ElseIf Preferences.resizefanart = 2 Then
                    If bmp.Width > 1280 Or bmp.Height > 720 Then
                        Dim bm_source As New Bitmap(bmp)
                        Dim bm_dest As New Bitmap(1280, 720)
                        Dim gr As Graphics = Graphics.FromImage(bm_dest)
                        gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                        gr.DrawImage(bm_source, 0, 0, 1280 - 1, 720 - 1)
                        Dim tempbitmap As Bitmap = bm_dest
                        tempbitmap.Save(workingMovieDetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                    Else
                        Thread.Sleep(30)
                        bmp.Save(workingMovieDetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                    End If
                ElseIf Preferences.resizefanart = 3 Then
                    If bmp.Width > 960 Or bmp.Height > 540 Then
                        Dim bm_source As New Bitmap(bmp)
                        Dim bm_dest As New Bitmap(960, 540)
                        Dim gr As Graphics = Graphics.FromImage(bm_dest)
                        gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                        gr.DrawImage(bm_source, 0, 0, 960 - 1, 540 - 1)
                        Dim tempbitmap As Bitmap = bm_dest
                        tempbitmap.Save(workingMovieDetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                    Else
                        Thread.Sleep(30)
                        bmp.Save(workingMovieDetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                    End If
                End If

                Dim exists As Boolean = System.IO.File.Exists(workingMovieDetails.fileinfo.fanartpath)
                If exists = True Then
                    For Each paths In Preferences.offlinefolders
                        If workingMovieDetails.fileinfo.fanartpath.IndexOf(paths) <> -1 Then
                            Dim mediapath As String
                            mediapath = Utilities.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename)
                            Call mov_OfflineDvdProcess(workingMovieDetails.fileinfo.fullpathandfilename, workingMovieDetails.fullmoviebody.title, mediapath)
                        End If
                    Next

                    'mainfanart = New PictureBox
                    PictureBox2.ImageLocation = workingMovieDetails.fileinfo.fanartpath
                    PictureBox2.Load()
                    PictureBox7.ImageLocation = workingMovieDetails.fileinfo.fanartpath
                    PictureBox7.Load()
                Else
                    PictureBox2.ImageLocation = defaultFanart
                    PictureBox2.Load()
                End If
                Call mov_FanartSaved()
            Catch ex As Exception
                MsgBox("Unable To Download Image")
            End Try
            Panel3.Visible = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btncancelgetthumburl_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btncancelgetthumburl.Click
        Try
            TextBox5.Text = ""
            Panel3.Visible = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Function util_ImageCrop(ByVal SrcBmp As Bitmap, ByVal NewSize As Size, ByVal StartPoint As Point) As Bitmap
        If NewSize.Width < 1 Or NewSize.Height < 1 Then
            'MsgBox("Cant resize < 1")
            Return SrcBmp
            Exit Function
        End If
        Dim SrcRect As New Rectangle(StartPoint.X, StartPoint.Y, NewSize.Width, NewSize.Height)
        Dim DestRect As New Rectangle(0, 0, NewSize.Width, NewSize.Height)
        Dim DestBmp As New Bitmap(NewSize.Width, NewSize.Height, Imaging.PixelFormat.Format32bppArgb)
        Dim g As Graphics = Graphics.FromImage(DestBmp)
        g.DrawImage(SrcBmp, DestRect, SrcRect, GraphicsUnit.Pixel)
        Return DestBmp
    End Function ' Crop Image Function

    Private Sub util_ImageCropTop()
        If PictureBox2.Image Is Nothing Then Exit Sub
        Dim imagewidth As Integer
        Dim imageheight As Integer
        imagewidth = PictureBox2.Image.Width
        imageheight = PictureBox2.Image.Height
        'PictureBox2.Image = moviethumb.Image
        PictureBox2.Image = util_ImageCrop(PictureBox2.Image, New Size(imagewidth, imageheight - 1), New Point(0, 1)).Clone
        PictureBox2.SizeMode = PictureBoxSizeMode.Zoom
    End Sub

    Private Sub util_ImageCropBottom()
        If PictureBox2.Image Is Nothing Then Exit Sub
        Dim imagewidth As Integer
        Dim imageheight As Integer
        imagewidth = PictureBox2.Image.Width
        imageheight = PictureBox2.Image.Height
        'PictureBox2.Image = moviethumb.Image
        PictureBox2.Image = util_ImageCrop(PictureBox2.Image, New Size(imagewidth, imageheight - 1), New Point(0, 0)).Clone
        PictureBox2.SizeMode = PictureBoxSizeMode.Zoom
    End Sub

    Private Sub util_ImageCropLeft()
        If PictureBox2.Image Is Nothing Then Exit Sub
        Dim imagewidth As Integer
        Dim imageheight As Integer
        imagewidth = PictureBox2.Image.Width
        imageheight = PictureBox2.Image.Height
        'PictureBox2.Image = moviethumb.Image
        PictureBox2.Image = util_ImageCrop(PictureBox2.Image, New Size(imagewidth - 1, imageheight), New Point(1, 0)).Clone
        PictureBox2.SizeMode = PictureBoxSizeMode.Zoom
    End Sub

    Private Sub util_ImageCropRight()
        If PictureBox2.Image Is Nothing Then Exit Sub
        Dim imagewidth As Integer
        Dim imageheight As Integer
        thumbedItsMade = True
        imagewidth = PictureBox2.Image.Width
        imageheight = PictureBox2.Image.Height
        'PictureBox2.Image = moviethumb.Image
        PictureBox2.Image = util_ImageCrop(PictureBox2.Image, New Size(imagewidth - 1, imageheight), New Point(0, 0)).Clone
        PictureBox2.SizeMode = PictureBoxSizeMode.Zoom
    End Sub

    Private Sub btncroptop_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles btncroptop.MouseDown
        Try
            If PictureBox2.Image Is Nothing Then Exit Sub
            thumbedItsMade = True
            btnresetimage.Visible = True
            btnsavecropped.Visible = True
            cropString = "top"
            Timer2.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btncropbottom_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles btncropbottom.MouseDown
        Try
            If PictureBox2.Image Is Nothing Then Exit Sub
            thumbedItsMade = True
            btnresetimage.Visible = True
            btnsavecropped.Visible = True
            Call util_ImageCropTop()
            cropString = "bottom"
            Timer2.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btncropleft_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles btncropleft.MouseDown
        Try
            If PictureBox2.Image Is Nothing Then Exit Sub
            thumbedItsMade = True
            btnresetimage.Visible = True
            btnsavecropped.Visible = True
            Call util_ImageCropTop()
            cropString = "left"
            Timer2.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btncropright_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles btncropright.MouseDown
        Try
            If PictureBox2.Image Is Nothing Then Exit Sub
            thumbedItsMade = True
            btnresetimage.Visible = True
            btnsavecropped.Visible = True
            Call util_ImageCropTop()
            cropString = "right"
            Timer2.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btncropbottom_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles btncropbottom.MouseUp
        Try
            Timer2.Enabled = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btncropleft_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles btncropleft.MouseUp
        Timer2.Enabled = False
    End Sub

    Private Sub btncropright_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles btncropright.MouseUp
        Try
            Timer2.Enabled = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btncroptop_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles btncroptop.MouseUp
        Try
            Timer2.Enabled = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Timer2_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles Timer2.Tick
        Try
            If cropString = "top" Then Call util_ImageCropTop()
            If cropString = "bottom" Then Call util_ImageCropBottom()
            If cropString = "left" Then Call util_ImageCropLeft()
            If cropString = "right" Then Call util_ImageCropRight()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btnresetimage_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnresetimage.Click
        Try
            thumbedItsMade = False
            PictureBox2.Image = PictureBox7.Image
            btnresetimage.Visible = False
            btnsavecropped.Visible = False
            Label16.Text = PictureBox2.Image.Width
            Label17.Text = PictureBox2.Image.Height
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btnsavecropped_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnsavecropped.Click
        Try
            thumbedItsMade = False
            Try
                Dim stream As New System.IO.MemoryStream
                PictureBox2.Image.Save(workingMovieDetails.fileinfo.fanartpath, System.Drawing.Imaging.ImageFormat.Jpeg)
                PictureBox7.Image = PictureBox2.Image
                Label16.Text = PictureBox2.Image.Width
                Label17.Text = PictureBox2.Image.Height
                For Each paths In Preferences.offlinefolders
                    If workingMovieDetails.fileinfo.fanartpath.IndexOf(paths) <> -1 Then
                        Dim mediapath As String
                        mediapath = Utilities.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename)
                        Call mov_OfflineDvdProcess(workingMovieDetails.fileinfo.fullpathandfilename, workingMovieDetails.fullmoviebody.title, mediapath)
                    End If
                Next
                btnresetimage.Visible = False
                btnsavecropped.Visible = False
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button6.Click
        Try
            If Preferences.resizefanart = 1 Then
                'Try
                '    Dim tempbitmap As Bitmap = PictureBox2.Image
                '    tempbitmap.Save(workingmoviedetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                'Catch ex As Exception
                '    tempstring = ex.Message.ToString
                'End Try
            ElseIf Preferences.resizefanart = 2 Then
                'If PictureBox2.Image.Width > 1280 Or PictureBox2.Image.Height > 720 Then
                Dim bm_source As New Bitmap(PictureBox2.Image)
                Dim bm_dest As New Bitmap(1280, 720)
                Dim gr As Graphics = Graphics.FromImage(bm_dest)
                gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                gr.DrawImage(bm_source, 0, 0, 1280 - 1, 720 - 1)
                Dim tempbitmap As Bitmap = bm_dest
                PictureBox2.Image = tempbitmap
                'Else
                '    'Threading.Thread.CurrentThread.Sleep(30)
                '    'bmp.Save(workingmoviedetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                'End If
            ElseIf Preferences.resizefanart = 3 Then
                'If PictureBox2.Image.Width > 960 Or PictureBox2.Image.Height > 540 Then
                Dim bm_source As New Bitmap(PictureBox2.Image)
                Dim bm_dest As New Bitmap(960, 540)
                Dim gr As Graphics = Graphics.FromImage(bm_dest)
                gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                gr.DrawImage(bm_source, 0, 0, 960 - 1, 540 - 1)
                Dim tempbitmap As Bitmap = bm_dest
                PictureBox2.Image = tempbitmap
                'Else
                '    Threading.Thread.CurrentThread.Sleep(30)
                '    'bmp.Save(workingmoviedetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                'End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub mov_PosterInitialise()
        pageCount = 0
        currentPage = 1
        CheckBox1.Visible = False
        Button15.Visible = False
        For i = Panel8.Controls.Count - 1 To 0 Step -1
            Panel8.Controls.RemoveAt(i)
        Next
        If Preferences.maximumthumbs < 1 Then
        Else
            Preferences.maximumthumbs = 10
        End If
        Button15.Visible = False
        CheckBox1.Visible = False

        posterPicBoxes = Nothing
        posterCheckBoxes = Nothing
        resLabel = Nothing

        Application.DoEvents()

        posterArray.Clear()
    End Sub

    Private Sub Button19_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button19.Click
        Try
            messbox = New frmMessageBox("Please wait,", "", "Scraping Movie Poster List")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            Me.Refresh()
            messbox.Refresh()
            Call mov_PosterInitialise()
            Try


                '            Dim scraperfunction As New imdb.Classimdbscraper ' add to comment this one because of changes i made to the Class "Scraper" (ClassimdbScraper)
                Dim scraperfunction As New Classimdb
                Dim tmdbposterscraper As New tmdb_posters.Class1

                Dim tmdbimageresults As String = tmdbposterscraper.gettmdbposters_newapi(workingMovieDetails.fullmoviebody.imdbid)
                Dim bannerslist As New XmlDocument
                bannerslist.LoadXml(tmdbimageresults)
                Dim thisresult As XmlNode = Nothing
                For Each item In bannerslist("tmdb_posterlist")
                    Select Case item.name
                        Case "poster"
                            Dim newfanart As New str_ListOfPosters(SetDefaults)
                            For Each backdrop In item
                                If backdrop.childnodes(0).innertext = "original" Then
                                    newfanart.hdposter = backdrop.childnodes(1).innertext
                                End If
                                If backdrop.childnodes(0).innertext = "mid" Then
                                    newfanart.ldposter = backdrop.childnodes(1).innertext
                                End If
                                If newfanart.hdposter <> Nothing And newfanart.ldposter <> Nothing Then
                                    If newfanart.hdposter <> "" And newfanart.ldposter <> "" Then
                                        If newfanart.hdposter.IndexOf("http") <> -1 And newfanart.hdposter.IndexOf(".jpg") <> -1 And newfanart.ldposter.IndexOf("http") <> -1 And newfanart.ldposter.IndexOf(".jpg") <> -1 Then
                                            posterArray.Add(newfanart)
                                            Exit For
                                        End If
                                    End If
                                End If
                            Next

                    End Select
                Next
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            Finally
                messbox.Close()
                Call mov_PosterSelectionDisplay()
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub mov_PosterSelectionDisplay()
        Dim names As New List(Of String)()
        messbox = New frmMessageBox("Please wait,", "", "Downloading Preview Images")
        System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
        messbox.Show()
        Me.Refresh()
        messbox.Refresh()
        Dim itemcounter As Integer = 0
        If posterArray.Count > 0 Then

            If posterArray.Count > Preferences.maximumthumbs Then
                Dim tempmaxthumbs As Integer = posterArray.Count

                Do Until tempmaxthumbs < 1
                    pageCount += 1
                    tempmaxthumbs -= Preferences.maximumthumbs
                Loop
            End If


            If posterArray.Count > 10 Then
                For f = 0 To Preferences.maximumthumbs - 1
                    names.Add(posterArray(f).ldposter)
                Next
            Else
                For f = 0 To posterArray.Count - 1
                    names.Add(posterArray(f).ldposter)
                Next
            End If

            'Label7.Visible = True
            If pageCount > 1 Then
                Button9.Visible = True
                Button10.Visible = True
                If posterArray.Count >= 10 Then
                    Label18.Text = "Displaying 1 to 10 of " & posterArray.Count.ToString & " Images"
                Else
                    Label18.Text = "Displaying 1 to " & posterArray.Count.ToString & " of " & posterArray.Count.ToString & " Images"
                End If
                Label18.Visible = True
                Me.Refresh()
                Application.DoEvents()
                currentPage = 1
                Button10.Enabled = False
                Button9.Enabled = True
            Else
                Button10.Visible = False
                Button9.Visible = False
                If posterArray.Count >= 10 Then
                    Label18.Text = "Displaying 1 to " & 10 & " of " & posterArray.Count.ToString & " Images"
                Else
                    Label18.Text = "Displaying 1 to " & posterArray.Count.ToString & " of " & posterArray.Count.ToString & " Images"
                End If
                Label18.Visible = True
                Me.Refresh()
                Application.DoEvents()
            End If
            Dim tempboolean As Boolean = True
            Dim location As Integer = 0

            For Each item As String In names
                Try
                    If tempboolean = True Then
                        posterPicBoxes() = New PictureBox()
                        With posterPicBoxes
                            'Try
                            .WaitOnLoad = True
                            .Location = New Point(location, 0)
                            .Width = 123
                            .Height = 168
                            .SizeMode = PictureBoxSizeMode.Zoom
                            .ImageLocation = item
                            .Visible = True
                            .BorderStyle = BorderStyle.Fixed3D
                            .Name = "poster" & itemcounter.ToString
                            AddHandler posterPicBoxes.DoubleClick, AddressOf util_ZoomImage2
                            AddHandler posterPicBoxes.LoadCompleted, AddressOf util_ImageRes
                            '            Catch
                            'End Try
                        End With

                        posterCheckBoxes() = New RadioButton()
                        With posterCheckBoxes
                            .Location = New Point(location + 50, 166) '179
                            .Name = "postercheckbox" & itemcounter.ToString
                            .SendToBack()
                            .Text = " "
                            AddHandler posterCheckBoxes.CheckedChanged, AddressOf mov_PosterRadioChanged
                        End With

                        itemcounter += 1


                        Me.Panel8.Controls.Add(posterPicBoxes())
                        Me.Panel8.Controls.Add(posterCheckBoxes())
                    End If
                    If tempboolean = False Then
                        posterPicBoxes() = New PictureBox()
                        With posterPicBoxes
                            .WaitOnLoad = True
                            .Location = New Point(location, 192) '210
                            .Width = 123
                            .Height = 168
                            .SizeMode = PictureBoxSizeMode.Zoom
                            .ImageLocation = item
                            .Visible = True
                            .BorderStyle = BorderStyle.Fixed3D
                            .Name = "poster" & itemcounter.ToString
                            AddHandler posterPicBoxes.DoubleClick, AddressOf util_ZoomImage2
                            AddHandler posterPicBoxes.LoadCompleted, AddressOf util_ImageRes
                        End With

                        posterCheckBoxes() = New RadioButton()
                        With posterCheckBoxes
                            .Location = New Point(location + 50, 358) '389
                            .Name = "postercheckbox" & itemcounter.ToString
                            .SendToBack()
                            .Text = " "
                            AddHandler posterCheckBoxes.CheckedChanged, AddressOf mov_PosterRadioChanged
                        End With

                        itemcounter += 1


                        Me.Panel8.Controls.Add(posterPicBoxes())
                        Me.Panel8.Controls.Add(posterCheckBoxes())
                    End If
                    Me.Refresh()
                    Application.DoEvents()
                    If tempboolean = False Then location += 120
                    tempboolean = Not tempboolean
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
            Next
        Else
            Dim mainlabel2 As Label
            mainlabel2 = New Label
            With mainlabel2
                .Location = New Point(0, 100)
                .Width = 700
                .Height = 100
                .Font = New System.Drawing.Font("Arial", 15, FontStyle.Bold)
                .Text = "No Posters Were Found For This Movie"

            End With
            Me.Panel8.Controls.Add(mainlabel2)
        End If
        If itemcounter = 0 Then
            Button9.Visible = False
            Button10.Visible = False
            Dim mainlabel2 As Label
            mainlabel2 = New Label
            With mainlabel2
                .Location = New Point(0, 100)
                .Width = 700
                .Height = 100
                .Font = New System.Drawing.Font("Arial", 15, FontStyle.Bold)
                .Text = "No Posters Were Found For This Movie"

            End With
            Label18.Text = "0 of 0 Images"
            Me.Panel8.Controls.Add(mainlabel2)
        End If
        messbox.Close()
    End Sub

    Private Sub mov_PosterRadioChanged(ByVal sender As Object, ByVal e As EventArgs)
        Dim tempstring As String = sender.name
        Dim tempint As Integer = 0
        Dim tempstring2 As String = tempstring
        Dim allok As Boolean = False
        tempstring = tempstring.Replace("postercheckbox", "")
        tempint = Convert.ToDecimal(tempstring)
        For Each button As Control In Me.Panel8.Controls
            If button.Name.IndexOf("postercheckbox") <> -1 Then
                Dim b1 As RadioButton = CType(button, RadioButton)
                If b1.Checked = True Then
                    allok = True
                    Exit For
                End If
            End If
        Next
        If allok = True Then
            Button15.Visible = True
            If posterArray(0).ldposter.ToLower.IndexOf("impawards") <> -1 Or posterArray(0).ldposter.ToLower.IndexOf("themoviedb") <> -1 Then
                CheckBox1.Visible = True
            Else
                CheckBox1.Visible = False
            End If
        Else
            CheckBox1.Visible = False
            Button15.Visible = False
        End If

    End Sub

    Private Sub util_ImageRes(ByVal sender As Object, ByVal e As EventArgs)
        resLabel = New Label
        Dim tempstring As String
        tempstring = sender.image.width.ToString
        tempstring = tempstring & " x "
        tempstring = tempstring & sender.image.height.ToString
        Dim locx As Integer = sender.location.x
        Dim locy As Integer = sender.location.y
        locy = locy + sender.height
        With resLabel
            .Location = New Point(locx + 30, locy)
            .Text = tempstring
            .BringToFront()
        End With
        Me.Panel8.Controls.Add(resLabel)
        Me.Refresh()
        Application.DoEvents()
    End Sub

    Private Sub Button17_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button17.Click
        Try
            messbox = New frmMessageBox("Please wait,", "", "Scraping Movie Poster List")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            Me.Refresh()
            messbox.Refresh()
            Call mov_PosterInitialise()
            Dim newobject2 As New imdb_thumbs.Class1
            Dim posters(,) As String = newobject2.getimdbposters(workingMovieDetails.fullmoviebody.imdbid)
            For f = 0 To UBound(posters)
                If posters(f, 0) <> Nothing Then
                    If posters(f, 1) = Nothing Then posters(f, 1) = posters(f, 0)
                    Dim newposters As New str_ListOfPosters(SetDefaults)
                    newposters.hdposter = posters(f, 1)
                    newposters.ldposter = posters(f, 0)
                    posterArray.Add(newposters)
                    newposters.ldposter = Nothing
                    newposters.hdposter = Nothing
                End If
            Next


            messbox.Close()
            Call mov_PosterSelectionDisplay()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button9.Click
        Try
            For i = Panel8.Controls.Count - 1 To 0 Step -1
                Panel8.Controls.RemoveAt(i)
            Next
            messbox = New frmMessageBox("Please wait,", "", "Downloading Preview Images")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            Me.Refresh()
            messbox.Refresh()
            currentPage += 1
            If currentPage = pageCount Then
                Button9.Enabled = False
            End If
            Button10.Enabled = True

            Dim tempint As Integer = (currentPage * (10) + 1) - 10
            Dim tempint2 As Integer = currentPage * 10

            If tempint2 > posterArray.Count Then
                tempint2 = posterArray.Count
            End If

            Dim names As New List(Of String)()

            For f = tempint - 1 To tempint2 - 1
                names.Add(posterArray(f).ldposter)
            Next
            Label18.Text = "Displaying " & tempint.ToString & " to " & tempint2 & " of " & posterArray.Count.ToString & " Images"

            Dim location As Integer = 0
            Dim itemcounter As Integer = 0
            Dim tempboolean As Boolean = True
            For Each item As String In names
                Try
                    If tempboolean = True Then
                        posterPicBoxes() = New PictureBox()
                        With posterPicBoxes
                            .WaitOnLoad = True
                            .Location = New Point(location, 0)
                            .Width = 123
                            .Height = 168
                            .SizeMode = PictureBoxSizeMode.Zoom
                            .ImageLocation = item
                            .Visible = True
                            .BorderStyle = BorderStyle.Fixed3D
                            .Name = "poster" & itemcounter.ToString
                            AddHandler posterPicBoxes.DoubleClick, AddressOf util_ZoomImage2
                            AddHandler posterPicBoxes.LoadCompleted, AddressOf util_ImageRes
                        End With

                        posterCheckBoxes() = New RadioButton()
                        With posterCheckBoxes
                            .Location = New Point(location + 50, 166)
                            .Name = "postercheckbox" & itemcounter.ToString
                            .SendToBack()
                            .Text = " "
                            AddHandler posterCheckBoxes.CheckedChanged, AddressOf mov_PosterRadioChanged
                        End With

                        itemcounter += 1


                        Me.Panel8.Controls.Add(posterPicBoxes())
                        Me.Panel8.Controls.Add(posterCheckBoxes())
                    End If
                    If tempboolean = False Then

                        posterPicBoxes() = New PictureBox()
                        With posterPicBoxes
                            .WaitOnLoad = True
                            .Location = New Point(location, 192)
                            .Width = 123
                            .Height = 168
                            .SizeMode = PictureBoxSizeMode.Zoom
                            .ImageLocation = item
                            .Visible = True
                            .BorderStyle = BorderStyle.Fixed3D
                            .Name = "poster" & itemcounter.ToString
                            AddHandler posterPicBoxes.DoubleClick, AddressOf util_ZoomImage2
                            AddHandler posterPicBoxes.LoadCompleted, AddressOf util_ImageRes
                        End With

                        posterCheckBoxes() = New RadioButton()
                        With posterCheckBoxes
                            .Location = New Point(location + 50, 358)
                            .Name = "postercheckbox" & itemcounter.ToString
                            .SendToBack()
                            .Text = " "
                            AddHandler posterCheckBoxes.CheckedChanged, AddressOf mov_PosterRadioChanged
                        End With

                        itemcounter += 1


                        Me.Panel8.Controls.Add(posterPicBoxes())
                        Me.Panel8.Controls.Add(posterCheckBoxes())
                    End If
                    Me.Refresh()
                    Application.DoEvents()
                    If tempboolean = False Then location += 120
                    tempboolean = Not tempboolean
                Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
                End Try
            Next
            messbox.Close()
            Me.Refresh()
            Application.DoEvents()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button10_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button10.Click
        Try
            For i = Panel8.Controls.Count - 1 To 0 Step -1
                Panel8.Controls.RemoveAt(i)
            Next
            messbox = New frmMessageBox("Please wait,", "", "Downloading Preview Images")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            Me.Refresh()
            messbox.Refresh()
            currentPage -= 1
            If currentPage = 1 Then
                Button10.Enabled = False
            End If
            Button9.Enabled = True

            Dim tempint As Integer = (currentPage * (10) + 1) - 10
            Dim tempint2 As Integer = currentPage * 10

            If tempint2 > posterArray.Count Then
                tempint2 = posterArray.Count
            End If

            Dim names As New List(Of String)()

            For f = tempint - 1 To tempint2 - 1
                names.Add(posterArray(f).ldposter)
            Next
            Label18.Text = "Displaying " & tempint.ToString & " to " & tempint2 & " of " & posterArray.Count.ToString & " Images"

            Dim location As Integer = 0
            Dim itemcounter As Integer = 0
            Dim tempboolean As Boolean = True
            For Each item As String In names
                If tempboolean = True Then
                    posterPicBoxes() = New PictureBox()
                    With posterPicBoxes
                        .WaitOnLoad = True
                        .Location = New Point(location, 0)
                        .Width = 123
                        .Height = 168
                        .SizeMode = PictureBoxSizeMode.Zoom
                        .ImageLocation = item
                        .Visible = True
                        .BorderStyle = BorderStyle.Fixed3D
                        .Name = "poster" & itemcounter.ToString
                        AddHandler posterPicBoxes.DoubleClick, AddressOf util_ZoomImage2
                        AddHandler posterPicBoxes.LoadCompleted, AddressOf util_ImageRes
                    End With

                    posterCheckBoxes() = New RadioButton()
                    With posterCheckBoxes
                        .Location = New Point(location + 50, 166)
                        .Name = "postercheckbox" & itemcounter.ToString
                        .SendToBack()
                        .Text = " "
                        AddHandler posterCheckBoxes.CheckedChanged, AddressOf mov_PosterRadioChanged
                    End With

                    itemcounter += 1


                    Me.Panel8.Controls.Add(posterPicBoxes())
                    Me.Panel8.Controls.Add(posterCheckBoxes())
                End If
                If tempboolean = False Then
                    posterPicBoxes() = New PictureBox()
                    With posterPicBoxes
                        .WaitOnLoad = True
                        .Location = New Point(location, 192)
                        .Width = 123
                        .Height = 168
                        .SizeMode = PictureBoxSizeMode.Zoom
                        .ImageLocation = item
                        .Visible = True
                        .BorderStyle = BorderStyle.Fixed3D
                        .Name = "poster" & itemcounter.ToString
                        AddHandler posterPicBoxes.DoubleClick, AddressOf util_ZoomImage2
                        AddHandler posterPicBoxes.LoadCompleted, AddressOf util_ImageRes
                    End With

                    posterCheckBoxes() = New RadioButton()
                    With posterCheckBoxes
                        .Location = New Point(location + 50, 358)
                        .Name = "postercheckbox" & itemcounter.ToString
                        .SendToBack()
                        .Text = " "
                        AddHandler posterCheckBoxes.CheckedChanged, AddressOf mov_PosterRadioChanged
                    End With

                    itemcounter += 1


                    Me.Panel8.Controls.Add(posterPicBoxes())
                    Me.Panel8.Controls.Add(posterCheckBoxes())
                End If
                Me.Refresh()
                Application.DoEvents()
                If tempboolean = False Then location += 120
                tempboolean = Not tempboolean
            Next
            messbox.Close()
            Me.Refresh()
            Application.DoEvents()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button18_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button18.Click
        Try
            messbox = New frmMessageBox("Please wait,", "", "Scraping Movie Poster List")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            Me.Refresh()
            messbox.Refresh()
            Call mov_PosterInitialise()
            Dim newobject As New class_mpdb_thumbs.Class1
            Dim teststring As New XmlDocument
            Dim testthumbs As String = String.Empty
            Try
                testthumbs = newobject.get_mpdb_thumbs(workingMovieDetails.fullmoviebody.imdbid)
                testthumbs = "<totalthumbs>" & testthumbs & "</totalthumbs>"
                teststring.LoadXml(testthumbs)

            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
                Thread.Sleep(1)
            End Try

            Dim thumbstring As New XmlDocument
            Try
                thumbstring.LoadXml(testthumbs)



                For Each thisresult In thumbstring("totalthumbs")
                    Select Case thisresult.Name
                        Case "thumb"
                            Dim newposters As New str_ListOfPosters(SetDefaults)
                            newposters.hdposter = thisresult.InnerText
                            newposters.ldposter = thisresult.InnerText
                            posterArray.Add(newposters)
                            newposters.ldposter = Nothing
                            newposters.hdposter = Nothing
                    End Select
                Next
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
            messbox.Close()
            Call mov_PosterSelectionDisplay()

        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button16_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button16.Click
        Try
            messbox = New frmMessageBox("Please wait,", "", "Scraping Movie Poster List")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            Me.Refresh()
            messbox.Refresh()
            Call mov_PosterInitialise()
            Dim newobject2 As New IMPA.getimpaposters
            Try
                Dim posters(,) As String = newobject2.getimpaafulllist(workingMovieDetails.fullmoviebody.title, workingMovieDetails.fullmoviebody.year)
                For f = 0 To UBound(posters)
                    If posters(f, 0) <> Nothing Then
                        If posters(f, 1) = Nothing Then posters(f, 1) = posters(f, 0)
                        Dim newposters As New str_ListOfPosters(SetDefaults)
                        newposters.hdposter = posters(f, 0)
                        newposters.ldposter = posters(f, 1)
                        posterArray.Add(newposters)
                        newposters.ldposter = Nothing
                        newposters.hdposter = Nothing
                    End If
                Next
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If

            End Try
            messbox.Close()
            Call mov_PosterSelectionDisplay()

        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button15_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button15.Click
        Try
            Dim tempstring As String
            Dim tempint As Integer = 0
            Dim realnumber As Integer = 0
            Dim tempstring2 As String = ""
            Dim allok As Boolean = False
            Dim backup As String = ""



            For Each button As Control In Me.Panel8.Controls
                If button.Name.IndexOf("postercheckbox") <> -1 Then
                    Dim b1 As RadioButton = CType(button, RadioButton)
                    If b1.Checked = True Then
                        tempstring = b1.Name
                        If tempstring.IndexOf("postercheckbox") <> -1 Then
                            tempstring = tempstring.Replace("postercheckbox", "")
                            tempint = Convert.ToDecimal(tempstring)
                            'tempstring2 = posterarray(tempint + 1).hdposter
                            If tempstring2 = Nothing Then
                                tempint = Convert.ToDecimal(tempstring)
                                tempint = tempint + ((currentPage - 1) * 10)
                                If CheckBox1.Visible = True Then
                                    If CheckBox1.CheckState = CheckState.Checked Then
                                        tempstring2 = posterArray(tempint).ldposter
                                    Else
                                        tempstring2 = posterArray(tempint).hdposter
                                        backup = posterArray(tempint).ldposter
                                    End If
                                Else
                                    tempstring2 = posterArray(tempint).ldposter
                                End If
                                allok = True
                                Exit For
                            End If
                        End If
                    End If
                End If
            Next





            If allok = False Then
                MsgBox("No Poster Is Selected")
            End If



            Try
                Dim i1 As New PictureBox

                With i1
                    .WaitOnLoad = True
                    Try
                        .ImageLocation = tempstring2
                    Catch
                        .ImageLocation = backup
                    End Try
                End With

                If Not i1.Image Is Nothing Then
                    If i1.Image.Width < 20 Then
                        i1.ImageLocation = backup
                    End If
                End If

                i1.Image.Save(workingMovieDetails.fileinfo.posterpath, Imaging.ImageFormat.Jpeg)

                If Preferences.createfolderjpg = True Then
                    tempstring = workingMovieDetails.fileinfo.posterpath
                    tempstring = tempstring.Replace(IO.Path.GetFileName(tempstring), "folder.jpg")
                    i1.Image.Save(tempstring, Imaging.ImageFormat.Jpeg)
                End If


                Dim bitmap3 As New Bitmap(workingMovieDetails.fileinfo.posterpath)
                Dim bitmap2 As New Bitmap(bitmap3)
                bitmap3.Dispose()
                Dim bm_source As New Bitmap(bitmap2)
                Dim bm_dest As New Bitmap(150, 200)
                Dim gr As Graphics = Graphics.FromImage(bm_dest)
                gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                gr.DrawImage(bm_source, 0, 0, 150 - 1, 200 - 1)
                Dim tempbitmap As Bitmap = bm_dest
                Dim filename As String = Utilities.GetCRC32(workingMovieDetails.fileinfo.fullpathandfilename)
                Dim path As String = IO.Path.Combine(applicationPath, "settings\postercache\" & filename & ".jpg")
                tempbitmap.Save(path, Imaging.ImageFormat.Jpeg)
                tempbitmap.Dispose()

                For Each poster As PictureBox In TabPage22.Controls
                    If poster.Tag = workingMovieDetails.fileinfo.fullpathandfilename Then
                        poster.ImageLocation = IO.Path.Combine(applicationPath, "settings\postercache\" & filename & ".jpg")
                        poster.Load()
                        Exit For
                    End If
                Next

                PictureBox3.ImageLocation = workingMovieDetails.fileinfo.posterpath
                PictureBox3.Load()
                moviethumb.ImageLocation = workingMovieDetails.fileinfo.posterpath
                moviethumb.Load()
                tempstring = "Current Loaded Poster - " & PictureBox3.Image.Width.ToString & " x " & PictureBox3.Image.Height.ToString
                Label19.Text = tempstring
                Label19.Refresh()
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
            Call mov_PosterSaved()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub PictureBox3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PictureBox3.Click
        Try
            If Not PictureBox3.Image Is Nothing Then
                Me.ControlBox = False
                MenuStrip1.Enabled = False
                'ToolStrip1.Enabled = False
                Call util_ZoomImage(PictureBox3.Image)
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button5.Click
        Try
            openFD.InitialDirectory = workingMovieDetails.fileinfo.fullpathandfilename.Replace(IO.Path.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename), "")
            openFD.Title = "Select a jpeg image File"
            openFD.FileName = ""
            openFD.Filter = "Media Companion Image Files|*.jpg;*.tbn|All Files|*.*"
            openFD.FilterIndex = 0
            openFD.ShowDialog()
            TextBox4.Text = openFD.FileName
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button8.Click
        Try
            Dim tempstring As String = ""
            Dim MyWebClient As New System.Net.WebClient

            Try
                Dim ImageInBytes() As Byte = MyWebClient.DownloadData(TextBox4.Text)
                Dim ImageStream As New IO.MemoryStream(ImageInBytes)

                PictureBox3.Image = New System.Drawing.Bitmap(ImageStream)
                PictureBox3.Image.Save(workingMovieDetails.fileinfo.posterpath, Imaging.ImageFormat.Jpeg)
                If Preferences.createfolderjpg = True Then
                    tempstring = workingMovieDetails.fileinfo.posterpath.Replace(IO.Path.GetFileName(workingMovieDetails.fileinfo.posterpath), "folder.jpg")
                    PictureBox3.Image.Save(tempstring, Imaging.ImageFormat.Jpeg)
                End If
                moviethumb.ImageLocation = workingMovieDetails.fileinfo.posterpath
                moviethumb.Load()
                Dim bitmap3 As New Bitmap(workingMovieDetails.fileinfo.posterpath)
                Dim bitmap2 As New Bitmap(bitmap3)
                bitmap3.Dispose()
                Dim bm_source As New Bitmap(bitmap2)
                Dim bm_dest As New Bitmap(150, 200)
                Dim gr As Graphics = Graphics.FromImage(bm_dest)
                gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                gr.DrawImage(bm_source, 0, 0, 150 - 1, 200 - 1)
                Dim tempbitmap As Bitmap = bm_dest
                Dim filename As String = Utilities.GetCRC32(workingMovieDetails.fileinfo.fullpathandfilename)
                Dim path As String = IO.Path.Combine(applicationPath, "settings\postercache\" & filename & ".jpg")
                tempbitmap.Save(path, Imaging.ImageFormat.Jpeg)
                tempbitmap.Dispose()

                For Each poster As PictureBox In TabPage22.Controls
                    If poster.Tag = workingMovieDetails.fileinfo.fullpathandfilename Then
                        poster.ImageLocation = IO.Path.Combine(applicationPath, "settings\postercache\" & filename & ".jpg")
                        poster.Load()
                        Exit For
                    End If
                Next
            Catch ex As Exception
                MsgBox("Unable To Download Image")
            End Try
            Call mov_PosterSaved()
            Panel6.Visible = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button7.Click
        Try
            Panel6.Visible = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button20_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button20.Click
        Try
            Panel6.Visible = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button22_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button22.Click
        Try
            WebBrowser1.GoBack()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button21_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button21.Click
        Try
            Dim stage As String = "Starting Rescrape" & vbCrLf

            Try
                Dim tempstring As String = ""
                Dim tempint As Integer = 0
                tempstring = WebBrowser1.Url.ToString





                Dim T As String
                Dim mat As Match


                Dim tempinfo As String = ""

                T = tempstring
                mat = Nothing
                mat = Regex.Match(T, "(tt\d{7})")
                If mat.Success = True Then
                    tempstring = mat.Value
                Else
                    MsgBox("Please Browse to a Movie page")
                    Exit Sub
                End If

                workingMovieDetails.fullmoviebody.imdbid = tempstring

                If outlinetxt.Text = "MC cannot find this file, either the file no longer exists, or MC cannot access the file path" Then
                    MsgBox("MC cannot find this file, either the file no longer exists, or MC cannot access the file path")
                    Exit Sub
                End If
                tempint = MessageBox.Show("Changing the movie will Overwrite all the current details" & vbCrLf & "Do you wish to continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
                If tempint = DialogResult.No Then
                    Exit Sub
                End If
                Dim messbox As frmMessageBox = New frmMessageBox("The Selected Movie is being scraped", "", "Please Wait")
                System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
                messbox.Show()
                messbox.Refresh()
                Application.DoEvents()

                If workingMovieDetails Is Nothing Then Exit Sub

                If CheckBox2.CheckState = CheckState.Checked Then
                    stage = stage & vbCrLf
                    stage = stage & "Deleting existing poster and backdrops" & vbCrLf
                    Try
                        If IO.File.Exists(workingMovieDetails.fileinfo.posterpath) Then
                            IO.File.Delete(workingMovieDetails.fileinfo.posterpath)
                        End If
                    Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                    End Try
                    Try
                        If IO.File.Exists(workingMovieDetails.fileinfo.fanartpath) Then
                            IO.File.Delete(workingMovieDetails.fileinfo.fanartpath)
                        End If
                    Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                    End Try
                    Try
                        tempstring = workingMovieDetails.fileinfo.posterpath.Replace(IO.Path.GetFileName(workingMovieDetails.fileinfo.posterpath), "folder.jpg")
                        If IO.File.Exists(tempstring) Then
                            IO.File.Delete(tempstring)
                        End If
                    Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                    End Try
                End If

                If workingMovieDetails.fullmoviebody.imdbid = Nothing Then Exit Sub
                Me.Cursor = Cursors.WaitCursor
                '                    Dim scraper As New imdb.Classimdbscraper
                Dim scraper As New Classimdb
                Dim body As String = String.Empty
                Dim actorlist As String = String.Empty
                Dim trailer As String = String.Empty
                Dim thumbstring As New XmlDocument
                Dim thisresult As XmlNode = Nothing
                stage = stage & vbCrLf
                stage = stage & "Clearing current movie details" & vbCrLf


                workingMovieDetails.fullmoviebody.credits = ""
                workingMovieDetails.fullmoviebody.director = ""
                workingMovieDetails.fullmoviebody.stars = ""
                workingMovieDetails.fullmoviebody.genre = ""
                workingMovieDetails.fullmoviebody.mpaa = ""
                workingMovieDetails.fullmoviebody.outline = ""
                workingMovieDetails.fullmoviebody.plot = ""
                workingMovieDetails.fullmoviebody.premiered = ""
                workingMovieDetails.fullmoviebody.rating = ""
                workingMovieDetails.fullmoviebody.runtime = ""
                workingMovieDetails.fullmoviebody.studio = ""
                workingMovieDetails.fullmoviebody.tagline = ""
                workingMovieDetails.fullmoviebody.thumbnails = ""
                workingMovieDetails.fullmoviebody.title = ""
                workingMovieDetails.fullmoviebody.top250 = ""
                workingMovieDetails.fullmoviebody.trailer = ""
                workingMovieDetails.fullmoviebody.votes = ""
                workingMovieDetails.fullmoviebody.year = ""
                workingMovieDetails.fullmoviebody.country = ""
                workingMovieDetails.fullmoviebody.sortorder = ""
                workingMovieDetails.alternativetitles.Clear()
                stage = stage & vbCrLf
                stage = stage & "Scraping Movie Body with settings:" & vbCrLf
                stage = stage & workingMovieDetails.fullmoviebody.imdbid & vbCrLf
                stage = stage & Preferences.imdbmirror & vbCrLf
                body = scraper.getimdbbody(, , workingMovieDetails.fullmoviebody.imdbid, Preferences.imdbmirror)



                If body = "MIC" Then
                    workingMovieDetails.fullmoviebody.genre = "problem"
                    stage = stage & "Body not Scraped" & vbCrLf
                Else

                    thumbstring.LoadXml(body)



                    Dim certificates As New List(Of String)
                    stage = stage & vbCrLf
                    stage = stage & "Parsing scraper XML" & vbCrLf
                    For Each thisresult In thumbstring("movie")
                        Select Case thisresult.Name
                            Case "title"
                                stage = stage & "Selecting Title according to settings" & vbCrLf
                                If Preferences.keepfoldername = False Then
                                    workingMovieDetails.fullmoviebody.title = thisresult.InnerText
                                Else
                                    If Preferences.usefoldernames = False Then
                                        tempstring = IO.Path.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename)
                                        workingMovieDetails.fullmoviebody.title = Utilities.CleanFileName(tempstring)
                                    Else
                                        '                                    workingmoviedetails.fullmoviebody.title = filefunction.getlastfolder(workingmoviedetails.fileinfo.fullpathandfilename) 'foldername)
                                        tempstring = Utilities.GetLastFolder(workingMovieDetails.fileinfo.fullpathandfilename) 'foldername)
                                        workingMovieDetails.fullmoviebody.title = Utilities.CleanFileName(tempstring)
                                        '                                    workingmoviedetails.fullmoviebody.sortorder = filefunction.getlastfolder(workingmoviedetails.fileinfo.fullpathandfilename) 'foldername)
                                        'tempstring = Utilities.GetLastFolder(workingMovieDetails.fileinfo.fullpathandfilename) 'foldername)  'unnecessary duplication & sub calls...
                                        'workingMovieDetails.fullmoviebody.sortorder = Utilities.CleanFileName(tempstring)
                                        workingMovieDetails.fullmoviebody.sortorder = workingMovieDetails.fullmoviebody.title   'at this initial scape stage the sort title = the cleaned movie title
                                    End If
                                End If
                                stage = stage & "Adding title: " & workingMovieDetails.fullmoviebody.title & vbCrLf
                            Case "credits"
                                stage = stage & "Adding credits: " & thisresult.InnerText & vbCrLf
                                workingMovieDetails.fullmoviebody.credits = thisresult.InnerText
                            Case "country"
                                workingMovieDetails.fullmoviebody.country = thisresult.InnerText
                            Case "director"
                                stage = stage & "Adding director: " & thisresult.InnerText & vbCrLf
                                workingMovieDetails.fullmoviebody.director = thisresult.InnerText
                            Case "stars"
                                stage = stage & "Adding stars: " & thisresult.InnerText & vbCrLf
                                workingMovieDetails.fullmoviebody.stars = thisresult.InnerText
                            Case "genre"
                                stage = stage & "Adding genre: " & thisresult.InnerText & vbCrLf
                                workingMovieDetails.fullmoviebody.genre = thisresult.InnerText
                            Case "mpaa"
                                stage = stage & "Adding mpaa: " & thisresult.InnerText & vbCrLf
                                workingMovieDetails.fullmoviebody.mpaa = thisresult.InnerText
                            Case "outline"
                                stage = stage & "Adding outline: " & thisresult.InnerText & vbCrLf
                                workingMovieDetails.fullmoviebody.outline = thisresult.InnerText
                            Case "plot"
                                stage = stage & "Adding plot: " & thisresult.InnerText & vbCrLf
                                workingMovieDetails.fullmoviebody.plot = thisresult.InnerText
                            Case "premiered"
                                stage = stage & "Adding premiered: " & thisresult.InnerText & vbCrLf
                                workingMovieDetails.fullmoviebody.premiered = thisresult.InnerText
                            Case "rating"
                                stage = stage & "Adding rating: " & thisresult.InnerText & vbCrLf
                                workingMovieDetails.fullmoviebody.rating = thisresult.InnerText
                            Case "runtime"
                                stage = stage & "Adding runtime: " & thisresult.InnerText & vbCrLf
                                workingMovieDetails.fullmoviebody.runtime = thisresult.InnerText
                            Case "studio"
                                stage = stage & "Adding studio: " & thisresult.InnerText & vbCrLf
                                workingMovieDetails.fullmoviebody.studio = thisresult.InnerText
                            Case "tagline"
                                stage = stage & "Adding tagline: " & thisresult.InnerText & vbCrLf
                                workingMovieDetails.fullmoviebody.tagline = thisresult.InnerText
                            Case "top250"
                                stage = stage & "Adding top250: " & thisresult.InnerText & vbCrLf
                                workingMovieDetails.fullmoviebody.top250 = thisresult.InnerText
                            Case "votes"
                                stage = stage & "Adding votes: " & thisresult.InnerText & vbCrLf
                                workingMovieDetails.fullmoviebody.votes = thisresult.InnerText
                            Case "year"
                                stage = stage & "Adding year: " & thisresult.InnerText & vbCrLf
                                workingMovieDetails.fullmoviebody.year = thisresult.InnerText
                            Case "cert"
                                stage = stage & "Adding cert: " & thisresult.InnerText & vbCrLf
                                certificates.Add(thisresult.InnerText)
                            Case "id"
                                stage = stage & "Adding id: " & thisresult.InnerText & vbCrLf
                                workingMovieDetails.fullmoviebody.imdbid = thisresult.InnerText
                            Case "alternativetitle"
                                workingMovieDetails.alternativetitles.Add(thisresult.InnerText)
                        End Select
                    Next

                    Try
                        If Preferences.gettrailer = True Then
                            stage = stage & vbCrLf
                            stage = stage & "Scraping trailer url" & vbCrLf
                            If trailer <> String.Empty And trailer <> "Error" Then
                                workingMovieDetails.fullmoviebody.trailer = trailer
                            End If
                        End If
                    Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                    End Try
                    stage = stage & vbCrLf
                    stage = stage & "Scraping actors with preferences:" & vbCrLf
                    stage = stage & "mirror: " & Preferences.imdbmirror & vbCrLf
                    stage = stage & "imdbid: " & workingMovieDetails.fullmoviebody.imdbid & vbCrLf
                    stage = stage & "title: " & workingMovieDetails.fullmoviebody.title & vbCrLf
                    stage = stage & "max actors:" & Preferences.maxactors & vbCrLf
                    actorlist = scraper.getimdbactors(Preferences.imdbmirror, workingMovieDetails.fullmoviebody.imdbid, workingMovieDetails.fullmoviebody.title, Preferences.maxactors)
                    stage = stage & vbCrLf
                    stage = stage & "Parsing xml actorlist" & vbCrLf
                    Dim done As Boolean = False
                    For f = 0 To UBound(Preferences.certificatepriority)
                        For Each cert In certificates
                            If cert.IndexOf(Preferences.certificatepriority(f)) <> -1 Then
                                workingMovieDetails.fullmoviebody.mpaa = cert.Substring(cert.IndexOf("|") + 1, cert.Length - cert.IndexOf("|") - 1)
                                done = True
                                Exit For
                            End If
                        Next
                        If done = True Then Exit For
                    Next
                End If
                'Preferences.certificatepriority(1)
                workingMovieDetails.listthumbs.Clear()
                stage = stage & vbCrLf
                stage = stage & "working with actor thumbnails" & vbCrLf
                If Preferences.nfoposterscraper <> 0 Then
                    Dim thumbs As String = ""

                    If Preferences.nfoposterscraper = 1 Or Preferences.nfoposterscraper = 3 Or Preferences.nfoposterscraper = 5 Or Preferences.nfoposterscraper = 7 Or Preferences.nfoposterscraper = 9 Or Preferences.nfoposterscraper = 11 Or Preferences.nfoposterscraper = 13 Or Preferences.nfoposterscraper = 15 Then
                        Dim newobject3 As New IMPA.getimpaposters
                        tempstring = newobject3.getimpathumbs(workingMovieDetails.fullmoviebody.title, workingMovieDetails.fullmoviebody.year)
                        If tempstring <> Nothing Then thumbs = thumbs & tempstring
                    End If

                    If Preferences.nfoposterscraper = 2 Or Preferences.nfoposterscraper = 3 Or Preferences.nfoposterscraper = 6 Or Preferences.nfoposterscraper = 7 Or Preferences.nfoposterscraper = 10 Or Preferences.nfoposterscraper = 11 Or Preferences.nfoposterscraper = 14 Or Preferences.nfoposterscraper = 15 Then
                        Dim newobject2 As New tmdb_posters.Class1
                        tempstring = newobject2.gettmdbposters(workingMovieDetails.fullmoviebody.imdbid)
                        If tempstring <> Nothing Then thumbs = thumbs & tempstring
                    End If

                    If Preferences.nfoposterscraper = 4 Or Preferences.nfoposterscraper = 5 Or Preferences.nfoposterscraper = 6 Or Preferences.nfoposterscraper = 7 Or Preferences.nfoposterscraper = 12 Or Preferences.nfoposterscraper = 13 Or Preferences.nfoposterscraper = 14 Or Preferences.nfoposterscraper = 15 Then
                        Dim newobject As New class_mpdb_thumbs.Class1
                        tempstring = newobject.get_mpdb_thumbs(workingMovieDetails.fullmoviebody.imdbid)
                        If tempstring <> Nothing Then thumbs = thumbs & tempstring
                    End If

                    If Preferences.nfoposterscraper = 8 Or Preferences.nfoposterscraper = 9 Or Preferences.nfoposterscraper = 10 Or Preferences.nfoposterscraper = 11 Or Preferences.nfoposterscraper = 12 Or Preferences.nfoposterscraper = 13 Or Preferences.nfoposterscraper = 14 Or Preferences.nfoposterscraper = 15 Then
                        Dim thumbscraper As New imdb_thumbs.Class1
                        tempstring = thumbscraper.getimdbthumbs(workingMovieDetails.fullmoviebody.title, workingMovieDetails.fullmoviebody.year, workingMovieDetails.fullmoviebody.imdbid)
                        If tempstring <> Nothing Then thumbs = thumbs & tempstring
                    End If



                    thumbs = "<thumblist>" & thumbs & "</thumblist>"

                    Try
                        thumbstring.LoadXml(thumbs)



                        For Each thisresult In thumbstring("thumblist")
                            Select Case thisresult.Name
                                Case "thumb"
                                    workingMovieDetails.listthumbs.Add(thisresult.InnerText)
                            End Select
                        Next
                    Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                    End Try
                End If

                workingMovieDetails.listactors.Clear()
                If actorlist <> Nothing Then
                    thumbstring.LoadXml(actorlist)
                    thisresult = Nothing
                    For Each thisresult In thumbstring("actorlist")
                        Select Case thisresult.Name
                            Case "actor"
                                Dim newactor As New str_MovieActors(SetDefaults)
                                Dim detail As XmlNode = Nothing
                                For Each detail In thisresult.ChildNodes
                                    Select Case detail.Name
                                        Case "name"
                                            newactor.actorname = detail.InnerText
                                        Case "role"
                                            newactor.actorrole = detail.InnerText
                                        Case "thumb"
                                            newactor.actorthumb = detail.InnerText
                                        Case "actorid"
                                            If newactor.actorthumb <> Nothing Then
                                                If Preferences.actorsave = True And detail.InnerText <> "" Then
                                                    Dim workingpath As String = ""
                                                    Dim networkpath As String = Preferences.actorsavepath
                                                    Try
                                                        tempstring = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2)
                                                        Dim hg As New IO.DirectoryInfo(tempstring)
                                                        If Not hg.Exists Then
                                                            IO.Directory.CreateDirectory(tempstring)
                                                        End If
                                                        workingpath = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                        If Not IO.File.Exists(workingpath) Then
                                                            Utilities.DownloadFile(newactor.actorthumb, workingpath)
                                                            'Dim buffer(4000000) As Byte
                                                            'Dim size As Integer = 0
                                                            'Dim bytesRead As Integer = 0
                                                            'Dim thumburl As String = newactor.actorthumb
                                                            'Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                                            'Dim res As HttpWebResponse = req.GetResponse()
                                                            'Dim contents As Stream = res.GetResponseStream()
                                                            'Dim bytesToRead As Integer = CInt(buffer.Length)
                                                            'While bytesToRead > 0
                                                            '    size = contents.Read(buffer, bytesRead, bytesToRead)
                                                            '    If size = 0 Then Exit While
                                                            '    bytesToRead -= size
                                                            '    bytesRead += size
                                                            'End While

                                                            'Dim fstrm As New FileStream(workingpath, FileMode.OpenOrCreate, FileAccess.Write)
                                                            'fstrm.Write(buffer, 0, bytesRead)
                                                            'contents.Close()
                                                            'fstrm.Close()
                                                        End If
                                                        newactor.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, detail.InnerText & ".jpg")
                                                    Catch ex As Exception
#If SilentErrorScream Then
                                                    Throw ex
#End If
                                                    End Try
                                                End If
                                            End If
                                    End Select
                                Next
                                workingMovieDetails.listactors.Add(newactor)
                                Dim actornew As New str_ActorDatabase(SetDefaults)
                                actornew.actorname = newactor.actorname
                                actornew.movieid = workingMovieDetails.fullmoviebody.imdbid
                                actorDB.Add(actornew)
                        End Select
                    Next
                End If
                Try
                    If workingMovieDetails.filedetails.filedetails_video.DurationInSeconds.Value <> Nothing And Preferences.movieRuntimeDisplay = "file" Then

                        '1h 24mn 48s 546ms
                        'Dim hours As Integer = 0
                        'Dim minutes As Integer = 0
                        'tempstring = workingMovieDetails.filedetails.filedetails_video.DurationInSeconds.Value
                        'tempint = tempstring.IndexOf("h")
                        'If tempint <> -1 Then
                        '    hours = Convert.ToInt32(tempstring.Substring(0, tempint))
                        '    tempstring = tempstring.Substring(tempint + 1, tempstring.Length - (tempint + 1))
                        '    tempstring = Trim(tempstring)
                        'End If
                        'tempint = tempstring.IndexOf("mn")
                        'If tempint <> -1 Then
                        '    minutes = Convert.ToInt32(tempstring.Substring(0, tempint))
                        'End If
                        'If hours <> 0 Then
                        '    hours = hours * 60
                        'End If
                        'minutes = minutes + hours
                        workingMovieDetails.fullmoviebody.runtime = Utilities.cleanruntime(workingMovieDetails.filedetails.filedetails_video.DurationInSeconds.Value) & " min"
                    End If
                Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
                End Try
                stage = stage & vbCrLf
                stage = stage & "Saving nfo to: " & workingMovieDetails.fileinfo.fullpathandfilename & vbCrLf
                nfoFunction.mov_NfoSave(workingMovieDetails.fileinfo.fullpathandfilename, workingMovieDetails, True)

                If CheckBox2.CheckState = CheckState.Checked Then
                    'get poster and fanart
                    Dim moviethumburl As String = ""
                    If Preferences.scrapemovieposters = True Then
                        stage = stage & vbCrLf
                        stage = stage & "Scraping posters" & vbCrLf
                        Try
                            Select Case Preferences.moviethumbpriority(0)
                                Case "Internet Movie Poster Awards"
                                    moviethumburl = scraperFunction2.impathumb(workingMovieDetails.fullmoviebody.title, workingMovieDetails.fullmoviebody.year)
                                Case "IMDB"
                                    moviethumburl = scraperFunction2.imdbthumb(workingMovieDetails.fullmoviebody.imdbid)
                                Case "Movie Poster DB"
                                    moviethumburl = scraperFunction2.mpdbthumb(workingMovieDetails.fullmoviebody.imdbid)
                                Case "themoviedb.org"
                                    moviethumburl = scraperFunction2.tmdbthumb(workingMovieDetails.fullmoviebody.imdbid)
                            End Select
                        Catch
                            moviethumburl = "na"
                        End Try
                        Try
                            If moviethumburl = "na" Then
                                Select Case Preferences.moviethumbpriority(1)
                                    Case "Internet Movie Poster Awards"
                                        moviethumburl = scraperFunction2.impathumb(workingMovieDetails.fullmoviebody.title, workingMovieDetails.fullmoviebody.year)
                                    Case "IMDB"
                                        moviethumburl = scraperFunction2.imdbthumb(workingMovieDetails.fullmoviebody.imdbid)
                                    Case "Movie Poster DB"
                                        moviethumburl = scraperFunction2.mpdbthumb(workingMovieDetails.fullmoviebody.imdbid)
                                    Case "themoviedb.org"
                                        moviethumburl = scraperFunction2.tmdbthumb(workingMovieDetails.fullmoviebody.imdbid)
                                End Select
                            End If
                        Catch
                            moviethumburl = "na"
                        End Try
                        Try
                            If moviethumburl = "na" Then
                                Select Case Preferences.moviethumbpriority(2)
                                    Case "Internet Movie Poster Awards"
                                        moviethumburl = scraperFunction2.impathumb(workingMovieDetails.fullmoviebody.title, workingMovieDetails.fullmoviebody.year)
                                    Case "IMDB"
                                        moviethumburl = scraperFunction2.imdbthumb(workingMovieDetails.fullmoviebody.imdbid)
                                    Case "Movie Poster DB"
                                        moviethumburl = scraperFunction2.mpdbthumb(workingMovieDetails.fullmoviebody.imdbid)
                                    Case "themoviedb.org"
                                        moviethumburl = scraperFunction2.tmdbthumb(workingMovieDetails.fullmoviebody.imdbid)
                                End Select
                            End If
                        Catch
                            moviethumburl = "na"
                        End Try
                        Try
                            If moviethumburl = "na" Then
                                Select Case Preferences.moviethumbpriority(3)
                                    Case "Internet Movie Poster Awards"
                                        moviethumburl = scraperFunction2.impathumb(workingMovieDetails.fullmoviebody.title, workingMovieDetails.fullmoviebody.year)
                                    Case "IMDB"
                                        moviethumburl = scraperFunction2.imdbthumb(workingMovieDetails.fullmoviebody.imdbid)
                                    Case "Movie Poster DB"
                                        moviethumburl = scraperFunction2.mpdbthumb(workingMovieDetails.fullmoviebody.imdbid)
                                    Case "themoviedb.org"
                                        moviethumburl = scraperFunction2.tmdbthumb(workingMovieDetails.fullmoviebody.imdbid)
                                End Select
                            End If
                        Catch
                            moviethumburl = "na"
                        End Try
                        Try
                            If moviethumburl <> "" And moviethumburl <> "na" Then
                                Dim newmoviethumbpath As String = workingMovieDetails.fileinfo.posterpath
                                Try
                                    'Utilities.DownloadFile(moviethumburl, newmoviethumbpath)
                                    Dim buffer(4000000) As Byte
                                    Dim size As Integer = 0
                                    Dim bytesRead As Integer = 0
                                    Dim thumburl As String = moviethumburl
                                    Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                    Dim res As HttpWebResponse = req.GetResponse()
                                    Dim contents As Stream = res.GetResponseStream()
                                    Dim bytesToRead As Integer = CInt(buffer.Length)
                                    While bytesToRead > 0
                                        size = contents.Read(buffer, bytesRead, bytesToRead)
                                        If size = 0 Then Exit While
                                        bytesToRead -= size
                                        bytesRead += size
                                    End While

                                    Dim fstrm As New FileStream(newmoviethumbpath, FileMode.OpenOrCreate, FileAccess.Write)
                                    fstrm.Write(buffer, 0, bytesRead)
                                    contents.Close()
                                    fstrm.Close()
                                    stage = stage & "Saving poster to: " & newmoviethumbpath & vbCrLf

                                    Dim temppath As String = newmoviethumbpath.Replace(System.IO.Path.GetFileName(newmoviethumbpath), "folder.jpg")
                                    If Preferences.createfolderjpg = True Then
                                        If Preferences.overwritethumbs = True Or System.IO.File.Exists(temppath) = False Then
                                            stage = stage & "Saving folder.jpg To Path :- " & temppath & vbCrLf
                                            Dim fstrm2 As New FileStream(temppath, FileMode.OpenOrCreate, FileAccess.Write)
                                            fstrm2.Write(buffer, 0, bytesRead)
                                            contents.Close()
                                            fstrm2.Close()
                                        Else
                                            stage = stage & "folder.jpg Not Saved to :- " & temppath & ", file already exists" & vbCrLf
                                        End If
                                    End If
                                Catch ex As Exception
                                    stage = stage & "Problem Saving poster" & vbCrLf
                                    stage = stage & "Error Returned :- " & ex.ToString & vbCrLf & vbCrLf
                                End Try
                            Else
                                stage = stage & "No Poster Found" & vbCrLf
                            End If
                        Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                        End Try
                    End If


                    stage = stage & vbCrLf
                    stage = stage & "Scraping fanart list from TMdb" & vbCrLf
                    If Preferences.savefanart = True Then

                        If BckWrkScnMovies.CancellationPending Then Exit Sub

                        Dim temp As String = workingMovieDetails.fullmoviebody.imdbid

                        Dim fanarturl As String = "http://api.themoviedb.org/2.1/Movie.imdbLookup/en/xml/3f026194412846e530a208cf8a39e9cb/" & temp
                        Dim apple2(2000) As String
                        Dim fanartlinecount As Integer = 0
                        Try
                            Dim wrGETURL As WebRequest
                            wrGETURL = WebRequest.Create(fanarturl)
                            Dim myProxy As New WebProxy("myproxy", 80)
                            myProxy.BypassProxyOnLocal = True
                            Dim objStream As Stream
                            objStream = wrGETURL.GetResponse.GetResponseStream()
                            Dim objReader As New StreamReader(objStream)
                            Dim sLine As String = ""
                            fanartlinecount = 0
                            Do While Not sLine Is Nothing
                                fanartlinecount += 1
                                sLine = objReader.ReadLine
                                apple2(fanartlinecount) = sLine
                            Loop
                            fanartlinecount -= 1
                            Dim fanartfound As Boolean = False
                            For g = 1 To fanartlinecount
                                If apple2(g).IndexOf("<image type=""backdrop""") <> -1 Then
                                    If apple2(g).IndexOf("size=""original""") <> -1 Then
                                        Dim StartofURL As Integer = apple2(g).IndexOf("url=""") + 5
                                        Dim EndofURL As Integer = apple2(g).IndexOf("size=""original""") - 2
                                        apple2(g) = apple2(g).Substring(StartofURL, (EndofURL - StartofURL))
                                        apple2(g) = apple2(g).Trim
                                        If apple2(g).ToLower.IndexOf("http") <> -1 And apple2(g).ToLower.IndexOf(".jpg") <> -1 Or apple2(g).IndexOf(".jpeg") <> -1 Or apple2(g).IndexOf(".png") <> -1 Then
                                            moviethumburl = apple2(g)
                                            fanartfound = True
                                        End If
                                    End If
                                    Exit For
                                End If
                            Next
                            If fanartfound = False Then
                                moviethumburl = ""
                                stage = stage & "No fanart found" & vbCrLf
                            End If

                        Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                        End Try

                        If moviethumburl <> "" Then
                            stage = stage & vbCrLf
                            stage = stage & "Attempting to download fanart" & vbCrLf
                            Try
                                'Utilities.DownloadFile(moviethumburl, bmp)
                                Dim buffer(4000000) As Byte
                                Dim size As Integer = 0
                                Dim bytesRead As Integer = 0

                                Dim thumburl As String = moviethumburl
                                Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                Dim res As HttpWebResponse = req.GetResponse()
                                Dim contents As Stream = res.GetResponseStream()
                                Dim bytesToRead As Integer = CInt(buffer.Length)
                                Dim bmp As New Bitmap(contents)



                                While bytesToRead > 0
                                    size = contents.Read(buffer, bytesRead, bytesToRead)
                                    If size = 0 Then Exit While
                                    bytesToRead -= size
                                    bytesRead += size
                                End While



                                If Preferences.resizefanart = 1 Then
                                    stage = stage & "Fanart download succeeded, saving to: " & workingMovieDetails.fileinfo.fanartpath & vbCrLf
                                    bmp.Save(workingMovieDetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                                ElseIf Preferences.resizefanart = 2 Then
                                    If bmp.Width > 1280 Or bmp.Height > 720 Then
                                        stage = stage & "Fanart download succeeded, resizing to: 1280x720" & vbCrLf
                                        Dim bm_source As New Bitmap(bmp)
                                        Dim bm_dest As New Bitmap(1280, 720)
                                        Dim gr As Graphics = Graphics.FromImage(bm_dest)
                                        gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                                        gr.DrawImage(bm_source, 0, 0, 1280 - 1, 720 - 1)
                                        stage = stage & "Fanart resize succeeded, saving to: " & workingMovieDetails.fileinfo.fanartpath & vbCrLf
                                        bm_dest.Save(workingMovieDetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                                    Else
                                        stage = stage & "Fanart download succeeded, saving to: " & workingMovieDetails.fileinfo.fanartpath & vbCrLf
                                        bmp.Save(workingMovieDetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                                    End If
                                ElseIf Preferences.resizefanart = 3 Then
                                    If bmp.Width > 960 Or bmp.Height > 540 Then
                                        stage = stage & "Fanart download succeeded, resizing to: 960x540" & vbCrLf
                                        stage = stage & "Fanart resize succeeded, saving to: " & workingMovieDetails.fileinfo.fanartpath & vbCrLf
                                        Dim bm_source As New Bitmap(bmp)
                                        Dim bm_dest As New Bitmap(960, 540)
                                        Dim gr As Graphics = Graphics.FromImage(bm_dest)
                                        gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                                        gr.DrawImage(bm_source, 0, 0, 960 - 1, 540 - 1)
                                        bm_dest.Save(workingMovieDetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                                    Else
                                        stage = stage & "Fanart download succeeded, saving to: " & workingMovieDetails.fileinfo.fanartpath & vbCrLf
                                        bmp.Save(workingMovieDetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                                    End If
                                End If
                                If IO.File.Exists(workingMovieDetails.fileinfo.fanartpath) Then
                                    For Each paths In Preferences.offlinefolders
                                        Dim offlinepath As String = paths & "\"
                                        If workingMovieDetails.fileinfo.fanartpath.IndexOf(offlinepath) <> -1 Then
                                            Dim mediapath As String
                                            mediapath = Utilities.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename)
                                            Call mov_OfflineDvdProcess(workingMovieDetails.fileinfo.fullpathandfilename, workingMovieDetails.fullmoviebody.title, mediapath)
                                        End If
                                    Next
                                End If
                            Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                            End Try
                        End If
                    End If
                End If
                stage = stage & vbCrLf
                stage = stage & "Populating form with updated details" & vbCrLf
                Call mov_FormPopulate()
                stage = stage & vbCrLf
                stage = stage & "Adding movie to internal list" & vbCrLf
                For f = 0 To fullMovieList.Count - 1
                    If fullMovieList(f).fullpathandfilename = workingMovieDetails.fileinfo.fullpathandfilename Then
                        Dim newfullmovie As New str_ComboList(SetDefaults) 'added new to initialise varibles in structure
                        newfullmovie = fullMovieList(f)
                        newfullmovie.titleandyear = workingMovieDetails.fullmoviebody.title
                        '-------------- Aqui
                        If Preferences.ignorearticle = True Then
                            If newfullmovie.titleandyear.ToLower.IndexOf("the ") = 0 Then
                                newfullmovie.titleandyear = newfullmovie.titleandyear.Substring(4, newfullmovie.titleandyear.Length - 4)
                                newfullmovie.titleandyear = newfullmovie.titleandyear & ", The"
                            End If
                        End If
                        newfullmovie.titleandyear = newfullmovie.titleandyear & " (" & workingMovieDetails.fullmoviebody.year & ")"
                        newfullmovie.genre = workingMovieDetails.fullmoviebody.genre
                        Try
                            Dim filecreation2 As New IO.FileInfo(workingMovieDetails.fileinfo.fullpathandfilename)
                            Dim myDate2 As Date = filecreation2.LastWriteTime

                            newfullmovie.filedate = Format(myDate2, "yyyyMMddHHmmss").ToString
                            'Createdate becomes new because we have changed the movie (i.e. not a recrape of the same movie)
                            newfullmovie.createdate = Format(myDate2, "yyyyMMddHHmmss").ToString


                        Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                        End Try
                        newfullmovie.sortorder = workingMovieDetails.fullmoviebody.sortorder
                        newfullmovie.playcount = workingMovieDetails.fullmoviebody.playcount
                        newfullmovie.rating = workingMovieDetails.fullmoviebody.rating
                        newfullmovie.top250 = workingMovieDetails.fullmoviebody.top250
                        newfullmovie.id = workingMovieDetails.fullmoviebody.imdbid
                        newfullmovie.outline = workingMovieDetails.fullmoviebody.outline
                        newfullmovie.runtime = workingMovieDetails.fullmoviebody.runtime
                        newfullmovie.title = workingMovieDetails.fullmoviebody.title
                        newfullmovie.top250 = workingMovieDetails.fullmoviebody.top250
                        newfullmovie.year = workingMovieDetails.fullmoviebody.year

                        fullMovieList.RemoveAt(f)
                        fullMovieList.Add(newfullmovie)
                        Exit For
                    End If
                Next
                stage = stage & vbCrLf
                stage = stage & "applying filters" & vbCrLf
                Call mov_FiltersAndSortApply()
                stage = stage & vbCrLf
                stage = stage & "Finalising" & vbCrLf
                messbox.Close()

                Me.Cursor = Cursors.Default


                Me.TabControl2.SelectedIndex = 0
                currentTabIndex = 0
                stage = stage & vbCrLf
                stage = stage & "Completed" & vbCrLf
            Catch ex As Exception
                Dim errpath As String = IO.Path.Combine(applicationPath, "changemovie.log")
                If IO.File.Exists(errpath) Then
                    Try
                        IO.File.Delete(errpath)
                    Catch ex2 As Exception
                        MsgBox("Error deleting: " & errpath & vbCrLf & vbCrLf & ex2.ToString)
                    End Try
                End If

                Try
                    stage = stage & vbCrLf & vbCrLf & ex.ToString & vbCrLf & vbCrLf & "End of log"
                    Dim objWriter As New System.IO.StreamWriter(errpath)
                    objWriter.Write(stage)
                    objWriter.Close()
                    MsgBox("Error encountered, see debug file located at: " & errpath)
                Catch ex3 As Exception
                    MsgBox("Error, cant write to " & errpath & vbCrLf & vbCrLf & ex3.ToString)
                End Try
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button12_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button12.Click
        Try
            WebBrowser1.GoBack()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub mov_PosterTimerSet(ByVal direction As String)
        posterThumbedItsMade = True
        Button27.Visible = True
        Button28.Visible = True
        posterCropString = direction
        Timer3.Interval = 1000 ' timer is set initially to 1000ms, user clicks & holds for over 1sec, then timer fires for repeat action, timer sets itself to 150ms when activated
        mov_PosterCrop() ' we do a crop immediately that the button is pushed down, repeat will happen if button is not MouseUp which disables the timer
        Timer3.Enabled = True   'start timer, repeat will happen after 1000ms unless mouse up
    End Sub
    Private Sub Button23_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button23.MouseDown
        Try
            'crop top
            If PictureBox3.Image Is Nothing Then Exit Sub
            mov_PosterTimerSet("top")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button24_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button24.MouseDown
        Try
            'crop bottom
            If PictureBox3.Image Is Nothing Then Exit Sub
            mov_PosterTimerSet("bottom")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button26_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button26.MouseDown
        Try
            'crop left
            If PictureBox3.Image Is Nothing Then Exit Sub
            mov_PosterTimerSet("left")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button25_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button25.MouseDown
        Try
            'crop right
            If PictureBox3.Image Is Nothing Then Exit Sub
            mov_PosterTimerSet("right")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button28_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button28.Click
        Try
            'reset
            posterThumbedItsMade = False
            PictureBox3.Image = moviethumb.Image
            Button28.Visible = False
            Button27.Visible = False
            Label19.Text = "Current Loaded Poster - " & PictureBox3.Image.Width & " X " & PictureBox3.Image.Height
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button27_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button27.Click
        Try
            'save cropped
            posterThumbedItsMade = False
            Try
                Dim stream As New System.IO.MemoryStream
                PictureBox3.Image.Save(workingMovieDetails.fileinfo.posterpath, System.Drawing.Imaging.ImageFormat.Jpeg)
                moviethumb.Image = PictureBox3.Image
                Button28.Visible = False
                Button27.Visible = False

                Dim bitmap3 As New Bitmap(workingMovieDetails.fileinfo.posterpath)
                Dim bitmap2 As New Bitmap(bitmap3)
                bitmap3.Dispose()
                Dim bm_source As New Bitmap(bitmap2)
                Dim bm_dest As New Bitmap(150, 200)
                Dim gr As Graphics = Graphics.FromImage(bm_dest)
                gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                gr.DrawImage(bm_source, 0, 0, 150 - 1, 200 - 1)
                Dim tempbitmap As Bitmap = bm_dest
                Dim filename As String = Utilities.GetCRC32(workingMovieDetails.fileinfo.fullpathandfilename)
                Dim path As String = IO.Path.Combine(applicationPath, "settings\postercache\" & filename & ".jpg")
                tempbitmap.Save(path, Imaging.ImageFormat.Jpeg)
                tempbitmap.Dispose()


                For Each poster As PictureBox In TabPage22.Controls
                    If poster.Tag = workingMovieDetails.fileinfo.fullpathandfilename Then
                        poster.ImageLocation = IO.Path.Combine(applicationPath, "settings\postercache\" & filename & ".jpg")
                        poster.Load()
                        Exit For
                    End If
                Next
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Timer3_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles Timer3.Tick   'timer from movie poster crop - used for repeat crop if buttom held down
        Try
            Timer3.Interval = 75 'if this timer fires, then from now on we want it to fire quicker for repeat function
            mov_PosterCrop()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub mov_PosterCrop()
        Dim imagewidth As Integer = PictureBox3.Image.Width
        Dim imageheight As Integer = PictureBox3.Image.Height
        thumbedItsMade = True

        Select Case posterCropString
            Case "top"
                PictureBox3.Image = util_ImageCrop(PictureBox3.Image, New Size(imagewidth, imageheight - 1), New Point(0, 1)).Clone()
            Case "bottom"
                PictureBox3.Image = util_ImageCrop(PictureBox3.Image, New Size(imagewidth, imageheight - 1), New Point(0, 0)).Clone()
            Case "left"
                PictureBox3.Image = util_ImageCrop(PictureBox3.Image, New Size(imagewidth - 1, imageheight), New Point(1, 0)).Clone()
            Case "right"
                PictureBox3.Image = util_ImageCrop(PictureBox3.Image, New Size(imagewidth - 1, imageheight), New Point(0, 0)).Clone()
        End Select
        PictureBox3.SizeMode = PictureBoxSizeMode.Zoom
        Label19.Text = "Current Loaded Poster - " & PictureBox3.Image.Width & " X " & PictureBox3.Image.Height
    End Sub

    Private Sub Button23_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button23.MouseUp
        Try
            Timer3.Enabled = False
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
    End Sub

    Private Sub Button24_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button24.MouseUp
        Try
            Timer3.Enabled = False
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
    End Sub

    Private Sub Button25_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button25.MouseUp
        Try
            Timer3.Enabled = False
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
    End Sub

    Private Sub Button26_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button26.MouseUp
        Try
            Timer3.Enabled = False
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
    End Sub

    'Private Sub ToolStripButton2_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    If Not BckWrkScnMovies.IsBusy Then
    '        'ToolStripButton10.Visible = True
    '        'ToolStripProgressBar4.Visible = True
    '        ToolStripStatusLabel1.Visible = True
    '        ToolStripProgressBar1.Visible = True
    '        BckWrkScnMovies.RunWorkerAsync()
    '    End If
    'End Sub

    Private Sub WebBrowser1_NewWindow(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles WebBrowser1.NewWindow
        Try
            e.Cancel = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TabControl1_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles TabLevel1.SelectedIndexChanged
        Try
            Dim tab As String = TabLevel1.SelectedTab.Text.ToLower
            If tab = "movies" Then
                tab1 = 0
                Preferences.startuptab = 0
            ElseIf tab = "tv shows" Then
                TvTreeview.Focus()
                tab1 = 1
                Preferences.startuptab = 1
            ElseIf tab = "" Then
                TabLevel1.SelectedIndex = tab1
                Dim webAddress As String = "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=4696771"
                Process.Start(webAddress)
            ElseIf tab = "general preferences" Then
                tab1 = TabLevel1.SelectedIndex
                Call util_GeneralPreferencesSetup()
            ElseIf tab = "export" Then
                Call frm_ExportTabSetup()
            ElseIf tab = "config.xml" Then
                RichTextBoxTabConfigXML.Text = Utilities.LoadFullText(applicationPath & "\settings\config.xml")
            ElseIf tab = "moviecache" Then
                RichTextBoxTabMovieCache.Text = Utilities.LoadFullText(applicationPath & "\settings\moviecache.xml")
            ElseIf tab = "tvcache" Then
                RichTextBoxTabTVCache.Text = Utilities.LoadFullText(applicationPath & "\settings\tvcache.xml")
            ElseIf tab = "actorcache" Then
                RichTextBoxTabActorCache.Text = Utilities.LoadFullText(applicationPath & "\settings\actorcache.xml")
            ElseIf tab = "profile" Then
                RichTextBoxTabProfile.Text = Utilities.LoadFullText(applicationPath & "\settings\profile.xml")
            ElseIf tab = "regex" Then
                RichTextBoxTabRegex.Text = Utilities.LoadFullText(applicationPath & "\settings\regex.xml")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    '    Private Sub TvTreeview_AfterSelect(ByVal sender As Object, ByVal e As System.Windows.Forms.TreeViewEventArgs) Handles TvTreeview.AfterSelect

    '        'RenameTVShowsToolStripMenuItem.Enabled = False
    '        Button43.Enabled = True
    '        'RenameTVShowsToolStripMenuItem.Visible = False
    '        RebuildThisShowToolStripMenuItem.Enabled = False
    '        RebuildThisShowToolStripMenuItem.Visible = False
    '        MissingepisodesToolStripMenuItem.Enabled = False
    '        MissingepisodesToolStripMenuItem.Visible = False
    '        DisplayEpisodesByAiredDateToolStripMenuItem.Enabled = False
    '        DisplayEpisodesByAiredDateToolStripMenuItem.Visible = False
    '        SearchThisShowForNewEpisodesToolStripMenuItem.Enabled = False
    '        SearchThisShowForNewEpisodesToolStripMenuItem.Visible = False
    '        DownloadAvaileableMissingArtForShowToolStripMenuItem.Enabled = False
    '        DownloadAvaileableMissingArtForShowToolStripMenuItem.Visible = False

    '        ToolStripMenuItem1.Enabled = False
    '        ExpandSelectedShowToolStripMenuItem.Enabled = False
    '        CollapseSelectedShowToolStripMenuItem.Enabled = False
    '        ExpandAllToolStripMenuItem.Enabled = False
    '        CollapseAllToolStripMenuItem.Enabled = False
    '        ReloadItemToolStripMenuItem.Enabled = False
    '        OpenFolderToolStripMenuItem.Enabled = False
    '        If TvTreeview.SelectedNode.Name.ToLower.IndexOf("tvshow.nfo") <> -1 Then
    '            If TabControl3.TabPages(1).Text = "Screenshot" Then
    '                TabControl3.TabPages.RemoveAt(1)
    '            End If

    '            ToolStripMenuItem1.Enabled = True
    '            ExpandSelectedShowToolStripMenuItem.Enabled = True
    '            ExpandAllToolStripMenuItem.Enabled = True
    '            CollapseAllToolStripMenuItem.Enabled = True
    '            CollapseSelectedShowToolStripMenuItem.Enabled = True
    '            ReloadItemToolStripMenuItem.Enabled = True
    '            OpenFolderToolStripMenuItem.Enabled = True
    '            'load tvshow.nfo
    '            ListBox3.Items.Clear()
    '            TextBox26.Text = ""
    '            Dim todo As Boolean = False
    '            If workingTvShow Is Nothing Then todo = True

    '            If workingTvShow.path = TvTreeview.SelectedNode.Name Then
    '                Dim tempstring As String = "Search """ & workingTvShow.title & """ for new episodes"
    '                SearchThisShowForNewEpisodesToolStripMenuItem.Text = tempstring
    '                SearchThisShowForNewEpisodesToolStripMenuItem.Enabled = True
    '                SearchThisShowForNewEpisodesToolStripMenuItem.Visible = True
    '                tempstring = "Download missing art for """ & workingTvShow.title & """"
    '                DownloadAvaileableMissingArtForShowToolStripMenuItem.Text = tempstring
    '                DownloadAvaileableMissingArtForShowToolStripMenuItem.Enabled = True
    '                DownloadAvaileableMissingArtForShowToolStripMenuItem.Visible = True
    '                tempstring = "Display missing episodes for """ & workingTvShow.title & """"
    '                MissingepisodesToolStripMenuItem.Text = tempstring
    '                MissingepisodesToolStripMenuItem.Enabled = True
    '                MissingepisodesToolStripMenuItem.Visible = True
    '                DisplayEpisodesByAiredDateToolStripMenuItem.Enabled = True
    '                DisplayEpisodesByAiredDateToolStripMenuItem.Visible = True
    '                RebuildThisShowToolStripMenuItem.Enabled = True
    '                RebuildThisShowToolStripMenuItem.Visible = True
    '            End If
    '            If todo = False Then
    '                If workingTvShow.path <> TvTreeview.SelectedNode.Name Then todo = True
    '            End If
    '            If todo = True Then
    '                Call loadtvshow(TvTreeview.SelectedNode.Name)
    '                For tt = 0 To TvShows.Count
    '                    If TvShows(tt).fullpath = TvTreeview.SelectedNode.Name Then
    '                        TvShows(tt).imdbid = workingTvShow.imdbid
    '                        TvShows(tt).language = workingTvShow.language
    '                        TvShows(tt).locked = workingTvShow.locked
    '                        TvShows(tt).rating = workingTvShow.rating
    '                        TvShows(tt).sortorder = workingTvShow.sortorder
    '                        TvShows(tt).status = workingTvShow.status
    '                        TvShows(tt).title = workingTvShow.title
    '                        'basicTvList(tt).titleandyear = workingTvShow.title
    '                        TvShows(tt).tvdbid = workingTvShow.tvdbid
    '                        TvShows(tt).year = workingTvShow.year
    '                        TvShows(tt).episodeactorsource = workingTvShow.episodeactorsource
    '                        Exit For
    '                    End If
    '                Next
    '                If workingTvShow.locked = 1 Or workingTvShow.locked = 2 Then
    '                    For Each indnode As TreeNode In TvTreeview.Nodes
    '                        If indnode.Name.ToLower = workingTvShow.path.ToLower Then
    '                            indnode.StateImageIndex = 0
    '                            Exit For
    '                        End If
    '                    Next
    '                Else
    '                    For Each indnode As TreeNode In TvTreeview.Nodes
    '                        If indnode.Name.ToLower = workingTvShow.path.ToLower Then
    '                            indnode.StateImageIndex = -1
    '                            Exit For
    '                        End If
    '                    Next
    '                End If

    '                Dim tempstring As String = "Search """ & workingTvShow.title & """ for new episodes"
    '                SearchThisShowForNewEpisodesToolStripMenuItem.Text = tempstring
    '                SearchThisShowForNewEpisodesToolStripMenuItem.Enabled = True
    '                SearchThisShowForNewEpisodesToolStripMenuItem.Visible = True
    '                tempstring = "Download missing art for """ & workingTvShow.title & """"
    '                DownloadAvaileableMissingArtForShowToolStripMenuItem.Text = tempstring
    '                DownloadAvaileableMissingArtForShowToolStripMenuItem.Enabled = True
    '                DownloadAvaileableMissingArtForShowToolStripMenuItem.Visible = True
    '                tempstring = "Display missing episodes for """ & workingTvShow.title & """"
    '                MissingepisodesToolStripMenuItem.Text = tempstring
    '                MissingepisodesToolStripMenuItem.Enabled = True
    '                MissingepisodesToolStripMenuItem.Visible = True
    '                DisplayEpisodesByAiredDateToolStripMenuItem.Enabled = True
    '                DisplayEpisodesByAiredDateToolStripMenuItem.Visible = True
    '                RebuildThisShowToolStripMenuItem.Enabled = True
    '                RebuildThisShowToolStripMenuItem.Visible = True
    '                If workingTvShow.locked = 1 Then
    '                    Button60.Text = "Locked"
    '                    Button60.BackColor = Color.Red
    '                ElseIf workingTvShow.locked = 0 Then
    '                    Button60.Text = "Open"
    '                    Button60.BackColor = Color.LawnGreen
    '                ElseIf workingTvShow.locked = 2 Then
    '                    Button60.Text = "Un-Verified"
    '                    Button60.BackColor = Color.Red
    '                End If
    '                If workingTvShow.plot.IndexOf("Unable to find folder:") = 0 Then
    '                    TvTreeview.SelectedNode.ForeColor = Color.Red
    '                    TvTreeview.SelectedNode.Collapse()
    '                    Exit Sub
    '                ElseIf workingTvShow.plot.ToLower.IndexOf("xml error") <> -1 Then
    '                    TvTreeview.SelectedNode.ForeColor = Color.Red
    '                Else
    '                    If TvTreeview.SelectedNode.ForeColor = Color.Red Then
    '                        For Each Sh In TvShows
    '                            If Sh.fullpath = TvTreeview.SelectedNode.Name Then
    '                                Sh.status = "ok"
    '                                'Call savetvdata()
    '                                Exit For
    '                            End If
    '                        Next
    '                    End If
    '                    'TvTreeview.SelectedNode.ForeColor = Color.Black
    '                End If
    '            Else
    '                If workingTvShow.plot.IndexOf("Unable to find folder:") = 0 Then
    '                    TvTreeview.SelectedNode.ForeColor = Color.Red
    '                    TvTreeview.SelectedNode.Collapse()
    '                    Exit Sub
    '                Else
    '                    'TvTreeview.SelectedNode.ForeColor = Color.Black
    '                End If
    '                If workingTvShow.path <> Nothing Then
    '                    TextBox2.Text = workingTvShow.title
    '                    Try
    ''                        PictureBox5.ImageLocation = workingTvShow.path.Replace("tvshow.nfo", "folder.jpg")
    '                    PictureBox5.Load()
    ''                        PictureBox5.Image = Nothing
    ''                    End Try
    ''                    Try
    ''                        PictureBox4.ImageLocation = workingTvShow.path.Replace("tvshow.nfo", "fanart.jpg")
    ''                    Catch
    '                    PictureBox4.Load()
    ''                    End Try
    ''                End If
    '                Panel9.Visible = False
    '            End If
    '        ElseIf TvTreeview.SelectedNode.Name.ToLower.IndexOf(".nfo") <> -1 Then
    '            'loadepisode
    '            If TabControl3.TabPages(1).Text <> "Screenshot" Then
    '                If screenshotTab IsNot Nothing Then
    '                    TabControl3.TabPages.Insert(1, screenshotTab)
    '                    TabControl3.Refresh()
    '                End If
    '            End If
    ''            Panel9.Visible = True
    ''            If workingTvShow.plot.IndexOf("Unable to find folder:") = 0 Then
    ''                TvTreeview.SelectedNode.Parent.Parent.ForeColor = Color.Red
    '        RescrapeThisShowToolStripMenuItem.Text = "Rescrape This Epsiode"
    ''                ExpandSelectedShowToolStripMenuItem.Enabled = True
    ''                ExpandAllToolStripMenuItem.Enabled = True
    ''                CollapseAllToolStripMenuItem.Enabled = True
    '                CollapseSelectedShowToolStripMenuItem.Enabled = True
    '                ReloadItemToolStripMenuItem.Enabled = True
    '                Exit Sub
    '            Else
    '                'TvTreeview.SelectedNode.ForeColor = Color.Black
    '            End If
    '            Dim season As String = TvTreeview.SelectedNode.Parent.Text.Replace("Season ", "")
    '            Dim episode As String = TvTreeview.SelectedNode.Text.Substring(0, 3)
    '            episode = episode.TrimEnd(" ")
    '            If Not IsNumeric(episode) Then
    '                episode = TvTreeview.SelectedNode.Text.Substring(0, 2)
    '            End If
    '            If season.ToLower.IndexOf("specials") <> -1 Then season = "00"
    '            Call loadtvepisode(TvTreeview.SelectedNode.Name, season, episode)
    '            Try
    '                If workingEpisode(workingEpisodeIndex).plot.IndexOf("xml error") = -1 And workingEpisode(workingEpisodeIndex).plot.IndexOf("missing file") = -1 Then
    '                    ToolStripMenuItem1.Enabled = True
    '                    ExpandSelectedShowToolStripMenuItem.Enabled = True
    '                    ExpandAllToolStripMenuItem.Enabled = True
    '                    CollapseAllToolStripMenuItem.Enabled = True
    '                    CollapseSelectedShowToolStripMenuItem.Enabled = True
    '                    ReloadItemToolStripMenuItem.Enabled = True
    '                    OpenFolderToolStripMenuItem.Enabled = True
    '                    If TvTreeview.SelectedNode.ForeColor = Color.Red Then
    '                        For Each Sh In TvShows
    '                            If TvTreeview.SelectedNode.Name.IndexOf(Sh.fullpath.Substring(0, Sh.fullpath.Length - 10)) <> -1 Then
    '                                For Each ep In Sh.allepisodes

    '                                Next

    '                                'Call savetvdata()
    '                                Exit For
    '                            End If
    '                        Next
    '                        'TvTreeview.SelectedNode.ForeColor = Color.Black
    '                        Call reloadtvshow()
    '                    End If
    '                Else
    '                    ToolStripMenuItem1.Enabled = True
    '                    ExpandSelectedShowToolStripMenuItem.Enabled = True
    '                    ExpandAllToolStripMenuItem.Enabled = True
    '                    CollapseAllToolStripMenuItem.Enabled = True
    '                    CollapseSelectedShowToolStripMenuItem.Enabled = True
    '                    ReloadItemToolStripMenuItem.Enabled = True
    '                    OpenFolderToolStripMenuItem.Enabled = True
    '                    If TvTreeview.SelectedNode.ForeColor = Color.Black Then
    '                        For Each Sh In TvShows
    '                            If TvTreeview.SelectedNode.Name.ToLower.IndexOf(Sh.fullpath.ToLower.Substring(0, Sh.fullpath.Length - 10)) <> -1 Then
    '                                For Each ep In Sh.allepisodes
    '                                    If ep.VideoFilePath = TvTreeview.SelectedNode.Name Then
    '                                        'ep.status = "xml error"
    '                                        Exit For
    '                                    End If
    '                                Next
    '                                'Call savetvdata()
    '                                Exit For
    '                            End If
    '                        Next
    '                        'TvTreeview.SelectedNode.ForeColor = Color.Black
    '                        'Call reloadtvshow()
    '                        TvTreeview.SelectedNode.ForeColor = Color.Red
    '                    End If
    '                End If
    '            Catch ex As Exception
    '#If SilentErrorScream Then
    '                Throw ex
    '#End If
    '            End Try
    '            Else
    '                'seasons
    '            If TvTreeview.SelectedNode.ForeColor = Color.Blue And TvTreeview.SelectedNode.Level = 2 Then
    '                PictureBox5.Load()
    ''                Dim todo As Boolean = False
    ''                If workingTvShow.path <> TvTreeview.SelectedNode.Parent.Parent.Name Then todo = True
    ''                If todo = True Then
    ''                    Call loadtvshow(TvTreeview.SelectedNode.Parent.Parent.Name)
    ''                    For tt = 0 To TvShows.Count
    '                PictureBox4.Load()
    ''                            TvShows(tt).imdbid = workingTvShow.imdbid
    ''                            TvShows(tt).language = workingTvShow.language
    ''                            TvShows(tt).locked = workingTvShow.locked
    '                            TvShows(tt).rating = workingTvShow.rating
    '                            TvShows(tt).sortorder = workingTvShow.sortorder
    '                            TvShows(tt).status = workingTvShow.status
    '                            TvShows(tt).title = workingTvShow.title
    '                            'basicTvList(tt).titleandyear = workingTvShow.title
    '                            TvShows(tt).tvdbid = workingTvShow.tvdbid
    '                            TvShows(tt).year = workingTvShow.year
    '                            TvShows(tt).episodeactorsource = workingTvShow.episodeactorsource
    '                            Exit For
    '                        End If
    '                    Next
    '                End If
    '                Try
    '                    PictureBox5.ImageLocation = workingTvShow.path.Replace("tvshow.nfo", "folder.jpg")
    '                Catch
    '                    PictureBox5.Image = Nothing
    '                End Try
    '                Try
    '                    PictureBox4.ImageLocation = workingTvShow.path.Replace("tvshow.nfo", "fanart.jpg")
    '                Catch
    '                    PictureBox4.Image = Nothing
    '                End Try
    '                Panel9.Visible = True
    '                TextBox2.Text = """"
    '                TextBox20.Text = ""
    '                TextBox21.Text = ""
    '                TextBox22.Text = ""
    '                TextBox23.Text = ""
    '                TextBox24.Text = ""
    '                TextBox25.Text = ""
    '                ComboBox5.Items.Clear()
    '                ComboBox5.Text = ""

    '                TextBox17.Text = ""
    '                TextBox29.Text = ""
    '                TextBox29.Text = ""
    '                TextBox17.Text = ""
    '                For Each item In TvShows
    '                    Dim tempstring As String = TvTreeview.SelectedNode.Parent.Parent.Name
    '                    If tempstring = item.fullpath Then
    '                        For Each ep In item.missingepisodes
    '                            Dim seasonno As String = ""
    '                            Dim episodeno As String = ""
    '                            If ep.VideoFilePath = TvTreeview.SelectedNode.Name Then
    '                                If ep.Season.value.Length = 1 Then
    '                                    seasonno = "0" & ep.Season.value
    '                                Else
    '                                    episodeno = ep.Season.value
    '                                End If
    '                                If ep.episodeno.Length = 1 Then
    '                                    episodeno = "0" & ep.episodeno
    '                                Else
    '                                    episodeno = ep.episodeno
    '                                End If
    '                                TextBox2.Text = "S" & seasonno & "E" & episodeno & " - " & ep.title
    '                                TextBox21.Text = "This episode is missing from your collection"
    '                                TextBox24.Text = ep.playcount
    '                                Exit For
    '                            End If
    '                        Next
    '                    End If
    '                Next
    '            Else

    '                If TabControl3.TabPages(1).Text = "Screenshot" Then
    '                    TabControl3.TabPages.RemoveAt(1)
    '                End If
    '                Panel9.Visible = False
    '                ExpandSelectedShowToolStripMenuItem.Enabled = True
    '                ExpandAllToolStripMenuItem.Enabled = True
    '                CollapseAllToolStripMenuItem.Enabled = True
    '                CollapseSelectedShowToolStripMenuItem.Enabled = True
    '                RenameTVShowsToolStripMenuItem.Enabled = True
    '                RenameTVShowsToolStripMenuItem.Visible = True
    '                Try
    '                    If workingTvShow.path <> TvTreeview.SelectedNode.Parent.Name Then
    '                        loadtvshow(TvTreeview.SelectedNode.Parent.Name)
    '                    End If
    '                Catch ex As Exception
    '#If SilentErrorScream Then
    '                        Throw ex
    '#End If
    '                End Try
    '                If workingTvShow.plot IsNot Nothing AndAlso workingTvShow.plot.IndexOf("Unable to find folder:") = 0 Then
    '                    TvTreeview.SelectedNode.Parent.ForeColor = Color.Red
    '                    TvTreeview.SelectedNode.Parent.Collapse()
    '                    Exit Sub
    '                Else
    '                    'TvTreeview.SelectedNode.ForeColor = Color.Black
    '                End If
    '                PictureBox5.Image = Nothing
    '                PictureBox4.Image = Nothing
    '                'MsgBox("Season")
    '                Dim season As String = TvTreeview.SelectedNode.Text.Replace("Season ", "")
    '                Dim trueseason As String = season
    '                If season.IndexOf("0") = 0 Then
    '                    season = season.Substring(1, 1)
    '                End If


    '                Try
    '                    If trueseason <> "Specials" Then
    ''                        If IO.File.Exists(workingTvShow.path.ToLower.Replace("tvshow.nfo", "season" & trueseason.ToString & ".tbn")) Then
    ''                            Try
    '                            PictureBox5.ImageLocation = workingTvShow.path.ToLower.Replace("tvshow.nfo", "season" & trueseason.ToString & ".tbn")
    '                            PictureBox5.Load()
    ''                                PictureBox5.Image = Nothing
    ''                            End Try
    '                            MsgBox("Caught Exception")
    ''                            Try
    ''                                PictureBox5.ImageLocation = workingTvShow.path.Replace("tvshow.nfo", "folder.jpg")
    ''                            Catch
    ''                                PictureBox5.Image = Nothing
    '                            PictureBox5.Load()
    ''                        End If
    '                    Else
    '                        trueseason = "00"
    '                        If IO.File.Exists(workingTvShow.path.ToLower.Replace("tvshow.nfo", "season" & trueseason.ToString & ".tbn")) Then
    '                            Try
    '                                Dim fi As New FileInfo(workingTvShow.path.ToLower.Replace("tvshow.nfo", "season" & trueseason.ToString & ".tbn"))
    '                                Dim rename2 As String = workingTvShow.path.ToLower.Replace("tvshow.nfo", "season-specials.tbn")
    '                                fi.MoveTo(rename2)
    '                            Catch ex As Exception
    '#If SilentErrorScream Then
    '                                    Throw ex
    '#End If
    '                            End Try
    '                        End If
    '                        If IO.File.Exists(workingTvShow.path.ToLower.Replace("tvshow.nfo", "season-specials.tbn")) Then
    '                            Try
    '                                PictureBox5.ImageLocation = workingTvShow.path.Replace("tvshow.nfo", "season-specials.tbn")
    '                            Catch
    ''                                PictureBox5.Image = Nothing
    ''                            End Try
    '                            PictureBox5.Load()
    ''                            Try
    ''                                PictureBox5.ImageLocation = workingTvShow.path.Replace("tvshow.nfo", "folder.jpg")
    ''                            Catch
    ''                                PictureBox5.Image = Nothing
    ''                            End Try
    ''                        End If
    '                            PictureBox5.Load()
    ''                Catch ex As Exception
    ''#If SilentErrorScream Then
    '                        Throw ex
    '#End If
    '                End Try
    '                If workingTvShow.path <> Nothing Then
    '                    Try
    '                        PictureBox4.ImageLocation = workingTvShow.path.Replace("tvshow.nfo", "fanart.jpg")
    '                    Catch
    '                        PictureBox4.Image = Nothing
    '                    End Try
    '                End If
    ''            End If
    '                    PictureBox4.Load()
    '    tv_SplitContainerAutoPosition("TreeView Select") 'TreeView1_AfterSelect
    ''    End Sub

    '    Private Sub loadtvshow(ByVal path As String)
    '        Dim tempstring As String = ""
    '        workingTvShow.path = path
    '        ComboBox4.Items.Clear()
    '        ComboBox4.Text = ""
    '        For i = Panel13.Controls.Count - 1 To 0 Step -1
    '            Panel13.Controls.RemoveAt(i)
    '        Next
    '        tvdbposterlist.Clear()
    '        PictureBox6.Image = Nothing
    '        PictureBox4.Image = Nothing
    '        PictureBox5.Image = Nothing
    '        TextBox10.Text = ""
    '        TextBox11.Text = ""
    '        TextBox9.Text = ""
    '        TextBox12.Text = ""
    '        TextBox13.Text = ""
    '        TextBox14.Text = ""
    '        TextBox15.Text = ""
    '        TextBox16.Text = ""
    '        TextBox18.Text = ""
    '        TextBox19.Text = ""
    '        workingTvShow.path = ""
    '        ComboBox4.Items.Clear()
    '        ComboBox4.Text = ""
    '        Dim hg As New IO.DirectoryInfo(path.Replace(IO.Path.GetFileName(path), ""))
    '        If Not hg.Exists Then
    '            'workingTvShow.episodeactorsource = Nothing
    '            'workingTvShow.episodeguideurl = Nothing
    '            'workingTvShow.fanart = Nothing
    '            'workingTvShow.fanartpath = Nothing
    '            'workingTvShow.genre = Nothing
    '            'workingTvShow.imdbid = Nothing
    '            'workingTvShow.language = Nothing
    '            'workingTvShow.listactors.Clear()
    '            'workingTvShow.mpaa = Nothing
    '            'workingTvShow.plot = Nothing
    '            'workingTvShow.posterpath = Nothing
    '            'workingTvShow.posters.Clear()
    '            'workingTvShow.premiered = Nothing
    '            'workingTvShow.rating = Nothing
    '            'workingTvShow.runtime = Nothing
    '            'workingTvShow.sortorder = Nothing
    '            'workingTvShow.studio = Nothing
    '            'workingTvShow.tvdbid = Nothing
    '            'workingTvShow.year = Nothing
    '            'workingTvShow.locked = True
    '            TextBox2.Text = "Unable to find folder: " & path.Replace(IO.Path.GetFileName(path), "")
    '            'workingTvShow.title = TextBox2.Text                'we don't want to do this, if the drive that the TVShow is on has been turned off, then we dont want to
    '            '                                                   'overwrite the cache details. We can restart MC with the drive on & it will be back to normal. 
    '            TextBox10.Text = ""
    '            TextBox11.Text = ""
    '            TextBox9.Text = ""
    '            TextBox12.Text = ""
    '            TextBox13.Text = ""
    '            TextBox14.Text = ""
    '            TextBox15.Text = ""
    '            TextBox16.Text = ""
    '            TextBox18.Text = ""
    '            TextBox19.Text = "Unable to find folder: " & path.Replace(IO.Path.GetFileName(path), "")
    '            'workingTvShow.plot = TextBox19.Text
    '            'workingTvShow.path = path
    '            ComboBox4.Items.Clear()
    '            ComboBox4.Text = ""
    '            'workingTvShow.episodeactorsource = Nothing
    '            'workingTvShow.episodeguideurl = Nothing
    '            'workingTvShow.fanart = Nothing
    '            'workingTvShow.fanartpath = Nothing
    '            'workingTvShow.genre = Nothing
    '            'workingTvShow.imdbid = Nothing
    '            'workingTvShow.language = Nothing
    '            'workingTvShow.listactors.Clear()
    '            'workingTvShow.mpaa = Nothing
    '            'workingTvShow.posterpath = Nothing
    '            'workingTvShow.posters.Clear()
    '            'workingTvShow.premiered = Nothing
    '            'workingTvShow.rating = Nothing
    '            'workingTvShow.runtime = Nothing
    '            'workingTvShow.sortorder = Nothing
    '            'workingTvShow.studio = Nothing
    '            'workingTvShow.tvdbid = Nothing
    '            'workingTvShow.year = Nothing
    '            'PictureBox6.Image = Nothing
    '            'PictureBox4.Image = Nothing
    '            'PictureBox5.Image = Nothing
    '        Else
    '            workingTvShow = nfoFunction.loadfulltnshownfo(path)


    '            TextBox2.Text = ""
    '            TextBox10.Text = ""
    '            TextBox11.Text = ""
    '            TextBox9.Text = ""
    '            TextBox12.Text = ""
    '            TextBox13.Text = ""
    '            TextBox14.Text = ""
    '            TextBox15.Text = ""
    '            TextBox16.Text = ""
    '            TextBox18.Text = ""
    '            TextBox19.Text = ""
    '            workingTvShow.path = path
    '            ComboBox4.Items.Clear()
    '            ComboBox4.Text = ""

    '            PictureBox6.Image = Nothing
    '            PictureBox4.Image = Nothing
    '            PictureBox5.Image = Nothing

    '            If workingTvShow.title <> Nothing Then TextBox2.Text = workingTvShow.title
    '            If workingTvShow.premiered <> Nothing Then TextBox10.Text = workingTvShow.premiered
    '            If workingTvShow.genre <> Nothing Then TextBox11.Text = workingTvShow.genre
    '            If workingTvShow.tvdbid <> Nothing Then TextBox9.Text = workingTvShow.tvdbid
    '            If workingTvShow.imdbid <> Nothing Then TextBox12.Text = workingTvShow.imdbid
    '            If workingTvShow.rating <> Nothing Then TextBox13.Text = workingTvShow.rating
    '            If workingTvShow.mpaa <> Nothing Then TextBox14.Text = workingTvShow.mpaa
    '            If workingTvShow.runtime <> Nothing Then TextBox15.Text = workingTvShow.runtime
    '            If workingTvShow.studio <> Nothing Then TextBox16.Text = workingTvShow.studio
    '            If workingTvShow.plot <> Nothing Then TextBox19.Text = workingTvShow.plot
    '            If workingTvShow.locked = 1 Then
    '                Button60.Text = "Locked"
    '                Button60.BackColor = Color.Red
    '            ElseIf workingTvShow.locked = 0 Then
    '                Button60.Text = "Open"
    '                Button60.BackColor = Color.LawnGreen
    '            ElseIf workingTvShow.locked = -1 Then
    '                Button60.Text = "Open"
    '                Button60.BackColor = Color.LawnGreen
    '            ElseIf workingTvShow.locked = 2 Then
    '                Button60.Text = "Un-Verified"
    '                Button60.BackColor = Color.Red
    '            End If

    '            If workingTvShow.sortorder = Nothing Then workingTvShow.sortorder = Preferences.sortorder
    '            If workingTvShow.sortorder = "" Then workingTvShow.sortorder = Preferences.sortorder
    '            If workingTvShow.sortorder = "dvd" Then
    '                Button47.Text = "DVD"
    '            ElseIf workingTvShow.sortorder = "default" Then
    '                Button47.Text = "Default"
    '            End If
    '            '0	-	all from tvdb
    '            '1	-	all from imdb
    '            '2	-	tv imdb, eps tvdb
    '            '3	-	tv TVDB, eps IMDB
    '            If workingTvShow.episodeactorsource = Nothing Then
    '                tempstring = Preferences.tvdbactorscrape
    '                If tempstring = "0" Or tempstring = "2" Then
    '                    workingTvShow.episodeactorsource = "tvdb"
    '                Else
    '                    workingTvShow.episodeactorsource = "imdb"
    '                End If
    '            End If

    '            If workingTvShow.episodeactorsource = "" Then
    '                tempstring = Preferences.tvdbactorscrape
    '                If tempstring = "0" Or tempstring = "2" Then
    '                    workingTvShow.episodeactorsource = "tvdb"
    '                Else
    '                    workingTvShow.episodeactorsource = "imdb"
    '                End If
    '            End If

    '            If workingTvShow.episodeactorsource = "imdb" Then
    '                Button46.Text = "IMDB"
    '            ElseIf workingTvShow.episodeactorsource = "tvdb" Then
    '                Button46.Text = "TVDB"
    '            End If

    '            If workingTvShow.tvshowactorsource = Nothing Then
    '                tempstring = Preferences.tvdbactorscrape
    '                If tempstring = "0" Or tempstring = "3" Then
    '                    workingTvShow.tvshowactorsource = "tvdb"
    '                Else
    '                    workingTvShow.tvshowactorsource = "imdb"
    '                End If
    '            End If

    '            If workingTvShow.tvshowactorsource = "" Then
    '                tempstring = Preferences.tvdbactorscrape
    '                If tempstring = "0" Or tempstring = "3" Then
    '                    workingTvShow.tvshowactorsource = "tvdb"
    '                Else
    '                    workingTvShow.tvshowactorsource = "imdb"
    '                End If
    '            End If

    '            If workingTvShow.tvshowactorsource = "imdb" Then
    '                Button45.Text = "IMDB"
    '            ElseIf workingTvShow.tvshowactorsource = "tvdb" Then
    '                Button45.Text = "TVDB"
    '            End If

    '            For Each actor In workingTvShow.listactors
    '                ComboBox4.Items.Add(actor.actorname)
    '            Next

    '            If Not ComboBox4.Items.Count = 0 Then
    '                ComboBox4.SelectedIndex = 0
    '            End If

    '            If workingTvShow.path <> Nothing Then
    '                Try
    '                    If IO.File.Exists(workingTvShow.path.Replace("tvshow.nfo", "folder.jpg")) Then
    '                        Dim OriginalImage As New Bitmap(workingTvShow.path.Replace("tvshow.nfo", "folder.jpg"))
    '                        Dim Image2 As New Bitmap(OriginalImage)
    '                        OriginalImage.Dispose()
    '                        PictureBox5.Image = Image2
    '                    End If

    '                    If IO.File.Exists(workingTvShow.path.Replace("tvshow.nfo", "fanart.jpg")) Then
    '                        Dim OriginalImage2 As New Bitmap(workingTvShow.path.Replace("tvshow.nfo", "fanart.jpg"))
    '                        Dim Image22 As New Bitmap(OriginalImage2)
    '                        OriginalImage2.Dispose()
    '                        PictureBox4.Image = Image22
    '                    End If
    '                Catch ex As Exception
    '#If SilentErrorScream Then
    '                        Throw ex
    '#End If
    '                End Try
    '            End If






    '        End If
    '        Panel9.Visible = False
    'tv_SplitContainerAutoPosition("loadtvshow") 'loadtvshow()


    '    Private Sub loadtvepisode(ByVal path As String, ByVal season As String, ByVal episode As String)
    '        Dim WorkingTvShow As TvShow = tvCurrentlySelectedShow()
    '        Dim tempstring As String = ""
    '        TextBox2.Text = """"
    '        TextBox20.Text = ""
    '        TextBox21.Text = ""
    '        TextBox22.Text = ""
    '        TextBox23.Text = ""
    '        TextBox24.Text = ""
    '        TextBox25.Text = ""
    '        ComboBox5.Items.Clear()
    '        ComboBox5.Text = ""

    '        TextBox17.Text = ""
    '        TextBox29.Text = ""
    '        TextBox29.Text = IO.Path.GetFileName(path)
    '        TextBox17.Text = path.Replace(TextBox29.Text, "")
    '        If Not IO.File.Exists(TvTreeview.SelectedNode.Name) Then

    '            TextBox2.Text = "Unable to find episode: " & path
    '            TextBox21.Text = "Unable to find episode: " & path
    '            'workingEpisode(workingEpisodeIndex).aired = Nothing            'This section would throw an exception if the tv episode nfo file didn't exist
    '            'workingEpisode(workingEpisodeIndex).credits = Nothing
    '            'workingEpisode(workingEpisodeIndex).director = Nothing
    '            'workingEpisode(workingEpisodeIndex).episodeno = Nothing
    '            'workingEpisode(workingEpisodeIndex).VideoFilePath = TvTreeview.SelectedNode.Parent.Parent.Name
    '            'workingEpisode(workingEpisodeIndex).fanartpath = Nothing
    '            'workingEpisode(workingEpisodeIndex).filedetails = Nothing
    '            'workingEpisode(workingEpisodeIndex).ListActors.Clear()
    '            'workingEpisode(workingEpisodeIndex).playcount = Nothing
    '            'workingEpisode(workingEpisodeIndex).plot = TextBox21.Text
    '            'workingEpisode(workingEpisodeIndex).rating = Nothing
    '            'workingEpisode(workingEpisodeIndex).Season.value = Nothing
    '            'workingEpisode(workingEpisodeIndex).thumb = Nothing
    '            'workingEpisode(workingEpisodeIndex).title = TextBox2.Text
    '            Panel9.Visible = True
    '            TvTreeview.SelectedNode.BackColor = Color.Red
    '            Exit Sub
    '        Else
    '            TvTreeview.SelectedNode.BackColor = Color.Transparent   'i.e. back to normal
    '        End If

    '        'If workingTvShow.path <> TvTreeview.SelectedNode.Parent.Parent.Name Then
    '        '    loadtvshow(TvTreeview.SelectedNode.Parent.Parent.Name)
    '        'End If


    '        Dim trueseason As String = season
    '        Dim trueepisode As String = episode
    '        If season.IndexOf("0") = 0 Then
    '            season = season.Substring(1, 1)
    '        End If
    '        If episode.IndexOf("0") = 0 Then
    '            episode = episode.Substring(1, 1)
    '        End If

    '        'Try
    '        workingEpisodeIndex = -5
    '        nfoFunction.loadfullepisodenfo(path) ', season, episode)
    '        For f = 0 To workingEpisode.Count - 1
    '            If workingEpisode(f).Season.value = season And workingEpisode(f).episodeno = episode Then
    '                workingEpisodeIndex = f
    '                Exit For
    '            End If
    '        Next

    '        If workingEpisodeIndex = -5 And workingEpisode.Count > 0 Then
    '            workingEpisodeIndex = 0
    '            If workingEpisode(0).plot.IndexOf("xml error") <> -1 Then
    '                TextBox21.Text = "This episode could not be loaded due to an xml error"
    '                TextBox2.Text = workingEpisode(0).title
    '                TvTreeview.SelectedNode.ForeColor = Color.Red
    '                Exit Sub
    '            ElseIf workingEpisode(0).plot.IndexOf("missing file") <> -1 Then
    '                workingEpisodeIndex = 0
    '                TextBox21.Text = "Missing file: " & vbCrLf & path
    '                TextBox2.Text = workingEpisode(0).title
    '                TvTreeview.SelectedNode.ForeColor = Color.Red
    '                Exit Sub
    '            End If
    '            'Exit Sub
    '        End If

    '        If IsNumeric(workingEpisode(workingEpisodeIndex).playcount) Then
    '            If Convert.ToInt32(workingEpisode(workingEpisodeIndex).playcount) <= 0 Then
    '                Button48.Text = "UnWatched"
    '                Button48.BackColor = Color.Red
    '            ElseIf Convert.ToInt32(workingEpisode(workingEpisodeIndex).playcount) > 0 Then
    '                Button48.Text = "Watched"
    '                Button48.BackColor = Color.Green
    '            End If
    '        Else
    '            workingEpisode(workingEpisodeIndex).playcount = "0"
    '            Button48.Text = "UnWatched"
    '            Button48.BackColor = Color.Red
    '        End If
    '        TextBox20.Text = workingEpisode(workingEpisodeIndex).rating
    '        TextBox21.Text = workingEpisode(workingEpisodeIndex).plot
    '        TextBox22.Text = workingEpisode(workingEpisodeIndex).director
    '        TextBox23.Text = workingEpisode(workingEpisodeIndex).credits
    '        TextBox24.Text = workingEpisode(workingEpisodeIndex).aired

    '        For Each actor In workingEpisode(workingEpisodeIndex).ListActors
    '            If actor.actorname <> Nothing Then
    '                ComboBox5.Items.Add(actor.actorname)
    '            End If
    '        Next
    '        If ComboBox5.Items.Count = 0 Then
    '            For Each actor In workingTvShow.listactors
    '                If actor.actorname <> Nothing Then
    '                    ComboBox5.Items.Add(actor.actorname)
    '                End If
    '            Next
    '        Else
    '            ComboBox5.SelectedIndex = 0
    '        End If
    '        '        Try


    '        '        Catch ex As Exception
    '        '#If SilentErrorScream Then
    '        '            Throw ex
    '        '#End If
    '        '        End Try
    '        Try
    '            tempstring = workingEpisode(workingEpisodeIndex).VideoFilePath.Substring(0, workingEpisode(workingEpisodeIndex).VideoFilePath.Length - 3)
    '            tempstring = tempstring & "tbn"
    '            If IO.File.Exists(tempstring) Then
    '                Try
    '                    Dim bitmap2 As New Bitmap(tempstring)
    '                    Dim bitmap3 As New Bitmap(bitmap2)
    '                    bitmap2.Dispose()
    '                    PictureBox4.Image = bitmap3
    '                    PictureBox14.Image = bitmap3
    '                Catch ex As Exception
    '#If SilentErrorScream Then
    '                    Throw ex
    '#End If
    '                End Try
    '            Else
    '                Try
    '                    PictureBox14.Image = Nothing
    '                    PictureBox4.ImageLocation = workingTvShow.path.Replace("tvshow.nfo", "fanart.jpg")
    '                Catch ex As Exception
    '#If SilentErrorScream Then
    '                    Throw ex
    '#End If
    '                End Try
    '            End If
    '            Try
    '                If trueseason <> 0 Then
    '                    If IO.File.Exists(workingTvShow.path.ToLower.Replace("tvshow.nfo", "season" & trueseason.ToString & ".tbn")) Then
    '                        PictureBox5.ImageLocation = workingTvShow.path.Replace("tvshow.nfo", "season" & trueseason.ToString & ".tbn")
    '                    End If
    '                Else
    '                    If IO.File.Exists(workingTvShow.path.ToLower.Replace("tvshow.nfo", "season" & trueseason.ToString & ".tbn")) Then
    '                        Try
    '                            Dim fi As New FileInfo(workingTvShow.path.Replace("tvshow.nfo", "season00.tbn"))
    '                            Dim rename2 As String = workingTvShow.path.Replace("tvshow.nfo", "season-specials.tbn")
    '                            fi.MoveTo(rename2)
    '                        Catch ex As Exception
    '#If SilentErrorScream Then
    '                            Throw ex
    '#End If
    '                        End Try
    '                    End If

    '                    If IO.File.Exists(workingTvShow.path.ToLower.Replace("tvshow.nfo", "season-specials.tbn")) Then
    '                        PictureBox5.ImageLocation = workingTvShow.path.ToLower.Replace("tvshow.nfo", "season-specials.tbn")
    '                    End If

    '                End If
    '            Catch ex As Exception
    '#If SilentErrorScream Then
    '                Throw ex
    '#End If
    '            End Try
    '            If trueseason <> "Unknown" Then
    '                TextBox2.Text = "S" & trueseason & "E" & trueepisode & " - " & workingEpisode(workingEpisodeIndex).title
    '            Else
    '                TextBox2.Text = workingTvShow.title & ": " & IO.Path.GetFileName(workingEpisode(workingEpisodeIndex).title)
    '                TextBox21.Text = "This media file has been found by Media Companion" & vbCrLf & "Within this TV Shows Folder" & vbCrLf & vbCrLf & "Season and/or episode numbers could" & vbCrLf & "identified from the filename"
    '            End If
    '            Panel9.Visible = True
    '        Catch ex As Exception
    '#If SilentErrorScream Then
    '            Throw ex
    '#End If
    '        End Try
    '    End Sub
    'tempstring = workingTvShow.path.Replace("tvshow.nfo", "fanart.jpg")
    'If IO.File.Exists(tempstring) Then
    '    PictureBox4.ImageLocation = tempstring
    '    PictureBox4.Load()
    'Else
    '    PictureBox4.Image = Nothing                     'if there is no screenshot & no fanart then clear the picturebox & show nothing
    '    PictureBox4.Invalidate()
    '    'PictureBox4.ImageLocation = defaultScreenShot      ' other option is to show a picture of some sort indicating that there is no picture available
    'End If

    '    PictureBox5.Load()

    '    PictureBox5.Load()

    Private Sub ComboBox5_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles ComboBox5.SelectedIndexChanged
        Try
            Dim Episode As Media_Companion.TvEpisode
            If TvTreeview.SelectedNode IsNot Nothing Then
                If TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvEpisode Then
                    Episode = TvTreeview.SelectedNode.Tag
                Else
                    Exit Sub
                End If
            Else
                Exit Sub
            End If
            'tv_SplitContainerAutoPosition("loadtvepisode") 'loadtvepisode()

            PictureBox8.Image = Nothing
            PictureBox8.Visible = True
            For Each actor In Episode.ListActors
                If actor.actorname = ComboBox5.Text Then
                    TextBox25.Text = actor.actorrole
                    PictureBox8.ImageLocation = defaultActor

                    Dim temppath As String = Episode.VideoFilePath.Replace(IO.Path.GetFileName(Episode.VideoFilePath), "")
                    Dim tempname As String = actor.actorname.Replace(" ", "_") & ".tbn"
                    temppath = temppath & ".actors\" & tempname
                    If IO.File.Exists(temppath) Then
                        PictureBox8.ImageLocation = temppath
                        PictureBox8.Load()
                        Exit Sub
                    End If
                    If actor.actorthumb <> Nothing Then
                        If actor.actorthumb.IndexOf("http") <> -1 Or IO.File.Exists(actor.actorthumb) Then
                            PictureBox8.ImageLocation = actor.actorthumb
                            PictureBox8.Load()
                        Else
                            PictureBox8.ImageLocation = defaultActor
                            PictureBox8.Load()
                        End If
                    Else
                        PictureBox8.ImageLocation = defaultActor
                        PictureBox8.Load()
                    End If
                    PictureBox8.SizeMode = PictureBoxSizeMode.Zoom
                    PictureBox8.Load()
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub ComboBox4_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles ComboBox4.SelectedIndexChanged
        Try
            Call tv_ActorDisplay()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    '    THIS SUB IS A DUPLICATION OF AN EXISTING SUB, ODDLY IT HAS TV RELATED CODE WHEN REFERING TO A MOVIE REBUILD.
    '    Private Sub ToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RebuildMoviesToolStripMenuItem1.Click
    '        Dim WorkingTvShow As TvShow = tvCurrentlySelectedShow()
    '        Dim WorkingEpisode As TvEpisode = tvCurrentlySelectedEpisode()
    '        Dim tempstring As String = ""
    '        Try
    '            If TvTreeview.SelectedNode.Parent.Text = "" Then
    '                tempstring = WorkingTvShow.path
    '            ElseIf TvTreeview.SelectedNode.Parent.Text.ToLower.IndexOf("season") <> -1 Then
    '                tempstring = WorkingEpisode.VideoFilePath
    '            ElseIf TvTreeview.SelectedNode.Parent.Text.ToLower.IndexOf("specials") <> -1 Then
    '                tempstring = WorkingEpisode.VideoFilePath
    '            Else
    '                Exit Sub
    '            End If
    '        Catch
    '            tempstring = WorkingTvShow.path
    '        End Try
    '        Try
    '            Dim thePSI As New System.Diagnostics.ProcessStartInfo("notepad")
    '            thePSI.Arguments = """" & tempstring & """"
    '            System.Diagnostics.Process.Start(thePSI)
    '        Catch ex As Exception
    '#If SilentErrorScream Then
    '            Throw ex
    '#End If
    '        End Try
    '    End Sub

    Private Sub ExpandAllToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExpandAllToolStripMenuItem.Click
        Try
            Dim node As TreeNode
            For Each node In TvTreeview.Nodes
                node.ExpandAll()
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CollapseAllToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CollapseAllToolStripMenuItem.Click
        Try
            Dim node As TreeNode
            For Each node In TvTreeview.Nodes
                node.Collapse()
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ExpandSelectedShowToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExpandSelectedShowToolStripMenuItem.Click
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()

            WorkingTvShow.ShowNode.ExpandAll()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CollapseSelectedShowToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CollapseSelectedShowToolStripMenuItem.Click
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()

            WorkingTvShow.ShowNode.Collapse()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TvTreeview_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles TvTreeview.DoubleClick
        Try
            If TvTreeview.SelectedNode Is Nothing Then Exit Sub
            Dim tempstring2 As String
            Dim tempstring As String = ""
            Dim pathandfilename As String = TvTreeview.SelectedNode.Name
            If pathandfilename.IndexOf("tvshow.nfo") <> -1 Then Exit Sub
            If pathandfilename = "" Then Exit Sub
            If pathandfilename <> Nothing Then
                If pathandfilename.ToLower.Substring(pathandfilename.Length - 4, 4) = ".nfo" Then
                    pathandfilename = pathandfilename.Substring(0, pathandfilename.Length - 4)
                    'Dim extensions(100) As String
                    'Dim extensioncount As Integer
                    'extensions(1) = ".avi"
                    'extensions(2) = ".xvid"
                    'extensions(3) = ".divx"
                    'extensions(4) = ".img"
                    'extensions(5) = ".mpg"
                    'extensions(6) = ".mpeg"
                    'extensions(7) = ".mov"
                    'extensions(8) = ".rm"
                    'extensions(9) = ".3gp"
                    'extensions(10) = ".m4v"
                    'extensions(11) = ".wmv"
                    'extensions(12) = ".asf"
                    'extensions(13) = ".mp4"
                    'extensions(14) = ".mkv"
                    'extensions(15) = ".nrg"
                    'extensions(16) = ".iso"
                    'extensions(17) = ".rmvb"
                    'extensions(18) = ".ogm"
                    'extensions(19) = ".bin"
                    'extensions(20) = ".ts"
                    'extensions(21) = ".vob"
                    'extensions(22) = ".m2ts"
                    'extensions(23) = ".rar"
                    'extensions(24) = ".IFO"
                    'extensions(25) = ".dvr-ms"
                    'extensioncount = 25
                    Dim exists As Boolean = False
                    For Each ext In Utilities.VideoExtensions
                        If ext = "VIDEO_TS.IFO" Then Continue For
                        tempstring2 = pathandfilename & ext

                        If IO.File.Exists(tempstring2) Then
                            exists = True
                            tempstring = applicationPath & "\settings\temp.m3u"
                            Dim file As IO.StreamWriter = IO.File.CreateText(tempstring)
                            file.WriteLine(tempstring2)
                            file.Close()



                            If Preferences.videomode = 1 Then Call util_VideoMode1(tempstring)
                            If Preferences.videomode = 2 Then Call util_VideoMode2(tempstring)

                            If Preferences.videomode = 3 Then
                                Preferences.videomode = 2
                                Call util_VideoMode2(tempstring)
                            End If

                            If Preferences.videomode >= 4 Then
                                If Preferences.selectedvideoplayer <> Nothing Then
                                    Call util_VideoMode4(tempstring)
                                Else
                                    Call util_VideoMode1(tempstring)
                                End If
                            End If
                            Exit For
                        End If
                    Next
                    If exists = False Then
                        MsgBox("Could not find file: """ & pathandfilename & """ with any supported extension")
                    End If
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub



    '    If e.Button = MouseButtons.Right Then
    '        Dim n As TreeNode = Me.TvTreeview.GetNodeAt(e.X, e.Y)
    '        If Not n Is Nothing Then
    '            Me.TvTreeview.SelectedNode = n
    '        End If
    '    End If
    'End Sub

    Private Sub ReloadItemToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_ReloadFromCache.Click
        Try
            Call tv_ShowReload(True)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub tv_ShowReload(Optional ByVal force As Boolean = False)
        Dim Show As Media_Companion.TvShow = tv_ShowSelectedCurrently()
        Dim Season As Media_Companion.TvSeason = tv_SeasonSelectedCurrently()
        Dim Episode As Media_Companion.TvEpisode = ep_SelectedCurrently()
        'tv_PictureBoxRight.Load()
        'tv_PictureBoxLeft.Load()

        'This isn't required anymore


    End Sub

    Private Sub TabControl3_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles TabControl3.SelectedIndexChanged
        Try
            Dim Show As Media_Companion.TvShow = tv_ShowSelectedCurrently()
            Dim tab As String = TabControl3.SelectedTab.Text

            Dim WorkingEpisode As TvEpisode = ep_SelectedCurrently()
            If (tab <> "Main Browser" And tab <> "Folders" And tab <> "TV Preferences") AndAlso Show Is Nothing Then
                MsgBox("No TV Show is selected")
                Exit Sub
            End If

            Dim tempstring As String = ""
            If tab <> "Main Browser" And tab <> "Folders" And tab <> "TV Preferences" Then

                If Show.NfoFilePath = "" And tvFolders.Count = 0 Then
                    Me.TabControl3.SelectedIndex = tvCurrentTabIndex
                    MsgBox("There are no TV Shows in your list to work on" & vbCrLf & "Set the Preferences as you want them" & vbCrLf & "Using the Preferences Tab, then" & vbCrLf & "add your TV Folders using the Folders Tab" & vbCrLf & "Once the tvshow has been scraped then" & vbCrLf & "Use the tab, ""Search for new episodes""")
                    If tab <> "TV Preferences" Then Exit Sub
                ElseIf Show.NfoFilePath = "" And tvFolders.Count > 0 And tab <> "Search for new Episodes" And tab <> "TV Preferences" Then
                    Me.TabControl3.SelectedIndex = tvCurrentTabIndex
                    If Cache.TvCache.Shows.Count > 0 Then
                        MsgBox("No TV Show is selected")
                        Exit Sub
                    Else
                        MsgBox("There are no TV Shows in your list to work on")
                        Exit Sub
                    End If
                End If
            ElseIf tab = "TV Preferences" Then
                Call tv_PreferencesSetup()
                Exit Sub
            ElseIf tab = "Folders" Then
                tvCurrentTabIndex = TabControl3.SelectedIndex
                TabControl3.SelectedIndex = tvCurrentTabIndex
                Call tv_FoldersSetup()
            Else
                tvCurrentTabIndex = 0
                Exit Sub
            End If
            If tab = "TV Show Selector" Then
                If ListBox3.Items.Count = 0 Then
                    tvCurrentTabIndex = TabControl3.SelectedIndex
                    Call tv_ShowChangedRePopulate()
                End If
            ElseIf tab = "Search for new Episodes" Then
                TabControl3.SelectedIndex = tvCurrentTabIndex
                Call ep_Search()
            ElseIf tab = "Cancel Episode Search" Then
                TabControl3.SelectedIndex = tvCurrentTabIndex
                bckgroundscanepisodes.CancelAsync()
            ElseIf tab = "Main Browser" Then
                If TvTreeview.Nodes.Count = 0 Then TvTreeview.SelectedNode = TvTreeview.TopNode
                TvTreeview.Focus()

                tvCurrentTabIndex = 0
            ElseIf tab = "Posters" Then
                tvCurrentTabIndex = TabControl3.SelectedIndex
                Call tv_PosterSetup()
            ElseIf tab = "" Then

                If Not String.IsNullOrEmpty(Show.ImdbId.Value) Then
                    If Show.ImdbId.Value.IndexOf("tt") <> 0 Then
                        MsgBox("This shows IMDB ID cannot be recognised")
                    Else

                        If Preferences.externalbrowser = True Then
                            Me.TabControl3.SelectedIndex = tvCurrentTabIndex
                            tempstring = "http://www.imdb.com/title/" & Show.ImdbId.Value & "/"
                            Process.Start(tempstring)
                        Else
                            tvCurrentTabIndex = TabControl3.SelectedIndex
                            Dim url As String
                            url = "http://www.imdb.com/title/" & Show.ImdbId.Value & "/"
                            Try

                                WebBrowser3.Stop()
                                WebBrowser3.ScriptErrorsSuppressed = True

                                WebBrowser3.Navigate(url)
                                'WebBrowser3.Refresh()

                            Catch
                                WebBrowser3.Stop()
                                WebBrowser3.ScriptErrorsSuppressed = True

                                WebBrowser3.Navigate(url)
                                'WebBrowser3.Refresh()

                            End Try
                        End If
                    End If
                Else
                    MsgBox("No IMDB ID is available for this TV Show")
                    TabControl3.SelectedIndex = tvCurrentTabIndex
                End If

            ElseIf tab = "TVDB" Then
                Dim TvdbId As Integer = 0
                If Not String.IsNullOrEmpty(Show.TvdbId.Value) AndAlso Integer.TryParse(Show.TvdbId.Value, TvdbId) Then
                    If Preferences.externalbrowser = True Then
                        Me.TabControl3.SelectedIndex = tvCurrentTabIndex
                        tempstring = "http://thetvdb.com/?tab=series&id=" & TvdbId & "&lid=7"
                        Process.Start(tempstring)
                    Else
                        tvCurrentTabIndex = TabControl3.SelectedIndex
                        Dim url As String
                        url = "http://thetvdb.com/?tab=series&id=" & TvdbId & "&lid=7"
                        Try
                            'If WebBrowser4.Url.AbsoluteUri.ToLower.ToString <> url And WebBrowser4.Url.AbsoluteUri.ToLower.ToString.IndexOf("seriesid=" & TvdbId) = -1 Then
                            WebBrowser4.Stop()
                            WebBrowser4.ScriptErrorsSuppressed = True

                            WebBrowser4.Navigate(url)
                            'WebBrowser4.Refresh()
                            'End If
                        Catch
                            WebBrowser4.Stop()
                            WebBrowser4.ScriptErrorsSuppressed = True

                            WebBrowser4.Navigate(url)
                            'WebBrowser4.Refresh()

                        End Try
                    End If
                End If

            ElseIf tab.ToLower = "fanart" Then
                Call tv_Fanart_Load()

                tvCurrentTabIndex = TabControl3.SelectedIndex
            ElseIf tab.ToLower = "screenshot" Then
                tvCurrentTabIndex = TabControl3.SelectedIndex
                If IO.File.Exists(WorkingEpisode.VideoFilePath.Replace(IO.Path.GetExtension(WorkingEpisode.VideoFilePath), ".tbn")) Then
                    PictureBox14.ImageLocation = WorkingEpisode.VideoFilePath.Replace(IO.Path.GetExtension(WorkingEpisode.VideoFilePath), ".tbn")
                    PictureBox14.Load()
                Else
                    PictureBox14.Image = Nothing
                End If
                If TextBox35.Text = "" Then
                    TextBox35.Text = "10"
                End If
            ElseIf tab.ToLower = "folders" Then
                tvCurrentTabIndex = TabControl3.SelectedIndex
                Call tv_FoldersSetup()

            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try


    End Sub

    Public Sub util_LanguageListLoad()
        ListBox12.Items.Add("Working...")
        ListBox12.Invalidate()
        'Me.Refresh()
        Application.DoEvents()

        System.Threading.Thread.Sleep(4000)
        Dim XmlFile As String

        XmlFile = Utilities.DownloadTextFiles("http://thetvdb.com/api/6E82FED600783400/languages.xml")
        Dim LangList As New Tvdb.Languages()
        LangList.LoadXml(XmlFile)

        For Each Lang As Tvdb.Language In LangList.Languages
            languageList.Add(Lang)
        Next

        ListBox12.Items.Clear()

        For Each lan In languageList
            ListBox12.Items.Add(lan.Language.Value)
        Next
    End Sub


    Private Sub tv_ShowChangedRePopulate()
        Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
        'messbox = New message_box("Please wait,", "", "Getting possible TV Shows from TVDB")
        'System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
        'messbox.Show()
        'Me.Refresh()
        'messbox.Refresh()
        Try
            If languageList.Count = 0 Then
                util_LanguageListLoad()
            End If
            TextBox26.Text = Utilities.GetLastFolder(WorkingTvShow.NfoFilePath)
            PictureBox9.Image = Nothing
            If workingTvShow.language <> Nothing Then
                For Each language In languageList
                    If language.Abbreviation.Value = WorkingTvShow.Language.Value Then
                        ListBox1.SelectedItem = language.Language.Value
                        Exit For
                    End If
                Next
            Else
                ListBox1.SelectedItem = Preferences.TvdbLanguage
            End If
            Label55.Text = "Default Language for TV Shows is :- " & Preferences.TvdbLanguage
            Call tv_ShowListLoad()
            Try
                If Preferences.sortorder <> Nothing Then
                    If Preferences.sortorder = "dvd" Then
                        RadioButton14.Checked = True
                    Else
                        RadioButton15.Checked = True
                    End If
                Else
                    RadioButton15.Checked = True
                End If
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
                RadioButton15.Checked = True
            End Try

            Select Case Preferences.seasonall
                Case "none"
                    RadioButton18.Checked = True
                Case "poster"
                    RadioButton17.Checked = True
                Case "wide"
                    RadioButton16.Checked = True
            End Select
            'everything from TVDB
            'Everything from IMDB
            'TV show Nfo From IMDB, Episode nfo from TVDB
            'TV show Nfo From TVDB, Episode nfo from IMDB
            If Preferences.tvdbactorscrape = 0 Then
                RadioButton13.Checked = True
                RadioButton11.Checked = True
            End If
            If Preferences.tvdbactorscrape = 1 Then
                RadioButton12.Checked = True
                RadioButton10.Checked = True
            End If
            If Preferences.tvdbactorscrape = 2 Then
                RadioButton12.Checked = True
                RadioButton11.Checked = True
            End If
            If Preferences.tvdbactorscrape = 3 Then
                RadioButton13.Checked = True
                RadioButton10.Checked = True
            End If
            If Preferences.postertype = "poster" Then
                RadioButton9.Checked = True
            Else
                RadioButton8.Checked = True
            End If
            If Preferences.tvfanart = True Then
                CheckBox4.CheckState = CheckState.Checked
            Else
                CheckBox4.CheckState = CheckState.Unchecked
            End If

            If Preferences.tvposter = True Then
                CheckBox5.CheckState = CheckState.Checked
            Else
                CheckBox5.CheckState = CheckState.Unchecked
            End If

            If Preferences.downloadtvseasonthumbs = True Then
                CheckBox3.CheckState = CheckState.Checked
            Else
                CheckBox3.CheckState = CheckState.Unchecked
            End If
            If Preferences.tvshow_useXBMC_Scraper = True Then
                GroupBox2.Enabled = False
                GroupBox3.Enabled = False
                GroupBox5.Enabled = False
            Else
                GroupBox2.Enabled = True
                GroupBox3.Enabled = True
                GroupBox5.Enabled = True
            End If
        Catch ex As WebException
            MsgBox("There seems to be a problem with the tvdb website, please try again later")
            tvCurrentTabIndex = 0
            TabControl3.SelectedIndex = 0
        End Try

        'messbox.Close()
    End Sub



    Private Sub Button30_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button30.Click
        Try
            Call tv_ShowListLoad()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ListBox3_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles ListBox3.SelectedIndexChanged
        Try
            PictureBox9.Image = Nothing
            Try
                If listOfShows(ListBox3.SelectedIndex).showbanner <> Nothing Then
                    Try
                        PictureBox9.ImageLocation = listOfShows(ListBox3.SelectedIndex).showbanner
                        PictureBox9.Load()
                    Catch ex As Exception
                        PictureBox9.Image = Nothing
                    End Try
                Else
                    PictureBox9.Image = Nothing
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If

            End Try
            Call util_LanguageCheck()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub util_LanguageCheck()
        Try
            Dim languagecode As String = languageList(ListBox1.SelectedIndex).Abbreviation.Value
            Dim url As String = "http://thetvdb.com/api/6E82FED600783400/series/" & listOfShows(ListBox3.SelectedIndex).showid & "/" & languagecode & ".xml"
            Dim websource(10000)


            Dim urllinecount As Integer = 0
            Try
                Dim wrGETURL As WebRequest
                wrGETURL = WebRequest.Create(url)
                Dim myProxy As New WebProxy("myproxy", 80)
                myProxy.BypassProxyOnLocal = True
                Dim objStream As Stream
                objStream = wrGETURL.GetResponse.GetResponseStream()
                Dim objReader As New StreamReader(objStream)
                Dim sLine As String = ""
                urllinecount = 0

                Do While Not sLine Is Nothing
                    urllinecount += 1
                    sLine = objReader.ReadLine
                    If Not sLine Is Nothing Then
                        websource(urllinecount) = sLine
                    End If
                Loop
                objReader.Close()
                objStream.Close()
                urllinecount -= 1

            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
                'MsgBox(ex.ToString)
            End Try
            For f = 1 To urllinecount
                If websource(f).IndexOf("<Language>") <> -1 Then
                    websource(f) = websource(f).Replace("<Language>", "")
                    websource(f) = websource(f).Replace("</Language>", "")
                    websource(f) = websource(f).Replace("  ", "")
                    If websource(f).ToLower <> languagecode Then
                        Label55.BackColor = Color.Red
                        Label55.Text = ListBox3.SelectedItem.ToString & " is not available in " & ListBox1.SelectedItem.ToString & ", Please try another language"
                    Else
                        Label55.BackColor = Color.Transparent
                        Label55.Text = ListBox3.SelectedItem.ToString & " is available in " & ListBox1.SelectedItem.ToString
                    End If
                End If
            Next
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
    End Sub

    Private Sub ListBox1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ListBox1.SelectedIndexChanged
        Try
            Call util_LanguageCheck()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RebuildShowsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RebuildShowsToolStripMenuItem.Click
        'Try
        'Dim messbox As frmMessageBox = New frmMessageBox("Please wait,", "", "Rebuilding TV DB")
        'System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
        'messbox.Show()
        'Me.Refresh()
        'messbox.Refresh()

        Call tv_CacheRebuild()
        'messbox.Close()
        'Catch ex As Exception
        '    ExceptionHandler.LogError(ex)
        'End Try
    End Sub

    Private Sub ReloadShowCacheToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ReloadShowCacheToolStripMenuItem.Click
        Try
            If IO.File.Exists(workingProfile.tvcache) Then
                Call tv_CacheLoad(("New Function"))
            Else
                MsgBox("No Cache exists to load")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button29_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button29.Click
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
            If listOfShows.Count = 1 And listOfShows(0).showtitle = "TVDB Search Returned Zero Results" Then
                MsgBox("No show is selected")
                Exit Sub
            End If
            Dim tempstring As String = ""
            If Label55.Text.IndexOf("is not available in") <> -1 Then
                MsgBox("Please select a language that is available for this show")
                Exit Sub
            End If
            Dim messbox As frmMessageBox = New frmMessageBox("The Selected TV Show is being Scraped", "", "Please Wait")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            messbox.Refresh()
            Application.DoEvents()

            Dim LanCode As String
            If ListBox1.SelectedIndex = -1 Then
                LanCode = Preferences.TvdbLanguageCode
            Else
                LanCode = languageList(ListBox1.SelectedIndex).Abbreviation.Value
            End If
            If Preferences.tvshow_useXBMC_Scraper = True Then

                Dim TVShowNFOContent As String = XBMCScrape_TVShow_General_Info("metadata.tvdb.com", listOfShows(ListBox3.SelectedIndex).showid, LanCode, WorkingTvShow.NfoFilePath)
                If TVShowNFOContent <> "error" Then CreateMovieNfo(WorkingTvShow.NfoFilePath, TVShowNFOContent)
                Call tv_ShowLoad(WorkingTvShow)
                TvTreeview.Refresh()
                messbox.Close()
                TabControl3.SelectedIndex = 0

            Else
                'Dim tvdbstuff As New TVDB.tvdbscraper 'commented because of removed TVDB.dll
                Dim tvdbstuff As New TVDBScraper
                Dim tvshowxmlstring As String = tvdbstuff.GetShow(listOfShows(ListBox3.SelectedIndex).showid, LanCode)
                If tvshowxmlstring = "!!!Error!!!" Then
                    MsgBox("Error scraping show")
                    Exit Sub
                End If

                Dim posterurl As String
                Dim bannerurl As String
                Dim fanarturl As String

                WorkingTvShow.ListActors.Clear()

                WorkingTvShow.State = Media_Companion.ShowState.Open

                WorkingTvShow.Title.Value = listOfShows(ListBox3.SelectedIndex).showtitle
                WorkingTvShow.TvdbId.Value = listOfShows(ListBox3.SelectedIndex).showid
                WorkingTvShow.Language.Value = LanCode


                If RadioButton11.Checked = True Then
                    WorkingTvShow.EpisodeActorSource.Value = "tvdb"
                Else
                    WorkingTvShow.EpisodeActorSource.Value = "imdb"
                End If

                If RadioButton15.Checked = True Then
                    WorkingTvShow.SortOrder.Value = "default"
                Else
                    WorkingTvShow.SortOrder.Value = "dvd"
                End If

                Dim showlist As New XmlDocument
                showlist.LoadXml(tvshowxmlstring)
                Dim thisresult As XmlNode = Nothing
                For Each thisresult In showlist("fulltvshow")
                    Select Case thisresult.Name
                        Case "mpaa"
                            WorkingTvShow.Mpaa.Value = thisresult.InnerText
                        Case "premiered"
                            If thisresult.InnerText <> "" Then
                                WorkingTvShow.Premiered.Value = thisresult.InnerText
                                WorkingTvShow.Year.Value = thisresult.InnerText.Substring(0, 4)
                            Else
                                WorkingTvShow.Premiered.Value = "N/A"
                                WorkingTvShow.Year.Value = "N/A"
                            End If
                        Case "genre"
                            Dim newstring As String
                            newstring = thisresult.InnerText
                            newstring = newstring.TrimEnd("|")
                            newstring = newstring.TrimStart("|")
                            newstring = newstring.Replace("|", " / ")
                            WorkingTvShow.Genre.Value = newstring
                        Case "imdbid"
                            WorkingTvShow.ImdbId.Value = thisresult.InnerText
                        Case "studio"
                            WorkingTvShow.Studio.Value = thisresult.InnerText
                        Case "plot"
                            WorkingTvShow.Plot.Value = thisresult.InnerText
                        Case "rating"
                            WorkingTvShow.Rating.Value = thisresult.InnerText
                        Case "runtime"
                            WorkingTvShow.Runtime.Value = thisresult.InnerText
                        Case "banner"
                            bannerurl = thisresult.InnerText
                        Case "fanart"
                            fanarturl = thisresult.InnerText
                        Case "poster"
                            posterurl = thisresult.InnerText
                        Case "episodeguideurl"
                            WorkingTvShow.EpisodeGuideUrl.Value = thisresult.InnerText

                        Case "actor"
                            If RadioButton13.Checked = True Or WorkingTvShow.ImdbId = Nothing Then
                                Dim id As String = ""
                                Dim acts As New str_MovieActors(SetDefaults)
                                Dim results As XmlNode = Nothing
                                Dim lan As New str_PossibleShowList(SetDefaults)
                                For Each results In thisresult.ChildNodes
                                    Select Case results.Name
                                        Case "name"
                                            acts.actorname = results.InnerText
                                        Case "role"
                                            acts.actorrole = results.InnerText
                                        Case "thumb"
                                            acts.actorthumb = results.InnerText
                                        Case "actorid"
                                            id = results.InnerText
                                    End Select
                                Next

                                If acts.actorthumb <> Nothing Then
                                    If Preferences.actorsave = True And id <> "" Then
                                        Dim workingpath As String = ""
                                        Dim networkpath As String = Preferences.actorsavepath
                                        Try
                                            tempstring = networkpath & "\" & id.Substring(id.Length - 2, 2)
                                            Dim hg As New IO.DirectoryInfo(tempstring)
                                            If Not hg.Exists Then
                                                IO.Directory.CreateDirectory(tempstring)
                                            End If
                                            workingpath = networkpath & "\" & id.Substring(id.Length - 2, 2) & "\tv" & id & ".jpg"
                                            If Not IO.File.Exists(workingpath) Then
                                                Utilities.DownloadFile(acts.actorthumb, workingpath)
                                                'Dim buffer(4000000) As Byte
                                                'Dim size As Integer = 0
                                                'Dim bytesRead As Integer = 0
                                                'Dim thumburl As String = acts.actorthumb
                                                'Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                                'Dim res As HttpWebResponse = req.GetResponse()
                                                'Dim contents As Stream = res.GetResponseStream()
                                                'Dim bytesToRead As Integer = CInt(buffer.Length)
                                                'While bytesToRead > 0
                                                '    size = contents.Read(buffer, bytesRead, bytesToRead)
                                                '    If size = 0 Then Exit While
                                                '    bytesToRead -= size
                                                '    bytesRead += size
                                                'End While

                                                'Dim fstrm As New FileStream(workingpath, FileMode.OpenOrCreate, FileAccess.Write)
                                                'fstrm.Write(buffer, 0, bytesRead)
                                                'contents.Close()
                                                'fstrm.Close()
                                            End If
                                            acts.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, id.Substring(id.Length - 2, 2))
                                            If Preferences.actornetworkpath.IndexOf("/") <> -1 Then
                                                acts.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, id.Substring(id.Length - 2, 2) & "/tv" & id & ".jpg")
                                            Else
                                                acts.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, id.Substring(id.Length - 2, 2) & "\tv" & id & ".jpg")
                                            End If

                                        Catch ex As Exception
#If SilentErrorScream Then
                                        Throw ex
#End If
                                        End Try
                                    End If
                                End If
                                Dim exists As Boolean = False
                                For Each actors In WorkingTvShow.ListActors
                                    If actors.actorname = acts.actorname And actors.actorrole = acts.actorrole Then
                                        exists = True
                                    End If
                                Next
                                If exists = False Then
                                    WorkingTvShow.ListActors.Add(acts)
                                End If
                            End If
                    End Select
                Next

                If RadioButton12.Checked = True And WorkingTvShow.ImdbId <> Nothing Then
                    '                    Dim imdbscraper As New imdb.Classimdbscraper
                    Dim imdbscraper As New Classimdb
                    Dim actorlist As String
                    Dim actorstring As New XmlDocument
                    actorlist = imdbscraper.getimdbactors(Preferences.imdbmirror, WorkingTvShow.ImdbId.Value)
                    Try
                        actorstring.LoadXml(actorlist)
                        thisresult = Nothing
                        For Each thisresult In actorstring("actorlist")
                            Select Case thisresult.Name
                                Case "actor"
                                    Dim newactor As New str_MovieActors(SetDefaults)
                                    Dim detail As XmlNode = Nothing
                                    For Each detail In thisresult.ChildNodes
                                        Select Case detail.Name
                                            Case "name"
                                                newactor.actorname = detail.InnerText
                                            Case "role"
                                                newactor.actorrole = detail.InnerText
                                            Case "thumb"
                                                newactor.actorthumb = detail.InnerText
                                            Case "actorid"
                                                If newactor.actorthumb <> Nothing Then
                                                    If Preferences.actorsave = True And detail.InnerText <> "" Then
                                                        Dim workingpath As String = ""
                                                        Dim networkpath As String = Preferences.actorsavepath
                                                        Try
                                                            tempstring = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2)
                                                            Dim hg As New IO.DirectoryInfo(tempstring)
                                                            If Not hg.Exists Then
                                                                IO.Directory.CreateDirectory(tempstring)
                                                            End If
                                                            workingpath = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                            If Not IO.File.Exists(workingpath) Then
                                                                Utilities.DownloadFile(newactor.actorthumb, workingpath)
                                                                'Dim buffer(4000000) As Byte
                                                                'Dim size As Integer = 0
                                                                'Dim bytesRead As Integer = 0
                                                                'Dim thumburl As String = newactor.actorthumb
                                                                'Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                                                'Dim res As HttpWebResponse = req.GetResponse()
                                                                'Dim contents As Stream = res.GetResponseStream()
                                                                'Dim bytesToRead As Integer = CInt(buffer.Length)
                                                                'While bytesToRead > 0
                                                                '    size = contents.Read(buffer, bytesRead, bytesToRead)
                                                                '    If size = 0 Then Exit While
                                                                '    bytesToRead -= size
                                                                '    bytesRead += size
                                                                'End While

                                                                'Dim fstrm As New FileStream(workingpath, FileMode.OpenOrCreate, FileAccess.Write)
                                                                'fstrm.Write(buffer, 0, bytesRead)
                                                                'contents.Close()
                                                                'fstrm.Close()
                                                            End If
                                                            newactor.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, detail.InnerText.Substring(detail.InnerText.Length - 2, 2))
                                                            If Preferences.actornetworkpath.IndexOf("/") <> -1 Then
                                                                newactor.actorthumb = Preferences.actornetworkpath & "/" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "/" & detail.InnerText & ".jpg"
                                                            Else
                                                                newactor.actorthumb = Preferences.actornetworkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                            End If
                                                        Catch ex As Exception
#If SilentErrorScream Then
                                                        Throw ex
#End If
                                                        End Try
                                                    End If
                                                End If
                                        End Select
                                    Next
                                    WorkingTvShow.ListActors.Add(newactor)
                            End Select
                        Next
                        scraperLog = scraperLog & "Actors scraped OK"
                        While WorkingTvShow.ListActors.Count > Preferences.maxactors
                            WorkingTvShow.ListActors.RemoveAt(WorkingTvShow.ListActors.Count - 1)
                        End While
                    Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If

                    End Try
                End If

                Dim artlist As New List(Of TvBanners)
                Dim artdone As Boolean = False
                If CheckBox3.CheckState = CheckState.Checked Or CheckBox4.CheckState = CheckState.Checked Or CheckBox5.CheckState = CheckState.Checked Then
                    Dim thumblist As String = tvdbstuff.GetPosterList(listOfShows(ListBox3.SelectedIndex).showid)
                    showlist.LoadXml(thumblist)
                    artdone = True
                    thisresult = Nothing
                    'CheckBox3 = seasons
                    'CheckBox4 = fanart
                    'CheckBox5 = poster
                    For Each thisresult In showlist("banners")
                        Select Case thisresult.Name
                            Case "banner"
                                Dim individualposter As New TvBanners
                                For Each results In thisresult.ChildNodes
                                    Select Case results.Name
                                        Case "url"
                                            individualposter.Url = results.InnerText
                                        Case "bannertype"
                                            individualposter.BannerType = results.InnerText
                                        Case "resolution"
                                            individualposter.Resolution = results.InnerText
                                        Case "language"
                                            individualposter.Language = results.InnerText
                                        Case "season"
                                            individualposter.Season = results.InnerText
                                    End Select
                                Next
                                artlist.Add(individualposter)
                        End Select
                    Next
                End If

                If CheckBox3.CheckState = CheckState.Checked Then
                    For f = 0 To 1000
                        Dim seasonposter As String = ""
                        If CheckBox7.CheckState = CheckState.Checked Then
                            For Each Image In artlist
                                If Image.Season = f.ToString And Image.Language = languageList(ListBox1.SelectedIndex).Abbreviation.Value Then
                                    seasonposter = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If seasonposter = "" Then
                            For Each Image In artlist
                                If Image.Season = f.ToString And Image.Language = "en" Then
                                    seasonposter = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If seasonposter = "" Then
                            For Each Image In artlist
                                If Image.Season = f.ToString Then
                                    seasonposter = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If seasonposter <> "" Then
                            If f < 10 Then
                                tempstring = "0" & f.ToString
                            Else
                                tempstring = f.ToString
                            End If

                            Dim seasonpath As String = WorkingTvShow.NfoFilePath.Replace(IO.Path.GetFileName(WorkingTvShow.NfoFilePath), "season" & tempstring & ".tbn")
                            If tempstring = "00" Then
                                seasonpath = WorkingTvShow.NfoFilePath.Replace(IO.Path.GetFileName(WorkingTvShow.NfoFilePath), "season-specials.tbn")
                            End If
                            If Not IO.File.Exists(seasonpath) Or CheckBox6.CheckState = CheckState.Checked Then
                                Utilities.DownloadFile(seasonposter, seasonpath)
'                                Try
'                                    Dim buffer(4000000) As Byte
'                                    Dim size As Integer = 0
'                                    Dim bytesRead As Integer = 0
'                                    Dim thumburl As String = seasonposter
'                                    Dim req As HttpWebRequest = WebRequest.Create(thumburl)
'                                    Dim res As HttpWebResponse = req.GetResponse()
'                                    Dim contents As Stream = res.GetResponseStream()
'                                    Dim bytesToRead As Integer = CInt(buffer.Length)
'                                    While bytesToRead > 0
'                                        size = contents.Read(buffer, bytesRead, bytesToRead)
'                                        If size = 0 Then Exit While
'                                        bytesToRead -= size
'                                        bytesRead += size
'                                    End While
'                                    Dim fstrm As New FileStream(seasonpath, FileMode.OpenOrCreate, FileAccess.Write)
'                                    fstrm.Write(buffer, 0, bytesRead)
'                                    contents.Close()
'                                    fstrm.Close()
'                                Catch ex As Exception
'#If SilentErrorScream Then
'                                Throw ex
'#End If
'                                End Try
                            End If
                        End If
                    Next
                End If



                If CheckBox4.CheckState = CheckState.Checked Then
                    Dim fanartposter As String = String.Empty
                    If CheckBox7.CheckState = CheckState.Checked Then
                        For Each Image In artlist
                            If Image.Language = languageList(ListBox1.SelectedIndex).Abbreviation.Value And Image.BannerType = "fanart" Then
                                fanartposter = Image.Url
                                Exit For
                            End If
                        Next
                    End If
                    If fanartposter = "" Then
                        For Each Image In artlist
                            If Image.Language = "en" And Image.BannerType = "fanart" Then
                                fanartposter = Image.Url
                                Exit For
                            End If
                        Next
                    End If
                    If fanartposter = "" Then
                        For Each Image In artlist
                            If Image.BannerType = "fanart" Then
                                fanartposter = Image.Url
                                Exit For
                            End If
                        Next
                    End If
                    If fanartposter <> "" Then

                        Dim seasonpath As String = WorkingTvShow.NfoFilePath.Replace(IO.Path.GetFileName(WorkingTvShow.NfoFilePath), "fanart.jpg")
                        If Not IO.File.Exists(seasonpath) Or CheckBox6.CheckState = CheckState.Checked Then
                            Try
                                'Utilities.DownloadFile(fanartposter, bmp)
                                Dim buffer(4000000) As Byte
                                Dim size As Integer = 0
                                Dim bytesRead As Integer = 0

                                Dim thumburl As String = fanartposter
                                Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                Dim res As HttpWebResponse = req.GetResponse()
                                Dim contents As Stream = res.GetResponseStream()
                                Dim bytesToRead As Integer = CInt(buffer.Length)
                                Dim bmp As New Bitmap(contents)



                                While bytesToRead > 0
                                    size = contents.Read(buffer, bytesRead, bytesToRead)
                                    If size = 0 Then Exit While
                                    bytesToRead -= size
                                    bytesRead += size
                                End While


                                Try
                                    If Preferences.resizefanart = 1 Then
                                        bmp.Save(seasonpath, Imaging.ImageFormat.Jpeg)
                                        scraperLog = scraperLog & "Fanart not resized" & vbCrLf
                                    ElseIf Preferences.resizefanart = 2 Then
                                        If bmp.Width > 1280 Or bmp.Height > 720 Then
                                            Dim bm_source As New Bitmap(bmp)
                                            Dim bm_dest As New Bitmap(1280, 720)
                                            Dim gr As Graphics = Graphics.FromImage(bm_dest)
                                            gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                                            gr.DrawImage(bm_source, 0, 0, 1280 - 1, 720 - 1)
                                            bm_dest.Save(seasonpath, Imaging.ImageFormat.Jpeg)
                                            scraperLog = scraperLog & "Farart Resized to 1280x720" & vbCrLf
                                        Else
                                            scraperLog = scraperLog & "Fanart not resized, already =< required size" & vbCrLf
                                            bmp.Save(seasonpath, Imaging.ImageFormat.Jpeg)
                                        End If
                                    ElseIf Preferences.resizefanart = 3 Then
                                        If bmp.Width > 960 Or bmp.Height > 540 Then
                                            Dim bm_source As New Bitmap(bmp)
                                            Dim bm_dest As New Bitmap(960, 540)
                                            Dim gr As Graphics = Graphics.FromImage(bm_dest)
                                            gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                                            gr.DrawImage(bm_source, 0, 0, 960 - 1, 540 - 1)
                                            bm_dest.Save(seasonpath, Imaging.ImageFormat.Jpeg)
                                            scraperLog = scraperLog & "Farart Resized to 960x540" & vbCrLf
                                        Else
                                            scraperLog = scraperLog & "Fanart not resized, already =< required size" & vbCrLf
                                            bmp.Save(seasonpath, Imaging.ImageFormat.Jpeg)
                                        End If

                                    End If
                                Catch
                                End Try
                            Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                                'MsgBox("Error Downloading season poster from TVDB")
                            End Try
                        End If
                    End If
                End If

                Dim seasonallpath As String = ""
                If CheckBox5.CheckState = CheckState.Checked Then
                    Dim posterurlpath As String = ""
                    If RadioButton9.Checked = True Then 'poster
                        If CheckBox7.CheckState = CheckState.Checked Then
                            For Each Image In artlist
                                If Image.Language = languageList(ListBox1.SelectedIndex).Abbreviation.Value And Image.BannerType = "poster" Then
                                    posterurl = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If posterurlpath = "" Then
                            For Each Image In artlist
                                If Image.Language = "en" And Image.BannerType = "poster" Then
                                    posterurlpath = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If posterurlpath = "" Then
                            For Each Image In artlist
                                If Image.BannerType = "poster" Then
                                    posterurlpath = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If posterurlpath <> "" And RadioButton17.Checked = True Then
                            seasonallpath = posterurlpath
                        End If
                    ElseIf RadioButton9.Checked = False Then 'banner
                        If CheckBox7.CheckState = CheckState.Checked Then
                            For Each Image In artlist
                                If Image.Language = languageList(ListBox1.SelectedIndex).Abbreviation.Value And Image.BannerType = "series" And Image.Season = Nothing Then
                                    posterurl = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If posterurlpath = "" Then
                            For Each Image In artlist
                                If Image.Language = "en" And Image.BannerType = "series" And Image.Season = Nothing Then
                                    posterurlpath = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If posterurlpath = "" Then
                            For Each Image In artlist
                                If Image.BannerType = "series" And Image.Season = Nothing Then
                                    posterurlpath = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If posterurlpath <> "" And RadioButton16.Checked = True Then
                            seasonallpath = posterurlpath
                        End If
                    End If

                    If posterurlpath <> "" Then

                        Dim seasonpath As String = WorkingTvShow.NfoFilePath.Replace(IO.Path.GetFileName(WorkingTvShow.NfoFilePath), "folder.jpg")
                        If Not IO.File.Exists(seasonpath) Or CheckBox6.CheckState = CheckState.Checked Then
                            Utilities.DownloadFile(posterurlpath, seasonpath)
'                            Try
'                                Dim buffer(4000000) As Byte
'                                Dim size As Integer = 0
'                                Dim bytesRead As Integer = 0
'                                Dim thumburl As String = posterurlpath
'                                Dim req As HttpWebRequest = WebRequest.Create(thumburl)
'                                Dim res As HttpWebResponse = req.GetResponse()
'                                Dim contents As Stream = res.GetResponseStream()
'                                Dim bytesToRead As Integer = CInt(buffer.Length)
'                                While bytesToRead > 0
'                                    size = contents.Read(buffer, bytesRead, bytesToRead)
'                                    If size = 0 Then Exit While
'                                    bytesToRead -= size
'                                    bytesRead += size
'                                End While
'                                Dim fstrm As New FileStream(seasonpath, FileMode.OpenOrCreate, FileAccess.Write)
'                                fstrm.Write(buffer, 0, bytesRead)
'                                contents.Close()
'                                fstrm.Close()
'                            Catch ex As Exception
'#If SilentErrorScream Then
'                            Throw ex
'#End If
'                            End Try
                        End If
                    End If
                End If









                If RadioButton18.Checked = False And seasonallpath = "" Then

                    If RadioButton17.Checked = True Then 'poster
                        If CheckBox7.CheckState = CheckState.Checked Then
                            For Each Image In artlist
                                If Image.Language = languageList(ListBox1.SelectedIndex).Abbreviation.Value And Image.BannerType = "poster" Then
                                    seasonallpath = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If seasonallpath = "" Then
                            For Each Image In artlist
                                If Image.Language = "en" And Image.BannerType = "poster" Then
                                    seasonallpath = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If seasonallpath = "" Then
                            For Each Image In artlist
                                If Image.BannerType = "poster" Then
                                    seasonallpath = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                    ElseIf RadioButton16.Checked = True Then 'banner
                        If CheckBox7.CheckState = CheckState.Checked Then
                            For Each Image In artlist
                                If Image.Language = languageList(ListBox1.SelectedIndex).Abbreviation.Value And Image.BannerType = "series" And Image.Season = Nothing Then
                                    seasonallpath = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If seasonallpath = "" Then
                            For Each Image In artlist
                                If Image.Language = "en" And Image.BannerType = "series" And Image.Season = Nothing Then
                                    seasonallpath = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If seasonallpath = "" Then
                            For Each Image In artlist
                                If Image.BannerType = "series" And Image.Season = Nothing Then
                                    seasonallpath = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                    End If

                    If seasonallpath <> "" Then

                        Dim seasonpath As String = WorkingTvShow.NfoFilePath.Replace(IO.Path.GetFileName(WorkingTvShow.NfoFilePath), "season-all.tbn")
                        If Not IO.File.Exists(seasonpath) Or CheckBox6.CheckState = CheckState.Checked Then
                            Utilities.DownloadFile(seasonallpath, seasonpath)
'                            Try
'                                Dim buffer(4000000) As Byte
'                                Dim size As Integer = 0
'                                Dim bytesRead As Integer = 0
'                                Dim thumburl As String = seasonallpath
'                                Dim req As HttpWebRequest = WebRequest.Create(thumburl)
'                                Dim res As HttpWebResponse = req.GetResponse()
'                                Dim contents As Stream = res.GetResponseStream()
'                                Dim bytesToRead As Integer = CInt(buffer.Length)
'                                While bytesToRead > 0
'                                    size = contents.Read(buffer, bytesRead, bytesToRead)
'                                    If size = 0 Then Exit While
'                                    bytesToRead -= size
'                                    bytesRead += size
'                                End While
'                                Dim fstrm As New FileStream(seasonpath, FileMode.OpenOrCreate, FileAccess.Write)
'                                fstrm.Write(buffer, 0, bytesRead)
'                                contents.Close()
'                                fstrm.Close()
'                            Catch ex As Exception
'#If SilentErrorScream Then
'                            Throw ex
'#End If
'                            End Try
                        End If
                    End If
                ElseIf RadioButton18.Checked = False And seasonallpath <> "" Then
                    Dim seasonpath As String = WorkingTvShow.NfoFilePath.Replace(IO.Path.GetFileName(WorkingTvShow.NfoFilePath), "season-all.tbn")
                    If Not IO.File.Exists(seasonpath) Or CheckBox6.CheckState = CheckState.Checked Then
                        Utilities.DownloadFile(seasonallpath, seasonpath)
'                        Try
'                            Dim buffer(4000000) As Byte
'                            Dim size As Integer = 0
'                            Dim bytesRead As Integer = 0
'                            Dim thumburl As String = seasonallpath
'                            Dim req As HttpWebRequest = WebRequest.Create(thumburl)
'                            Dim res As HttpWebResponse = req.GetResponse()
'                            Dim contents As Stream = res.GetResponseStream()
'                            Dim bytesToRead As Integer = CInt(buffer.Length)
'                            While bytesToRead > 0
'                                size = contents.Read(buffer, bytesRead, bytesToRead)
'                                If size = 0 Then Exit While
'                                bytesToRead -= size
'                                bytesRead += size
'                            End While
'                            Dim fstrm As New FileStream(seasonpath, FileMode.OpenOrCreate, FileAccess.Write)
'                            fstrm.Write(buffer, 0, bytesRead)
'                            contents.Close()
'                            fstrm.Close()
'                        Catch ex As Exception
'#If SilentErrorScream Then
'                        Throw ex
'#End If
'                        End Try
                    End If
                End If
















                If artdone = False Then
                    Dim thumblist As String = tvdbstuff.GetPosterList(listOfShows(ListBox3.SelectedIndex).showid)
                    showlist.LoadXml(thumblist)
                    artdone = True
                    thisresult = Nothing
                    'CheckBox3 = seasons
                    'CheckBox4 = fanart
                    'CheckBox5 = poster
                    For Each thisresult In showlist("banners")
                        Select Case thisresult.Name
                            Case "banner"
                                Dim individualposter As New TvBanners
                                For Each results In thisresult.ChildNodes
                                    Select Case results.Name
                                        Case "url"
                                            individualposter.Url = results.InnerText
                                        Case "bannertype"
                                            individualposter.BannerType = results.InnerText
                                        Case "resolution"
                                            individualposter.Resolution = results.InnerText
                                        Case "language"
                                            individualposter.Language = results.InnerText
                                        Case "season"
                                            individualposter.Season = results.InnerText
                                    End Select
                                Next
                                artlist.Add(individualposter)
                        End Select
                    Next
                End If
                For Each url In artlist
                    If url.BannerType <> "fanart" Then
                        WorkingTvShow.posters.Add(url.Url)
                    Else
                        WorkingTvShow.fanart.Add(url.Url)
                    End If
                Next

                nfoFunction.tv_NfoSave(WorkingTvShow.NfoFilePath, WorkingTvShow, True, "unlocked")
                Call tv_ShowLoad(WorkingTvShow)
                messbox.Close()
                TabControl3.SelectedIndex = 0
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Function util_ReplaceXMLChrs(ByVal Text As String)                  'Convert textcodes to real characters
        If Text.IndexOf("â€˜") <> -1 Then Text = Text.Replace("â€˜", "'")
        If Text.IndexOf("â€™") <> -1 Then Text = Text.Replace("â€™", "'")
        If Text.IndexOf("â€™") <> -1 Then Text = Text.Replace("â€™", "'")
        If Text.IndexOf("â€" & Chr(147)) <> -1 Then Text = Text.Replace("â€" & Chr(147), "-")

        Return Text

    End Function

    Private Sub ep_ScreenShotDo(ByVal filenameandpath As String)
        Dim thumbpathandfilename As String = filenameandpath
        Dim pathandfilename As String = filenameandpath.Replace(IO.Path.GetExtension(filenameandpath), "")
        Dim exists As Boolean = False
        For Each ext In Utilities.VideoExtensions
            Dim tempstring2 As String
            tempstring2 = pathandfilename & ext
            If IO.File.Exists(tempstring2) Then
                Dim seconds As Integer = 10
                Dim myProcess As Process = New Process
                myProcess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden
                myProcess.StartInfo.CreateNoWindow = False
                myProcess.StartInfo.FileName = applicationPath & "\Assets\ffmpeg.exe"
                Dim proc_arguments As String = "-y -i """ & tempstring2 & """ -f mjpeg -ss " & seconds.ToString & " -vframes 1 -an " & """" & thumbpathandfilename & """"
                myProcess.StartInfo.Arguments = proc_arguments
                myProcess.Start()
                myProcess.WaitForExit()
            End If
        Next
        messbox.Close()
    End Sub

    Private Function ep_Rename(ByVal path As String, ByVal seasonno As String, ByVal episodeno As List(Of String), ByVal showtitle As String, ByVal episodetitle As String)

        If Preferences.ignorearticle = True Then
            If showtitle.ToLower.IndexOf("the ") = 0 Then
                showtitle = showtitle.Substring(4, showtitle.Length - 4) & ", The"
            End If
        End If

        Dim returnpath As String = "false"

        Dim medianame As String = path.Replace(IO.Path.GetExtension(path), "")
        For Each ext In Utilities.VideoExtensions
            If ext = "VIDEO_TS.IFO" Then Continue For
            Dim actualname As String = medianame & ext
            If IO.File.Exists(actualname) Then
                Dim newfilename As String
                newfilename = ""
                If seasonno.Length = 1 Then
                    seasonno = "0" & seasonno
                End If
                For g = 0 To episodeno.Count - 1
                    If episodeno(g).Length = 1 Then
                        episodeno(g) = "0" & episodeno(g)
                    End If
                Next
                newfilename = Renamer.setTVFilename(showtitle, episodetitle, episodeno, seasonno)

                newfilename = newfilename.Replace("?", "")
                newfilename = newfilename.Replace("/", "")
                newfilename = newfilename.Replace("\", "")
                newfilename = newfilename.Replace("<", "")
                newfilename = newfilename.Replace(">", "")
                newfilename = newfilename.Replace(":", "")
                newfilename = newfilename.Replace("""", "")
                newfilename = newfilename.Replace("*", "")
                Dim listtorename As New List(Of String)
                listtorename.Clear()
                Dim done As String = ""
                Dim temppath As String = path

                listtorename.Add(actualname)

                Dim di As DirectoryInfo = New DirectoryInfo(path.Replace(IO.Path.GetFileName(path), ""))
                Dim filenama As String = IO.Path.GetFileNameWithoutExtension(path)
                Dim fils As IO.FileInfo() = di.GetFiles(filenama & ".*")
                For Each fiNext In fils
                    If Not listtorename.Contains(fiNext.FullName) Then
                        listtorename.Add(fiNext.FullName)
                    End If
                Next

                temppath = temppath.Replace(IO.Path.GetExtension(temppath), ".nfo")
                If IO.File.Exists(temppath) Then
                    If Not listtorename.Contains(temppath) Then
                        listtorename.Add(temppath)
                    End If
                End If
                temppath = temppath.Replace(IO.Path.GetExtension(temppath), ".tbn")
                If IO.File.Exists(temppath) Then
                    If Not listtorename.Contains(temppath) Then
                        listtorename.Add(temppath)
                    End If
                End If
                temppath = temppath.Replace(IO.Path.GetExtension(temppath), ".rar")
                If IO.File.Exists(temppath) Then
                    If Not listtorename.Contains(temppath) Then
                        listtorename.Add(temppath)
                    End If
                End If


                For Each items In listtorename
                    Dim newname As String = items.Replace(IO.Path.GetFileName(items), newfilename) & IO.Path.GetExtension(items)
                    newname = newname.Replace("..", ".")
                    done = newname.Replace(IO.Path.GetExtension(newname), ".nfo")
                    Try
                        Dim fi As New IO.FileInfo(items)
                        If Not IO.File.Exists(newname) Then
                            fi.MoveTo(newname)
                            Preferences.tvScraperLog &= "Renamed " & newname & vbCrLf
                        End If
                    Catch ex As Exception
                        done = path
                    End Try
                Next
                returnpath = done
                Exit For
            End If
        Next
        Return returnpath
    End Function

    Private Function ep_add(ByVal alleps As List(Of TvEpisode), ByVal path As String, ByVal show As String)

        tvScraperLog = tvScraperLog & "Saving episode" & vbCrLf
        'For Each Episode As Nfo.TvEpisode In alleps
        '    Episode.Save()
        'Next
        Call nfoFunction.saveepisodenfo(alleps, path)
        Dim ext As String = path.Replace(IO.Path.GetExtension(path), ".tbn")

        If (IO.File.Exists(ext) Or alleps(0).Thumbnail.FileName = Nothing) And Preferences.autoepisodescreenshot = True Then
            If Not IO.File.Exists(ext) Then
                tvScraperLog = tvScraperLog & "No Episode Thumb, AutoCreating ScreenShot from Movie" & vbCrLf
                Call ep_ScreenShotDo(ext)
            End If
        Else


            Dim url As String = alleps(0).Thumbnail.FileName
            If url = Nothing Then
            Else
                If url.IndexOf("http") = 0 And url.IndexOf(".jpg") <> -1 Then
                    Try
                        'Utilities.DownloadFile(url, buffer)
                        Dim buffer(400000) As Byte
                        Dim size As Integer = 0
                        Dim bytesRead As Integer = 0
                        Dim req As HttpWebRequest = WebRequest.Create(url)
                        Dim res As HttpWebResponse = req.GetResponse()
                        Dim contents As Stream = res.GetResponseStream()
                        Dim bytesToRead As Integer = CInt(buffer.Length)




                        While bytesToRead > 0
                            size = contents.Read(buffer, bytesRead, bytesToRead)
                            If size = 0 Then Exit While
                            bytesToRead -= size
                            bytesRead += size
                        End While


                        Try
                            tvScraperLog = tvScraperLog & "Saving Thumbnail To :- " & ext & vbCrLf
                            Dim fstrm As New FileStream(ext, FileMode.OpenOrCreate, FileAccess.Write)
                            fstrm.Write(buffer, 0, bytesRead)
                            contents.Close()
                            fstrm.Close()
                        Catch ex As Exception
                            tvScraperLog = tvScraperLog & "Unable to Save Thumb" & vbCrLf
                            tvScraperLog = tvScraperLog & "Error :- " & ex.Message.ToString & vbCrLf
                        End Try
                    Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                    End Try
                Else
                    If Not IO.File.Exists(ext) And Preferences.autoepisodescreenshot = True Then
                        tvScraperLog = tvScraperLog & "No Episode Thumb, AutoCreating ScreenShot from Movie" & vbCrLf
                        Call ep_ScreenShotDo(ext)
                    End If
                End If
            End If
        End If

        If Preferences.autorenameepisodes = True Then
            Dim eps As New List(Of String)
            eps.Clear()
            For Each ep In alleps
                eps.Add(ep.Episode.Value)
            Next
            Dim tempspath As String = ep_Rename(path, alleps(0).Season.Value, eps, show, alleps(0).Title.Value)

            If tempspath <> "false" Then
                path = tempspath
            End If
        End If

        Return path
    End Function

    Private Function ep_NfoValidate(ByVal nfopath As String)
        Dim validated As Boolean = True
        If IO.File.Exists(nfopath) Then
            Dim tvshow As New XmlDocument
            Try
                tvshow.Load(nfopath)
            Catch ex As Exception
                validated = False
            End Try
            If validated = True Then
                Try
                    Dim tempstring As String
                    Dim filechck As IO.StreamReader = IO.File.OpenText(nfopath)
                    tempstring = filechck.ReadToEnd.ToLower
                    filechck.Close()
                    If tempstring = Nothing Then
                        validated = False
                    End If
                    Try
                        Dim seasonno As String = tempstring.Substring(tempstring.IndexOf("<season>") + 8, tempstring.IndexOf("</season>") - tempstring.IndexOf("<season>") - 8)
                        If Not IsNumeric(seasonno) Then
                            validated = False
                        End If
                    Catch ex As Exception
                        validated = False
                    End Try
                    Try
                        Dim episodeno As String = tempstring.Substring(tempstring.IndexOf("<episode>") + 9, tempstring.IndexOf("</episode>") - tempstring.IndexOf("<episode>") - 9)
                        If Not IsNumeric(episodeno) Then
                            validated = False
                        End If
                    Catch ex As Exception
                        validated = False
                    End Try
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
            End If
            Return validated
        End If
        Return False
    End Function

    Private Sub ep_NewFind(ByVal path As String, ByVal pattern As String)
        Dim episode As New List(Of TvEpisode)
        Dim propfile As Boolean = False
        Dim allok As Boolean = False
        Dim dir_info As New System.IO.DirectoryInfo(path)

        Dim fs_infos() As String = IO.Directory.GetFiles(path, "*" & pattern, SearchOption.TopDirectoryOnly) 'dir_info.GetFiles(pattern, SearchOption.TopDirectoryOnly)
        Dim counter As Integer = 1
        Dim counter2 As Integer = 1
        For Each FilePath As String In fs_infos

            Dim filename As String = IO.Path.Combine(path, IO.Path.GetFileName(FilePath))
            Dim filename2 As String = filename.Replace(IO.Path.GetExtension(filename), ".nfo")
            If IO.File.Exists(filename2) Then
                If ep_NfoValidate(filename2) = False And Preferences.renamenfofiles = True Then
                    Dim movefilename As String = filename2.Replace(IO.Path.GetExtension(filename2), ".info")
                    Try
                        IO.File.Move(filename2, movefilename)
                    Catch ex As Exception

                    End Try
                End If
            End If
            If Not IO.File.Exists(filename2) Then
                Dim add As Boolean = True
                If pattern = "*.vob" Then 'If a vob file is detected, check that it is not part of a dvd file structure
                    Dim name As String = filename2
                    name = name.Replace(IO.Path.GetFileName(name), "VIDEO_TS.IFO")
                    If IO.File.Exists(name) Then
                        add = False
                    End If
                End If
                If pattern = "*.rar" Then
                    Dim tempmovie As String = String.Empty
                    Dim tempint2 As Integer = 0
                    Dim tempmovie2 As String = FilePath
                    If IO.Path.GetExtension(tempmovie2).ToLower = ".rar" Then
                        If IO.File.Exists(tempmovie2) = True Then
                            If IO.File.Exists(tempmovie) = False Then
                                Dim rarname As String = tempmovie2
                                Dim SizeOfFile As Integer = FileLen(rarname)
                                tempint2 = Convert.ToInt32(Preferences.rarsize) * 1048576
                                If SizeOfFile > tempint2 Then
                                    Dim mat As Match
                                    mat = Regex.Match(rarname, "\.part[0-9][0-9]?[0-9]?[0-9]?.rar")
                                    If mat.Success = True Then
                                        rarname = mat.Value
                                        If rarname.ToLower.IndexOf(".part1.rar") <> -1 Or rarname.ToLower.IndexOf(".part01.rar") <> -1 Or rarname.ToLower.IndexOf(".part001.rar") <> -1 Or rarname.ToLower.IndexOf(".part0001.rar") <> -1 Then
                                            Dim stackrarexists As Boolean = False
                                            rarname = tempmovie.Replace(".nfo", ".rar")
                                            If rarname.ToLower.IndexOf(".part1.rar") <> -1 Then
                                                rarname = rarname.Replace(".part1.rar", ".nfo")
                                                If IO.File.Exists(rarname) Then
                                                    stackrarexists = True
                                                    tempmovie = rarname
                                                Else
                                                    stackrarexists = False
                                                    tempmovie = rarname
                                                End If
                                            End If
                                            If rarname.ToLower.IndexOf(".part01.rar") <> -1 Then
                                                rarname = rarname.Replace(".part01.rar", ".nfo")
                                                If IO.File.Exists(rarname) Then
                                                    stackrarexists = True
                                                    tempmovie = rarname
                                                Else
                                                    stackrarexists = False
                                                    tempmovie = rarname
                                                End If
                                            End If
                                            If rarname.ToLower.IndexOf(".part001.rar") <> -1 Then
                                                rarname = rarname.Replace(".part001.rar", ".nfo")
                                                If IO.File.Exists(rarname) Then
                                                    tempmovie = rarname
                                                    stackrarexists = True
                                                Else
                                                    stackrarexists = False
                                                    tempmovie = rarname
                                                End If
                                            End If
                                            If rarname.ToLower.IndexOf(".part0001.rar") <> -1 Then
                                                rarname = rarname.Replace(".part0001.rar", ".nfo")
                                                If IO.File.Exists(rarname) Then
                                                    tempmovie = rarname
                                                    stackrarexists = True
                                                Else
                                                    stackrarexists = False
                                                    tempmovie = rarname
                                                End If
                                            End If
                                        Else
                                            add = False
                                        End If
                                    Else
                                        'remove = True
                                    End If
                                Else
                                    add = False
                                End If
                            End If
                        End If
                    End If
                End If
                If add = True Then
                    Dim newep As New TvEpisode
                    newep.VideoFilePath = filename2
                    newep.mediaextension = filename
                    newEpisodeList.Add(newep)
                End If
            End If


        Next

        fs_infos = Nothing
    End Sub

    Private Sub bckgroundscanepisodes_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bckgroundscanepisodes.RunWorkerCompleted
        Try

            If scrapeAndQuit = True Then
                Me.Close()
            End If


            If Not (e.Error Is Nothing) Then
                tvScraperLog = tvScraperLog & vbCrLf
                tvScraperLog = tvScraperLog & "Error, exiting TV episode scraper" & vbCrLf
                tvScraperLog = tvScraperLog & "Error:-" & vbCrLf
                tvScraperLog = tvScraperLog & e.Error.ToString & vbCrLf
            Else
                tvScraperLog = tvScraperLog & vbCrLf & "Operation Completed" & vbCrLf
            End If


            ToolStripProgressBar5.Value = 0
            ToolStripProgressBar5.ProgressBar.Refresh()
            ToolStripProgressBar5.Visible = False
            ToolStripStatusLabel6.Text = "TV Show Scraper"
            ToolStripStatusLabel6.Visible = False
            TabPage15.Text = "Search for new Episodes"
            TabPage15.ToolTipText = "Searches folders for new episodes"
            If Preferences.disabletvlogs = False Then
                Dim MyFormObject As New frmoutputlog(tvScraperLog, True)
                Try
                    MyFormObject.ShowDialog()
                Catch ex As ObjectDisposedException
#If SilentErrorScream Then
                Throw ex
#End If
                End Try
            End If
            'Call populatetvtree()
            globalThreadCounter -= 1
            Call util_ThreadsRunningCheck()

            'For Each Show As Nfo.TvShow In TvShows
            '    Show.SearchForEpisodesInFolder()
            'Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub OpenFolderToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_OpenFolder.Click
        Try
            If Not TvTreeview.SelectedNode Is Nothing Then
                Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()  'set WORKINGTVSHOW to show obj irrelavent if we have selected show/season/episode
                If Not WorkingTvShow.NfoFilePath Is Nothing And Not WorkingTvShow.NfoFilePath = "" Then
                    Call util_OpenFolder(WorkingTvShow.NfoFilePath) 'we send the path of the tvshow.nfo, that way in explorer it will be highlighted in the folder
                Else
                    MsgBox("There is no show selected to open")
                End If
            Else
                MsgBox("There is no show selected to open")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub WebBrowser2_NewWindow(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles WebBrowser2.NewWindow
        Try
            e.Cancel = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub WebBrowser3_NewWindow(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles WebBrowser3.NewWindow
        Try
            e.Cancel = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub WebBrowser4_NewWindow(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles WebBrowser4.NewWindow
        Try
            e.Cancel = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub PictureBox4_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles tv_PictureBoxLeft.DoubleClick
        Try
            If tv_PictureBoxLeft.ImageLocation <> Nothing Then
                If IO.File.Exists(tv_PictureBoxLeft.ImageLocation) Then
                    Me.ControlBox = False
                    MenuStrip1.Enabled = False
                    'ToolStrip1.Enabled = False
                    Dim newimage As New Bitmap(tv_PictureBoxLeft.ImageLocation)
                    Call util_ZoomImage(newimage)
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub PictureBox5_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles tv_PictureBoxRight.DoubleClick
        Try
            If tv_PictureBoxRight.ImageLocation <> Nothing Then
                If IO.File.Exists(tv_PictureBoxRight.ImageLocation) Then
                    Me.ControlBox = False
                    MenuStrip1.Enabled = False
                    'ToolStrip1.Enabled = False
                    Dim newimage As New Bitmap(tv_PictureBoxRight.ImageLocation)
                    Call util_ZoomImage(newimage)
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub tv_Fanart_Load()
        Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
        listOfTvFanarts.Clear()
        Button40.Visible = False
        Button39.Visible = False
        If TvTreeview.SelectedNode.Name.ToLower.IndexOf("tvshow.nfo") <> -1 Or TvTreeview.SelectedNode.Name = "" Then
            If Not tv_PictureBoxLeft.Image Is Nothing Then
                PictureBox10.Image = tv_PictureBoxLeft.Image
                PictureBox11.Image = tv_PictureBoxLeft.Image
            Else
                PictureBox10.Image = Nothing
                PictureBox11.Image = Nothing
            End If
        Else
            If IO.File.Exists(WorkingTvShow.NfoFilePath.ToLower.Replace("tvshow.nfo", "fanart.jpg")) Then
                Try
                    PictureBox10.ImageLocation = WorkingTvShow.NfoFilePath.ToLower.Replace("tvshow.nfo", "fanart.jpg")
                    PictureBox10.Load()
                    PictureBox11.ImageLocation = WorkingTvShow.NfoFilePath.ToLower.Replace("tvshow.nfo", "fanart.jpg")
                    PictureBox11.Load()
                Catch
                    PictureBox10.Image = Nothing
                    PictureBox11.Image = Nothing
                End Try
            Else
                PictureBox10.Image = Nothing
                PictureBox11.Image = Nothing
            End If
        End If
        Try
            Label58.Text = PictureBox10.Image.Height.ToString
            Label59.Text = PictureBox10.Image.Width.ToString
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
        TextBox28.Text = WorkingTvShow.Title.Value
        messbox = New frmMessageBox("Please wait,", "", "Querying TVDB for fanart list")
        System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
        messbox.Show()
        Me.Refresh()
        messbox.Refresh()
        Dim fanarturl As String = "http://www.thetvdb.com/api/6E82FED600783400/series/" & WorkingTvShow.TvdbId.Value & "/banners.xml"
        Dim apple2(2000) As String
        Dim fanartlinecount As Integer = 0
        Try
            Dim wrGETURL As WebRequest
            wrGETURL = WebRequest.Create(fanarturl)
            Dim myProxy As New WebProxy("myproxy", 80)
            myProxy.BypassProxyOnLocal = True
            Dim objStream As Stream
            objStream = wrGETURL.GetResponse.GetResponseStream()
            Dim objReader As New StreamReader(objStream)
            Dim sLine As String = ""
            fanartlinecount = 0

            sLine = objReader.ReadToEnd


            Dim bannerslist As New XmlDocument
            'Try
            Dim bannerlist As String = "<banners>"
            bannerslist.LoadXml(sLine)
            Dim thisresult As XmlNode = Nothing
            objReader.Close()
            objStream.Close()
            For Each thisresult In bannerslist("Banners")

                Select Case thisresult.Name
                    Case "Banner"
                        Dim fanart As New str_FanartList(SetDefaults)
                        Dim bannerselection As XmlNode = Nothing
                        For Each bannerselection In thisresult.ChildNodes
                            Select Case bannerselection.Name
                                Case "BannerPath"
                                    fanart.bigUrl = "http://thetvdb.com/banners/" & bannerselection.InnerXml
                                    fanart.smallUrl = "http://thetvdb.com/banners/_cache/" & bannerselection.InnerXml
                                Case "BannerType"
                                    fanart.type = bannerselection.InnerXml
                                Case "BannerType2"
                                    fanart.resolution = bannerselection.InnerXml
                            End Select
                        Next
                        If fanart.type = "fanart" Then
                            listOfTvFanarts.Add(fanart)
                        End If
                End Select
            Next





        Catch ex As WebException
            MsgBox("TVDB appears to be down at the moment, please try again later")
        End Try



        If listOfTvFanarts.Count > 0 Then




            Dim location As Integer = 0
            Dim itemcounter As Integer = 0
            For f = 0 To listOfTvFanarts.Count - 1
                tvFanartBoxes() = New PictureBox()

                With tvFanartBoxes
                    .Location = New Point(0, location)
                    If listOfTvFanarts.Count > 2 Then
                        .Width = 405
                        .Height = 245
                    Else
                        .Width = 415
                        .Height = 250
                    End If
                    .SizeMode = PictureBoxSizeMode.Zoom
                    .ImageLocation = listOfTvFanarts(f).smallUrl
                    .Visible = True
                    .BorderStyle = BorderStyle.Fixed3D
                    .Name = "tvfanart" & f.ToString
                    AddHandler tvFanartBoxes.DoubleClick, AddressOf util_ZoomImage2
                End With

                tvFanartCheckBoxes() = New RadioButton()
                With tvFanartCheckBoxes
                    .BringToFront()
                    .Location = New Point(199, location + 245)
                    .Name = "checkbox" & itemcounter.ToString
                End With

                resolutionLabels() = New Label
                With resolutionLabels
                    .BringToFront()
                    .Location = New Point(10, location + 245)
                    .Name = listOfTvFanarts(f).resolution
                    .Text = listOfTvFanarts(f).resolution
                End With

                itemcounter += 1
                location += 270

                Me.Panel13.Controls.Add(tvFanartBoxes())
                Me.Panel13.Controls.Add(tvFanartCheckBoxes())
                Me.Panel13.Controls.Add(resolutionLabels())
                Me.Refresh()
                Application.DoEvents()
            Next
        Else
            Dim mainlabel2 As Label
            mainlabel2 = New Label
            With mainlabel2
                .Location = New Point(0, 100)
                .Width = 700
                .Height = 100
                .Font = New System.Drawing.Font("Arial", 15, FontStyle.Bold)
                .Text = "No Fanart Was Found At TVDB For This Movie"
            End With
            Me.Panel13.Controls.Add(mainlabel2)
        End If

        System.Windows.Forms.Cursor.Current = Cursors.Default
        messbox.Close()
        'Catch ex As Exception

        'End Try

    End Sub

    Private Sub Button42_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button42.Click
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
            Label2.Text = "Please Wait, Trying to Download Fanart"
            Me.Refresh()
            Application.DoEvents()

            Dim miscvar As String = String.Empty
            Dim miscint As Integer = 0
            Dim miscvar2 As String = String.Empty
            Dim allok As Boolean = False
            For Each button As Control In Me.Panel13.Controls
                If button.Name.IndexOf("checkbox") <> -1 Then
                    Dim b1 As RadioButton = CType(button, RadioButton)
                    If b1.Checked = True Then
                        miscvar = b1.Name
                        miscvar = miscvar.Replace("checkbox", "")
                        miscint = Convert.ToDecimal(miscvar)
                        miscvar2 = listOfTvFanarts(miscint).bigUrl
                        allok = True
                        Exit For
                    End If
                End If
            Next
            If allok = False Then
                MsgBox("No Fanart Is Selected")
            Else
                Try
                    'Panel1.Controls.Remove(Label1)
                    'Utilities.DownloadFile(miscvar2, bmp)
                    Dim buffer(4000000) As Byte
                    Dim size As Integer = 0
                    Dim bytesRead As Integer = 0

                    Dim fanartthumburl As String = miscvar2
                    Dim req As HttpWebRequest = WebRequest.Create(fanartthumburl)
                    Dim res As HttpWebResponse = req.GetResponse()
                    Dim contents As Stream = res.GetResponseStream()
                    Dim bmp As New Bitmap(contents)
                    Dim savepath As String = WorkingTvShow.NfoFilePath.ToLower.Replace("tvshow.nfo", "fanart.jpg")

                    Dim bytesToRead As Integer = CInt(buffer.Length)

                    While bytesToRead > 0
                        size = contents.Read(buffer, bytesRead, bytesToRead)
                        If size = 0 Then Exit While
                        bytesToRead -= size
                        bytesRead += size
                    End While
                    If Preferences.resizefanart = 1 Then
                        Try
                            Dim tempbitmap As Bitmap = bmp
                            tempbitmap.Save(savepath, Imaging.ImageFormat.Jpeg)
                        Catch ex As Exception
                            miscvar = ex.Message.ToString
                        End Try
                    ElseIf Preferences.resizefanart = 2 Then
                        If bmp.Width > 1280 Or bmp.Height > 720 Then
                            Dim bm_source As New Bitmap(bmp)
                            Dim bm_dest As New Bitmap(1280, 720)
                            Dim gr As Graphics = Graphics.FromImage(bm_dest)
                            gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                            gr.DrawImage(bm_source, 0, 0, 1280 - 1, 720 - 1)
                            Dim tempbitmap As Bitmap = bm_dest
                            tempbitmap.Save(savepath, Imaging.ImageFormat.Jpeg)
                        Else
                            Thread.Sleep(30)
                            bmp.Save(savepath, Imaging.ImageFormat.Jpeg)
                        End If
                    ElseIf Preferences.resizefanart = 3 Then
                        If bmp.Width > 960 Or bmp.Height > 540 Then
                            Dim bm_source As New Bitmap(bmp)
                            Dim bm_dest As New Bitmap(960, 540)
                            Dim gr As Graphics = Graphics.FromImage(bm_dest)
                            gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                            gr.DrawImage(bm_source, 0, 0, 960 - 1, 540 - 1)
                            Dim tempbitmap As Bitmap = bm_dest
                            tempbitmap.Save(savepath, Imaging.ImageFormat.Jpeg)
                        Else
                            Thread.Sleep(30)
                            bmp.Save(savepath, Imaging.ImageFormat.Jpeg)
                        End If
                    End If
                    Dim exists As Boolean = System.IO.File.Exists(savepath)
                    If exists = True Then

                        Try
                            PictureBox10.ImageLocation = savepath
                            PictureBox10.Load()
                            PictureBox11.Image = PictureBox10.Image
                            If TvTreeview.SelectedNode.Name.ToLower.IndexOf("tvshow.nfo") <> -1 Or TvTreeview.SelectedNode.Name = "" Then
                                tv_PictureBoxLeft.ImageLocation = savepath
                                tv_PictureBoxLeft.Load()
                            End If
                        Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                        End Try
                    Else
                        PictureBox10.Image = Nothing
                        PictureBox11.Image = Nothing
                    End If

                Catch ex As WebException
                    MsgBox(ex.Message)
                End Try

            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub tv_FanartCropTop()
        Dim imagewidth As Integer = PictureBox10.Image.Width
        Dim imageheight As Integer = PictureBox10.Image.Height
        PictureBox10.Image = util_ImageCrop(PictureBox10.Image, New Size(imagewidth, imageheight - 1), New Point(0, 1)).Clone
        PictureBox10.SizeMode = PictureBoxSizeMode.Zoom
    End Sub

    Private Sub tv_FanartCropBottom()
        Dim imagewidth As Integer = PictureBox10.Image.Width
        Dim imageheight As Integer = PictureBox10.Image.Height
        PictureBox10.Image = util_ImageCrop(PictureBox10.Image, New Size(imagewidth, imageheight - 1), New Point(0, 0)).Clone
        PictureBox10.SizeMode = PictureBoxSizeMode.Zoom
    End Sub

    Private Sub tv_FanartCropLeft()
        Dim imagewidth As Integer = PictureBox10.Image.Width
        Dim imageheight As Integer = PictureBox10.Image.Height
        PictureBox10.Image = util_ImageCrop(PictureBox10.Image, New Size(imagewidth - 1, imageheight), New Point(1, 0)).Clone
        PictureBox10.SizeMode = PictureBoxSizeMode.Zoom
    End Sub

    Private Sub tv_FanartCropRight()
        Dim imagewidth As Integer = PictureBox10.Image.Width
        Dim imageheight As Integer = PictureBox10.Image.Height
        PictureBox10.Image = util_ImageCrop(PictureBox10.Image, New Size(imagewidth - 1, imageheight), New Point(0, 0)).Clone
        PictureBox10.SizeMode = PictureBoxSizeMode.Zoom
    End Sub

    Private Sub Button35_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button35.MouseDown
        Try
            'up
            If PictureBox10.Image Is Nothing Then Exit Sub
            thumbedItsMade = True
            Button40.Visible = True
            Button39.Visible = True
            cropString = "top"
            Timer4.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button36_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button36.MouseDown
        Try
            'down
            If PictureBox10.Image Is Nothing Then Exit Sub
            thumbedItsMade = True
            Button40.Visible = True
            Button39.Visible = True
            cropString = "bottom"
            Timer4.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button38_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button38.MouseDown
        Try
            If PictureBox10.Image Is Nothing Then Exit Sub
            thumbedItsMade = True
            Button40.Visible = True
            Button39.Visible = True
            cropString = "left"
            Timer4.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try 'left
    End Sub

    Private Sub Button37_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button37.MouseDown
        Try
            'right
            If PictureBox10.Image Is Nothing Then Exit Sub
            thumbedItsMade = True
            Button40.Visible = True
            Button39.Visible = True
            cropString = "right"
            Timer4.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Timer4_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles Timer4.Tick
        Try
            If cropString = "top" Then Call tv_FanartCropTop()
            If cropString = "bottom" Then Call tv_FanartCropBottom()
            If cropString = "left" Then Call tv_FanartCropLeft()
            If cropString = "right" Then Call tv_FanartCropRight()
            Label58.Text = PictureBox10.Image.Height.ToString
            Label59.Text = PictureBox10.Image.Width.ToString
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button35_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button35.MouseUp
        Try
            Timer4.Enabled = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button36_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button36.MouseUp
        Try
            Timer4.Enabled = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button38_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button38.MouseUp
        Try
            Timer4.Enabled = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button37_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button37.MouseUp
        Try
            Timer4.Enabled = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button40_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button40.Click
        Try
            PictureBox10.Image = PictureBox11.Image
            Label58.Text = PictureBox10.Image.Height.ToString
            Label59.Text = PictureBox10.Image.Width.ToString
            Button40.Visible = False
            Button39.Visible = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button39_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button39.Click
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
            Try
                Dim stream As New System.IO.MemoryStream
                PictureBox10.Image.Save(WorkingTvShow.NfoFilePath.ToLower.Replace("tvshow.nfo", "fanart.jpg"), System.Drawing.Imaging.ImageFormat.Jpeg)
                PictureBox11.Image = PictureBox10.Image
                If TvTreeview.SelectedNode.Name.ToLower.IndexOf("tvshow.nfo") <> -1 Or TvTreeview.SelectedNode.Name = "" Then
                    tv_PictureBoxLeft.Image = PictureBox11.Image
                End If
                Label58.Text = PictureBox10.Image.Height.ToString
                Label59.Text = PictureBox10.Image.Width.ToString
                Button40.Visible = False
                Button39.Visible = False
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button41_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button41.Click
        Try
            Panel11.Visible = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button32_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button32.Click
        Try
            Panel11.Visible = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button31_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button31.Click
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
            'browser
            openFD.InitialDirectory = WorkingTvShow.NfoFilePath.Replace(IO.Path.GetFileName(WorkingTvShow.NfoFilePath), "")
            openFD.Title = "Select a jpeg image file"
            openFD.FileName = ""
            openFD.Filter = "Media Companion Image Files|*.jpg;*.tbn|All Files|*.*"
            openFD.FilterIndex = 0
            openFD.ShowDialog()
            TextBox27.Text = openFD.FileName
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button33_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button33.Click
        Try
            'set thumb
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
            Dim MyWebClient As New System.Net.WebClient
            Try
                Dim ImageInBytes() As Byte = MyWebClient.DownloadData(TextBox27.Text)
                Dim ImageStream As New IO.MemoryStream(ImageInBytes)

                'mainfanart.Image = New System.Drawing.Bitmap(ImageStream)





                Dim tempstring As String

                Dim bmp As New Bitmap(ImageStream)
                Dim savepath As String = WorkingTvShow.NfoFilePath.ToLower.Replace("tvshow.nfo", "fanart.jpg")

                If Preferences.resizefanart = 1 Then
                    Try
                        Dim tempbitmap As Bitmap = bmp
                        tempbitmap.Save(savepath, Imaging.ImageFormat.Jpeg)
                    Catch ex As Exception
                        tempstring = ex.Message.ToString
                    End Try
                ElseIf Preferences.resizefanart = 2 Then
                    If bmp.Width > 1280 Or bmp.Height > 720 Then
                        Dim bm_source As New Bitmap(bmp)
                        Dim bm_dest As New Bitmap(1280, 720)
                        Dim gr As Graphics = Graphics.FromImage(bm_dest)
                        gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                        gr.DrawImage(bm_source, 0, 0, 1280 - 1, 720 - 1)
                        Dim tempbitmap As Bitmap = bm_dest
                        tempbitmap.Save(savepath, Imaging.ImageFormat.Jpeg)
                    Else
                        Thread.Sleep(30)
                        bmp.Save(savepath, Imaging.ImageFormat.Jpeg)
                    End If
                ElseIf Preferences.resizefanart = 3 Then
                    If bmp.Width > 960 Or bmp.Height > 540 Then
                        Dim bm_source As New Bitmap(bmp)
                        Dim bm_dest As New Bitmap(960, 540)
                        Dim gr As Graphics = Graphics.FromImage(bm_dest)
                        gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                        gr.DrawImage(bm_source, 0, 0, 960 - 1, 540 - 1)
                        Dim tempbitmap As Bitmap = bm_dest
                        tempbitmap.Save(savepath, Imaging.ImageFormat.Jpeg)
                    Else
                        Thread.Sleep(30)
                        bmp.Save(savepath, Imaging.ImageFormat.Jpeg)
                    End If
                End If

                Dim exists As Boolean = System.IO.File.Exists(savepath)
                If exists = True Then


                    PictureBox10.ImageLocation = savepath
                    PictureBox10.Load()
                    PictureBox11.Image = PictureBox10.Image
                    If TvTreeview.SelectedNode.Name.ToLower.IndexOf("tvshow.nfo") <> -1 Or TvTreeview.SelectedNode.Name = "" Then
                        tv_PictureBoxLeft.ImageLocation = savepath
                        tv_PictureBoxLeft.Load()
                    End If
                Else
                    PictureBox10.Image = Nothing
                    PictureBox11.Image = Nothing
                End If
                Label59.Text = PictureBox2.Image.Width
                Label58.Text = PictureBox2.Image.Height


            Catch ex As Exception
                MsgBox("Unable To Download Image")
            End Try
            Panel11.Visible = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub TextBox2_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles TextBox2.Enter
        Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
        Dim WorkingEpisode As TvEpisode = ep_SelectedCurrently()
        If Panel9.Visible = False Then
            TextBox2.Text = WorkingTvShow.Title.Value
            If TextBox2.Text.ToLower.IndexOf(", the") = TextBox2.Text.Length - 5 Then
                TextBox2.Text = "The " & TextBox2.Text.Substring(0, TextBox2.Text.Length - 5)
            End If
        Else
            TextBox2.Text = WorkingEpisode.Title.Value
        End If
    End Sub

    Private Sub TextBox2_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles TextBox2.Leave
        Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()

        Dim WorkingEpisode As TvEpisode = ep_SelectedCurrently()
        On Error Resume Next
        If Panel9.Visible = False Then
            '-------------- Aqui
            If Preferences.ignorearticle = True Then
                If TextBox2.Text.ToLower.IndexOf("the ") = 0 Then
                    TextBox2.Text = TextBox2.Text.Substring(4, TextBox2.Text.Length - 4) & ", The"
                End If
            End If
            WorkingTvShow.Title.Value = TextBox2.Text
        Else
            WorkingEpisode.Title.Value = TextBox2.Text
            Dim trueseason As String = WorkingEpisode.Season.value
            Dim trueepisode As String = WorkingEpisode.Episode.Value
            If trueseason.Length = 1 Then trueseason = "0" & trueseason
            If trueepisode.Length = 1 Then trueepisode = "0" & trueepisode
            TextBox2.Text = "S" & trueseason & "E" & trueepisode & " - " & WorkingEpisode.Title.Value
        End If
    End Sub

    Private Sub Button43_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button43.Click
        Try
            Dim Show As Media_Companion.TvShow = Nothing
            Dim Season As Media_Companion.TvSeason = Nothing
            Dim Episode As Media_Companion.TvEpisode = Nothing
            If TvTreeview.SelectedNode IsNot Nothing Then
                If TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvShow Then
                    Show = TvTreeview.SelectedNode.Tag
                ElseIf TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvEpisode Then
                    Episode = TvTreeview.SelectedNode.Tag
                ElseIf TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvSeason Then
                    Season = TvTreeview.SelectedNode.Tag
                    Show = Season.GetParentShow
                Else
                    Exit Sub
                End If
            Else
                Exit Sub
            End If

            Dim tempint As Integer = 0
            Dim tempstring As String = ""
            If Show IsNot Nothing Then
                Dim changed As Integer = 0
                If Show.TvdbId.Value <> TextBox9.Text Then
                    changed += 1
                End If
                If Show.ImdbId.Value.ToLower <> TextBox12.Text.ToLower Then
                    changed += 2
                End If
                If changed > 0 Then
                    If changed = 1 Then
                        tempint = MessageBox.Show("It appears that you have changed the TVDB ID" & vbCrLf & "Media Companion depends on this ID for scraping episodes and art" & vbCrLf & vbCrLf & "Are you sure you wish to continue and save this?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
                        If tempint = DialogResult.No Then
                            Exit Sub
                        End If
                    ElseIf changed = 2 Then
                        tempint = MessageBox.Show("It appears that you have changed the IMDB ID" & vbCrLf & "Media Companion depends on this ID for scraping actors from IMDB" & vbCrLf & vbCrLf & "Are you sure you wish to continue and save this?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
                        If tempint = DialogResult.No Then
                            Exit Sub
                        End If
                    ElseIf changed = 3 Then
                        tempint = MessageBox.Show("It appears that you have changed the IMDB ID & TVDB ID" & vbCrLf & "Media Companion depends on these IDs being correct for a number of scraping operations" & vbCrLf & vbCrLf & "Are you sure you wish to continue and save this?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
                        If tempint = DialogResult.No Then
                            Exit Sub
                        End If
                    End If
                End If
                'its a tvshow

                If TextBox2.Text.ToLower.IndexOf(", the") = TextBox2.Text.Length - 5 And TextBox2.Text.Length > 5 Then
                    Show.Title.Value = "The " & TextBox2.Text.Substring(0, TextBox2.Text.Length - 5)
                Else
                    Show.Title.Value = TextBox2.Text
                End If
                Show.Plot.Value = TextBox19.Text
                Show.Runtime.Value = TextBox15.Text
                Show.Premiered.Value = TextBox10.Text
                Show.Studio.Value = TextBox16.Text
                Show.Rating.Value = TextBox13.Text
                Show.ImdbId.Value = TextBox12.Text
                Show.TvdbId.Value = TextBox9.Text
                Show.Mpaa.Value = TextBox14.Text

                Show.Save()
                Show.UpdateTreenode()
                'title(2)
                'plot(19)
                'Runtime(15)
                'premiered(10)
                'studio(16)
                'rating(13)
                'genre(11)
                'IMDBID(12)
                'TVDBID(9)
                'Cert(14)
                'Call nfofunction.savetvshownfo(workingtvshow.path, workingtvshow, True)
                'Dim node As TreeNode = Nothing
                'For Each node In TvTreeview.Nodes
                '    If node.Name = workingTvShow.path Then
                '        node.Text = TextBox2.Text
                '        Exit For
                '    End If
                'Next
                'reloadtvshow()
                'Call savetvdata()
                'On Error Resume Next
                'TvTreeview.SelectedNode = TvTreeview.SelectedNode.PrevNode
                'TvTreeview.SelectedNode = TvTreeview.SelectedNode.NextNode
                'TvTreeview.SelectedNode = node
                'On Error GoTo 0
                ''rebuildselectedshow(Node.Name.ToString)
            Else
                'its an episode


                Dim trueseason As String = Utilities.PadNumber(Episode.Season.Value, 2)
                Dim trueepisode As String = Utilities.PadNumber(Episode.Episode.Value, 2)
                tempstring = "S" & trueseason & "E" & trueepisode & " - "
                Episode.Title.Value = TextBox2.Text.Replace(tempstring, "")
                Episode.Plot.Value = TextBox21.Text
                Episode.Aired.Value = TextBox24.Text
                Episode.Rating.Value = TextBox20.Text

                Episode.Save()
                Episode.UpdateTreenode()
                'Dim TVShowEpisodeNFOContent As String = nfoFunction.ChangeAllFieldsEpisodeTVShow(tempWorkingEpisode)
                'If TVShowEpisodeNFOContent <> "error" Then Dim DiditWork As Boolean = CreateMovieNfo(workingEpisode(0).VideoFilePath, TVShowEpisodeNFOContent)

                'For Each node As TreeNode In TvTreeview.Nodes
                '    For Each childnode As TreeNode In node.Nodes
                '        Dim counter As Integer = -1
                '        For Each epie In childnode.Nodes
                '            If epie.Name = workingEpisode(0).VideoFilePath Then
                '                counter += 1
                '                If counter = workingEpisodeIndex Then
                '                    Dim eps As String
                '                    If workingEpisode(workingEpisodeIndex).episodeno < 10 Then
                '                        eps = "0" & workingEpisode(workingEpisodeIndex).episodeno
                '                    Else
                '                        eps = workingEpisode(workingEpisodeIndex).episodeno.ToString
                '                    End If
                '                    eps = eps & " - " & workingEpisode(workingEpisodeIndex).title
                '                    epie.Text = eps
                '                End If
                '            End If
                '        Next
                '    Next
                'Next
                'Dim showpath As String = TvTreeview.SelectedNode.Parent.Parent.Name
                'Dim cancelloop As Boolean = False
                'For Each item In TvShows
                '    If item.fullpath = showpath Then
                '        For f = 0 To item.allepisodes.Count - 1
                '            If item.allepisodes(f).VideoFilePath = workingEpisode(0).VideoFilePath Then
                '                item.allepisodes.RemoveAt(f)
                '                For Each ep In workingEpisode
                '                    If ep.Season.value = workingEpisode(workingEpisodeIndex).Season.value And ep.episodeno = workingEpisode(workingEpisodeIndex).episodeno Then
                '                        Dim newwp As New TvEpisode
                '                        newwp.episodeno = ep.episodeno
                '                        newwp.VideoFilePath = ep.VideoFilePath
                '                        newwp.playcount = "0"
                '                        newwp.rating = ep.rating
                '                        newwp.Season.value = ep.Season.value
                '                        newwp.title = ep.title
                '                        item.allepisodes.Add(newwp)
                '                        Exit For
                '                    End If
                '                Next
                '                cancelloop = True
                '                Exit For
                '            End If
                '        Next
                '    End If
                '    If cancelloop = True Then Exit For
                'Next
                'Call savetvdata()
                '            rebuildselectedshow(MainNode.Name.ToString)
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Sub tv_Rescrape() 'Panel9 visibility indicates which is selected - a tvshow or an episode
        Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()

        Dim WorkingEpisode As TvEpisode = ep_SelectedCurrently()

        Dim tempint As Integer = 0
        Dim tempstring As String = ""
        If WorkingTvShow.TvdbId.Value.IndexOf("tt").Equals(0) Then tv_IMDbID_detected = True
        If Panel9.Visible = False Then 'i.e. rescrape selected TVSHOW else rescrape selected EPISODE
            'its a tv show
            tempint = MessageBox.Show("Rescraping the TV Show will Overwrite all the current details" & vbCrLf & "Do you wish to continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
            If tempint = DialogResult.No Then
                Exit Sub
            End If
            Dim messbox As frmMessageBox = New frmMessageBox("The Selected TV Show is being Rescraped", "", "Please Wait")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            messbox.Refresh()
            Application.DoEvents()
            Dim langu As String = WorkingTvShow.Language.Value
            If langu = "" Then langu = "en"


            If Preferences.tvshow_useXBMC_Scraper = True Then

                Dim TVShowNFOContent As String = XBMCScrape_TVShow_General_Info("metadata.tvdb.com", WorkingTvShow.TvdbId.Value, langu, WorkingTvShow.NfoFilePath)
                If TVShowNFOContent <> "error" Then CreateMovieNfo(WorkingTvShow.NfoFilePath, TVShowNFOContent)
                Call tv_ShowLoad(WorkingTvShow)
                For Each item As TvShow In Cache.TvCache.Shows
                    If item.NfoFilePath = WorkingTvShow.NfoFilePath Then
                        Dim newitem As New TvShow
                        For Each episode In item.Episodes
                            newitem.AddEpisode(episode)
                        Next
                        newitem.NfoFilePath = item.NfoFilePath
                        newitem.Status.Value = "ok"
                        newitem.EpisodeActorSource = item.EpisodeActorSource
                        newitem.Genre = WorkingTvShow.Genre
                        newitem.ImdbId = WorkingTvShow.ImdbId
                        newitem.Language = WorkingTvShow.Language
                        newitem.Rating = WorkingTvShow.Rating
                        newitem.SortOrder = WorkingTvShow.SortOrder
                        newitem.Title = WorkingTvShow.Title
                        'newitem.titleandyear = item.titleandyear
                        newitem.TvdbId = WorkingTvShow.TvdbId
                        newitem.Year = WorkingTvShow.Year
                        'TvShows.Remove(item)
                        'TvShows.Add(newitem)
                        'Call populatetvtree()
                        Exit For
                    End If
                Next
                messbox.Close()
                TabControl3.SelectedIndex = 0
                Exit Sub
            Else

                'Dim tvdbstuff As New TVDB.tvdbscraper 'commented because of removed TVDB.dll
                Dim tvdbstuff As New TVDBScraper
                Dim tvshowxmlstring As String = tvdbstuff.GetShow(WorkingTvShow.TvdbId.Value, langu)
                If tvshowxmlstring = "!!!Error!!!" Then
                    MsgBox("Error scraping show")
                    Exit Sub
                End If
                Dim showlist As New XmlDocument
                showlist.LoadXml(tvshowxmlstring)
                WorkingTvShow.ListActors.Clear()
                Dim thisresult As XmlNode = Nothing
                Dim maxcount As Integer = 0
                For Each thisresult In showlist("fulltvshow")
                    Select Case thisresult.Name
                        Case "title"
                            WorkingTvShow.Title.Value = thisresult.InnerText
                        Case "mpaa"
                            WorkingTvShow.Mpaa.Value = thisresult.InnerText
                        Case "premiered"
                            WorkingTvShow.Premiered.Value = thisresult.InnerText
                        Case "genre"
                            Dim newstring As String
                            newstring = thisresult.InnerText
                            newstring = newstring.TrimEnd("|")
                            newstring = newstring.TrimStart("|")
                            newstring = newstring.Replace("|", " / ")
                            WorkingTvShow.Genre.Value = newstring
                        Case "imdbid"
                            WorkingTvShow.ImdbId.Value = thisresult.InnerText
                        Case "studio"
                            WorkingTvShow.Studio.Value = thisresult.InnerText
                        Case "plot"
                            WorkingTvShow.Plot.Value = thisresult.InnerText
                        Case "rating"
                            WorkingTvShow.Rating.Value = thisresult.InnerText
                        Case "runtime"
                            WorkingTvShow.Runtime.Value = thisresult.InnerText
                        Case "episodeguideurl"
                            WorkingTvShow.EpisodeGuideUrl.Value = thisresult.InnerText
                        Case "actor"
                            If maxcount >= Preferences.maxactors Then
                                Exit For
                            End If
                            maxcount += 1
                            Dim id As String = ""
                            Dim acts As New str_MovieActors(SetDefaults)
                            Dim results As XmlNode = Nothing
                            Dim lan As New str_PossibleShowList(SetDefaults)

                            For Each results In thisresult.ChildNodes
                                Select Case results.Name
                                    Case "name"
                                        acts.actorname = results.InnerText
                                    Case "role"
                                        acts.actorrole = results.InnerText
                                    Case "thumb"
                                        acts.actorthumb = results.InnerText
                                    Case "actorid"
                                        id = results.InnerText
                                End Select
                            Next

                            If acts.actorthumb <> Nothing Then
                                If acts.actorthumb <> "" And Preferences.actorseasy = True Then
                                    If WorkingTvShow.TvShowActorSource.Value <> "imdb" Or WorkingTvShow.ImdbId = Nothing Then
                                        Dim workingpath As String = WorkingTvShow.NfoFilePath.Replace(IO.Path.GetFileName(WorkingTvShow.NfoFilePath), "")
                                        workingpath = workingpath & ".actors\"
                                        Dim hg As New IO.DirectoryInfo(workingpath)
                                        Dim destsorted As Boolean = False
                                        If Not hg.Exists Then
                                            Try
                                                IO.Directory.CreateDirectory(workingpath)
                                                destsorted = True
                                            Catch ex As Exception
#If SilentErrorScream Then
                                                Throw ex
#End If
                                            End Try
                                        Else
                                            destsorted = True
                                        End If
                                        If destsorted = True Then
                                            Dim filename As String = acts.actorname.Replace(" ", "_")
                                            filename = filename & ".tbn"
                                            filename = IO.Path.Combine(workingpath, filename)
                                            Utilities.DownloadFile(acts.actorthumb, filename)
                                            'Dim buffer(4000000) As Byte
                                            'Dim size As Integer = 0
                                            'Dim bytesRead As Integer = 0
                                            'Dim thumburl As String = acts.actorthumb
                                            'Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                            'Dim res As HttpWebResponse = req.GetResponse()
                                            'Dim contents As Stream = res.GetResponseStream()
                                            'Dim bytesToRead As Integer = CInt(buffer.Length)
                                            'While bytesToRead > 0
                                            '    size = contents.Read(buffer, bytesRead, bytesToRead)
                                            '    If size = 0 Then Exit While
                                            '    bytesToRead -= size
                                            '    bytesRead += size
                                            'End While

                                            'Dim fstrm As New FileStream(filename, FileMode.OpenOrCreate, FileAccess.Write)
                                            'fstrm.Write(buffer, 0, bytesRead)
                                            'contents.Close()
                                            'fstrm.Close()
                                        End If
                                    End If
                                End If
                                If Preferences.actorsave = True And id <> "" And Preferences.actorseasy = False Then
                                    Dim workingpath As String = ""
                                    Dim networkpath As String = Preferences.actorsavepath
                                    Try
                                        tempstring = networkpath & "\" & id.Substring(id.Length - 2, 2)
                                        Dim hg As New IO.DirectoryInfo(tempstring)
                                        If Not hg.Exists Then
                                            IO.Directory.CreateDirectory(tempstring)
                                        End If
                                        workingpath = networkpath & "\" & id.Substring(id.Length - 2, 2) & "\tv" & id & ".jpg"
                                        If Not IO.File.Exists(workingpath) Then
                                            Utilities.DownloadFile(acts.actorthumb, workingpath)
                                            'Dim buffer(4000000) As Byte
                                            'Dim size As Integer = 0
                                            'Dim bytesRead As Integer = 0
                                            'Dim thumburl As String = acts.actorthumb
                                            'Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                            'Dim res As HttpWebResponse = req.GetResponse()
                                            'Dim contents As Stream = res.GetResponseStream()
                                            'Dim bytesToRead As Integer = CInt(buffer.Length)
                                            'While bytesToRead > 0
                                            '    size = contents.Read(buffer, bytesRead, bytesToRead)
                                            '    If size = 0 Then Exit While
                                            '    bytesToRead -= size
                                            '    bytesRead += size
                                            'End While
                                            'Dim fstrm As New FileStream(workingpath, FileMode.OpenOrCreate, FileAccess.Write)
                                            'fstrm.Write(buffer, 0, bytesRead)
                                            'contents.Close()
                                            'fstrm.Close()
                                        End If
                                        acts.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, id.Substring(id.Length - 2, 2))
                                        If Preferences.actornetworkpath.IndexOf("/") <> -1 Then
                                            acts.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, id.Substring(id.Length - 2, 2) & "/tv" & id & ".jpg")
                                        Else
                                            acts.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, id.Substring(id.Length - 2, 2) & "\tv" & id & ".jpg")
                                        End If

                                    Catch ex As Exception
#If SilentErrorScream Then
                                        Throw ex
#End If
                                    End Try
                                End If
                            End If
                            Dim exists As Boolean = False
                            For Each actors In WorkingTvShow.ListActors
                                If actors.actorname = acts.actorname And actors.actorrole = acts.actorrole Then
                                    exists = True
                                End If
                            Next
                            If exists = False Then
                                WorkingTvShow.ListActors.Add(acts)
                            End If
                    End Select
                Next
                If WorkingTvShow.TvShowActorSource.Value = "imdb" And WorkingTvShow.ImdbId <> Nothing Then
                    WorkingTvShow.ListActors.Clear()
                    '                    Dim imdbscraper As New imdb.Classimdbscraper
                    Dim imdbscraper As New Classimdb
                    Dim actorlist As String
                    Dim actorstring As New XmlDocument
                    actorlist = imdbscraper.getimdbactors(Preferences.imdbmirror, WorkingTvShow.ImdbId.Value)
                    Try
                        actorstring.LoadXml(actorlist)
                        thisresult = Nothing
                        Dim actorcount As Integer = 0
                        For Each thisresult In actorstring("actorlist")
                            Select Case thisresult.Name
                                Case "actor"
                                    If actorcount > Preferences.maxactors Then
                                        Exit For
                                    End If
                                    actorcount += 1
                                    Dim newactor As New str_MovieActors(SetDefaults)
                                    Dim detail As XmlNode = Nothing
                                    For Each detail In thisresult.ChildNodes
                                        Select Case detail.Name
                                            Case "name"
                                                newactor.actorname = detail.InnerText
                                            Case "role"
                                                newactor.actorrole = detail.InnerText
                                            Case "thumb"
                                                newactor.actorthumb = detail.InnerText
                                            Case "actorid"
                                                If newactor.actorthumb <> Nothing Then
                                                    If detail.InnerText <> "" And Preferences.actorseasy = True Then
                                                        Dim workingpath As String = WorkingTvShow.NfoFilePath.Replace(IO.Path.GetFileName(WorkingTvShow.NfoFilePath), "")
                                                        workingpath = workingpath & ".actors\"
                                                        Dim hg As New IO.DirectoryInfo(workingpath)
                                                        Dim destsorted As Boolean = False
                                                        If Not hg.Exists Then
                                                            Try
                                                                IO.Directory.CreateDirectory(workingpath)
                                                                destsorted = True
                                                            Catch ex As Exception
#If SilentErrorScream Then
                                                                Throw ex
#End If
                                                            End Try
                                                        Else
                                                            destsorted = True
                                                        End If
                                                        If destsorted = True Then
                                                            Dim filename As String = newactor.actorname.Replace(" ", "_")
                                                            filename = filename & ".tbn"
                                                            filename = IO.Path.Combine(workingpath, filename)
                                                            Utilities.DownloadFile(newactor.actorthumb, filename)
                                                            'Dim buffer(4000000) As Byte
                                                            'Dim size As Integer = 0
                                                            'Dim bytesRead As Integer = 0
                                                            'Dim thumburl As String = newactor.actorthumb
                                                            'Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                                            'Dim res As HttpWebResponse = req.GetResponse()
                                                            'Dim contents As Stream = res.GetResponseStream()
                                                            'Dim bytesToRead As Integer = CInt(buffer.Length)
                                                            'While bytesToRead > 0
                                                            '    size = contents.Read(buffer, bytesRead, bytesToRead)
                                                            '    If size = 0 Then Exit While
                                                            '    bytesToRead -= size
                                                            '    bytesRead += size
                                                            'End While

                                                            'Dim fstrm As New FileStream(filename, FileMode.OpenOrCreate, FileAccess.Write)
                                                            'fstrm.Write(buffer, 0, bytesRead)
                                                            'contents.Close()
                                                            'fstrm.Close()
                                                        End If
                                                    End If
                                                    If Preferences.actorsave = True And detail.InnerText <> "" And Preferences.actorseasy = False Then
                                                        Dim workingpath As String = ""
                                                        Dim networkpath As String = Preferences.actorsavepath
                                                        Try
                                                            tempstring = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2)
                                                            Dim hg As New IO.DirectoryInfo(tempstring)
                                                            If Not hg.Exists Then
                                                                IO.Directory.CreateDirectory(tempstring)
                                                            End If
                                                            workingpath = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                            If Not IO.File.Exists(workingpath) Then
                                                                Utilities.DownloadFile(newactor.actorthumb, workingpath)
                                                                'Dim buffer(4000000) As Byte
                                                                'Dim size As Integer = 0
                                                                'Dim bytesRead As Integer = 0
                                                                'Dim thumburl As String = newactor.actorthumb
                                                                'Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                                                'Dim res As HttpWebResponse = req.GetResponse()
                                                                'Dim contents As Stream = res.GetResponseStream()
                                                                'Dim bytesToRead As Integer = CInt(buffer.Length)
                                                                'While bytesToRead > 0
                                                                '    size = contents.Read(buffer, bytesRead, bytesToRead)
                                                                '    If size = 0 Then Exit While
                                                                '    bytesToRead -= size
                                                                '    bytesRead += size
                                                                'End While

                                                                'Dim fstrm As New FileStream(workingpath, FileMode.OpenOrCreate, FileAccess.Write)
                                                                'fstrm.Write(buffer, 0, bytesRead)
                                                                'contents.Close()
                                                                'fstrm.Close()
                                                            End If
                                                            newactor.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, detail.InnerText.Substring(detail.InnerText.Length - 2, 2))
                                                            If Preferences.actornetworkpath.IndexOf("/") <> -1 Then
                                                                newactor.actorthumb = Preferences.actornetworkpath & "/" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "/" & detail.InnerText & ".jpg"
                                                            Else
                                                                newactor.actorthumb = Preferences.actornetworkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                            End If
                                                        Catch ex As Exception
#If SilentErrorScream Then
                                                            Throw ex
#End If
                                                        End Try
                                                    End If
                                                End If
                                        End Select
                                    Next
                                    WorkingTvShow.ListActors.Add(newactor)
                            End Select
                        Next
                        scraperLog = scraperLog & "Actors scraped OK"
                        While WorkingTvShow.ListActors.Count > Preferences.maxactors
                            WorkingTvShow.ListActors.RemoveAt(WorkingTvShow.ListActors.Count - 1)
                        End While
                    Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                    End Try

                End If
                Call nfoFunction.tv_NfoSave(WorkingTvShow.NfoFilePath, WorkingTvShow, True)
                Call tv_ShowLoad(WorkingTvShow)
                For Each item In Cache.TvCache.Shows
                    If item.NfoFilePath = WorkingTvShow.NfoFilePath Then
                        Dim newitem As New TvShow
                        For Each episode In item.Episodes
                            newitem.AddEpisode(episode)
                        Next
                        newitem.NfoFilePath = item.NfoFilePath
                        newitem.Status.Value = "ok"
                        newitem.EpisodeActorSource = item.EpisodeActorSource
                        newitem.Genre = WorkingTvShow.Genre
                        newitem.ImdbId = WorkingTvShow.ImdbId
                        newitem.Language = WorkingTvShow.Language
                        newitem.Rating = WorkingTvShow.Rating
                        newitem.SortOrder = WorkingTvShow.SortOrder
                        newitem.Title = WorkingTvShow.Title
                        'newitem.titleandyear = item.titleandyear
                        newitem.TvdbId = WorkingTvShow.TvdbId
                        newitem.Year = WorkingTvShow.Year
                        'TvShows.Remove(item)
                        'TvShows.Add(newitem)
                        'Call populatetvtree()
                        Exit For
                    End If
                Next
                messbox.Close()
            End If
        Else
            'its an episode
            tempint = MessageBox.Show("Rescraping the Episode will Overwrite all the current details" & vbCrLf & "Do you wish to continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
            If tempint = DialogResult.No Then
                Exit Sub
            End If
            Dim messbox As frmMessageBox = New frmMessageBox("The Selected Episode is being Rescraped", "", "Please Wait")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            messbox.Refresh()
            Application.DoEvents()
            Dim newepisode As New TvEpisode
            Dim sortorder As String = WorkingTvShow.SortOrder.Value
            Dim language As String = WorkingTvShow.Language.Value
            Dim actorsource As String = WorkingTvShow.EpisodeActorSource.Value
            Dim tvdbid As String = WorkingTvShow.TvdbId.Value
            Dim imdbid As String = WorkingTvShow.ImdbId.Value
            Dim seasonno As String = WorkingEpisode.Season.Value
            Dim episodeno As String = WorkingEpisode.Episode.Value
            'its an episode
            'Dim episodescraper As New TVDB.tvdbscraper 'commented because of removed TVDB.dll
            Dim episodescraper As New TVDBScraper
            If sortorder = "" Then sortorder = "default"
            If language = "" Then language = "en"
            If actorsource = "" Then actorsource = "tvdb"
            If tvdbid.IndexOf("tt").Equals(0) Then tv_IMDbID_detected = True
            Dim tempepisode As String = episodescraper.getepisode(tvdbid, sortorder, seasonno, episodeno, language)


            Dim scrapedepisode As New XmlDocument
            Try
                scrapedepisode.LoadXml(tempepisode)
                Dim thisresult As XmlNode = Nothing
                For Each thisresult In scrapedepisode("episodedetails")
                    Select Case thisresult.Name
                        Case "title"
                            newepisode.Title.Value = thisresult.InnerText
                        Case "premiered"
                            newepisode.Aired.Value = thisresult.InnerText
                        Case "plot"
                            newepisode.Plot.Value = thisresult.InnerText
                        Case "director"
                            newepisode.Director.Value = thisresult.InnerText
                            newepisode.Director.Value = newepisode.Director.Value.TrimStart("|")
                            newepisode.Director.Value = newepisode.Director.Value.TrimEnd("|")
                            newepisode.Director.Value = newepisode.Director.Value.Replace("|", " / ")
                        Case "credits"
                            newepisode.Credits.Value = thisresult.InnerText
                            newepisode.Credits.Value = newepisode.Credits.Value.TrimStart("|")
                            newepisode.Credits.Value = newepisode.Credits.Value.TrimEnd("|")
                            newepisode.Credits.Value = newepisode.Credits.Value.Replace("|", " / ")
                        Case "rating"
                            newepisode.Rating.Value = thisresult.InnerText
                        Case "thumb"
                            newepisode.Thumbnail.FileName = thisresult.InnerText
                        Case "genre"
                            newepisode.Genre.Value = thisresult.InnerText
                        Case "actor"
                            Dim actors As XmlNode = Nothing
                            For Each actorl In thisresult.ChildNodes
                                Select Case actorl.name
                                    Case "name"
                                        Dim newactor As New str_MovieActors(SetDefaults)
                                        newactor.actorname = actorl.innertext
                                        newepisode.ListActors.Add(newactor)
                                End Select
                            Next
                    End Select
                Next
                newepisode.PlayCount.Value = "0"
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try

            If actorsource = "tvdb" Then
                If newepisode.ListActors.Count > 0 Then
                    WorkingTvShow.ListActors.Clear()
                    For Each act In newepisode.ListActors
                        WorkingTvShow.ListActors.Add(act)
                    Next
                End If
            Else
                tvScraperLog = tvScraperLog & "Scraping actors from IMDB" & vbCrLf
                Dim url As String
                url = "http://www.imdb.com/title/" & imdbid & "/episodes"
                Dim tvfblinecount As Integer = 0
                Dim tvdbwebsource(10000)
                tvfblinecount = 0
                If bckgroundscanepisodes.CancellationPending Then
                    tvScraperLog = tvScraperLog & vbCrLf & "Operation Cancelled by user" & vbCrLf
                    Exit Sub
                End If
                Try
                    Dim wrGETURL As WebRequest
                    wrGETURL = WebRequest.Create(url)
                    Dim myProxy As New WebProxy("myproxy", 80)
                    myProxy.BypassProxyOnLocal = True
                    Dim objStream As Stream
                    objStream = wrGETURL.GetResponse.GetResponseStream()
                    Dim objReader As New StreamReader(objStream)
                    Dim tvdbsLine As String = ""
                    tvfblinecount = 0

                    Do While Not tvdbsLine Is Nothing
                        tvfblinecount += 1
                        tvdbsLine = objReader.ReadLine
                        If Not tvdbsLine Is Nothing Then
                            tvdbwebsource(tvfblinecount) = tvdbsLine
                        End If
                        If bckgroundscanepisodes.CancellationPending Then
                            tvScraperLog = tvScraperLog & vbCrLf & "Operation Cancelled by user" & vbCrLf
                            Exit Sub
                        End If
                    Loop
                    objReader.Close()
                    tvfblinecount -= 1
                Catch ex As WebException
                    tvdbwebsource(0) = "404"
                End Try
                If tvfblinecount <> 0 Then
                    Dim tvtempstring As String
                    tvtempstring = "Season " & seasonno & ", Episode " & episodeno & ":"
                    For g = 1 To tvfblinecount
                        If tvdbwebsource(g).indexof(tvtempstring) <> -1 Then
                            Dim tvtempint As Integer = 0
                            tvtempint = tvdbwebsource(g).indexof("<a href=""/title/")
                            If tvtempint <> -1 Then
                                tvtempstring = tvdbwebsource(g).substring(tvtempint + 16, 9)
                                '            Dim scraperfunction As New imdb.Classimdbscraper ' add to comment this one because of changes i made to the Class "Scraper" (ClassimdbScraper)
                                Dim scraperfunction As New Classimdb
                                Dim actorlist As String = ""
                                actorlist = scraperfunction.getimdbactors(Preferences.imdbmirror, tvtempstring, , Preferences.maxactors)
                                Dim tempactorlist As New List(Of str_MovieActors)
                                Dim thumbstring As New XmlDocument
                                Dim thisresult As XmlNode = Nothing
                                Try
                                    thumbstring.LoadXml(actorlist)
                                    thisresult = Nothing
                                    Dim actorcount As Integer = 0
                                    For Each thisresult In thumbstring("actorlist")
                                        If bckgroundscanepisodes.CancellationPending Then
                                            tvScraperLog = tvScraperLog & vbCrLf & "Operation Cancelled by user" & vbCrLf
                                            Exit Sub
                                        End If
                                        Select Case thisresult.Name
                                            Case "actor"
                                                If actorcount > Preferences.maxactors Then
                                                    Exit For
                                                End If
                                                actorcount += 1

                                                Dim newactor As New str_MovieActors(SetDefaults)
                                                Dim detail As XmlNode = Nothing
                                                For Each detail In thisresult.ChildNodes
                                                    Select Case detail.Name
                                                        Case "name"
                                                            newactor.actorname = detail.InnerText
                                                        Case "role"
                                                            newactor.actorrole = detail.InnerText
                                                        Case "thumb"
                                                            newactor.actorthumb = detail.InnerText
                                                        Case "actorid"
                                                            If newactor.actorthumb <> Nothing Then
                                                                If detail.InnerText <> "" And Preferences.actorseasy = True Then
                                                                    Dim workingpath As String = WorkingEpisode.VideoFilePath.Replace(IO.Path.GetFileName(WorkingEpisode.VideoFilePath), "")
                                                                    workingpath = workingpath & ".actors\"
                                                                    Dim hg As New IO.DirectoryInfo(workingpath)
                                                                    Dim destsorted As Boolean = False
                                                                    If Not hg.Exists Then
                                                                        Try
                                                                            IO.Directory.CreateDirectory(workingpath)
                                                                            destsorted = True
                                                                        Catch ex As Exception
#If SilentErrorScream Then
                                                                            Throw ex
#End If
                                                                        End Try
                                                                    Else
                                                                        destsorted = True
                                                                    End If
                                                                    If destsorted = True Then
                                                                        Dim filename As String = newactor.actorname.Replace(" ", "_")
                                                                        filename = filename & ".tbn"
                                                                        Dim tvshowactorpath As String = WorkingTvShow.NfoFilePath
                                                                        tvshowactorpath = tvshowactorpath.Replace(IO.Path.GetFileName(tvshowactorpath), "")
                                                                        tvshowactorpath = IO.Path.Combine(tvshowactorpath, ".actors\")
                                                                        tvshowactorpath = IO.Path.Combine(tvshowactorpath, filename)

                                                                        filename = IO.Path.Combine(workingpath, filename)
                                                                        If Preferences.copytvactorthumbs = True Then
                                                                            If IO.File.Exists(tvshowactorpath) Then
                                                                                Try
                                                                                    IO.File.Copy(tvshowactorpath, filename, True)
                                                                                Catch ex As Exception
#If SilentErrorScream Then
                                                                                    Throw ex
#End If
                                                                                End Try
                                                                            End If
                                                                        End If
                                                                        If Not IO.File.Exists(filename) Then
                                                                            Utilities.DownloadFile(newactor.actorthumb, filename)
                                                                            'Dim buffer(4000000) As Byte
                                                                            'Dim size As Integer = 0
                                                                            'Dim bytesRead As Integer = 0
                                                                            'Dim thumburl As String = newactor.actorthumb
                                                                            'Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                                                            'Dim res As HttpWebResponse = req.GetResponse()
                                                                            'Dim contents As Stream = res.GetResponseStream()
                                                                            'Dim bytesToRead As Integer = CInt(buffer.Length)
                                                                            'While bytesToRead > 0
                                                                            '    size = contents.Read(buffer, bytesRead, bytesToRead)
                                                                            '    If size = 0 Then Exit While
                                                                            '    bytesToRead -= size
                                                                            '    bytesRead += size
                                                                            'End While

                                                                            'Dim fstrm As New FileStream(filename, FileMode.OpenOrCreate, FileAccess.Write)
                                                                            'fstrm.Write(buffer, 0, bytesRead)
                                                                            'contents.Close()
                                                                            'fstrm.Close()
                                                                        End If
                                                                    End If
                                                                End If
                                                                If Preferences.actorsave = True And detail.InnerText <> "" And Preferences.actorseasy = False Then
                                                                    Dim workingpath As String = ""
                                                                    Dim networkpath As String = Preferences.actorsavepath
                                                                    Try
                                                                        tempstring = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2)
                                                                        Dim hg As New IO.DirectoryInfo(tempstring)
                                                                        If Not hg.Exists Then
                                                                            IO.Directory.CreateDirectory(tempstring)
                                                                        End If
                                                                        workingpath = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                                        If Not IO.File.Exists(workingpath) Then
                                                                            Utilities.DownloadFile(newactor.actorthumb, workingpath)
                                                                            'Dim buffer(4000000) As Byte
                                                                            'Dim size As Integer = 0
                                                                            'Dim bytesRead As Integer = 0
                                                                            'Dim thumburl As String = newactor.actorthumb
                                                                            'Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                                                            'Dim res As HttpWebResponse = req.GetResponse()
                                                                            'Dim contents As Stream = res.GetResponseStream()
                                                                            'Dim bytesToRead As Integer = CInt(buffer.Length)
                                                                            'While bytesToRead > 0
                                                                            '    size = contents.Read(buffer, bytesRead, bytesToRead)
                                                                            '    If size = 0 Then Exit While
                                                                            '    bytesToRead -= size
                                                                            '    bytesRead += size
                                                                            'End While
                                                                            'Dim fstrm As New FileStream(workingpath, FileMode.OpenOrCreate, FileAccess.Write)
                                                                            'fstrm.Write(buffer, 0, bytesRead)
                                                                            'contents.Close()
                                                                            'fstrm.Close()
                                                                        End If
                                                                        newactor.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, detail.InnerText.Substring(detail.InnerText.Length - 2, 2))
                                                                        If Preferences.actornetworkpath.IndexOf("/") <> -1 Then
                                                                            newactor.actorthumb = Preferences.actornetworkpath & "/" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "/" & detail.InnerText & ".jpg"
                                                                        Else
                                                                            newactor.actorthumb = Preferences.actornetworkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                                        End If
                                                                    Catch ex As Exception
#If SilentErrorScream Then
                                                                        Throw ex
#End If
                                                                    End Try
                                                                End If
                                                            End If
                                                    End Select
                                                Next
                                                tempactorlist.Add(newactor)
                                        End Select
                                    Next
                                Catch ex As Exception
                                    tvScraperLog = tvScraperLog & "Error scraping episode actors from IMDB, " & vbCrLf & ex.Message.ToString & vbCrLf & vbCrLf
                                End Try




                                If tempactorlist.Count > 0 Then
                                    While tempactorlist.Count > Preferences.maxactors
                                        tempactorlist.RemoveAt(tempactorlist.Count - 1)
                                    End While
                                    newepisode.ListActors.Clear()
                                    For Each actor In tempactorlist
                                        newepisode.ListActors.Add(actor)
                                    Next
                                    tempactorlist.Clear()
                                End If
                                Exit For
                            End If
                        End If
                    Next
                End If
            End If
            If newepisode.Title.Value <> "" Then
                WorkingEpisode.Aired = newepisode.Aired
                WorkingEpisode.Credits = newepisode.Credits
                WorkingEpisode.Director = newepisode.Director
                WorkingEpisode.Genre = newepisode.Genre
                WorkingEpisode.Plot = newepisode.Plot
                WorkingEpisode.Rating = newepisode.Rating
                WorkingEpisode.Title = newepisode.Title
                WorkingEpisode.ListActors.Clear()
                For Each actor In newepisode.ListActors
                    WorkingEpisode.ListActors.Add(actor)
                Next

                If Preferences.enablehdtags = True Then
                    WorkingEpisode.Details.StreamDetails.Video = Preferences.Get_HdTags(Utilities.GetFileName(WorkingEpisode.VideoFilePath)).filedetails_video
                    If WorkingEpisode.Details.StreamDetails.Video.DurationInSeconds.Value <> Nothing Then
                        Try
                            '1h 24mn 48s 546ms
                            Dim hours As Integer = 0
                            Dim minutes As Integer = 0
                            tempstring = WorkingEpisode.Details.StreamDetails.Video.DurationInSeconds.Value
                            tempint = tempstring.IndexOf("h")
                            If tempint <> -1 Then
                                hours = Convert.ToInt32(tempstring.Substring(0, tempint))
                                tempstring = tempstring.Substring(tempint + 1, tempstring.Length - (tempint + 1))
                                tempstring = Trim(tempstring)
                            End If
                            tempint = tempstring.IndexOf("mn")
                            If tempint <> -1 Then
                                minutes = Convert.ToInt32(tempstring.Substring(0, tempint))
                            End If
                            If hours <> 0 Then
                                hours = hours * 60
                            End If
                            minutes = minutes + hours
                            WorkingEpisode.Runtime.Value = minutes.ToString & " min"
                        Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                        End Try
                    End If
                End If
                'Call nfoFunction.saveepisodenfo(workingEpisode, workingEpisode(0).VideoFilePath)
                'Call loadtvepisode(workingEpisode(workingEpisodeIndex).VideoFilePath, workingEpisode(workingEpisodeIndex).Season.value, workingEpisode(workingEpisodeIndex).episodeno)
                WorkingEpisode.Save()
                'Call LoadTvEpisode(WorkingEpisode)
                tv_EpisodeSelected(TvTreeview.SelectedNode.Tag) 'reload the episode after it has been rescraped
                messbox.Close()
            End If
        End If
        If Not tv_IMDbID_warned And tv_IMDbID_detected Then
            MessageBox.Show(tv_IMDbID_detectedMsg, "TV Show ID", MessageBoxButtons.OK, MessageBoxIcon.Information)
            tv_IMDbID_warned = True
        End If
    End Sub

    Private Sub Button44_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button44.Click
        Try
            tv_Rescrape()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button45_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button45.Click
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()

            Dim TVShowNFOContent As String = ""
            If Button45.Text = "TVDB" Then
                WorkingTvShow.TvShowActorSource.Value = "imdb"
                Button45.Text = "IMDB"
            Else
                WorkingTvShow.TvShowActorSource.Value = "tvdb"
                Button45.Text = "TVDB"
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button46_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button46.Click
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
            Dim TVShowNFOContent As String = ""
            If Button46.Text = "TVDB" Then
                WorkingTvShow.EpisodeActorSource.Value = "imdb"
                Button46.Text = "IMDB"
            Else
                WorkingTvShow.EpisodeActorSource.Value = "tvdb"
                Button46.Text = "TVDB"
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button47_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button47.Click
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()

            Dim TVShowNFOContent As String = ""
            If Button47.Text = "Default" Then
                WorkingTvShow.SortOrder.Value = "dvd"
                Button47.Text = "DVD"
            Else
                WorkingTvShow.SortOrder.Value = "default"
                Button47.Text = "deault"
            End If
            'Dim DiditWork As Boolean = CreateMovieNfo(workingTvShow.path, TVShowNFOContent)
            'If DiditWork = True Then


            '    For Each Shows In TvShows
            '        If WorkingTvShow.path = Shows.fullpath Then
            '            Dim newtv As New TvShow
            '            newtv = Shows
            '            If Button47.Text = "Default" Then
            '                newtv.sortorder = "default"
            '            Else
            '                newtv.sortorder = "dvd"
            '            End If
            '            TvShows.Remove(Shows)
            '            TvShows.Add(newtv)
            '            Exit For
            '        End If
            '    Next
            'End If
            '        Call nfofunction.savetvshownfo(workingtvshow.path, workingtvshow, True)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub RenameTVShowsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_RenameEp.Click
        Try
            Dim renamelog As String = ""
            Dim tempint As Integer = 0

            Dim oldname As String = ""

            Dim nfofilestorename As New List(Of String)
            nfofilestorename.Clear()
            Dim donelist As New List(Of String)
            donelist.Clear()
            If TvTreeview.SelectedNode.Name.IndexOf("Missing: ") <> 0 Then
                If TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvEpisode Then
                    'individual episode
                    tempint = MessageBox.Show("Using this option will rename the selected episode" & vbCrLf & "Do you wish to continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
                    If tempint = DialogResult.No Then
                        Exit Sub
                    End If
                    If Not nfofilestorename.Contains(TvTreeview.SelectedNode.Name) And TvTreeview.SelectedNode.Name.IndexOf("Missing: ") <> 0 Then
                        nfofilestorename.Add(TvTreeview.SelectedNode.Name)
                    End If
                ElseIf TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvSeason Then
                    'season
                    tempint = MessageBox.Show("Using this option will rename all episode nfo's within the selected season" & vbCrLf & "Do you wish to continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
                    If tempint = DialogResult.No Then
                        Exit Sub
                    End If
                    Dim childnode As TreeNode
                    For Each childnode In TvTreeview.SelectedNode.Nodes
                        If Not nfofilestorename.Contains(childnode.Name) And childnode.Name.IndexOf("Missing: ") <> 0 Then
                            nfofilestorename.Add(childnode.Name)
                        End If
                    Next
                ElseIf TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvShow Then
                    'full show
                    tempint = MessageBox.Show("Using this option will rename all episode nfo's within the selected show" & vbCrLf & "Do you wish to continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
                    If tempint = DialogResult.No Then
                        Exit Sub
                    End If
                    Dim childnode As TreeNode
                    Dim childchildnode As TreeNode
                    For Each childnode In TvTreeview.SelectedNode.Nodes
                        For Each childchildnode In childnode.Nodes
                            If Not nfofilestorename.Contains(childchildnode.Name) And childchildnode.Name.IndexOf("Missing: ") <> 0 Then
                                nfofilestorename.Add(childchildnode.Name)
                            End If
                        Next
                    Next
                End If
            End If

            Dim messbox As New frmMessageBox("Renaming episodes,", "", "   Please Wait")
            messbox.Show()
            messbox.Refresh()
            Application.DoEvents()
            If nfofilestorename.Count <= 0 Then
                messbox.Close()
                Exit Sub
            End If
            renamelog = renamelog & nfofilestorename.Count & " nfo's to rename" & vbCrLf & vbCrLf
            For Each renamefile In nfofilestorename
                Dim seasonno As String = ""
                Dim episodetitle As String = ""
                Dim showtitle As String = ""
                Dim episodeno As New List(Of String)
                episodeno.Clear()
                For Each tvshow In Cache.TvCache.Shows
                    Dim showpath As String = tvshow.NfoFilePath.Replace(IO.Path.GetFileName(tvshow.NfoFilePath), "")
                    If renamefile.IndexOf(showpath) <> -1 Then
                        showtitle = tvshow.Title.Value

                        For Each episode In tvshow.Episodes
                            If episode.NfoFilePath = renamefile Then
                                If seasonno = "" Then
                                    seasonno = episode.Season.Value
                                End If
                                If episodetitle = "" Then
                                    episodetitle = episode.Title.Value
                                End If
                                episodeno.Add(episode.Episode.Value)
                            End If
                        Next
                        Dim newfilename As String
                        newfilename = ""
                        If seasonno.Length = 1 Then
                            seasonno = "0" & seasonno
                        End If
                        For f = 0 To episodeno.Count - 1
                            If episodeno(f).Length = 1 Then
                                episodeno(f) = "0" & episodeno(f)
                            End If
                        Next
                        newfilename = Renamer.setTVFilename(showtitle, episodetitle, episodeno, seasonno)

                        newfilename = newfilename.Replace("?", "")
                        newfilename = newfilename.Replace("/", "")
                        newfilename = newfilename.Replace("\", "")
                        newfilename = newfilename.Replace("<", "")
                        newfilename = newfilename.Replace(">", "")
                        newfilename = newfilename.Replace(":", "")
                        newfilename = newfilename.Replace("""", "")
                        newfilename = newfilename.Replace("*", "")
                        Dim listtorename As New List(Of String)
                        listtorename.Clear()
                        listtorename.Add(renamefile)
                        For Each ext In Utilities.VideoExtensions
                            If ext = "VIDEO_TS.IFO" Then Continue For
                            Dim temppath2 As String = renamefile.Replace(IO.Path.GetExtension(renamefile), ext)
                            If IO.File.Exists(temppath2) Then
                                listtorename.Add(temppath2)
                            End If
                        Next
                        Dim temppath As String = renamefile
                        temppath = temppath.Replace(IO.Path.GetExtension(temppath), ".tbn")
                        If IO.File.Exists(temppath) Then
                            listtorename.Add(temppath)
                        End If
                        temppath = temppath.Replace(IO.Path.GetExtension(temppath), ".rar")
                        If IO.File.Exists(temppath) Then
                            listtorename.Add(temppath)
                        End If

                        Dim di As DirectoryInfo = New DirectoryInfo(renamefile.Replace(IO.Path.GetFileName(renamefile), ""))
                        Dim filenama As String = IO.Path.GetFileNameWithoutExtension(renamefile)
                        Dim fils As IO.FileInfo() = di.GetFiles(filenama & ".*")
                        For Each fiNext In fils
                            If Not listtorename.Contains(fiNext.FullName) Then
                                listtorename.Add(fiNext.FullName)
                            End If
                        Next
                        Dim oldnfofile As String = ""
                        Dim newnfofile As String = ""
                        For Each items In listtorename
                            If IO.Path.GetExtension(items).ToLower = ".nfo" And oldnfofile = "" Then
                                oldnfofile = items
                                newnfofile = items.Replace(IO.Path.GetFileName(items), newfilename) & IO.Path.GetExtension(items)
                                newnfofile = newnfofile.Replace("..", ".")
                            End If
                            Dim newname As String = items.Replace(IO.Path.GetFileName(items), newfilename) & IO.Path.GetExtension(items)
                            newname = newname.Replace("..", ".")
                            Try
                                renamelog = renamelog & "Renaming" & vbCrLf
                                renamelog = renamelog & items & vbCrLf & " to " & vbCrLf & newname & vbCrLf
                                Dim fi As New IO.FileInfo(items)
                                If Not IO.File.Exists(newname) Then
                                    fi.MoveTo(newname)
                                    If items.ToLower = IO.Path.Combine(TextBox17.Text, TextBox29.Text).ToLower Then
                                        TextBox29.Text = IO.Path.GetFileName(fi.FullName)
                                    End If
                                    renamelog = renamelog & "Succeeded" & vbCrLf & vbCrLf
                                Else
                                    renamelog = renamelog & "Not Renamed - Same" & vbCrLf & vbCrLf
                                End If

                            Catch ex As Exception
                                renamelog = renamelog & "Not Succeeded" & vbCrLf & ex.Message.ToString
                            End Try
                        Next
                        renamelog = renamelog & "Updating Tables" & vbCrLf
                        Try
                            For Each noder2 In TvTreeview.Nodes
                                If noder2.name = oldnfofile Then
                                    noder2.name = newnfofile
                                End If
                                For Each noder3 In noder2.nodes
                                    If noder3.name = oldnfofile Then
                                        noder3.name = newnfofile
                                    End If
                                    For Each noder4 In noder3.nodes
                                        If noder4.name = oldnfofile Then
                                            noder4.name = newnfofile
                                        End If
                                    Next
                                Next
                            Next
                            For Each episode In tvshow.Episodes
                                If episode.NfoFilePath = oldnfofile Then
                                    episode.NfoFilePath = newnfofile
                                End If
                            Next
                            renamelog = renamelog & "Tables Updated" & vbCrLf & vbCrLf
                        Catch
                            renamelog = renamelog & "Failed to update tables, use 'Rebuild TV Shows' menu item to fix" & vbCrLf & vbCrLf
                        End Try
                    End If
                Next
            Next
            Call Tv_CacheSave("New Function")
            messbox.Close()
            If Preferences.disabletvlogs = False Then
                Dim MyFormObject As New frmoutputlog(renamelog, True)
                Try
                    MyFormObject.ShowDialog()
                Catch ex As ObjectDisposedException

                Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
                End Try
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button48_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button48.Click
        Try
            Dim WorkingEpisode As TvEpisode = ep_SelectedCurrently()
            Try
                If IsNumeric(workingepisode.playcount) Then
                    If Convert.ToInt32(workingepisode.playcount) <= 0 Then
                        WorkingEpisode.PlayCount.Value = "1"
                        Button48.Text = "Watched"
                        Button48.BackColor = Color.Green
                    Else
                        WorkingEpisode.PlayCount.Value = "0"
                        Button48.Text = "UnWatched"
                        Button48.BackColor = Color.Red
                    End If
                Else
                    WorkingEpisode.PlayCount.Value = "0"
                    Button48.Text = "UnWatched"
                    Button48.BackColor = Color.Red
                End If
                WorkingEpisode.Save()
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub tv_PosterSetup()
        Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
        'If workingTvShow.tvdbid = currentposterid Then
        '    Exit Sub
        'End If
        tvposterpage = 0
        imdbposterlist.Clear()
        tvdbposterlist.Clear()
        rbTVposter.Checked = True
        rbTVposter.Enabled = False
        rbTVbanner.Enabled = False
        ComboBox2.Items.Clear()
        tvobjects.Clear()
        TextBox31.Text = WorkingTvShow.Title.Value
        Label72.Text = ""
        'If IO.File.Exists(workingtvshow.path.Replace("tvshow.nfo", "folder.jpg")) Then
        '    Dim bmp As New Bitmap(workingtvshow.path.Replace("tvshow.nfo", "folder.jpg"))
        '    PictureBox12.Image = bmp
        'End If
        For i = Panel16.Controls.Count - 1 To 0 Step -1
            Panel16.Controls.RemoveAt(i)
        Next

        ComboBox2.Items.Add("Main Poster")
        ComboBox2.Items.Add("Season All")
        For Each tvshow In Cache.TvCache.Shows
            If tvshow.TvdbId = WorkingTvShow.TvdbId Then
                currentposterid = tvshow.TvdbId.Value
                For Each Season As Media_Companion.TvSeason In tvshow.Seasons.Values
                    For Each ep As Media_Companion.TvEpisode In Season.Episodes
                        Dim seasonstring As String = ""

                        If ep.Season.Value < 1 Then
                            seasonstring = "Specials"
                        Else
                            seasonstring = "Season " & Utilities.PadNumber(ep.Season.Value.ToString, 2)
                        End If

                        If Not ComboBox2.Items.Contains(seasonstring) Then
                            ComboBox2.Items.Add(seasonstring)
                        End If
                    Next
                Next
                Exit For
            End If
        Next

        ComboBox2.SelectedIndex = 0

        '        For Each item In tvobjects
        '            ComboBox2.Items.Add(item)
        '            If item = combostart Then
        '                Try
        '                    ComboBox2.SelectedIndex = ComboBox2.Items.Count - 1
        '                Catch ex As Exception
        '#If SilentErrorScream Then
        '                    Throw ex
        '#End If
        '                End Try
        '            End If
        '        Next

    End Sub

    Private Sub ComboBox2_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles ComboBox2.SelectedIndexChanged
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
            Dim tempstring As String = ComboBox2.SelectedItem
            If tempstring = "Main Poster" Then
                rbTVposter.Enabled = True
                rbTVbanner.Enabled = True
                If Preferences.postertype = "banner" Then
                    rbTVbanner.Checked = True
                Else
                    rbTVposter.Checked = True
                End If
                Button53.Enabled = True
                If IO.File.Exists(WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "folder.jpg")) Then
                    Dim bmp As New Bitmap(WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "folder.jpg"))
                    workingposterpath = WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "folder.jpg")
                    Dim Image2 As New Bitmap(bmp)
                    bmp.Dispose()
                    PictureBox12.Image = Image2
                    Label73.Text = "Current Poster - " & PictureBox12.Image.Width.ToString & " x " & PictureBox12.Image.Height.ToString
                Else
                    workingposterpath = WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "folder.jpg")
                    Dim bmp As New Bitmap(defaultPoster)
                    Dim Image2 As New Bitmap(bmp)
                    bmp.Dispose()
                    PictureBox12.Image = Image2
                    Label73.Text = "Current Poster - " & PictureBox12.Image.Width.ToString & " x " & PictureBox12.Image.Height.ToString
                End If
            ElseIf tempstring = "Specials" Then
                Button53.Enabled = True
                rbTVposter.Enabled = True
                rbTVposter.Checked = True
                rbTVbanner.Enabled = False
                Dim path As String = WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "season-specials.tbn")
                If IO.File.Exists(path) Then
                    workingposterpath = WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "season-specials.tbn")
                    Dim bmp As New Bitmap(path)
                    Dim Image2 As New Bitmap(bmp)
                    bmp.Dispose()
                    PictureBox12.Image = Image2
                    Label73.Text = "Current Poster - " & PictureBox12.Image.Width.ToString & " x " & PictureBox12.Image.Height.ToString
                Else
                    If IO.File.Exists(WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "season00.tbn")) Then
                        Try
                            Dim fi As New IO.FileInfo(WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "season00.tbn"))
                            Dim rename2 As String = WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "season-specials.tbn")
                            fi.MoveTo(rename2)
                        Catch ex As Exception
                            Dim bmp As New Bitmap(defaultPoster)
                            Dim Image2 As New Bitmap(bmp)
                            bmp.Dispose()
                            PictureBox12.Image = Image2
                            Label73.Text = "Current Poster - " & PictureBox12.Image.Width.ToString & " x " & PictureBox12.Image.Height.ToString
                        End Try
                    Else
                        Dim bmp As New Bitmap(defaultPoster)
                        Dim Image2 As New Bitmap(bmp)
                        bmp.Dispose()
                        PictureBox12.Image = Image2
                        Label73.Text = "Current Poster - " & PictureBox12.Image.Width.ToString & " x " & PictureBox12.Image.Height.ToString
                    End If
                End If
            ElseIf tempstring.IndexOf("Season") = 0 And tempstring.IndexOf("Season All") = -1 Then
                Button53.Enabled = True
                rbTVposter.Enabled = True
                rbTVposter.Checked = True
                rbTVbanner.Enabled = False
                Dim path As String = tempstring.Replace("Season ", "")
                path = WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "season" & path & ".tbn")
                If IO.File.Exists(path) Then
                    workingposterpath = path
                    Dim bmp As New Bitmap(path)
                    Dim Image2 As New Bitmap(bmp)
                    bmp.Dispose()
                    PictureBox12.Image = Image2
                    Label73.Text = "Current Poster - " & PictureBox12.Image.Width.ToString & " x " & PictureBox12.Image.Height.ToString
                Else
                    workingposterpath = path
                    Dim bmp As New Bitmap(defaultPoster)
                    Dim Image2 As New Bitmap(bmp)
                    bmp.Dispose()
                    PictureBox12.Image = Image2
                    Label73.Text = "Current Poster - " & PictureBox12.Image.Width.ToString & " x " & PictureBox12.Image.Height.ToString
                End If
            ElseIf tempstring = "Season All" Then
                rbTVposter.Enabled = True
                rbTVbanner.Enabled = True
                If Preferences.seasonall = "wide" Then
                    rbTVbanner.Checked = True
                Else
                    rbTVposter.Checked = True
                End If
                Button53.Enabled = False
                Dim path As String = ""
                path = WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "season-all.tbn")
                If IO.File.Exists(path) Then
                    workingposterpath = path
                    Dim bmp As New Bitmap(path)
                    Dim Image2 As New Bitmap(bmp)
                    bmp.Dispose()
                    PictureBox12.Image = Image2
                    Label73.Text = "Current Poster - " & PictureBox12.Image.Width.ToString & " x " & PictureBox12.Image.Height.ToString
                Else
                    workingposterpath = path
                    Dim bmp As New Bitmap(defaultPoster)
                    Dim Image2 As New Bitmap(bmp)
                    bmp.Dispose()
                    PictureBox12.Image = Image2
                    Label73.Text = "Current Poster - " & PictureBox12.Image.Width.ToString & " x " & PictureBox12.Image.Height.ToString
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub tv_TvdbThumbsGet()
        Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
        Dim showlist As New XmlDocument
        'Dim tvdbstuff As New TVDB.tvdbscraper 'commented because of removed TVDB.dll
        Dim tvdbstuff As New TVDBScraper
        Dim thumblist As String = tvdbstuff.GetPosterList(WorkingTvShow.TvdbId.Value)
        Try
            showlist.LoadXml(thumblist)
        Catch ex As Exception
            MsgBox(thumblist, MsgBoxStyle.OkOnly, "TVdb site returned.....")
            'thumblist = "<error>ERROR</error>"
            'showlist.LoadXml(thumblist)
            Exit Sub
        End Try

        'CheckBox3 = seasons
        'CheckBox4 = fanart
        'CheckBox5 = poster
        For Each thisresult In showlist("banners")
            Select Case thisresult.Name
                Case "banner"
                    Dim individualposter As New TvBanners
                    For Each results In thisresult.ChildNodes
                        Select Case results.Name
                            Case "url"
                                individualposter.Url = results.InnerText
                            Case "bannertype"
                                individualposter.BannerType = results.InnerText
                            Case "resolution"
                                individualposter.Resolution = results.InnerText
                            Case "language"
                                individualposter.Language = results.InnerText
                            Case "season"
                                individualposter.Season = results.InnerText

                        End Select
                    Next
                    individualposter.SmallUrl = individualposter.Url.Replace("http://thetvdb.com/banners/", "http://thetvdb.com/banners/_cache/")
                    tvdbposterlist.Add(individualposter)
            End Select
        Next
    End Sub

    Private Sub Button53_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button53.Click
        Try
            'tvdb specific
            tvdbmode = True
            usedlist.Clear()
            Button56.Visible = False
            Button57.Visible = False
            If tvdbposterlist.Count = 0 Then
                Call tv_TvdbThumbsGet()
            End If

            Dim tempseason As String = ""
            If ComboBox2.SelectedItem.indexof("Season ") <> -1 Then
                tempseason = ComboBox2.SelectedItem.replace("Season ", "")
            End If
            If tempseason.IndexOf("0") = 0 And tempseason.Length > 1 Then
                tempseason = tempseason.Substring(1, tempseason.Length - 1)
            End If
            If ComboBox2.SelectedItem.indexof("Specials") <> -1 Then
                tempseason = "0"
            End If
            'If ComboBox2.SelectedItem.indexof("Main Poster") <> -1 And CheckBox8.Checked = True Then
            If ComboBox2.SelectedItem.indexof("Main Poster") <> -1 And rbTVposter.Checked = True Then
                tempseason = "poster"
                'ElseIf ComboBox2.SelectedItem.indexof("Main Poster") <> -1 And CheckBox8.Checked = False Then
            ElseIf ComboBox2.SelectedItem.indexof("Main Poster") <> -1 And rbTVposter.Checked = False Then
                tempseason = "series"
            End If
            If tempseason = "poster" Or tempseason = "series" Then
                For Each poster In tvdbposterlist
                    'If poster.bannerType = "poster" And CheckBox8.Checked = True Then
                    If poster.BannerType = "poster" And rbTVposter.Checked = True Then
                        If poster.BannerType <> "fanart" Then usedlist.Add(poster)
                    End If
                    'If poster.bannerType = "series" And CheckBox8.Checked = False Then
                    If poster.BannerType = "series" And rbTVposter.Checked = False Then
                        If poster.BannerType <> "fanart" Then usedlist.Add(poster)
                    End If
                Next
            Else
                For Each poster In tvdbposterlist
                    If poster.Season = tempseason Then
                        If poster.BannerType <> "fanart" Then usedlist.Add(poster)
                    End If
                Next
            End If

            Call tv_PosterPanelPopulate()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub tv_PosterPanelPopulate()
        tvposterpage = 1
        If usedlist.Count <= 0 Then
            Label72.Text = "Displaying 0 of 0 Images"
            Button54.Visible = False
            Button55.Visible = False
            Exit Sub
        End If

        If usedlist.Count > Preferences.maximumthumbs Then
            Button54.Visible = True
            Button55.Visible = True
            If usedlist.Count >= Preferences.maximumthumbs Then
                Label72.Text = "Displaying 1 to 10 of " & usedlist.Count.ToString & " Images"
            Else
                Label72.Text = "Displaying 1 to " & usedlist.Count.ToString & " of " & usedlist.Count.ToString & " Images"
            End If
            Label72.Visible = True
            Me.Refresh()
            Application.DoEvents()
            Button55.Enabled = False
            Button54.Enabled = True
        Else
            Button54.Visible = False
            Button55.Visible = False
            If posterArray.Count >= Preferences.maximumthumbs Then
                Label72.Text = "Displaying 1 to " & Preferences.maximumthumbs & " of " & usedlist.Count.ToString & " Images"
            Else
                Label72.Text = "Displaying 1 to " & usedlist.Count.ToString & " of " & usedlist.Count.ToString & " Images"
            End If
            Label72.Visible = True
            Me.Refresh()
            Application.DoEvents()
        End If
        Call tv_PosterSelectionDisplay()
    End Sub

    Private Sub tv_PosterSelectionDisplay()

        For i = Panel16.Controls.Count - 1 To 0 Step -1
            Panel16.Controls.RemoveAt(i)
        Next



        Dim tempint As Integer = (tvposterpage * (Preferences.maximumthumbs) + 1) - Preferences.maximumthumbs
        Dim tempint2 As Integer = tvposterpage * 10

        If tempint2 > usedlist.Count Then
            tempint2 = usedlist.Count
        End If

        Label72.Text = "Displaying " & tempint.ToString & " to " & tempint2 & " of " & usedlist.Count.ToString & " Images"

        Dim location As Integer = 0
        Dim itemcounter As Integer = 0
        Dim tempboolean As Boolean = True
        'If CheckBox8.Checked = True Or CheckBox8.Visible = False Then
        If rbTVposter.Checked = True Or rbTVbanner.Enabled = False Then
            For f = tempint - 1 To tempint2 - 1
                If tempboolean = True Then
                    tvposterpicboxes() = New PictureBox()
                    With tvposterpicboxes
                        .Location = New Point(location, 0)
                        .Width = 123
                        .Height = 168
                        .SizeMode = PictureBoxSizeMode.Zoom
                        .ImageLocation = usedlist(f).SmallUrl
                        .Tag = usedlist(f).Url
                        .Visible = True
                        .BorderStyle = BorderStyle.Fixed3D
                        .Name = "poster" & itemcounter.ToString
                        AddHandler tvposterpicboxes.DoubleClick, AddressOf tv_PosterDoubleClick
                        'AddHandler tvposterpicboxes.LoadCompleted, AddressOf imageres
                    End With

                    tvpostercheckboxes() = New RadioButton()
                    With tvpostercheckboxes
                        .Location = New Point(location + 50, 166) '179
                        .Name = "postercheckbox" & itemcounter.ToString
                        .SendToBack()
                        .Text = " "
                        AddHandler tvpostercheckboxes.CheckedChanged, AddressOf tv_PosterRadioChanged
                    End With

                    itemcounter += 1


                    Me.Panel16.Controls.Add(tvposterpicboxes())
                    Me.Panel16.Controls.Add(tvpostercheckboxes())
                End If
                If tempboolean = False Then
                    tvposterpicboxes() = New PictureBox()
                    With tvposterpicboxes
                        .Location = New Point(location, 192) '210
                        .Width = 123
                        .Height = 168
                        .SizeMode = PictureBoxSizeMode.Zoom
                        .ImageLocation = usedlist(f).SmallUrl
                        .Tag = usedlist(f).Url
                        .Visible = True
                        .BorderStyle = BorderStyle.Fixed3D
                        .Name = "poster" & itemcounter.ToString
                        AddHandler tvposterpicboxes.DoubleClick, AddressOf tv_PosterDoubleClick
                    End With

                    tvpostercheckboxes() = New RadioButton()
                    With tvpostercheckboxes
                        .Location = New Point(location + 50, 358) '389
                        .Name = "postercheckbox" & itemcounter.ToString
                        .SendToBack()
                        .Text = " "
                        AddHandler tvpostercheckboxes.CheckedChanged, AddressOf tv_PosterRadioChanged
                    End With

                    itemcounter += 1


                    Me.Panel16.Controls.Add(tvposterpicboxes())
                    Me.Panel16.Controls.Add(tvpostercheckboxes())
                End If
                Me.Refresh()
                Application.DoEvents()
                If tempboolean = False Then location += 120
                tempboolean = Not tempboolean
            Next
        Else
            For f = tempint - 1 To tempint2 - 1
                If tempboolean = True Then
                    tvposterpicboxes() = New PictureBox()
                    With tvposterpicboxes
                        .Location = New Point(0, location)
                        .Width = 600
                        .Height = 114
                        .SizeMode = PictureBoxSizeMode.Zoom
                        .ImageLocation = usedlist(f).SmallUrl
                        .Tag = usedlist(f).Url
                        .Visible = True
                        .BorderStyle = BorderStyle.Fixed3D
                        .Name = "poster" & itemcounter.ToString
                        AddHandler tvposterpicboxes.DoubleClick, AddressOf tv_PosterDoubleClick
                        'AddHandler tvposterpicboxes.LoadCompleted, AddressOf imageres
                    End With

                    tvpostercheckboxes() = New RadioButton()
                    With tvpostercheckboxes
                        .Location = New Point(290, location + 110)
                        .Name = "postercheckbox" & itemcounter.ToString
                        .SendToBack()
                        .Text = " "
                        AddHandler tvpostercheckboxes.CheckedChanged, AddressOf tv_PosterRadioChanged
                    End With

                    itemcounter += 1
                    location += 140

                    Me.Panel16.Controls.Add(tvposterpicboxes())
                    Me.Panel16.Controls.Add(tvpostercheckboxes())
                End If
            Next
        End If
        Me.Refresh()
        Application.DoEvents()

    End Sub

    Private Sub tv_PosterRadioChanged(ByVal sender As Object, ByVal e As EventArgs)
        PictureBox13.Image = Nothing
        Dim tempstring As String = sender.name
        Dim tempint As Integer = 0
        Dim tempstring2 As String = tempstring
        Dim allok As Boolean = False
        tempstring = tempstring.Replace("postercheckbox", "")
        tempint = Convert.ToDecimal(tempstring)
        'For Each button As Control In Me.Panel8.Controls
        '    If button.Name.IndexOf("postercheckbox") <> -1 Then
        '        Dim b1 As RadioButton = CType(button, RadioButton)
        '        If b1.Checked = True Then
        '            allok = True
        '            Exit For
        '        End If
        '    End If
        'Next

        Dim hires(1)
        Dim lores(1)
        lores(0) = ""
        hires(0) = ""
        lores(1) = ""
        hires(1) = ""
        For Each cont As Control In Me.Panel16.Controls()
            If cont.Name.Replace("poster", "") = tempint.ToString Then
                Dim picbox As PictureBox = cont
                lores(0) = "Save Image (" & picbox.Image.Width & " x " & picbox.Image.Height & ")"
                lores(1) = picbox.Name
                If tvdbmode = True Then
                    For Each poster In usedlist
                        If poster.smallUrl = picbox.ImageLocation Then
                            If IsNumeric(poster.resolution.Replace("x", "")) Then
                                hires(0) = "Save Image (" & poster.resolution & ")"
                                hires(0) = hires(0).replace("x", " x ")
                            Else
                                hires(0) = "Save Image (Hi-Res)"
                            End If
                            hires(1) = poster.url
                            Exit For
                        End If
                    Next
                    allok = True
                    Exit For
                Else
                    allok = True
                End If
            End If
        Next

        If allok = True Then
            Button57.Visible = True
            Button57.Tag = lores(1)
            Button57.Text = lores(0)
            If tvdbmode = True Then
                Button56.Text = hires(0)
                Button56.Visible = True
                Button56.Tag = hires(1)
            Else
                Button56.Visible = False
            End If

        Else
            Button56.Visible = False
            Button57.Visible = False
        End If
    End Sub

    Private Sub tv_PosterDoubleClick(ByVal sender As Object, ByVal e As EventArgs)
        Dim tempstring As String = sender.name.replace("poster", "postercheckbox")

        For Each Control In Panel16.Controls
            If Control.name = tempstring Then
                Dim rb As RadioButton = Control
                rb.Checked = True
            End If
        Next
        Dim messbox As frmMessageBox = New frmMessageBox("Please wait,", "", "Downloading Full Res Image")
        System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
        messbox.Show()
        Me.Refresh()
        messbox.Refresh()
        PictureBox13.ImageLocation = sender.tag
        PictureBox13.Load()
        messbox.Close()
        Call util_ZoomImage(PictureBox13.Image)
    End Sub

    Private Sub Button52_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button52.Click
        Try
            'tvdb all
            tvdbmode = True
            usedlist.Clear()
            Button56.Visible = False
            Button57.Visible = False
            If tvdbposterlist.Count = 0 Then
                Call tv_TvdbThumbsGet()
            End If
            For Each poster In tvdbposterlist
                'If CheckBox8.Visible = False Then
                If rbTVbanner.Enabled = False Then
                    If poster.BannerType <> "fanart" And poster.BannerType <> "series" Then
                        usedlist.Add(poster)
                    End If
                Else
                    'If CheckBox8.Checked = False And poster.BannerType = "series" Then
                    If rbTVposter.Checked = False And poster.BannerType = "series" Then
                        usedlist.Add(poster)
                        'ElseIf CheckBox8.Checked = True And poster.BannerType <> "fanart" Then
                    ElseIf rbTVposter.Checked = True And poster.BannerType <> "fanart" Then
                        If poster.BannerType <> "series" Then usedlist.Add(poster)
                    End If

                End If
            Next


            Call tv_PosterPanelPopulate()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button56_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button56.Click
        Try
            'savebig
            Dim witherror As Boolean = False
            Dim witherror2 As Boolean = False
            Dim path As String = ""
            If ComboBox2.Text.ToLower = "main poster" Then
                path = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "folder.jpg")
            ElseIf ComboBox2.Text.ToLower.IndexOf("season") <> -1 And ComboBox2.Text.ToLower.IndexOf("all") = -1 Then
                Dim temp As String = ComboBox2.Text.ToLower
                temp = temp.Replace(" ", "")
                path = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), temp & ".tbn")
            ElseIf ComboBox2.Text.ToLower.IndexOf("season") <> -1 And ComboBox2.Text.ToLower.IndexOf("all") <> -1 Then
                path = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-all.tbn")
            ElseIf ComboBox2.Text.ToLower = "specials" Then
                path = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-specials.tbn")
            End If
            If PictureBox13.ImageLocation = Button56.Tag And Not PictureBox13.Image Is Nothing Then
                PictureBox13.Image.Save(path, Imaging.ImageFormat.Jpeg)
                If combostart = ComboBox2.SelectedItem Then
                    tv_PictureBoxRight.Image = PictureBox13.Image
                End If
                PictureBox12.Image = PictureBox13.Image
                Label73.Text = "Current Poster - " & PictureBox12.Image.Width.ToString & " x " & PictureBox12.Image.Height.ToString
            Else
                Dim messbox As frmMessageBox = New frmMessageBox("Please wait,", "", "Downloading Full Res Image")
                System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
                messbox.Show()
                Me.Refresh()
                messbox.Refresh()
                Dim i1 As New PictureBox

                With i1
                    .WaitOnLoad = True
                    Try
                        .ImageLocation = Button56.Tag
                    Catch
                        witherror = True
                        Try
                            .ImageLocation = Button57.Tag
                        Catch
                            witherror2 = True
                        End Try
                    End Try
                End With

                Try
                    If Not i1 Is Nothing Then
                        i1.Image.Save(path, Imaging.ImageFormat.Jpeg)
                        Dim OriginalImage As New Bitmap(path)
                        Dim Image2 As New Bitmap(OriginalImage)
                        OriginalImage.Dispose()

                        'If TvTreeview.SelectedNode.Name.ToLower.IndexOf("tvshow.nfo") <> -1 Or TvTreeview.SelectedNode.Name = "" Then
                        tv_PictureBoxRight.ImageLocation = path
                        tv_PictureBoxRight.Load()
                        'End If
                        workingposterpath = path

                        PictureBox12.Image = Image2
                        Label73.Text = "Current Poster - " & PictureBox12.Image.Width.ToString & " x " & PictureBox12.Image.Height.ToString
                    End If

                    If witherror = True And witherror2 = False Then
                        MsgBox("Unable to download hires image" & vbCrLf & "Lores Image downloaded instead")
                    End If
                    If witherror2 = True Then
                        MsgBox("Unable to download image")
                    End If
                Catch ex As Exception
                    MsgBox(ex.ToString)
                Finally

                    messbox.Close()
                End Try
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button57_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button57.Click
        Try
            'savesmall
            Dim postname As String = ""
            For Each Control In Panel16.Controls
                If Control.name.indexof("postercheckbox") <> -1 Then
                    Dim rb As RadioButton = Control
                    If rb.Checked = True Then
                        postname = Control.name.replace("postercheckbox", "poster")
                        Exit For
                    End If
                End If
            Next
            If postname <> "" Then
                For Each Control In Panel16.Controls
                    If Control.name = postname Then
                        Try
                            Dim path As String = ""
                            If ComboBox2.Text.ToLower = "main poster" Then
                                path = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "folder.jpg")
                            ElseIf ComboBox2.Text.ToLower.IndexOf("season") <> -1 And ComboBox2.Text.ToLower.IndexOf("all") = -1 Then
                                Dim temp As String = ComboBox2.Text.ToLower
                                temp = temp.Replace(" ", "")
                                path = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), temp & ".tbn")
                            ElseIf ComboBox2.Text.ToLower.IndexOf("season") <> -1 And ComboBox2.Text.ToLower.IndexOf("all") <> -1 Then
                                path = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-all.tbn")
                            ElseIf ComboBox2.Text.ToLower = "specials" Then
                                path = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-specials.tbn")
                            End If
                            Dim newpicbox As PictureBox = Control
                            newpicbox.Image.Save(path, Imaging.ImageFormat.Jpeg)
                            If combostart = ComboBox2.SelectedItem Then
                                tv_PictureBoxRight.Image = newpicbox.Image
                            End If
                            PictureBox12.Image = newpicbox.Image
                            Label73.Text = "Current Poster - " & PictureBox12.Image.Width.ToString & " x " & PictureBox12.Image.Height.ToString

                            If TvTreeview.SelectedNode.Name.ToLower.IndexOf("tvshow.nfo") <> -1 Or TvTreeview.SelectedNode.Name = "" Then
                                tv_PictureBoxRight.ImageLocation = path
                                tv_PictureBoxRight.Load()
                            End If
                            workingposterpath = path
                        Catch ex As Exception
                            MsgBox(ex.ToString)
                        End Try
                    End If
                Next
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button54_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button54.Click
        Try
            tvposterpage += 1
            Button56.Visible = False
            Button57.Visible = False
            If usedlist.Count < 10 * tvposterpage Then
                Button54.Enabled = False
            End If
            Call tv_PosterSelectionDisplay()
            Button55.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button55_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button55.Click
        Try
            tvposterpage -= 1
            Button56.Visible = False
            Button57.Visible = False
            If tvposterpage = 1 Then
                Button55.Enabled = False
            End If
            Call tv_PosterSelectionDisplay()
            Button54.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button58_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button58.Click
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
            If WorkingTvShow.ImdbId = Nothing Then
                MsgBox("No IMDB ID is available for this movie, cant scrape posters")
                Exit Sub
            End If
            If WorkingTvShow.ImdbId.Value = "" Then
                MsgBox("No IMDB ID is available for this movie, cant scrape posters")
                Exit Sub
            End If
            Dim ok As Boolean = False
            If WorkingTvShow.ImdbId.Value.ToLower.IndexOf("tt") = 0 Then
                Dim tempstring As String = WorkingTvShow.ImdbId.Value.ToLower.Substring(2, WorkingTvShow.ImdbId.Value.Length - 2)
                If IsNumeric(tempstring) Then
                    ok = True
                End If
            End If
            If IsNumeric(WorkingTvShow.ImdbId) And WorkingTvShow.ImdbId.Value.Length = 7 Then
                WorkingTvShow.ImdbId.Value = "tt" & WorkingTvShow.ImdbId.Value
                ok = True
            End If

            If ok = False Then
                MsgBox("IMDB ID seems to be an invalid format, can't scrape posters")
                Exit Sub
            End If

            tvdbmode = False
            usedlist.Clear()
            If imdbposterlist.Count <= 0 Then
                Dim newobject2 As New imdb_thumbs.Class1
                Dim posters(,) As String = newobject2.getimdbposters(WorkingTvShow.ImdbId.Value)
                For f = 0 To UBound(posters)
                    If posters(f, 0) <> Nothing Then
                        Dim individualposter As New TvBanners
                        individualposter.SmallUrl = posters(f, 0)
                        individualposter.Url = posters(f, 0)
                        imdbposterlist.Add(individualposter)
                    End If
                Next
            End If
            For Each po In imdbposterlist
                usedlist.Add(po)
            Next
            usedlist.Reverse()
            Call tv_PosterPanelPopulate()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button49_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button49.Click
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
            'browse
            openFD.InitialDirectory = WorkingTvShow.NfoFilePath.Replace(IO.Path.GetFileName(WorkingTvShow.NfoFilePath), "")
            openFD.Title = "Select a jpeg image File"
            openFD.FileName = ""
            openFD.Filter = "Media Companion Image Files|*.jpg;*.tbn|All Files|*.*"
            openFD.FilterIndex = 0
            openFD.ShowDialog()
            TextBox30.Text = openFD.FileName
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button51_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button51.Click
        Try
            'set thumb
            Try
                Dim MyWebClient As New System.Net.WebClient

                Dim ImageInBytes() As Byte = MyWebClient.DownloadData(TextBox30.Text)
                Dim ImageStream As New IO.MemoryStream(ImageInBytes)

                PictureBox13.Image = New System.Drawing.Bitmap(ImageStream)
                PictureBox13.Image.Save(workingposterpath, Imaging.ImageFormat.Jpeg)

                If combostart = ComboBox2.SelectedItem Then
                    tv_PictureBoxRight.Image = PictureBox13.Image
                End If
                PictureBox12.Image = PictureBox13.Image
                Label73.Text = "Current Poster - " & PictureBox12.Image.Width.ToString & " x " & PictureBox12.Image.Height.ToString
            Catch ex As Exception
                MsgBox(ex.ToString)
            Finally
                Panel14.Visible = False
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button50_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button50.Click
        Try
            'cancel
            Panel14.Visible = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button59_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button59.Click
        Try
            Panel14.Visible = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton19_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton19.CheckedChanged
        Try
            If RadioButton19.Checked = True Then
                Preferences.moviesortorder = 5
                Call mov_MovieComboListSort()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub TextBox26_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles TextBox26.KeyDown
        Try
            If e.KeyCode = Keys.Enter Then
                Call tv_ShowListLoad()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RebuildMovieNfoFilesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RebuildMovieNfoFilesToolStripMenuItem.Click
        Try
            Call util_BatchUpdate()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button62_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button62.Click
        Try
            Call mov_SaveQuick()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TextBox35_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles TextBox35.KeyPress
        If Char.IsNumber(e.KeyChar) = False And e.KeyChar <> Chr(8) Then
            e.Handled = True
        End If
    End Sub

    Private Sub Button64_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button64.Click
        Try
            Dim WorkingEpisode As TvEpisode = ep_SelectedCurrently()
            If IsNumeric(TextBox35.Text) Then
                Dim thumbpathandfilename As String = WorkingEpisode.VideoFilePath.Replace(IO.Path.GetExtension(WorkingEpisode.VideoFilePath), ".tbn")
                Dim pathandfilename As String = WorkingEpisode.VideoFilePath.Replace(IO.Path.GetExtension(WorkingEpisode.VideoFilePath), "")
                'Dim extensions(100) As String
                'Dim extensioncount As Integer
                'extensions(1) = ".avi"
                'extensions(2) = ".xvid"
                'extensions(3) = ".divx"
                'extensions(4) = ".img"
                'extensions(5) = ".mpg"
                'extensions(6) = ".mpeg"
                'extensions(7) = ".mov"
                'extensions(8) = ".rm"
                'extensions(9) = ".3gp"
                'extensions(10) = ".m4v"
                'extensions(11) = ".wmv"
                'extensions(12) = ".asf"
                'extensions(13) = ".mp4"
                'extensions(14) = ".mkv"
                'extensions(15) = ".nrg"
                'extensions(16) = ".iso"
                'extensions(17) = ".rmvb"
                'extensions(18) = ".ogm"
                'extensions(19) = ".bin"
                'extensions(20) = ".ts"
                'extensions(21) = ".vob"
                'extensions(22) = ".m2ts"
                'extensions(23) = ".rar"
                'extensions(24) = ".flv"
                'extensions(25) = ".dvr-ms"
                'extensions(26) = "VIDEO_TS.IFO"
                Dim messbox As frmMessageBox = New frmMessageBox("ffmpeg is working to capture the desired screenshot", "", "Please Wait")
                'extensioncount = 26
                Dim exists As Boolean = False
                For Each ext In Utilities.VideoExtensions
                    Dim tempstring2 As String
                    tempstring2 = pathandfilename & ext
                    If IO.File.Exists(tempstring2) Then
                        Dim seconds As Integer = 10
                        If Convert.ToInt32(TextBox35.Text) > 0 Then
                            seconds = Convert.ToInt32(TextBox35.Text)
                        End If

                        If IO.File.Exists(thumbpathandfilename) Then
                            PictureBox14.Image = Nothing
                            IO.File.Delete(thumbpathandfilename)
                        End If

                        System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
                        messbox.Show()
                        messbox.Refresh()
                        Application.DoEvents()


                        Dim myProcess As Process = New Process
                        myProcess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden
                        myProcess.StartInfo.CreateNoWindow = False
                        myProcess.StartInfo.FileName = applicationPath & "\Assets\ffmpeg.exe"
                        Dim proc_arguments As String = "-y -i """ & tempstring2 & """ -f mjpeg -ss " & seconds.ToString & " -vframes 1 -an " & """" & thumbpathandfilename & """"
                        myProcess.StartInfo.Arguments = proc_arguments
                        myProcess.Start()
                        myProcess.WaitForExit()


                        If System.IO.File.Exists(thumbpathandfilename) Then
                            Dim bitmap2 As New Bitmap(thumbpathandfilename)
                            Dim bitmap3 As New Bitmap(bitmap2)
                            bitmap2.Dispose()
                            PictureBox14.Image = bitmap3
                            tv_PictureBoxLeft.Image = bitmap3
                        End If
                        Exit For
                    End If
                Next
                messbox.Close()
            Else
                MsgBox("Please enter a numerical value into the textbox")
                TextBox34.Focus()
                Exit Sub
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub TextBox35_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles TextBox35.Leave
        If TextBox35.Text = "" Then
            MsgBox("Please enter a numerical value >0 into the textbox")
            TextBox35.Focus()
        ElseIf Convert.ToInt32(TextBox35.Text) = 0 Then
            MsgBox("Please enter a numerical value >0 into the textbox")
            TextBox35.Focus()
        End If
    End Sub

    Private Sub Button63_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button63.Click
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()

            Dim WorkingEpisode As TvEpisode = ep_SelectedCurrently()
            Dim messbox As frmMessageBox = New frmMessageBox("Checking TVDB for screenshot", "", "Please Wait")
            'Dim episodescraper As New TVDB.tvdbscraper 'commented because of removed TVDB.dll
            Dim episodescraper As New TVDBScraper
            Dim id As String = WorkingTvShow.TvdbId.Value
            Dim sortorder As String = WorkingTvShow.SortOrder.Value
            Dim seasonno As String = WorkingEpisode.Season.value
            Dim episodeno As String = WorkingEpisode.Episode.Value
            Dim language As String = WorkingTvShow.Language.Value
            If language = Nothing Then language = "en"
            If language = "" Then language = "en"
            If sortorder = Nothing Then sortorder = "default"
            If sortorder = "" Then sortorder = "default"

            If id = Nothing Then
                MsgBox("No ID is available for this show")
                Exit Sub
            End If
            If id = "" Then
                MsgBox("No ID is available for this show")
                Exit Sub
            End If
            If episodeno = Nothing Then
                MsgBox("No Episode Number is available for this show")
                Exit Sub
            End If
            If episodeno = "" Then
                MsgBox("No Episode Number is available for this show")
                Exit Sub
            End If
            If seasonno = Nothing Then
                MsgBox("No Season Number is available for this show")
                Exit Sub
            End If
            If seasonno = "" Then
                MsgBox("No Season Number is available for this show")
                Exit Sub
            End If
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            messbox.Refresh()
            Application.DoEvents()
            Dim tempepisode As String = episodescraper.getepisode(WorkingTvShow.TvdbId.Value, sortorder, seasonno, episodeno, language)
            Dim thumburl As String = ""
            messbox.Close()
            Dim scrapedepisode As New XmlDocument
            Try
                If tempepisode <> Nothing Then
                    scrapedepisode.LoadXml(tempepisode)
                    Dim thisresult As XmlNode = Nothing
                    For Each thisresult In scrapedepisode("episodedetails")
                        Select Case thisresult.Name
                            Case "thumb"
                                thumburl = thisresult.InnerText
                                Exit For
                                Exit Select
                        End Select
                    Next
                    If thumburl <> "" And thumburl.ToLower <> "http://www.thetvdb.com/banners/" Then
                        messbox = New frmMessageBox("Screenshot found, downloading now", "", "Please Wait")
                        System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
                        messbox.Show()
                        messbox.Refresh()
                        Application.DoEvents()
                        Dim tempstring As String = WorkingEpisode.VideoFilePath.Replace(IO.Path.GetExtension(WorkingEpisode.VideoFilePath), ".tbn")
                        Dim MyWebClient As New System.Net.WebClient
                        Try
                            Dim ImageInBytes() As Byte = MyWebClient.DownloadData(thumburl)
                            Dim ImageStream As New IO.MemoryStream(ImageInBytes)

                            PictureBox15.Image = New System.Drawing.Bitmap(ImageStream)
                            PictureBox15.Image.Save(tempstring, Imaging.ImageFormat.Jpeg)
                            Dim bitmap2 As New Bitmap(tempstring)
                            Dim bitmap3 As New Bitmap(bitmap2)
                            bitmap2.Dispose()
                            PictureBox14.Image = bitmap3
                            tv_PictureBoxLeft.Image = bitmap3
                            messbox.Close()
                        Catch ex As Exception
                            MsgBox("Unable To Download Image")
                        End Try
                    Else
                        MsgBox("No Episode Screenshot Found On TVDB")
                    End If
                Else
                    MsgBox("No Episode Screenshot Found On TVDB")
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            Finally
                messbox.Close()
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try


    End Sub

    Private Sub Button11_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button11.Click
        Try
            Dim movie_ids As New List(Of String)
            Dim topactorname As String = actorcb.Text
            For Each actor In actorDB
                If actor.actorname = actorcb.Text Then
                    movie_ids.Add(actor.movieid)
                End If
            Next
            filteredList.Clear()
            For Each movie In fullMovieList
                Dim add As Boolean = False
                For Each id In movie_ids
                    If id = movie.id Then
                        add = True
                        Exit For
                    End If
                Next
                If add = True Then
                    filteredList.Add(movie)
                End If
            Next
            Call mov_MovieComboListSort()
            Label39.Text = "Displaying " & filteredList.Count & " " & topactorname & " movies"
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_WallReset()
        For i = TabPage22.Controls.Count - 1 To 0 Step -1
            'If  Is PictureBox(TabPage22.Controls(i)) Then
            TabPage22.Controls.RemoveAt(i)
            'End If
        Next
        walllocked = True
        Dim count As Integer = 0
        Dim locx As Integer = 0
        Dim locy As Integer = 0
        Dim maxcount As Integer = Convert.ToInt32((TabPage22.Width - 50) / 150)
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 159 Then
            maxcount += 1
        End If
        Try
            'Panel17.AutoScroll = False
            For Each pic In pictureList
                Try
                    If count = maxcount Then
                        count = 0
                        locx = 0
                        locy += 200
                    End If

                    With pic
                        Dim vscrollPos As Integer = TabPage22.VerticalScroll.Value
                        .Location = New Point(locx, locy - vscrollPos)
                        .ContextMenuStrip = ContextMenuStrip3
                    End With
                    locx += 150
                    count += 1

                    Me.TabPage22.Controls.Add(pic)
                    TabPage22.Refresh()
                    Application.DoEvents()

                Catch ex As Exception
                    MsgBox(ex.ToString)
                End Try
            Next

        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        Finally
            walllocked = False
        End Try
    End Sub

    Private Sub mov_WallSetup()

        Dim check As Boolean
        check = True
        If moviecount_bak <> MovieListComboBox.Items.Count Then
            moviecount_bak = MovieListComboBox.Items.Count
            check = False
        End If
        For i = 0 To CheckedListBox1.Items.Count - 1
            If CheckedListBox1.GetItemChecked(i) <> CheckedListBox2.GetItemChecked(i) Then
                If CheckedListBox1.GetItemChecked(i) = True Then
                    CheckedListBox2.SetItemChecked(i, True)
                Else
                    CheckedListBox2.SetItemChecked(i, False)
                End If
                check = False
            End If
        Next

        If RadioButton3.Checked <> RadioButton28.Checked Then
            RadioButton28.Checked = RadioButton3.Checked
            check = False

        End If

        If RadioButton4.Checked <> RadioButton27.Checked Then
            RadioButton27.Checked = RadioButton4.Checked
            check = False
        End If

        If RadioButtonSortModified.Checked <> RadioButton26.Checked Then
            RadioButton26.Checked = RadioButtonSortModified.Checked
            check = False
        End If

        If RadioButton21.Checked <> RadioButton22.Checked Then
            RadioButton22.Checked = RadioButton21.Checked
            check = False
        End If

        If RadioButton7.Checked <> RadioButton25.Checked Then
            RadioButton25.Checked = RadioButton7.Checked
            check = False
        End If

        If RadioButton19.Checked <> RadioButton24.Checked Then
            RadioButton24.Checked = RadioButton19.Checked
            check = False
        End If

        If RadioButtonSortCreate.Checked <> RadioButton23.Checked Then
            RadioButton23.Checked = RadioButtonSortCreate.Checked
            check = False
        End If

        If btnreverse.CheckState <> CheckBox9.CheckState Then
            CheckBox9.CheckState = btnreverse.CheckState
            check = False
        End If

        If TextBox1.Text <> TextBox37.Text Then
            TextBox37.Text = CheckBox1.Text
            check = False
        End If

        If txt_titlesearch.Text <> TextBox36.Text Then
            TextBox36.Text = txt_titlesearch.Text
            check = False
        End If


        If check = True Then Exit Sub


        maxcount = Convert.ToInt32((TabPage22.Width - 50) / 150)
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        If filteredList.Count / maxcount > 164 Then
            maxcount += 1
        End If
        pictureList.Clear()
        For i = TabPage22.Controls.Count - 1 To 0 Step -1
            If TabPage22.Controls(i).Name = "" Then
                TabPage22.Controls.RemoveAt(i)
            End If
        Next
        TabPage22.Refresh()
        Application.DoEvents()
        Dim count As Integer = 0
        Dim locx As Integer = 0
        Dim locy As Integer = 0
        'Panel17.AutoScroll = False
        For Each movie In filteredList

            bigPictureBox = New PictureBox()
            With bigPictureBox
                '.Location = New Point(0, 0)
                .Width = 150
                .Height = 200
                .SizeMode = PictureBoxSizeMode.StretchImage
                '.Image = sender.image
                Dim filename As String = Utilities.GetCRC32(movie.fullpathandfilename)
                If IO.File.Exists(IO.Path.Combine(applicationPath, "settings\postercache\" & filename & ".jpg")) Then
                    Try
                        'Dim bitmap2 As New Bitmap(IO.Path.Combine(applicationpath, "settings\postercache\" & movie.id & ".jpg"))
                        'Dim bitmap3 As New Bitmap(bitmap2)
                        'bitmap2.Dispose()
                        .Image = Utilities.LoadBitmap(IO.Path.Combine(applicationPath, "settings\postercache\" & filename & ".jpg"))
                    Catch ex As Exception
                        'Dim bitmap2 As New Bitmap(defaultposter)
                        'Dim bitmap3 As New Bitmap(bitmap2)
                        'bitmap2.Dispose()
                        '.Image = bitmap3
                        .Image = Utilities.LoadBitmap(defaultPoster)
                    End Try
                ElseIf IO.File.Exists(Preferences.GetPosterPath(movie.fullpathandfilename)) Then
                    Try
                        Dim bitmap2 As New Bitmap(Preferences.GetPosterPath(movie.fullpathandfilename))
                        bitmap2 = Utilities.ResizeImage(bitmap2, 150, 200)
                        If Utilities.SaveImage(bitmap2, IO.Path.Combine(applicationPath, "settings\postercache\" & filename & ".jpg")) Then
                            .Image = Utilities.LoadBitmap(IO.Path.Combine(applicationPath, "settings\postercache\" & filename & ".jpg"))
                        Else
                            .Image = Utilities.LoadBitmap(defaultPoster)
                        End If
                    Catch ex As Exception
                        .Image = Utilities.LoadBitmap(defaultPoster)
                    End Try
                Else
                    Dim bitmap2 As New Bitmap(defaultPoster)
                    Dim bitmap3 As New Bitmap(bitmap2)
                    bitmap2.Dispose()
                    .Image = bitmap3
                End If
                .Tag = movie.fullpathandfilename
                Dim toolTip1 As ToolTip = New ToolTip(Me.components)

                Dim outline As String = movie.outline
                Dim newoutline As List(Of String) = util_TextWrap(outline, 50)
                outline = ""
                For Each line In newoutline
                    outline = outline & vbCrLf & line
                Next
                outline.TrimEnd(vbCrLf)
                toolTip1.SetToolTip(bigPictureBox, movie.fullpathandfilename & vbCrLf & vbCrLf & movie.titleandyear & vbCrLf & outline)
                toolTip1.Active = True
                toolTip1.InitialDelay = 0

                .Visible = True
                .BorderStyle = BorderStyle.None
                .WaitOnLoad = True
                .ContextMenuStrip = ContextMenuStrip3
                AddHandler bigPictureBox.MouseEnter, AddressOf util_MouseEnter
                AddHandler bigPictureBox.DoubleClick, AddressOf mov_WallClicked
                If count = maxcount Then
                    count = 0
                    locx = 0
                    locy += 200
                End If
                walllocked = True
                Dim vscrollPos As Integer = TabPage22.VerticalScroll.Value
                If mouseDelta <> 0 Then
                    vscrollPos = vscrollPos - mouseDelta
                    mouseDelta = 0
                End If
                .Location = New Point(locx, locy - vscrollPos)
                locx += 150
                count += 1

            End With
            Me.TabPage22.Controls.Add(bigPictureBox)
            pictureList.Add(bigPictureBox)
            Me.TabPage22.Refresh()
            Application.DoEvents()
            walllocked = False
        Next
        walllocked = False
        'Panel17.AutoScroll = True
        'Try
        'Call resetwall()
        'Catch
        'End Try
    End Sub

    Private Sub mov_WallClicked(ByVal sender As Object, ByVal e As EventArgs)

        Dim item As Windows.Forms.PictureBox = sender
        'Dim picbox As PictureBox = item.SourceControl
        Dim tempstring As String = item.Tag
        For f = 0 To MovieListComboBox.Items.Count - 1
            If CType(MovieListComboBox.Items(f), ValueDescriptionPair).value = tempstring Then
                MovieListComboBox.SelectedItems.Clear()
                MovieListComboBox.SelectedIndex = f
                Application.DoEvents()
                currentTabIndex = 0
                Me.TabControl2.SelectedIndex = 0
                Exit For
            End If
        Next

    End Sub

    Private Function util_TextWrap(ByVal text As String, ByVal linelength As Integer)
        Dim ReturnValue As New List(Of String)
        text = Trim(text)

        Dim Words As String() = text.Split(" ")

        If Words.Length = 1 And Words(0).Length > linelength Then
            Dim lines As Integer = (Int(text.Length / linelength) + 1)
            text = text.PadRight(lines * linelength)
            For i = 0 To lines - 1
                Dim SliceStart As Integer = i * linelength
                ReturnValue.Add(text.Substring(SliceStart, linelength))
            Next
        Else
            Dim CurrentLine As New System.Text.StringBuilder
            For Each Word As String In Words
                If CurrentLine.Length + Word.Length < linelength Then
                    CurrentLine.Append(Word & " ")
                Else
                    If Word.Length > linelength Then
                        Dim Slice As String = Word.Substring(0, linelength - CurrentLine.Length)
                        CurrentLine.Append(Slice)
                        ReturnValue.Add(CurrentLine.ToString)
                        CurrentLine = New System.Text.StringBuilder()
                        Word = Word.Substring(Slice.Length, Word.Length - Slice.Length)
                        Dim RemainingSlices As Integer = Int(Word.Length / linelength) + 1
                        For LineNumber = 1 To RemainingSlices
                            If LineNumber = RemainingSlices Then
                                CurrentLine.Append(Word & " ")
                            Else
                                Slice = Word.Substring(0, linelength)
                                CurrentLine.Append(Slice)
                                ReturnValue.Add(CurrentLine.ToString)
                                CurrentLine = New System.Text.StringBuilder()
                                Word = Word.Substring(Slice.Length, Word.Length - Slice.Length)
                            End If
                        Next
                    Else
                        ReturnValue.Add(CurrentLine.ToString)
                        CurrentLine = New System.Text.StringBuilder(Word & " ")
                    End If
                End If
            Next

            If CurrentLine.Length > 0 Then
                ReturnValue.Add(CurrentLine.ToString)
            End If
        End If

        Return ReturnValue

    End Function

    Private Sub RadioButton21_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton21.CheckedChanged
        Try
            If RadioButton21.Checked = True Then
                Preferences.moviesortorder = 3

                Preferences.SaveConfig()
                Call mov_MovieComboListSort()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton20_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButtonSortCreate.CheckedChanged
        Try
            If RadioButtonSortCreate.Checked = True Then
                Preferences.moviesortorder = 6

                Preferences.SaveConfig()
                Call mov_MovieComboListSort()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub


    Private Shadows Sub util_MouseEnter(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Try
            ClickedControl = sender.tag
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub PlayMovieToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PlayMovieToolStripMenuItem.Click
        Try
            'Dim item As Windows.Forms.ToolStripMenuItem = sender
            ''Dim picbox As PictureBox = item.SourceControl



            Dim tempstring As String = ClickedControl
            If tempstring = Nothing Then
                Exit Sub
            End If
            If tempstring = "" Then
                Exit Sub
            End If
            Dim playlist As New List(Of String)
            tempstring = Utilities.GetFileName(tempstring)
            If IO.File.Exists(tempstring) Then
                playlist.Add(tempstring)
            End If
            If tempstring.IndexOf("cd1") <> -1 Then
                tempstring = tempstring.Replace("cd1", "cd2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd2", "cd3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd3", "cd4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd4", "cd5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("cd_1") <> -1 Then
                tempstring = tempstring.Replace("cd_1", "cd_2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd_2", "cd_3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd_3", "cd_4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd_4", "cd_5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("cd 1") <> -1 Then
                tempstring = tempstring.Replace("cd 1", "cd 2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd 2", "cd 3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd 3", "cd 4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd 4", "cd 5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("cd.1") <> -1 Then
                tempstring = tempstring.Replace("cd.1", "cd.2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd.2", "cd.3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd.3", "cd.4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd.4", "cd.5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("dvd1") <> -1 Then
                tempstring = tempstring.Replace("dvd1", "dvd2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd2", "dvd3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd3", "dvd4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd4", "dvd5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("dvd_1") <> -1 Then
                tempstring = tempstring.Replace("dvd_1", "dvd_2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd_2", "dvd_3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd_3", "dvd_4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd_4", "dvd_5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("dvd 1") <> -1 Then
                tempstring = tempstring.Replace("dvd 1", "dvd 2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd 2", "dvd 3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd 3", "dvd 4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd 4", "dvd 5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("dvd.1") <> -1 Then
                tempstring = tempstring.Replace("dvd.1", "dvd.2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd.2", "dvd.3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd.3", "dvd.4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd.4", "dvd.5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("part1") <> -1 Then
                tempstring = tempstring.Replace("part1", "part2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part2", "part3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part3", "part4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part4", "part5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("part_1") <> -1 Then
                tempstring = tempstring.Replace("part_1", "part_2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part_2", "part_3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part_3", "part_4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part_4", "part_5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("part 1") <> -1 Then
                tempstring = tempstring.Replace("part 1", "part 2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part 2", "part 3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part 3", "part 4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part 4", "part 5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("part.1") <> -1 Then
                tempstring = tempstring.Replace("part.1", "part.2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part.2", "part.3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part.3", "part.4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part.4", "part.5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("disk1") <> -1 Then
                tempstring = tempstring.Replace("disk1", "disk2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk2", "disk3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk3", "disk4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk4", "disk5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("disk_1") <> -1 Then
                tempstring = tempstring.Replace("disk_1", "disk_2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk_2", "disk_3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk_3", "disk_4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk_4", "disk_5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("disk 1") <> -1 Then
                tempstring = tempstring.Replace("disk 1", "disk 2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk 2", "disk 3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk 3", "disk 4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk 4", "disk 5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("disk.1") <> -1 Then
                tempstring = tempstring.Replace("disk.1", "disk.2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk.2", "disk.3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk.3", "disk.4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk.4", "disk.5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("part1") <> -1 Then
                tempstring = tempstring.Replace("pt1", "pt2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt2", "pt3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt3", "pt4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt4", "pt5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("pt_1") <> -1 Then
                tempstring = tempstring.Replace("pt_1", "pt_2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt_2", "pt_3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt_3", "pt_4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt_4", "pt_5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("pt 1") <> -1 Then
                tempstring = tempstring.Replace("pt 1", "pt 2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt 2", "pt 3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt 3", "pt 4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt 4", "pt 5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("pt.1") <> -1 Then
                tempstring = tempstring.Replace("pt.1", "pt.2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt.2", "pt.3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt.3", "pt.4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt.4", "pt.5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If

            If playlist.Count <= 0 Then
                MsgBox("No Media File Found For This nfo")
                Exit Sub
            End If


            tempstring = applicationPath & "\settings\temp.m3u"


            Dim file As IO.StreamWriter = IO.File.CreateText(tempstring)

            For Each part In playlist
                If part <> Nothing Then file.WriteLine(part)
            Next
            file.Close()



            If Preferences.videomode = 1 Then Call util_VideoMode1(tempstring)
            If Preferences.videomode = 2 Then Call util_VideoMode2(tempstring)
            If Preferences.videomode = 3 Then
                Preferences.videomode = 2
                Call util_VideoMode2(tempstring)
            End If
            If Preferences.videomode >= 4 Then
                If Preferences.selectedvideoplayer <> Nothing Then
                    Call util_VideoMode4(tempstring)
                Else
                    Call util_VideoMode1(tempstring)
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub EditMovieToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles EditMovieToolStripMenuItem1.Click
        Try
            Dim tempstring As String = ClickedControl
            'Dim picbox As PictureBox = item.SourceControl
            For f = 0 To MovieListComboBox.Items.Count - 1
                If CType(MovieListComboBox.Items(f), ValueDescriptionPair).Value = tempstring Then
                    MovieListComboBox.SelectedItems.Clear()
                    MovieListComboBox.SelectedIndex = f
                    Application.DoEvents()
                    currentTabIndex = 4
                    Me.TabControl2.SelectedIndex = 4
                    Exit For
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub DToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DToolStripMenuItem.Click
        Try
            Dim tempstring As String = ClickedControl
            If tempstring <> Nothing Then
                Try
                    If IO.File.Exists(Preferences.GetPosterPath(tempstring)) Then
                        Me.ControlBox = False
                        MenuStrip1.Enabled = False
                        'ToolStrip1.Enabled = False
                        Dim newimage As New Bitmap(Preferences.GetPosterPath(tempstring))
                        Dim newimage2 As New Bitmap(newimage)
                        newimage.Dispose()
                        Call util_ZoomImage(newimage2)
                    Else
                        MsgBox("Cant find file:-" & vbCrLf & Preferences.GetPosterPath(tempstring))
                    End If
                Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
                End Try
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub OpenFolderToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OpenFolderToolStripMenuItem1.Click
        Try
            Dim tempstring As String = ClickedControl
            If tempstring <> Nothing Then
                Try
                    Call util_OpenFolder(tempstring)
                Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
                End Try
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub mov_WallPosterAdd(ByVal posterpath As String, ByVal fullnfopath As String, ByVal imdbid As String)
        Dim bitmap3 As New Bitmap(posterpath)
        Dim bitmap2 As New Bitmap(bitmap3)
        bitmap3.Dispose()
        Dim bm_source As New Bitmap(bitmap2)
        Dim bm_dest As New Bitmap(150, 200)
        Dim gr As Graphics = Graphics.FromImage(bm_dest)
        gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
        gr.DrawImage(bm_source, 0, 0, 150 - 1, 200 - 1)
        Dim tempbitmap As Bitmap = bm_dest
        Dim path As String = IO.Path.Combine(applicationPath, "settings\postercache\" & imdbid & ".jpg")
        tempbitmap.Save(path, Imaging.ImageFormat.Jpeg)
        tempbitmap.Dispose()

        For Each poster As PictureBox In TabPage22.Controls
            If poster.Tag = workingMovieDetails.fileinfo.fullpathandfilename Then
                poster.ImageLocation = IO.Path.Combine(applicationPath, "settings\postercache\" & imdbid & ".jpg")
                poster.Load()
                Exit For
            End If
        Next
    End Sub

    Private Sub Button60_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button60.Click
        Try
            Dim Btn As Button = sender
            If TypeOf Btn.Tag Is Media_Companion.TvShow Then
                Dim TempShow As Media_Companion.TvShow = Btn.Tag
                Select Case TempShow.State
                    Case Media_Companion.ShowState.Locked
                        TempShow.State = Media_Companion.ShowState.Open
                    Case Media_Companion.ShowState.Open
                        TempShow.State = Media_Companion.ShowState.Locked
                    Case Media_Companion.ShowState.Error
                    Case Media_Companion.ShowState.Unverified
                        TempShow.State = Media_Companion.ShowState.Open
                End Select
                TempShow.UpdateTreenode()

                If TempShow.State = Media_Companion.ShowState.Locked Then
                    Button60.Text = "Locked"
                    Button60.BackColor = Color.Red
                ElseIf TempShow.State = Media_Companion.ShowState.Open Then
                    Button60.Text = "Open"
                    Button60.BackColor = Color.LawnGreen
                ElseIf TempShow.State = Media_Companion.ShowState.Unverified Then
                    Button60.Text = "Un-Verified"
                    Button60.BackColor = Color.Yellow
                Else
                    Button60.Text = "Error"
                    Button60.BackColor = Color.Gray
                End If
            End If
            'Dim lockedstring As String = ""
            'If Button60.Text = "Open" Then
            '    workingTvShow.locked = 1
            '    For Each tvshow In TvShows
            '        If tvshow.fullpath = workingTvShow.path Then
            '            tvshow.locked = 1
            '            lockedstring = "1"
            '            Button60.BackColor = Color.Red
            '            For Each indnode As TreeNode In TvTreeview.Nodes
            '                If indnode.Name.ToLower = tvshow.fullpath.ToLower Then
            '                    indnode.StateImageIndex = 0
            '                    Exit For
            '                End If
            '            Next
            '        End If
            '    Next
            '    Button60.Text = "Locked"
            'ElseIf Button60.Text = "Locked" Then

            '    If Not workingTvShow.tvdbid Is Nothing Then
            '        If workingTvShow.tvdbid <> "" Then
            '            workingTvShow.locked = False
            '            Button60.Text = "Open"
            '            Button60.BackColor = Color.LawnGreen
            '            For Each tvshow In TvShows
            '                If tvshow.fullpath = workingTvShow.path Then
            '                    tvshow.locked = 0
            '                    lockedstring = "0"
            '                    For Each indnode As TreeNode In TvTreeview.Nodes
            '                        If indnode.Name.ToLower = tvshow.fullpath.ToLower Then
            '                            indnode.StateImageIndex = -1
            '                            Exit For
            '                        End If
            '                    Next
            '                End If
            '            Next
            '        Else
            '            MsgBox("Can't unlock, " & vbCrLf & "No TVDB ID is available")
            '            Exit Sub
            '        End If
            '    Else
            '        MsgBox("Can't unlock, " & vbCrLf & "No TVDB ID is available")
            '        Exit Sub
            '    End If
            'ElseIf Button60.Text = "Un-Verified" Then
            '    'Dim tempint As Integer = MessageBox.Show("This TV Show has been automatically added by Media Companion" & vbCrLf & "Are you sure that the correct show has been scraped?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
            '    'If tempint = DialogResult.Yes Then
            '    Button60.Text = "Open"
            '    Button60.BackColor = Color.LawnGreen
            '    workingTvShow.locked = False
            '    For Each tvshow In TvShows
            '        If tvshow.fullpath = workingTvShow.path Then
            '            tvshow.locked = 0
            '            lockedstring = "0"
            '            For Each indnode As TreeNode In TvTreeview.Nodes
            '                If indnode.Name.ToLower = tvshow.fullpath.ToLower Then
            '                    indnode.StateImageIndex = -1
            '                    Exit For
            '                End If
            '            Next
            '        End If
            '    Next
            'End If
            ''End If
            'workingTvShow.plot = TextBox19.Text
            'workingTvShow.runtime = TextBox15.Text
            'workingTvShow.premiered = TextBox10.Text
            'workingTvShow.studio = TextBox16.Text
            'workingTvShow.rating = TextBox13.Text
            'workingTvShow.genre = TextBox11.Text
            'workingTvShow.imdbid = TextBox12.Text
            'workingTvShow.tvdbid = TextBox9.Text
            'workingTvShow.mpaa = TextBox14.Text
            'workingTvShow.locked = lockedstring
            'If TextBox2.Text.ToLower.IndexOf(", the") = TextBox2.Text.Length - 5 And TextBox2.Text.Length > 5 Then
            '    workingTvShow.title = "The " & TextBox2.Text.Substring(0, TextBox2.Text.Length - 5)
            'End If
            'Call nfoFunction.savetvshownfo(workingTvShow.path, workingTvShow, True)
            'For Each node As TreeNode In TvTreeview.Nodes
            '    If node.Name = workingTvShow.path Then
            '        node.Text = TextBox2.Text
            '        Exit For
            '    End If
            'Next
            'Call savetvdata()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Function util_UrlIsValid(ByVal url As String) As Boolean
        Dim is_valid As Boolean = False
        If url.ToLower().StartsWith("www.") Then url = _
            "http://" & url

        Dim web_response As HttpWebResponse = Nothing

        Try
            Dim web_request As HttpWebRequest = HttpWebRequest.Create(url)
            web_request.Timeout = 5000
            web_response = DirectCast(web_request.GetResponse(), HttpWebResponse)
            Return True
        Catch ex As Exception
            Return False
        Finally
            If Not (web_response Is Nothing) Then _
                web_response.Close()
        End Try
    End Function

    Private Sub OutputMovieListAsHTMLToolStripMenuItem_DropDownClosed(ByVal sender As Object, ByVal e As System.EventArgs) Handles OutputMovieListAsHTMLToolStripMenuItem.DropDownClosed
        Try
            If dohtml = True Then
                dohtml = False
                Call util_HtmlOutput("Movies")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub OutputTVShowsAsHTMLToolStripMenuItem_DropDownClosed(sender As Object, e As System.EventArgs) Handles OutputTVShowsAsHTMLToolStripMenuItem.DropDownClosed
        Try
            If doTVhtml = True Then
                doTVhtml = False
                Call util_HtmlOutput("TV Shows")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub util_HtmlOutput(ByVal htmlType As String)
        If fullhtmlstring = Nothing Then Exit Sub
        If fullhtmlstring = "" Then Exit Sub
        Dim frmhtmloutput As New frmDialog1
        frmhtmloutput.Label3.Text = "Starting HTML Document"
        frmhtmloutput.Label4.Text = ""
        frmhtmloutput.Label3.Refresh()
        frmhtmloutput.Label4.Refresh()
        Application.DoEvents()
        frmhtmloutput.Show()
        Dim tempstring As String = ""
        Dim savepath As String
        Dim cssbody As String
        Dim csspath As String
        Dim counter As Integer = 0
        Dim mediaCollection As Object
        With SaveFileDialog1
            .DefaultExt = "html"
            .Filter = "Html Documents (*.htm)|*.html"
            .Title = "Save HTML File"
            .OverwritePrompt = True
            .CheckPathExists = True
        End With

        If SaveFileDialog1.ShowDialog = Windows.Forms.DialogResult.OK Then
            savepath = SaveFileDialog1.FileName
            If fullhtmlstring.IndexOf("<<css>>") <> -1 And fullhtmlstring.IndexOf("<</css>>") <> -1 Then
                tempstring = fullhtmlstring.Substring(fullhtmlstring.IndexOf("<<css>>") + 9, fullhtmlstring.IndexOf("<</css>>") - fullhtmlstring.IndexOf("<<css>>") - 9)
                If tempstring.IndexOf("<filename>") <> -1 And tempstring.IndexOf("</filename>") <> -1 Then
                    Dim tempstring2 As String
                    tempstring2 = tempstring.Substring(tempstring.IndexOf("<filename>") + 10, tempstring.IndexOf("</filename>") - tempstring.IndexOf("<filename>") - 10)
                    csspath = savepath.Replace(IO.Path.GetFileName(savepath), tempstring2)
                    cssbody = tempstring.Substring(tempstring.IndexOf("</filename>") + 13, tempstring.Length - tempstring.IndexOf("</filename>") - 13)
                    Try
                        Dim objWriter2 As New System.IO.StreamWriter(csspath, False, Encoding.UTF8)
                        objWriter2.Write(cssbody)
                        objWriter2.Close()
                    Catch ex As Exception

                    Finally

                    End Try
                End If

            End If
            Dim temphtml As String
            Dim tempBody As String = ""
            Dim overallcancel As Boolean = False
            Dim pathstring As String = ""
            Dim imageFolder As String = ""

            tempstring = fullhtmlstring.Substring(fullhtmlstring.IndexOf("<<header>>") + 12, (fullhtmlstring.IndexOf("<</header>>") - fullhtmlstring.IndexOf("<<header>>")) - 12)

            If htmlType = "Movies" Then
                tempstring = mov_TagsGet(tempstring, filteredList(0), counter)
                mediaCollection = filteredList
                imageFolder = "images\"
            Else
                tempstring = tv_TagsGetAll(tempstring, Cache.TvCache.Shows(0), counter, "!HEADER!")
                mediaCollection = Cache.TvCache.Shows
                imageFolder = "tvimages\"
            End If

            If fullhtmlstring.IndexOf("<<smallimage>>") <> -1 Or fullhtmlstring.IndexOf("<<createimage") <> -1 Then
                pathstring = savepath.Replace(IO.Path.GetFileName(savepath), "")
                pathstring = pathstring & imageFolder
                Dim fso As New DirectoryInfo(pathstring)
                If fso.Exists = False Then
                    IO.Directory.CreateDirectory(pathstring)
                End If
            End If

            temphtml = "<html><head>" & tempstring & "</head>"
            temphtml = temphtml & "<body>"
            tempstring = fullhtmlstring.Substring(fullhtmlstring.ToLower.IndexOf("<<body>>") + 8, fullhtmlstring.ToLower.IndexOf("<</body>>") - (fullhtmlstring.ToLower.IndexOf("<<body>>") + 8))

            If tempstring.ToLower.IndexOf("<<media_item>>") <> -1 And tempstring.ToLower.IndexOf("<</media_item>>") <> -1 Then
                temphtml = temphtml & tempstring.Substring(0, tempstring.ToLower.IndexOf("<<media_item>>"))
                tempBody = tempstring.Substring(tempstring.ToLower.IndexOf("<</media_item>>") + 15, tempstring.Length - (tempstring.ToLower.IndexOf("<</media_item>>") + 15))
                tempstring = fullhtmlstring.Substring(fullhtmlstring.ToLower.IndexOf("<<media_item>>") + 14, fullhtmlstring.ToLower.IndexOf("<</media_item>>") - (fullhtmlstring.ToLower.IndexOf("<<media_item>>") + 14))
            End If

            For Each mediaItem In mediaCollection
                If frmhtmloutput.IsDisposed Then
                    MsgBox("Operation Canceled")
                    overallcancel = True
                    Exit For
                End If
                frmhtmloutput.Label3.Text = "Processing: " & If(htmlType = "Movies", mediaItem.title, mediaItem.title.Value)
                Dim tempint As Integer = mediaCollection.Count - (counter + 1)
                frmhtmloutput.Label4.Text = tempint.ToString & " " & htmlType & " Remaining"
                frmhtmloutput.Label3.Refresh()
                frmhtmloutput.Label4.Refresh()
                Application.DoEvents()
                Try
                    If htmlType = "Movies" Then
                        temphtml = temphtml & mov_TagsGet(tempstring, mediaItem, counter, pathstring)
                    Else
                        temphtml = temphtml & tv_TagsGetAll(tempstring, mediaItem, counter, pathstring)
                    End If
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
                counter += 1
            Next
            If overallcancel = False Then
                If tempBody <> "" Then
                    temphtml = temphtml & tempBody
                End If
                temphtml = temphtml & "</body>"
                temphtml = temphtml & "</html>"

                Try
                    Dim objWriter As New System.IO.StreamWriter(savepath, False, Encoding.UTF8)
                    objWriter.Write(temphtml)
                    objWriter.Close()
                    frmhtmloutput.Close()
                    Dim tempint As Integer = MessageBox.Show("Your HTML list is now complete" & vbCrLf & " Do You wish to view it now?", "Question", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                    If tempint = DialogResult.Yes Then
                        Process.Start(savepath)
                    End If
                Catch ex As Exception
                    frmhtmloutput.Close()
                    MsgBox(ex.ToString)
                Finally

                End Try
            End If
        End If
    End Sub
    Dim dohtml As Boolean
    Dim doTVhtml As Boolean
    Dim fullhtmlstring As String
    Private Sub OutputMovieListAsHTMLToolStripMenuItem_DropDownItemClicked(ByVal sender As Object, ByVal e As System.Windows.Forms.ToolStripItemClickedEventArgs) Handles OutputMovieListAsHTMLToolStripMenuItem.DropDownItemClicked
        Try
            dohtml = True
            For Each temp In templateList
                If temp.title = e.ClickedItem.Text Then
                    Try
                        Dim fullstring As String
                        Dim cfg2 As IO.StreamReader = IO.File.OpenText(temp.path)
                        fullstring = cfg2.ReadToEnd
                        If fullstring.ToLower.IndexOf("<<mc html page>>") <> -1 And fullstring.ToLower.IndexOf("<</mc html page>>") <> -1 Then
                            fullhtmlstring = fullstring
                        Else
                            fullhtmlstring = Nothing
                        End If
                    Catch ex As Exception
                        Dim t As Integer = 0
                    End Try
                    Exit For
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub OutputTVShowsAsHTMLToolStripMenuItem_DropDownItemClicked(sender As Object, e As System.Windows.Forms.ToolStripItemClickedEventArgs) Handles OutputTVShowsAsHTMLToolStripMenuItem.DropDownItemClicked
        Try
            doTVhtml = True
            For Each temp In templateList
                If temp.title = e.ClickedItem.Text Then
                    Try
                        Dim fullstring As String
                        Dim cfg2 As IO.StreamReader = IO.File.OpenText(temp.path)
                        fullstring = cfg2.ReadToEnd
                        If fullstring.ToLower.IndexOf("<<mc tv html page>>") <> -1 And fullstring.ToLower.IndexOf("<</mc tv html page>>") <> -1 Then
                            fullhtmlstring = fullstring
                        Else
                            fullhtmlstring = Nothing
                        End If
                    Catch ex As Exception
                        Dim t As Integer = 0
                    End Try
                    Exit For
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Dim showstoscrapelist As New List(Of String)
    Private Sub bckgroundscanepisodes_ProgressChanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bckgroundscanepisodes.ProgressChanged
        Try
            If e.ProgressPercentage = 0 Then
                ToolStripStatusLabel6.Text = e.UserState
                ToolStripStatusLabel6.Visible = True
            ElseIf e.ProgressPercentage = 1 Then
                If TypeOf e.UserState Is TvEpisode Then
                    Dim TempEpisode As TvEpisode = CType(e.UserState, TvEpisode)

                    TempEpisode.ShowObj.AddEpisode(TempEpisode)
                    TempEpisode.SeasonObj.UpdateTreenode()
                    TempEpisode.UpdateTreenode()
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub bckgroundscanepisodes_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs, Optional ByVal manual As Boolean = False) Handles bckgroundscanepisodes.DoWork
        Try
            Dim List As List(Of TvShow) = e.Argument(0)
            Dim Force As Boolean = e.Argument(1)

            Call TV_EpisodeScraper(List, Force)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ep_Search()
        Dim ShowList As New List(Of TvShow)

        If Not bckgroundscanepisodes.IsBusy And Not Bckgrndfindmissingepisodes.IsBusy Then
            'ToolStripButton10.Visible = True
            TabPage15.Text = "Cancel Episode Search"
            TabPage15.ToolTipText = "This cancels the episode search" & vbCrLf & "and episode scraper thread"

            For Each item In Cache.TvCache.Shows
                If (item.NfoFilePath.ToLower.IndexOf("tvshow.nfo") <> -1) And (item.State = Media_Companion.ShowState.Open) Then
                    ShowList.Add(item)
                End If
            Next
            bckgroundscanepisodes.RunWorkerAsync({ShowList, False})
        ElseIf bckgroundscanepisodes.IsBusy Then
            MsgBox("This Episode Scraper is already running")
        ElseIf Bckgrndfindmissingepisodes.IsBusy Then
            MsgBox("The missing episode search cannot be performed" & vbCrLf & "    while the episode scraper is running")
        End If
    End Sub

    Private Sub SearchThisShowForNewEpisodesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_SearchNewEp.Click
        Try
            If TvTreeview.SelectedNode Is Nothing Then Exit Sub

            Dim Season As TvSeason
            Dim Episode As TvEpisode
            Dim ShowList As New List(Of TvShow)
            If TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvShow Then
                ShowList.Add(TvTreeview.SelectedNode.Tag)
            ElseIf TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvSeason Then

                Season = TvTreeview.SelectedNode.Tag
                ShowList.Add(Season.ShowObj)
            ElseIf TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvEpisode Then
                Episode = TvTreeview.SelectedNode.Tag
                ShowList.Add(Episode.ShowObj)
            End If

            If Not bckgroundscanepisodes.IsBusy And Not Bckgrndfindmissingepisodes.IsBusy Then
                'ToolStripButton10.Visible = True
                TabPage15.Text = "Cancel Episode Search"
                TabPage15.ToolTipText = "This cancels the episode search" & vbCrLf & "and episode scraper thread"

                bckgroundscanepisodes.RunWorkerAsync({ShowList, False})
            ElseIf bckgroundscanepisodes.IsBusy Then
                MsgBox("This Episode Scraper is already running")
            ElseIf Bckgrndfindmissingepisodes.IsBusy Then
                MsgBox("The missing episode search cannot be performed" & vbCrLf & "    while the episode scraper is running")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Public Function ep_Get(ByVal tvdbid As String, ByVal sortorder As String, ByVal seriesno As String, ByVal episodeno As String, ByVal language As String)
        Dim ErrorCounter As Integer = 0
        Dim episodestring As String = ""
        Dim episodeurl2 As String = ""
        Dim xmlfile As String
        While ErrorCounter <= 10
            Try

                episodestring = ""
                episodeurl2 = ""
                If language.ToLower.IndexOf(".xml") = -1 Then
                    language = language & ".xml"
                End If
                episodeurl2 = "http://thetvdb.com/api/6E82FED600783400/series/" & tvdbid & "/" & sortorder & "/" & seriesno & "/" & episodeno & "/" & language
                Dim myProxy As New WebProxy("myproxy", 80)
                myProxy.BypassProxyOnLocal = True

                xmlfile = Utilities.DownloadTextFiles(episodeurl2)

                If CheckBoxDebugShowTVDBReturnedXML.Checked = True Then MsgBox(xmlfile, MsgBoxStyle.OkOnly, "FORM1 getepisode - TVDB returned.....")

                Dim episode As New XmlDocument

                episode.LoadXml(xmlfile)

                episodestring = "<episodedetails>"
                episodestring = episodestring & "<url>" & episodeurl2 & "</url>"
                Dim mirrorslist As New XmlDocument
                'Try
                mirrorslist.LoadXml(xmlfile)
                Dim thisresult As XmlNode = Nothing
                For Each thisresult In mirrorslist("Data")

                    Select Case thisresult.Name
                        Case "Episode"
                            Dim mirrorselection As XmlNode = Nothing
                            For Each mirrorselection In thisresult.ChildNodes
                                Select Case mirrorselection.Name
                                    Case "EpisodeName"
                                        episodestring = episodestring & "<title>" & mirrorselection.InnerXml & "</title>"
                                    Case "FirstAired"
                                        episodestring = episodestring & "<premiered>" & mirrorselection.InnerXml & "</premiered>"
                                    Case "GuestStars"
                                        Dim tempstring As String = mirrorselection.InnerXml
                                        Try
                                            tempstring = tempstring.TrimStart("|")
                                            tempstring = tempstring.TrimEnd("|")
                                            Dim tvtempstring2 As String
                                            Dim tvtempint As Integer = 0
                                            Dim a() As String
                                            Dim j As Integer = 0
                                            tvtempstring2 = ""
                                            a = tempstring.Split("|")
                                            tvtempint = a.GetUpperBound(0)
                                            tvtempstring2 = a(0)
                                            If tvtempint >= 0 Then
                                                For j = 0 To tvtempint
                                                    Try
                                                        episodestring = episodestring & "<actor>" & "<name>" & a(j) & "</name></actor>"
                                                    Catch ex As Exception
#If SilentErrorScream Then
                                                        Throw ex
#End If
                                                    End Try
                                                Next
                                            End If
                                        Catch ex As Exception
#If SilentErrorScream Then
                                            Throw ex
#End If
                                        End Try
                                    Case "Director"
                                        Dim tempstring As String = mirrorselection.InnerXml
                                        tempstring = tempstring.TrimStart("|")
                                        tempstring = tempstring.TrimEnd("|")
                                        episodestring = episodestring & "<director>" & tempstring & "</director>"
                                    Case "Writer"
                                        Dim tempstring As String = mirrorselection.InnerXml
                                        tempstring = tempstring.TrimStart("|")
                                        tempstring = tempstring.TrimEnd("|")
                                        episodestring = episodestring & "<credits>" & tempstring & "</credits>"
                                    Case "Overview"
                                        episodestring = episodestring & "<plot>" & mirrorselection.InnerXml & "</plot>"
                                    Case "Rating"
                                        episodestring = episodestring & "<rating>" & mirrorselection.InnerXml & "</rating>"
                                    Case "filename"
                                        episodestring = episodestring & "<thumb>http://www.thetvdb.com/banners/" & mirrorselection.InnerXml & "</thumb>"
                                End Select
                            Next
                    End Select
                Next
                episodestring = episodestring & "</episodedetails>"
                Return episodestring
                'Catch ex As Exception
                '    Return "ERROR - <url>" & episodeurl & "</url>"
                'Finally
                '    Monitor.Exit(Me)
                'End Try
            Catch ex As Exception
                If ErrorCounter <= 10 Then
                    ErrorCounter += 1
                Else
                    episodestring = Nothing
                End If
            End Try

        End While
        Return "Error"
    End Function

    Private Sub ReloadItemToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ReloadItemToolStripMenuItem1.Click
        Try
            Call mov_FormPopulate()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TabPage22_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles TabPage22.LostFocus
        Try
            TabPage22.Focus()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TabPage22_MouseWheel(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles TabPage22.MouseWheel
        Try

        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RebuildActorDBToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RebuildActorDBToolStripMenuItem.Click
        Try
            Call mov_ActorRebuild()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button14_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button14.Click
        Try
            If TextBox38.Text <> "" Then
                Dim ex As Boolean = False
                For Each mset In Preferences.moviesets
                    If mset = TextBox38.Text Then
                        ex = True
                        Exit For
                    End If
                Next
                If ex = False Then
                    Preferences.moviesets.Add(TextBox38.Text)
                    ListBox4.Items.Add(TextBox38.Text)
                    ComboBox3.Items.Clear()
                    For Each mset In Preferences.moviesets
                        ComboBox3.Items.Add(mset)
                    Next
                    If workingMovieDetails.fullmoviebody.movieset <> Nothing Then
                        Dim add As Boolean = True
                        For Each mset In Preferences.moviesets
                            If mset = workingMovieDetails.fullmoviebody.movieset Then
                                add = False
                            End If
                        Next
                        If add = True Then
                            Preferences.moviesets.Add(workingMovieDetails.fullmoviebody.movieset)
                            ComboBox3.Items.Add(workingMovieDetails.fullmoviebody.movieset)
                        End If
                        For f = 0 To ComboBox3.Items.Count - 1
                            If ComboBox3.Items(f) = workingMovieDetails.fullmoviebody.movieset Then
                                ComboBox3.SelectedIndex = f
                                Exit For
                            End If
                        Next
                    Else
                        If ComboBox3.Items.Count = 0 Then
                            If Preferences.moviesets.Count > 0 Then
                                For Each mset In Preferences.moviesets
                                    ComboBox3.Items.Add(mset)
                                Next
                            End If
                        End If
                        If ComboBox3.Items.Count = 0 Then
                            ComboBox3.Items.Add("-None-")
                        End If
                        If ComboBox3.Items(0) <> "-None-" Then
                            ComboBox3.Items.Insert(0, "-None-")
                        End If
                        ComboBox3.SelectedIndex = 0
                    End If
                Else
                    MsgBox("This Movie Set Already Exists")
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button65_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button65.Click
        Try
            For i = 0 To ListBox4.SelectedItems.Count - 1
                Dim tempboolean As Boolean = False
                If ListBox4.SelectedItems(i) <> Nothing And ListBox4.SelectedItems(i) <> "" Then
                    For Each mset In Preferences.moviesets
                        If mset = ListBox4.SelectedItems(i) Then
                            If workingMovieDetails.fullmoviebody.movieset <> mset Then
                                Preferences.moviesets.Remove(mset)
                            Else
                                MsgBox("Unable to remove """ & mset & """, it is being used by the selected Movie")
                            End If
                            Exit For
                        End If
                    Next
                End If
            Next
            ListBox4.Items.Clear()
            ComboBox3.Items.Clear()

            For Each mset In Preferences.moviesets
                If mset <> "-None-" Then ListBox4.Items.Add(mset)
                ComboBox3.Items.Add(mset)
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try


    End Sub

    Private Sub Button66_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button66.Click
        Try
            MovieListComboBox.Items.Clear()
            filteredList.Clear()
            If ComboBox3.SelectedItem <> "-None-" Then
                For Each movie In fullMovieList
                    If movie.movieset = ComboBox3.SelectedItem Then
                        filteredList.Add(movie)
                    End If
                Next
            Else
                For Each movie In fullMovieList
                    If movie.movieset = "-None-" Then
                        filteredList.Add(movie)
                    End If
                Next
            End If
            Call mov_MovieComboListSort()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton32_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton32.CheckedChanged
        Try
            If RadioButton32.Checked = True Then
                Call tv_Filter("screenshot")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton30_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton30.CheckedChanged
        Try
            If RadioButton30.Checked = True Then
                Call tv_Filter("fanart")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton29_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton29.CheckedChanged
        Try
            If RadioButton29.Checked = True Then
                Call tv_Filter("all")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton31_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton31.CheckedChanged
        Try
            If RadioButton31.Checked = True Then
                Call tv_Filter("posters")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    '    Private Sub tvfilter(ByVal butt As String)
    '        If Not startup = True Then
    '            totalEpisodeCount = 0
    '            totalTvShowCount = 0
    '            If butt = "missingeps" Then
    '                For Each t As TreeNode In TvTreeview.Nodes
    '                    For Each c As TreeNode In t.Nodes
    '                        For i = 1 To c.Nodes.Count
    '                            c.Nodes.RemoveAt(0)
    '                        Next
    '                    Next
    '                Next
    '                Dim shownode As Integer
    '                Dim cnode As TreeNode = Nothing
    '                Dim tempstring As String = String.Empty
    '                Dim tempint As Integer

    '                For Each item In TvShows
    '                    For Each episode In item.missingepisodes
    '                        totalEpisodeCount += 1
    '                        Try
    '                            Dim seasonno As Integer = -10
    '                            seasonno = Convert.ToInt32(episode.Season.value)

    '                            For g = 0 To TvTreeview.Nodes.Count - 1
    '                                If TvTreeview.Nodes(g).Name.ToString = item.fullpath Then
    '                                    cnode = TvTreeview.Nodes(g)
    '                                    shownode = g
    '                                    Exit For
    '                                End If
    '                            Next

    '                            Dim seasonstring As String = Nothing

    '                            If seasonno <> 0 And seasonno <> -1 Then
    '                                If seasonno < 10 Then
    '                                    tempstring = "Season 0" & seasonno.ToString
    '                                Else
    '                                    tempstring = "Season " & seasonno.ToString
    '                                End If
    '                            ElseIf seasonno = 0 Then
    '                                tempstring = "Specials"
    '                                'ElseIf seasonno = -1 Then
    '                                '    tempstring = "Unknown"
    '                            End If
    '                            Dim node As TreeNode
    '                            Dim alreadyexists As Boolean = False
    '                            For Each node In cnode.Nodes
    '                                If node.Text = tempstring Then
    '                                    alreadyexists = True
    '                                    Exit For
    '                                End If
    '                            Next

    '                            If alreadyexists = False Then cnode.Nodes.Add(tempstring)

    '                            For Each node In cnode.Nodes
    '                                If node.Text = tempstring Then
    '                                    tempint = node.Index

    '                                    Exit For
    '                                End If
    '                            Next

    '                            Dim eps As String
    '                            If episode.episodeno < 10 Then
    '                                eps = "0" & episode.episodeno.ToString
    '                            Else
    '                                eps = episode.episodeno.ToString
    '                            End If
    '                            eps = eps & " - " & episode.title
    '                            If episode.imdbid = Nothing Then
    '                                episode.imdbid = ""
    '                            End If

    '                            'If episode.imdbid.ToLower.IndexOf("xml error") <> -1 Then
    '                            '    Dim path As String = episode.VideoFilePath.Replace(IO.Path.GetExtension(episode.VideoFilePath), ".tbn")
    '                            '    If Not IO.File.Exists(path) Then
    '                            '        Call add_episode_to_treeview(shownode, tempint, episode.VideoFilePath, eps, True)
    '                            '    End If
    '                            'Else
    '                            '    Dim path As String = episode.VideoFilePath.Replace(IO.Path.GetExtension(episode.VideoFilePath), ".tbn")
    '                            '    If Not IO.File.Exists(path) Then
    '                            Call add_episode_to_treeview(shownode, tempint, episode.VideoFilePath, eps, False)
    '                            Dim child As TreeNode
    '                            Dim childchild As TreeNode
    '                            Dim childchildchild As TreeNode
    '                            For Each child In TvTreeview.Nodes
    '                                For Each childchild In child.Nodes
    '                                    For Each childchildchild In childchild.Nodes
    '                                        childchildchild.ForeColor = Color.Blue
    '                                    Next
    '                                Next
    '                            Next
    '                            'End If
    '                            'End If
    '                        Catch ex As Exception
    '#If SilentErrorScream Then
    '                            Throw ex
    '#End If
    '                            'MsgBox(ex.ToString)
    '                        End Try
    '                    Next
    '                Next
    '                For f = 0 To 3
    '                    For Each t As TreeNode In TvTreeview.Nodes
    '                        For Each c As TreeNode In t.Nodes
    '                            If c.Nodes.Count = 0 Then
    '                                t.Nodes.RemoveAt(0)
    '                            End If
    '                        Next
    '                    Next
    '                Next
    '                For f = 1 To 10
    '                    For Each t As TreeNode In TvTreeview.Nodes
    '                        If t.Nodes.Count = 0 Then
    '                            TvTreeview.Nodes.Remove(t)
    '                        End If
    '                    Next
    '                Next
    '            ElseIf butt = "screenshot" Then
    '                For Each t As TreeNode In TvTreeview.Nodes
    '                    For Each c As TreeNode In t.Nodes
    '                        For i = 1 To c.Nodes.Count
    '                            c.Nodes.RemoveAt(0)
    '                        Next
    '                    Next
    '                Next

    '                Dim shownode As Integer
    '                Dim cnode As TreeNode = Nothing
    '                Dim tempstring As String = String.Empty
    '                Dim tempint As Integer

    '                For Each item In TvShows
    '                    For Each episode In item.allepisodes
    '                        totalEpisodeCount += 1
    '                        Try
    '                            Dim seasonno As Integer = -10
    '                            seasonno = Convert.ToInt32(episode.Season.value)

    '                            For g = 0 To TvTreeview.Nodes.Count - 1
    '                                If TvTreeview.Nodes(g).Name.ToString = item.fullpath Then
    '                                    cnode = TvTreeview.Nodes(g)
    '                                    shownode = g
    '                                    Exit For
    '                                End If
    '                            Next

    '                            Dim seasonstring As String = Nothing

    '                            If seasonno <> 0 And seasonno <> -1 Then
    '                                If seasonno < 10 Then
    '                                    tempstring = "Season 0" & seasonno.ToString
    '                                Else
    '                                    tempstring = "Season " & seasonno.ToString
    '                                End If
    '                            ElseIf seasonno = 0 Then
    '                                tempstring = "Specials"
    '                                'ElseIf seasonno = -1 Then
    '                                '    tempstring = "Unknown"
    '                            End If
    '                            Dim node As TreeNode
    '                            Dim alreadyexists As Boolean = False
    '                            For Each node In cnode.Nodes
    '                                If node.Text = tempstring Then
    '                                    alreadyexists = True
    '                                    Exit For
    '                                End If
    '                            Next

    '                            If alreadyexists = False Then cnode.Nodes.Add(tempstring)

    '                            For Each node In cnode.Nodes
    '                                If node.Text = tempstring Then
    '                                    tempint = node.Index

    '                                    Exit For
    '                                End If
    '                            Next

    '                            Dim eps As String
    '                            If episode.episodeno < 10 Then
    '                                eps = "0" & episode.episodeno.ToString
    '                            Else
    '                                eps = episode.episodeno.ToString
    '                            End If
    '                            eps = eps & " - " & episode.title
    '                            If episode.imdbid = Nothing Then
    '                                episode.imdbid = ""
    '                            End If

    '                            If episode.imdbid.ToLower.IndexOf("xml error") <> -1 Then
    '                                Dim path As String = episode.VideoFilePath.Replace(IO.Path.GetExtension(episode.VideoFilePath), ".tbn")
    '                                If Not IO.File.Exists(path) Then
    '                                    Call add_episode_to_treeview(shownode, tempint, episode.VideoFilePath, eps, True)
    '                                End If
    '                            Else
    '                                Dim path As String = episode.VideoFilePath.Replace(IO.Path.GetExtension(episode.VideoFilePath), ".tbn")
    '                                If Not IO.File.Exists(path) Then
    '                                    Call add_episode_to_treeview(shownode, tempint, episode.VideoFilePath, eps, False)
    '                                End If
    '                            End If
    '                        Catch ex As Exception
    '#If SilentErrorScream Then
    '                            Throw ex
    '#End If
    '                            'MsgBox(ex.ToString)
    '                        End Try
    '                    Next
    '                Next
    '                For f = 0 To 3
    '                    For Each t As TreeNode In TvTreeview.Nodes
    '                        For Each c As TreeNode In t.Nodes
    '                            If c.Nodes.Count = 0 Then
    '                                t.Nodes.RemoveAt(0)
    '                            End If
    '                        Next
    '                    Next
    '                Next
    '                For f = 1 To 10
    '                    For Each t As TreeNode In TvTreeview.Nodes
    '                        If t.Nodes.Count = 0 Then
    '                            TvTreeview.Nodes.Remove(t)
    '                        End If
    '                    Next
    '                Next
    '            ElseIf butt = "all" Then
    '                'Call populatetvtree()
    '            ElseIf butt = "fanart" Then
    '                For Each t As TreeNode In TvTreeview.Nodes
    '                    For i = 1 To t.Nodes.Count
    '                        t.Nodes.RemoveAt(0)
    '                    Next
    '                Next
    '                For f = TvTreeview.Nodes.Count - 1 To 0 Step -1
    '                    Dim fanartpath As String = TvTreeview.Nodes(f).Name.Replace(IO.Path.GetFileName(TvTreeview.Nodes(f).Name), "fanart.jpg")
    '                    If IO.File.Exists(fanartpath) Then
    '                        TvTreeview.Nodes.RemoveAt(f)
    '                    End If
    '                Next
    '            ElseIf butt = "posters" Then
    '                For Each t As TreeNode In TvTreeview.Nodes
    '                    For Each c As TreeNode In t.Nodes
    '                        For i = 1 To c.Nodes.Count
    '                            c.Nodes.RemoveAt(0)
    '                        Next
    '                    Next
    '                Next

    '                For Each t As TreeNode In TvTreeview.Nodes
    '                    Dim allposterpath As String = t.Name.Replace(IO.Path.GetFileName(t.Name), "season-all.tbn")
    '                    For i = t.Nodes.Count - 1 To 0 Step -1
    '                        Dim posterpath As String = t.Nodes(i).Text
    '                        If posterpath.ToLower.IndexOf("season") <> -1 Then
    '                            posterpath = posterpath.Replace(" ", "")
    '                            posterpath = t.Nodes(i).Parent.Name.Replace("tvshow.nfo", posterpath & ".tbn")
    '                        End If
    '                        If posterpath.ToLower.IndexOf("specials") <> -1 Then
    '                            posterpath = posterpath.Replace(" ", "")
    '                            posterpath = t.Nodes(i).Parent.Name.Replace("tvshow.nfo", "season-specials.tbn")
    '                        End If
    '                        If IO.File.Exists(posterpath) Then
    '                            t.Nodes.RemoveAt(i)
    '                        Else
    '                            Dim hytgv As String = "huhuh"
    '                        End If
    '                    Next
    '                    If Not IO.File.Exists(allposterpath) Then
    '                        t.Nodes.Add("season-all.tbn", allposterpath)
    '                    End If
    '                Next

    '                For f = 1 To 10
    '                    For Each t As TreeNode In TvTreeview.Nodes
    '                        If t.Nodes.Count = 0 Then
    '                            TvTreeview.Nodes.Remove(t)
    '                        End If
    '                    Next
    '                Next
    '            End If
    '            Dim nod As TreeNode

    '            If TvTreeview.Nodes.Count = 0 Then
    '                'screenshot
    '                'fanart
    '                'posters
    '                Dim messstring As String = ""
    '                If butt = "screenshot" Then
    '                    messstring = "All episodes have screenhots"
    '                ElseIf butt = "fanart" Then
    '                    messstring = "All TV Shows have a Backdrop"
    '                ElseIf butt = "posters" Then
    '                    messstring = "All Shows and Seasons have a Poster"
    '                ElseIf butt = "all" Then
    '                    messstring = ""
    '                Else
    '                    messstring = "No missing art could be found"
    '                End If
    '                If messstring <> "" Then
    '                    MsgBox(messstring)
    '                    RadioButton29.Checked = True
    '                End If
    '            Else
    '                If butt <> "all" And butt <> "" Then
    '                    For Each nod In TvTreeview.Nodes
    '                        nod.ExpandAll()
    '                    Next
    '                End If
    '            End If
    '        End If
    '    End Sub

    Dim processnow As Boolean = True
    Dim currenttitle As String
    Private Sub titletxt_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles titletxt.Enter
        Try
            Try
                processnow = False
                If titletxt.Text.IndexOf(workingMovieDetails.fullmoviebody.year) <> -1 Then
                    Dim tempstring2 As String = " (" & workingMovieDetails.fullmoviebody.year & ")"
                    Dim tempstring As String = titletxt.Text.Replace(tempstring2, "")
                    tempstring = tempstring.TrimEnd(" ")
                    currenttitle = tempstring
                    titletxt.Items.Clear()
                    'titletxt.Items.Add(tempstring)
                    For Each item In workingMovieDetails.alternativetitles
                        If item <> tempstring Then
                            titletxt.Items.Add(item)
                        End If
                    Next
                    titletxt.SelectedIndex = -1
                    titletxt.Text = tempstring

                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub titletxt_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles titletxt.Leave
        Try
            Try

                TextBox34.Text = titletxt.Text
                'For Each item In workingmoviedetails.alternativetitles
                '    If item = currenttitle Then
                '        workingmoviedetails.alternativetitles.Remove(item)
                '        workingmoviedetails.alternativetitles.Add(titletxt.Text)
                '        Exit For
                '    End If
                'Next
                If titletxt.Text.IndexOf(workingMovieDetails.fullmoviebody.year) = -1 Then
                    Dim tempstring As String = titletxt.Text
                    titletxt.Items.Clear()
                    'titletxt.Items.Add(tempstring & " (" & workingmoviedetails.fullmoviebody.year & ")")
                    For Each item In workingMovieDetails.alternativetitles
                        If item <> currenttitle Then
                            titletxt.Items.Add(item)
                        End If
                    Next
                    titletxt.Text = tempstring & " (" & workingMovieDetails.fullmoviebody.year & ")"
                    'titletxt.SelectedIndex = -1
                End If
                processnow = True
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub titletxt_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles titletxt.SelectedIndexChanged
        Try
            Try
                If titletxt.Text.IndexOf(workingMovieDetails.fullmoviebody.year) = -1 Then
                    Dim tempstring As String = titletxt.Text
                    titletxt.Items.Clear()
                    titletxt.Items.Add(tempstring & " (" & workingMovieDetails.fullmoviebody.year & ")")
                    For Each item In workingMovieDetails.alternativetitles
                        If item <> tempstring Then
                            titletxt.Items.Add(item)
                        End If
                    Next
                    titletxt.SelectedIndex = 0
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_PreferencesDisplay()
        ListBox7.Items.Clear()
        For Each item In movieFolders
            ListBox7.Items.Add(item)
        Next
        ListBox15.Items.Clear()
        For Each item In Preferences.offlinefolders
            ListBox15.Items.Add(item)
        Next
    End Sub


    Private Sub btn_addmoviefolderdialogue_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_addmoviefolderdialogue.Click
        Try
            Dim allok As Boolean = True
            Dim theFolderBrowser As New FolderBrowserDialog
            Dim thefoldernames As String
            theFolderBrowser.Description = "Please Select Folder to Add to DB (Subfolders will also be added)"
            theFolderBrowser.ShowNewFolderButton = True
            theFolderBrowser.RootFolder = System.Environment.SpecialFolder.Desktop
            theFolderBrowser.SelectedPath = Preferences.lastpath
            If theFolderBrowser.ShowDialog = Windows.Forms.DialogResult.OK Then
                thefoldernames = (theFolderBrowser.SelectedPath)
                Preferences.lastpath = thefoldernames
                For Each item As Object In ListBox2.Items
                    If thefoldernames.ToString = item.ToString Then allok = False
                Next

                If allok = True Then
                    ListBox7.Items.Add(thefoldernames)
                    ListBox7.Refresh()
                Else
                    MsgBox("        Folder Already Exists")
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btn_removemoviefolder_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_removemoviefolder.Click
        Try
            While ListBox7.SelectedItems.Count > 0
                ListBox7.Items.Remove(ListBox7.SelectedItems(0))
            End While
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DownsizeAllFanartsToSelectedSizeToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DownsizeAllFanartsToSelectedSizeToolStripMenuItem.Click
        Try
            Dim tempint As Integer = fullMovieList.Count
            Dim messbox As frmMessageBox = New frmMessageBox("Please wait, Backdrops are being resized", "", tempint.ToString & " remaining")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            Me.Refresh()
            messbox.Refresh()

            For Each movie In fullMovieList
                tempint -= 1
                messbox.TextBox3.Text = tempint.ToString & " remaining"
                messbox.TextBox3.Refresh()
                'Application.DoEvents()
                Try
                    Dim tempfanartpath As String = ""
                    tempfanartpath = Preferences.GetFanartPath(movie.fullpathandfilename)
                    Dim btmp As New Bitmap(tempfanartpath)
                    Dim bmp As New Bitmap(btmp)
                    btmp.Dispose()
                    If Preferences.resizefanart = 2 Then
                        If bmp.Width > 1280 Or bmp.Height > 720 Then
                            Dim bm_source As New Bitmap(bmp)
                            Dim bm_dest As New Bitmap(1280, 720)
                            Dim gr As Graphics = Graphics.FromImage(bm_dest)
                            gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                            gr.DrawImage(bm_source, 0, 0, 1280 - 1, 720 - 1)
                            Dim tempbitmap As Bitmap = bm_dest
                            tempbitmap.Save(tempfanartpath, Imaging.ImageFormat.Jpeg)
                        End If
                    ElseIf Preferences.resizefanart = 3 Then
                        If bmp.Width > 960 Or bmp.Height > 540 Then
                            Dim bm_source As New Bitmap(bmp)
                            Dim bm_dest As New Bitmap(960, 540)
                            Dim gr As Graphics = Graphics.FromImage(bm_dest)
                            gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                            gr.DrawImage(bm_source, 0, 0, 960 - 1, 540 - 1)
                            Dim tempbitmap As Bitmap = bm_dest
                            tempbitmap.Save(tempfanartpath, Imaging.ImageFormat.Jpeg)
                        End If
                    End If
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
            Next

        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        Finally
            Try
                messbox.Close()
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
        End Try

    End Sub

    Private Sub Button110_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button110.Click
        Try
            frmSplash2.Text = "Save & Quick Rebuild Movies..."
            frmSplash2.Label1.Text = "Searching for Movie Folders....."
            frmSplash2.Label2.Visible = False
            frmSplash2.ProgressBar1.Visible = False
            frmSplash2.Show()
            Application.DoEvents()

            Dim folderstoadd As New List(Of String)
            Dim offlinefolderstoadd As New List(Of String)
            Dim folderstoremove As New List(Of String)
            Dim offlinefolderstoremove As New List(Of String)
            For Each item In ListBox7.Items
                Dim add As Boolean = True
                For Each folder In movieFolders
                    If folder = item Then add = False
                Next
                If add = True Then folderstoadd.Add(item)
            Next
            For Each item In ListBox15.Items
                Dim add As Boolean = True
                For Each folder In Preferences.offlinefolders
                    If folder = item Then add = False
                Next
                If add = True Then offlinefolderstoadd.Add(item)
            Next
            For Each item In movieFolders
                Dim remove As Boolean = True
                For Each folder In ListBox7.Items
                    If folder = item Then remove = False
                Next
                If remove = True Then folderstoremove.Add(item)
            Next
            For Each item In Preferences.offlinefolders
                Dim remove As Boolean = True
                For Each folder In ListBox15.Items
                    If folder = item Then remove = False
                Next
                If remove = True Then offlinefolderstoremove.Add(item)
            Next
            If folderstoremove.Count > 0 Or offlinefolderstoremove.Count > 0 Then
                For Each item In folderstoremove
                    For f = fullMovieList.Count - 1 To 0 Step -1
                        If fullMovieList(f).fullpathandfilename.IndexOf(item) <> -1 Then
                            fullMovieList.RemoveAt(f)
                        End If
                    Next
                Next
                For Each item In offlinefolderstoremove
                    For f = fullMovieList.Count - 1 To 0 Step -1
                        If fullMovieList(f).fullpathandfilename.IndexOf(item) <> -1 Then
                            fullMovieList.RemoveAt(f)
                        End If
                    Next
                Next
                For f = movieFolders.Count - 1 To 0 Step -1
                    Dim remove As Boolean = False
                    For Each folder In folderstoremove
                        If movieFolders(f) = folder Then
                            remove = True
                        End If
                    Next
                    If remove = True Then movieFolders.RemoveAt(f)
                Next
                For f = Preferences.offlinefolders.Count - 1 To 0 Step -1
                    Dim remove As Boolean = False
                    For Each folder In offlinefolderstoremove
                        If Preferences.offlinefolders(f) = folder Then
                            remove = True
                        End If
                    Next
                    If remove = True Then Preferences.offlinefolders.RemoveAt(f)
                Next
                Preferences.saveconfig()
                Call mov_CacheSave()
            End If
            frmSplash2.ProgressBar1.Visible = True
            If folderstoadd.Count > 0 Or offlinefolderstoadd.Count > 0 Then
                'messbox = New frmMessageBox("New Movie Folders Found", "Adding to DB", "Please Wait")
                'remove old
                'messbox.Show()
                ' messbox.Refresh()
                Application.DoEvents()
                Try
                    For Each folder In folderstoadd
                        movieFolders.Add(folder)
                    Next
                    For Each folder In offlinefolderstoadd
                        Preferences.offlinefolders.Add(folder)
                        folderstoadd.Add(folder)
                    Next
                    If Preferences.usefoldernames = True Then         'use TRUE if folder contains nfo's, False if folder contains folders which contain nfo's
                        progressmode = False
                    Else
                        progressmode = True
                    End If
                    Call mov_NfoLoad(folderstoadd, progressmode)
                    Preferences.saveconfig()
                Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
                End Try
                messbox.Close()
            End If
            Try
                'ignore = False
                MovieListComboBox.SelectedIndex = 0
                If MovieListComboBox.SelectedItem.value <> "" Then
                    'loadinfofile()
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
            Call mov_CacheSave()
            'filteredlist = fullmovielist
            Call mov_MovieComboListSort()
            'Call loadmovielist()
            Call mov_FiltersAndSortApply()
            Call mov_FormPopulate()
            frmSplash2.Hide()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub tv_PosterCheck(ByVal season As String, ByVal path As String, ByVal tvdbid As String)
        Dim seasonposterpath As String = "na"
        Dim seasonfilename As String = season 'Season 08
        Dim seasonnumber As String
        season = season.Replace("Season ", "season")
        seasonnumber = season
        seasonnumber = seasonnumber.Replace("season", "")
        If seasonnumber.IndexOf("0") = 0 Then
            Try
                seasonnumber = seasonnumber.Substring(1, 1)
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
        End If
        If season = "season00" Then
            season = "season-specials.tbn"
        Else
            season = season & ".tbn"
        End If
        For Each folder In tvFolders
            If path.IndexOf(folder) <> -1 Then
                seasonposterpath = IO.Path.Combine(folder, season)
            End If
        Next
        If seasonposterpath <> "na" Then
            If IO.File.Exists(seasonposterpath) Then Exit Sub
            Dim showlist As New XmlDocument
            'Dim tvdbstuff As New TVDB.tvdbscraper 'commented because of removed TVDB.dll
            Dim tvdbstuff As New TVDBScraper
            Dim thumblist As String = tvdbstuff.getposterlist(tvdbid)
            Try
                showlist.LoadXml(thumblist)
            Catch
                Exit Sub
            End Try
            Dim tvseasonposterlist As New List(Of TvBanners)
            tvseasonposterlist.Clear()
            Dim backupposterurl As String = ""
            Dim primaryposterurl As String = ""
            For Each thisresult In showlist("banners")
                Dim newtvposter As New TvBanners
                Select Case thisresult.Name
                    Case "banner"

                        For Each results In thisresult.ChildNodes
                            Select Case results.Name
                                Case "url"
                                    newtvposter.url = results.InnerText
                                Case "bannertype"
                                    newtvposter.bannerType = results.InnerText
                                Case "language"
                                    newtvposter.language = results.InnerText
                                Case "season"
                                    newtvposter.season = results.InnerText
                            End Select
                        Next
                End Select
                If newtvposter.language = Preferences.tvdblanguagecode And newtvposter.season = seasonnumber Then
                    primaryposterurl = newtvposter.url
                    Exit For
                Else
                    If backupposterurl = "" And newtvposter.season = seasonnumber Then backupposterurl = newtvposter.url
                End If
            Next
            If primaryposterurl <> "" Then
                Dim i1 As New PictureBox

                With i1
                    .WaitOnLoad = True
                    Try
                        .ImageLocation = primaryposterurl
                    Catch
                        Try
                            .ImageLocation = backupposterurl
                        Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                        End Try
                    End Try
                End With

                Try
                    If Not i1 Is Nothing Then
                        i1.Image.Save(seasonposterpath, Imaging.ImageFormat.Jpeg)
                    End If
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
            End If
        End If
    End Sub

    Private Sub tv_FoldersSetup()
        ListBox5.Items.Clear()
        ListBox6.Items.Clear()
        For Each folder In tvRootFolders
            ListBox5.Items.Add(folder)
        Next
        For Each folder In tvFolders
            ListBox6.Items.Add(folder)
        Next
    End Sub

    Private Sub Button69_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button69.Click
        Try
            While ListBox5.SelectedItems.Count > 0
                ListBox5.Items.Remove(ListBox5.SelectedItems(0))
            End While
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button71_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button71.Click
        Try
            Dim Folder As String
            While ListBox6.SelectedItems.Count > 0
                Folder = ListBox6.SelectedItems(0)

                For Each Item As Media_Companion.TvShow In Cache.TvCache.Shows
                    If Item.FolderPath.Trim("\") = Folder.Trim("\") Then
                        TvTreeview.Nodes.Remove(Item.ShowNode)
                        Cache.TvCache.Remove(Item)
                        Exit For
                    End If
                Next
                ListBox6.Items.Remove(ListBox6.SelectedItems(0))
            End While
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button68_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button68.Click
        Try
            'browse for root tv folder
            Dim allok As Boolean = True
            Dim cancelregex As Boolean = False
            Dim newtvshow As Boolean = False
            Dim theFolderBrowser As New FolderBrowserDialog
            Dim strfolder As String
            Dim tempstring3 As String
            Dim tempint As Integer = 0
            Dim tempint2 As Integer = 0
            theFolderBrowser.Description = "Please Select Root Folder of the TV Shows You Wish To Add to DB"
            theFolderBrowser.ShowNewFolderButton = True
            theFolderBrowser.RootFolder = System.Environment.SpecialFolder.Desktop
            theFolderBrowser.SelectedPath = Preferences.lastpath
            If theFolderBrowser.ShowDialog = Windows.Forms.DialogResult.OK Then
                strfolder = (theFolderBrowser.SelectedPath)
                Preferences.lastpath = strfolder
                'Try
                allok = True
                For Each item As Object In ListBox5.Items
                    If strfolder = item.ToString Then allok = False
                Next
                Dim hasseason As Boolean = False
                If allok = True Then
                    For Each strfolder2 As String In My.Computer.FileSystem.GetDirectories(strfolder)
                        Dim M As Match
                        tempstring3 = strfolder2.ToLower
                        M = Regex.Match(tempstring3, "(series ?\d+|season ?\d+|s ?\d+|^\d{1,3}$)")
                        If M.Success = True Then
                            hasseason = True
                            Exit For
                        End If
                    Next
                    If hasseason = True Then
                        tempint = MessageBox.Show(strfolder & " Appears to Contain Season Folders" & vbCrLf & "Are you sure this folder contains multiple" & vbCrLf & "TV Shows, Each in it's own folder?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                        If tempint = DialogResult.Yes Then
                            ListBox5.Items.Add(strfolder)
                        ElseIf tempint = DialogResult.No Then
                            tempint2 = MessageBox.Show("Do you wish to add this as a single TV Show Folder?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                            If tempint2 = DialogResult.Yes Then
                                Dim test As Boolean = True
                                For Each folder In ListBox6.Items
                                    If folder = strfolder Then
                                        test = False
                                        MsgBox("Folder not added, Already exists")
                                        Exit For
                                    End If
                                Next
                                If test = True Then
                                    ListBox6.Items.Add(strfolder)
                                End If
                            End If
                        End If
                    Else
                        ListBox5.Items.Add(strfolder)
                    End If
                Else
                    MsgBox("Root already exists")
                End If
                'Catch ex As Exception
                '    MsgBox("error")
                'End Try
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub


    Private Sub Button85_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button85.Click
        Try
            'newTvFolders.Clear()
            'Call setuptvfolders()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    '    Public Sub updatetree(Optional ByVal addnew As Boolean = True)


    '        Dim oldfolders As New List(Of String)
    '        totalTvShowCount = 0
    '        totalEpisodeCount = 0
    '        TextBox32.Text = ""
    '        TextBox33.Text = ""
    '        'Me.Enabled = False
    '        'basictvlist.Clear()
    '        TvTreeview.Nodes.Clear()

    '        For Each tvshow In TvShows
    '            If tvshow.fullpath IsNot Nothing Then
    '                Dim tempstring As String = tvshow.fullpath.Replace("\tvshow.nfo", "")
    '                If Not tvFolders.Contains(tempstring) Then
    '                    oldfolders.Add(tempstring)
    '                End If
    '            End If
    '        Next
    '        For Each folder In oldfolders
    '            For Each oldshow In TvShows
    '                Dim tempstring As String = oldshow.fullpath.Replace("\tvshow.nfo", "")
    '                If tempstring = folder Then
    '                    TvShows.Remove(oldshow)
    '                    For Each fol In tvFolders
    '                        If oldshow.fullpath.IndexOf(fol) <> -1 Then
    '                            tvFolders.Remove(fol)
    '                            Exit For
    '                        End If
    '                    Next
    '                    Exit For
    '                End If
    '            Next
    '        Next

    '        'get list of new
    '        Dim folderstoadd As New List(Of String)
    '        For Each folder In tvFolders
    '            Dim add As Boolean = True
    '            Dim tempstring2 As String = folder
    '            For Each tvshow In TvShows
    '                Dim tempstring As String = tvshow.fullpath.Replace("\tvshow.nfo", "")
    '                If folder = tempstring Then
    '                    add = False
    '                    Exit For
    '                End If
    '            Next
    '            If add = True Then
    '                folderstoadd.Add(tempstring2)
    '            End If
    '        Next

    '        If folderstoadd.Count > 0 Then
    '            messbox = New frmMessageBox("New TV Folders Found", "Adding to DB", "Please Wait")
    '            'remove old
    '            messbox.Show()
    '            messbox.Refresh()
    '            Application.DoEvents()
    '            messbox.Show()
    '            Try
    '                For Each tvfolder In folderstoadd
    '                    Try
    '                        Dim shownfopath As String = IO.Path.Combine(tvfolder, "tvshow.nfo")
    '                        Dim newtvshownfo As TvShow
    '                        newtvshownfo = nfoFunction.loadbasictvshownfo(shownfopath)
    '                        'Try
    '                        '    If addnew = True Then
    '                        '        If Not IO.File.Exists(shownfopath) Then
    '                        'Call setgoingnewtvshows(shownfopath)
    '                        '        End If
    '                        '    End If
    '                        'Catch
    '                        'End Try
    '                        If newtvshownfo.title <> Nothing Then
    '                            If newtvshownfo.status.IndexOf("skipthisfile") = -1 Then
    '                                Dim skip As Boolean = False
    '                                For Each tvshow In TvShows
    '                                    If newtvshownfo.fullpath = tvshow.fullpath Then
    '                                        skip = True
    '                                        Exit For
    '                                    End If
    '                                Next
    '                                If skip = False Then
    '                                    ListtvFiles(newtvshownfo, "*.NFO")
    '                                    TvShows.Add(newtvshownfo)
    '                                End If
    '                            End If
    '                        End If
    '                        realTvPaths.Add(tvfolder)
    '                    Catch ex As Exception
    '#If SilentErrorScream Then
    '                        Throw ex
    '#End If
    '                    End Try
    '                Next
    '            Catch ex As Exception
    '#If SilentErrorScream Then
    '                Throw ex
    '#End If
    '            End Try
    '            messbox.Close()
    '            Me.Activate()               'bring main form back to front
    '        End If
    '        'For Each tv In basictvlist
    '        '    ListtvFiles(tv, "*.NFO")
    '        'Next
    '        'Call populatetvtree()
    '        'messbox.Close()
    '        Me.Enabled = True

    '        Call TV_SaveTvData("New Function")

    '    End Sub

    Private Sub CheckRootsForToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckRootsForToolStripMenuItem.Click
        Try
            tv_FoldersSetup()
            tv_ShowFind()
            tv_ShowScrape()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TabPage23_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles TabPage23.Leave
        Try
            'Dim allok As Boolean = True
            'If TabPage23.Text <> "Folders" Then
            '    Exit Sub
            'End If
            'If tvFolders.Count <> ListBox6.Items.Count Then allok = False
            'If tvRootFolders.Count <> ListBox5.Items.Count Then allok = False
            'If allok = True Then
            '    Dim templist As New List(Of String)
            '    templist.Clear()
            '    For Each item In ListBox5.Items
            '        templist.Add(item)
            '    Next
            '    For Each item In tvRootFolders
            '        If Not templist.Contains(item) Then
            '            allok = False
            '            Exit For
            '        End If
            '    Next
            'End If
            'If allok = True Then
            '    Dim templist As New List(Of String)
            '    templist.Clear()
            '    For Each item In ListBox6.Items
            '        templist.Add(item)
            '    Next
            '    For Each item In tvFolders
            '        If Not templist.Contains(item) Then
            '            allok = False
            '            Exit For
            '        End If
            '    Next
            'End If
            'If allok = False Then
            '    Dim tempint As Integer = MessageBox.Show("There appears to be unsaved changes to your folderlists," & vbCrLf & "Do wish to save the changes", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
            '    If tempint = DialogResult.Yes Then
            '        tvFolders.Clear()
            '        For Each item In ListBox6.Items
            '            If Not newTvFolders.Contains(item) Then
            '                tvFolders.Add(item)
            '            End If
            '        Next
            '        tvRootFolders.Clear()
            '        For Each item In ListBox5.Items
            '            tvRootFolders.Add(item)
            '        Next
            '        Dim save As New Preferences
            '        Call save.saveconfig()
            '        Call updatetree()
            '        If newTvFolders.Count = 0 Then
            '            MsgBox("Changes Saved")
            '        Else
            '            MsgBox("Changes Saved, additional folders will be added to your list as they are scraped")
            '            If Not bckgrnd_tvshowscraper.IsBusy Then
            '                bckgrnd_tvshowscraper.RunWorkerAsync()
            '            End If
            '        End If
            '    Else
            '        Dim load As New Preferences
            '        Call load.loadconfig()
            '    End If
            'End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button83_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button83.Click
        Try
            tv_ShowScrape()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button84_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button84.Click
        Try
            tv_ShowFind()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Public Sub tv_ShowFind()
        Dim Folders As List(Of String)
        For Each folder In ListBox5.Items
            Folders = Utilities.EnumerateFolders(folder, 0)
            For Each strfolder2 As String In Folders
                If Not ListBox6.Items.Contains(strfolder2) Then
                    If strfolder2.Contains("System Volume Information") OrElse strfolder2.Contains("$RECYCLE.BIN") Then
                        Continue For
                    End If

                    ListBox6.Items.Add(strfolder2)
                    newTvFolders.Add(strfolder2)
                End If
            Next
        Next
    End Sub

    Public Sub tv_ShowScrape()
        tvFolders.Clear()
        For Each item In ListBox6.Items
            If Not newTvFolders.Contains(item) Then
                tvFolders.Add(item)
            End If
        Next
        tvRootFolders.Clear()
        For Each item In ListBox5.Items
            tvRootFolders.Add(item)
        Next
        Preferences.SaveConfig()
        'Call updatetree()
        If newTvFolders.Count = 0 Then
            MsgBox("Changes Saved")
        Else
            MsgBox("Changes Saved, additional folders will be added to your list as they are scraped")
            If Not bckgrnd_tvshowscraper.IsBusy Then
                ToolStripStatusLabel5.Text = "Scraping TV Shows, " & newTvShows.Count + 1 & " remaining"
                ToolStripStatusLabel5.Visible = True
                bckgrnd_tvshowscraper.RunWorkerAsync()
            End If
        End If
        'Me.Focus()
    End Sub

    Private Sub Button70_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button70.Click
        Try
            Dim allok As Boolean = True
            Dim theFolderBrowser As New FolderBrowserDialog
            Dim thefoldernames As String
            theFolderBrowser.Description = "Please Select TV Folder to Add to DB"
            theFolderBrowser.ShowNewFolderButton = True
            theFolderBrowser.RootFolder = System.Environment.SpecialFolder.Desktop
            theFolderBrowser.SelectedPath = Preferences.lastpath
            If theFolderBrowser.ShowDialog = Windows.Forms.DialogResult.OK Then
                thefoldernames = (theFolderBrowser.SelectedPath)
                For Each item As Object In ListBox6.Items
                    If thefoldernames.ToString = item.ToString Then allok = False
                Next
                Preferences.lastpath = thefoldernames
                If allok = True Then
                    ListBox6.Items.Add(thefoldernames)
                    newTvFolders.Add(thefoldernames)
                Else
                    MsgBox("        Folder Already Exists", MsgBoxStyle.OkOnly)
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button72_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button72.Click
        Try
            If TextBox40.Text = Nothing Then
                Exit Sub
            End If
            If TextBox40.Text = "" Then
                Exit Sub
            End If
            Dim tempstring As String = TextBox40.Text
            Do While tempstring.LastIndexOf("\") = tempstring.Length - 1
                tempstring = tempstring.Substring(0, tempstring.Length - 1)
            Loop
            Do While tempstring.LastIndexOf("/") = tempstring.Length - 1
                tempstring = tempstring.Substring(0, tempstring.Length - 1)
            Loop
            Dim exists As Boolean = False
            For Each item In ListBox6.Items
                If item.ToString.ToLower = tempstring.ToLower Then
                    exists = True
                    Exit For
                End If
            Next
            If exists = True Then
                MsgBox("        Folder Already Exists")
            Else
                Dim f As New IO.DirectoryInfo(tempstring)
                If f.Exists Then
                    ListBox6.Items.Add(tempstring)
                    TextBox40.Text = ""
                Else
                    Dim tempint As Integer = MessageBox.Show("This folder does not appear to exist" & vbCrLf & "Are you sure you wish to add it", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                    If tempint = DialogResult.Yes Then
                        ListBox6.Items.Add(tempstring)
                        TextBox40.Text = ""
                    End If
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button67_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button67.Click
        Try
            If TextBox39.Text = Nothing Then
                Exit Sub
            End If
            If TextBox39.Text = "" Then
                Exit Sub
            End If
            Dim tempstring As String = TextBox39.Text
            Do While tempstring.LastIndexOf("\") = tempstring.Length - 1
                tempstring = tempstring.Substring(0, tempstring.Length - 1)
            Loop
            Do While tempstring.LastIndexOf("/") = tempstring.Length - 1
                tempstring = tempstring.Substring(0, tempstring.Length - 1)
            Loop
            Dim exists As Boolean = False
            For Each item In ListBox5.Items
                If item.ToString.ToLower = tempstring.ToLower Then
                    exists = True
                    Exit For
                End If
            Next
            If exists = True Then
                MsgBox("        Folder Already Exists")
            Else
                Dim f As New IO.DirectoryInfo(tempstring)
                If f.Exists Then
                    ListBox5.Items.Add(tempstring)
                    TextBox39.Text = ""
                Else
                    Dim tempint As Integer = MessageBox.Show("This folder does not appear to exist" & vbCrLf & "Are you sure you wish to add it", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                    If tempint = DialogResult.Yes Then
                        ListBox5.Items.Add(tempstring)
                        TextBox39.Text = ""
                    End If
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub util_GeneralPreferencesSetup()
        prefsload = True
        generalprefschanged = False
        Dim tcc As TypeConverter = TypeDescriptor.GetConverter(GetType(System.Drawing.Font))
        Dim newFont As System.Drawing.Font
        If Preferences.font <> Nothing Then
            If Preferences.font <> "" Then
                Try
                    newFont = CType(tcc.ConvertFromString(Preferences.font), System.Drawing.Font)
                Catch ex As Exception
                    newFont = CType(tcc.ConvertFromString("Times New Roman, 9pt"), System.Drawing.Font)
                    Preferences.font = "Times New Roman, 9pt"
                End Try
            Else
                newFont = CType(tcc.ConvertFromString("Times New Roman, 9pt"), System.Drawing.Font)
                Preferences.font = "Times New Roman, 9pt"
            End If
        Else
            newFont = CType(tcc.ConvertFromString("Times New Roman, 9pt"), System.Drawing.Font)
            Preferences.font = "Times New Roman, 9pt"
        End If
        Label130.Font = newFont
        Label130.Text = Preferences.font
        If Preferences.ignorearticle = True Then
            CheckBox41.CheckState = CheckState.Checked
        Else
            CheckBox41.CheckState = CheckState.Unchecked
        End If
        If Preferences.intruntime = True Then
            CheckBox38.CheckState = CheckState.Checked
        Else
            CheckBox38.CheckState = CheckState.Unchecked
        End If
        If Preferences.actorseasy = True Then
            CheckBox33.CheckState = CheckState.Checked
        Else
            CheckBox33.CheckState = CheckState.Unchecked
        End If

        If Preferences.videomode = 1 Then
            RadioButton38.Checked = True
        ElseIf Preferences.videomode = 2 Then
            RadioButton37.Checked = True
        ElseIf Preferences.videomode = 4 Then
            RadioButton36.Checked = True
        End If
        If Preferences.videomode = 4 Then
            Label121.Text = Preferences.selectedvideoplayer
            Label121.Visible = True
            btn_custommediaplayer.Enabled = True
        Else
            btn_custommediaplayer.Enabled = False
            Label121.Visible = False
        End If
        txtbx_minrarsize.Text = Preferences.rarsize

        If Preferences.externalbrowser = True Then
            CheckBox12.Checked = True
        Else
            CheckBox12.Checked = False
        End If

        If Preferences.startupCache = True Then
            chkbx_disablecache.Checked = False
        Else
            chkbx_disablecache.Checked = True
        End If
        ListBox13.Items.Clear()
        For Each prof In profileStruct.profilelist
            ListBox13.Items.Add(prof.profilename)
        Next
        Label112.Text = "Current Default Profile Is :- " & profileStruct.defaultprofile
        Label108.Text = "Current Startup Profile Is :- " & profileStruct.startupprofile
        prefsload = False

        ListBox16.Items.Clear()
        ListBox17.Items.Clear()

        For Each com In Preferences.commandlist
            ListBox16.Items.Add(com.title)
            ListBox17.Items.Add(com.command)
        Next

    End Sub

    Private Sub RadioButton38_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton38.CheckedChanged
        Try
            If RadioButton38.Checked = True Then
                Preferences.videomode = 1
            End If
            If prefsload = False Then generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton37_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton37.CheckedChanged
        Try
            If RadioButton37.Checked = True Then
                Preferences.videomode = 2
            End If
            If prefsload = False Then generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton36_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton36.CheckedChanged
        Try
            If RadioButton36.Checked = True Then
                Preferences.videomode = 4
                btn_custommediaplayer.Enabled = True
                Label121.Visible = True
                If Preferences.selectedvideoplayer <> Nothing Then
                    If Preferences.selectedvideoplayer <> "" Then
                        Label121.Text = Preferences.selectedvideoplayer
                    Else
                        Label121.Text = ""
                    End If
                Else
                    Label121.Text = ""
                End If
            Else
                Label121.Visible = False
                btn_custommediaplayer.Enabled = False
            End If
            If prefsload = False Then generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btn_custommediaplayer_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_custommediaplayer.Click
        Try
            Dim filebrowser As New OpenFileDialog
            Dim mstrProgramFilesPath As String = System.Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles)
            filebrowser.InitialDirectory = mstrProgramFilesPath
            filebrowser.Filter = "Executable Files|*.exe"
            filebrowser.Title = "Find Executable Of Preferred Media Player"
            If filebrowser.ShowDialog = Windows.Forms.DialogResult.OK Then
                Preferences.selectedvideoplayer = filebrowser.FileName
                Label121.Visible = True
                Label121.Text = Preferences.selectedvideoplayer
            End If
            If prefsload = False Then generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub txtbx_minrarsize_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtbx_minrarsize.KeyPress
        Try
            If Char.IsNumber(e.KeyChar) = False And e.KeyChar <> Chr(8) Then
                If txtbx_minrarsize.Text <> "" Then
                    e.Handled = True
                Else
                    MsgBox("Please Enter at least 0")
                    txtbx_minrarsize.Text = "8"
                End If
            End If
            If txtbx_minrarsize.Text = "" Then
                MsgBox("Please enter a numerical Value that is 1 or more")
                txtbx_minrarsize.Text = "8"
                Exit Sub
            End If
            If Not IsNumeric(txtbx_minrarsize.Text) Then
                MsgBox("Please enter a numerical Value that is 1 or more")
                txtbx_minrarsize.Text = "8"
                Exit Sub
            End If
            If prefsload = False Then generalprefschanged = True
            Preferences.rarsize = Convert.ToInt32(txtbx_minrarsize.Text)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub txtbx_minrarsize_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtbx_minrarsize.TextChanged
        If IsNumeric(txtbx_minrarsize.Text) Then
            Preferences.rarsize = Convert.ToInt32(txtbx_minrarsize.Text)
        Else
            Preferences.rarsize = 8
            txtbx_minrarsize.Text = "8"
        End If
    End Sub

    Private Sub Button81_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button81.Click
        Try
            Preferences.SaveConfig()
            ToolsToolStripMenuItem.DropDownItems.Clear()
            For Each com In Preferences.commandlist
                ToolsToolStripMenuItem.DropDownItems.Add(com.title)
            Next
            MsgBox("Changes Saved!" & vbCrLf & vbCrLf & "Please restart the program" & vbCrLf & "for the changes to take effect")
            generalprefschanged = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub chkbx_disablecache_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkbx_disablecache.CheckedChanged
        Try
            If chkbx_disablecache.Checked = True Then
                Preferences.startupCache = False
            Else
                Preferences.startupCache = True
            End If
            If prefsload = False Then generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox12_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox12.CheckedChanged
        Try
            If CheckBox12.Checked = True Then
                Preferences.externalbrowser = True
            Else
                Preferences.externalbrowser = False
            End If
            If prefsload = False Then generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub


    Private Sub TabPage18_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles TabPage18.Leave
        Try
            If generalprefschanged = True Then
                Dim tempint As Integer = MessageBox.Show("You appear to have made changes to your preferences," & vbCrLf & "Do wish to save the changes", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                If tempint = DialogResult.Yes Then
                    Preferences.SaveConfig()

                    MsgBox("Changes Saved")
                Else
                    Me.util_ConfigLoad()
                End If
                generalprefschanged = False
            End If
            If Preferences.font <> Nothing Then
                If Preferences.font <> "" Then
                    Dim tc As TypeConverter = TypeDescriptor.GetConverter(GetType(System.Drawing.Font))
                    Dim newFont As System.Drawing.Font = CType(tc.ConvertFromString(Preferences.font), System.Drawing.Font)
                    Call util_FontSetup()
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_PreferencesSetup()
        displayRuntimeScraper = True
        If Preferences.enablehdtags = True Then
            CheckBox19.CheckState = CheckState.Checked
            PanelDisplayRuntime.Enabled = True
            If Preferences.movieRuntimeDisplay = "file" Then
                rbRuntimeFile.Checked = True
            Else
                rbRuntimeScraper.Checked = True
            End If
        Else
            CheckBox19.CheckState = CheckState.Unchecked
            PanelDisplayRuntime.Enabled = False
            rbRuntimeScraper.Checked = True
        End If
        Call mov_SwitchRuntime()

        If Preferences.resizefanart = 1 Then
            RadioButton35.Checked = True
        ElseIf Preferences.resizefanart = 2 Then
            RadioButton34.Checked = True
        ElseIf Preferences.resizefanart = 3 Then
            RadioButton33.Checked = True
        End If


        ListBox9.SelectedItem = Preferences.imdbmirror

        If Preferences.scrapemovieposters = True Then
            CheckBox18.CheckState = CheckState.Checked
        Else
            CheckBox18.CheckState = CheckState.Unchecked
        End If

        If Preferences.savefanart = True Then
            CheckBox13.CheckState = CheckState.Checked
        Else
            CheckBox13.CheckState = CheckState.Unchecked
        End If

        If Preferences.usefoldernames = True Then
            chkbx_usefoldernames.CheckState = CheckState.Checked
        Else
            chkbx_usefoldernames.CheckState = CheckState.Unchecked
        End If

        If Preferences.createfolderjpg = True Then
            chkbx_createfolderjpg.CheckState = CheckState.Checked
        Else
            chkbx_createfolderjpg.CheckState = CheckState.Unchecked
        End If

        If Preferences.gettrailer = True Then
            CheckBox11.CheckState = CheckState.Checked
        Else
            CheckBox11.CheckState = CheckState.Unchecked
        End If

        Select Case Preferences.maxactors
            Case 9999
                ComboBox7.SelectedItem = "All Available"
            Case 0
                ComboBox7.SelectedItem = "None"
            Case 5
                ComboBox7.SelectedItem = "5"
            Case 10
                ComboBox7.SelectedItem = "10"
            Case 15
                ComboBox7.SelectedItem = "15"
            Case 20
                ComboBox7.SelectedItem = "20"
            Case 25
                ComboBox7.SelectedItem = "25"
            Case 30
                ComboBox7.SelectedItem = "30"
            Case 40
                ComboBox7.SelectedItem = "40"
            Case 50
                ComboBox7.SelectedItem = "50"
            Case 70
                ComboBox7.SelectedItem = "70"
            Case 90
                ComboBox7.SelectedItem = "90"
            Case 110
                ComboBox7.SelectedItem = "110"
            Case 125
                ComboBox7.SelectedItem = "125"
            Case 150
                ComboBox7.SelectedItem = "150"
            Case 175
                ComboBox7.SelectedItem = "175"
            Case 200
                ComboBox7.SelectedItem = "200"
            Case 250
                ComboBox7.SelectedItem = "250"
        End Select

        Select Case Preferences.maxmoviegenre
            Case 99
                ComboBox6.SelectedItem = "All Available"
            Case 0
                ComboBox6.SelectedItem = "None"
            Case 1
                ComboBox6.SelectedItem = "1"
            Case 2
                ComboBox6.SelectedItem = "2"
            Case 3
                ComboBox6.SelectedItem = "3"
            Case 4
                ComboBox6.SelectedItem = "4"
            Case 5
                ComboBox6.SelectedItem = "5"
            Case 6
                ComboBox6.SelectedItem = "6"
            Case 7
                ComboBox6.SelectedItem = "7"
            Case 8
                ComboBox6.SelectedItem = "8"
            Case 9
                ComboBox6.SelectedItem = "9"
            Case 10
                ComboBox6.SelectedItem = "10"
        End Select

        For f = 0 To 3
            ListBox10.Items.Add(Preferences.moviethumbpriority(f))
        Next
        For f = 0 To 33
            ListBox11.Items.Add(Preferences.certificatepriority(f))
        Next
        If Preferences.basicsavemode = True Then
            chkbx_basicsave.CheckState = CheckState.Checked
        Else
            chkbx_basicsave.CheckState = CheckState.Unchecked
        End If
        localactorpath.Text = Preferences.actorsavepath
        xbmcactorpath.Text = Preferences.actornetworkpath
        If Preferences.actorsave = True Then
            saveactorchkbx.CheckState = CheckState.Checked
            localactorpath.Enabled = True
            xbmcactorpath.Enabled = True
            Button77.Enabled = True
        Else
            saveactorchkbx.CheckState = CheckState.Unchecked
            localactorpath.Enabled = False
            xbmcactorpath.Enabled = False
            Button77.Enabled = False
        End If

        If Preferences.nfoposterscraper = 0 Then
            IMPA_chk.CheckState = CheckState.Unchecked
            tmdb_chk.CheckState = CheckState.Unchecked
            mpdb_chk.CheckState = CheckState.Unchecked
            imdb_chk.CheckState = CheckState.Unchecked
        ElseIf Preferences.nfoposterscraper = 1 Then
            IMPA_chk.CheckState = CheckState.Checked
            tmdb_chk.CheckState = CheckState.Unchecked
            mpdb_chk.CheckState = CheckState.Unchecked
            imdb_chk.CheckState = CheckState.Unchecked
        ElseIf Preferences.nfoposterscraper = 2 Then
            IMPA_chk.CheckState = CheckState.Unchecked
            tmdb_chk.CheckState = CheckState.Checked
            mpdb_chk.CheckState = CheckState.Unchecked
            imdb_chk.CheckState = CheckState.Unchecked
        ElseIf Preferences.nfoposterscraper = 3 Then
            IMPA_chk.CheckState = CheckState.Checked
            tmdb_chk.CheckState = CheckState.Checked
            mpdb_chk.CheckState = CheckState.Unchecked
            imdb_chk.CheckState = CheckState.Unchecked
        ElseIf Preferences.nfoposterscraper = 4 Then
            IMPA_chk.CheckState = CheckState.Unchecked
            tmdb_chk.CheckState = CheckState.Unchecked
            mpdb_chk.CheckState = CheckState.Checked
            imdb_chk.CheckState = CheckState.Unchecked
        ElseIf Preferences.nfoposterscraper = 5 Then
            IMPA_chk.CheckState = CheckState.Checked
            tmdb_chk.CheckState = CheckState.Unchecked
            mpdb_chk.CheckState = CheckState.Checked
            imdb_chk.CheckState = CheckState.Unchecked
        ElseIf Preferences.nfoposterscraper = 6 Then
            IMPA_chk.CheckState = CheckState.Unchecked
            tmdb_chk.CheckState = CheckState.Checked
            mpdb_chk.CheckState = CheckState.Checked
            imdb_chk.CheckState = CheckState.Unchecked
        ElseIf Preferences.nfoposterscraper = 7 Then
            IMPA_chk.CheckState = CheckState.Checked
            tmdb_chk.CheckState = CheckState.Checked
            mpdb_chk.CheckState = CheckState.Checked
            imdb_chk.CheckState = CheckState.Unchecked
        ElseIf Preferences.nfoposterscraper = 8 Then
            IMPA_chk.CheckState = CheckState.Unchecked
            tmdb_chk.CheckState = CheckState.Unchecked
            mpdb_chk.CheckState = CheckState.Unchecked
            imdb_chk.CheckState = CheckState.Checked
        ElseIf Preferences.nfoposterscraper = 9 Then
            IMPA_chk.CheckState = CheckState.Checked
            tmdb_chk.CheckState = CheckState.Unchecked
            mpdb_chk.CheckState = CheckState.Unchecked
            imdb_chk.CheckState = CheckState.Checked
        ElseIf Preferences.nfoposterscraper = 10 Then
            IMPA_chk.CheckState = CheckState.Unchecked
            tmdb_chk.CheckState = CheckState.Checked
            mpdb_chk.CheckState = CheckState.Unchecked
            imdb_chk.CheckState = CheckState.Checked
        ElseIf Preferences.nfoposterscraper = 11 Then
            IMPA_chk.CheckState = CheckState.Checked
            tmdb_chk.CheckState = CheckState.Checked
            mpdb_chk.CheckState = CheckState.Unchecked
            imdb_chk.CheckState = CheckState.Checked
        ElseIf Preferences.nfoposterscraper = 12 Then
            IMPA_chk.CheckState = CheckState.Unchecked
            tmdb_chk.CheckState = CheckState.Unchecked
            mpdb_chk.CheckState = CheckState.Checked
            imdb_chk.CheckState = CheckState.Checked
        ElseIf Preferences.nfoposterscraper = 13 Then
            IMPA_chk.CheckState = CheckState.Checked
            tmdb_chk.CheckState = CheckState.Unchecked
            mpdb_chk.CheckState = CheckState.Checked
            imdb_chk.CheckState = CheckState.Checked
        ElseIf Preferences.nfoposterscraper = 14 Then
            IMPA_chk.CheckState = CheckState.Unchecked
            tmdb_chk.CheckState = CheckState.Checked
            mpdb_chk.CheckState = CheckState.Checked
            imdb_chk.CheckState = CheckState.Checked
        ElseIf Preferences.nfoposterscraper = 15 Then
            IMPA_chk.CheckState = CheckState.Checked
            tmdb_chk.CheckState = CheckState.Checked
            mpdb_chk.CheckState = CheckState.Checked
            imdb_chk.CheckState = CheckState.Checked
        End If

        If Preferences.disablelogfiles = True Then
            CheckBox16.CheckState = CheckState.Unchecked
        Else
            CheckBox16.CheckState = CheckState.Checked
        End If
        If Preferences.movies_useXBMC_Scraper = True Then
            CheckBox_Use_XBMC_Scraper.CheckState = CheckState.Checked
        Else
            CheckBox_Use_XBMC_Scraper.CheckState = CheckState.Unchecked
            GroupBox_MovieIMDBMirror.Enabled = True
            GroupBox_MovieIMDBMirror.Visible = True
            GroupBox_MovieIMDBMirror.BringToFront()
        End If

        generalprefschanged = False
    End Sub

    Private Sub CheckBox16_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox16.CheckedChanged
        Try
            If CheckBox16.CheckState = CheckState.Checked Then
                Preferences.disablelogfiles = False
            Else
                Preferences.disablelogfiles = True
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button73_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button73.Click
        Try
            Try
                Dim mSelectedIndex, mOtherIndex As Integer
                If Me.ListBox10.SelectedIndex <> 0 Then
                    mSelectedIndex = Me.ListBox10.SelectedIndex
                    mOtherIndex = mSelectedIndex - 1
                    ListBox10.Items.Insert(mSelectedIndex + 1, ListBox10.Items(mOtherIndex))
                    ListBox10.Items.RemoveAt(mOtherIndex)
                End If
                For f = 0 To 3
                    Preferences.moviethumbpriority(f) = ListBox10.Items(f)
                Next
                generalprefschanged = True
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button61_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button61.Click
        Try
            Try
                Dim mSelectedIndex, mOtherIndex As Integer
                If Me.ListBox10.SelectedIndex <> Me.ListBox3.Items.Count - 1 Then
                    mSelectedIndex = Me.ListBox10.SelectedIndex
                    mOtherIndex = mSelectedIndex + 1
                    ListBox10.Items.Insert(mSelectedIndex, ListBox10.Items(mOtherIndex))
                    ListBox10.Items.RemoveAt(mOtherIndex + 1)
                End If
                For f = 0 To 3
                    Preferences.moviethumbpriority(f) = ListBox10.Items(f)
                Next
                generalprefschanged = True
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button75_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button75.Click
        Try
            Try
                Dim mSelectedIndex, mOtherIndex As Integer
                If Me.ListBox11.SelectedIndex <> 0 Then
                    mSelectedIndex = Me.ListBox11.SelectedIndex
                    mOtherIndex = mSelectedIndex - 1
                    ListBox11.Items.Insert(mSelectedIndex + 1, ListBox11.Items(mOtherIndex))
                    ListBox11.Items.RemoveAt(mOtherIndex)
                End If
                For f = 0 To 33
                    Preferences.certificatepriority(f) = ListBox11.Items(f)
                Next
                generalprefschanged = True
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button74_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button74.Click
        Try
            Try
                Dim mSelectedIndex, mOtherIndex As Integer
                If Me.ListBox11.SelectedIndex <> Me.ListBox11.Items.Count - 1 Then
                    mSelectedIndex = Me.ListBox11.SelectedIndex
                    mOtherIndex = mSelectedIndex + 1
                    ListBox11.Items.Insert(mSelectedIndex, ListBox11.Items(mOtherIndex))
                    ListBox11.Items.RemoveAt(mOtherIndex + 1)
                End If
                For f = 0 To 33
                    Preferences.certificatepriority(f) = ListBox11.Items(f)
                Next
                generalprefschanged = True
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub saveactorchkbx_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles saveactorchkbx.CheckedChanged
        Try
            If saveactorchkbx.CheckState = CheckState.Checked Then
                Preferences.actorsave = True
                localactorpath.Text = Preferences.actorsavepath
                xbmcactorpath.Text = Preferences.actornetworkpath
                localactorpath.Enabled = True
                xbmcactorpath.Enabled = True
                Button77.Enabled = True
                generalprefschanged = True
            Else
                Preferences.actorsave = False
                generalprefschanged = True
                localactorpath.Text = ""
                xbmcactorpath.Text = ""
                localactorpath.Enabled = False
                xbmcactorpath.Enabled = False
                Button77.Enabled = False
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button82_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button82.Click
        Try
            Preferences.SaveConfig()
            MsgBox("Changes Saved!" & vbCrLf & vbCrLf & "Please restart the program" & vbCrLf & "for the changes to take effect")
            generalprefschanged = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton35_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton35.CheckedChanged
        Try
            If RadioButton35.Checked = True Then
                Preferences.resizefanart = 1
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton33_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton33.CheckedChanged
        Try
            If RadioButton33.Checked = True Then
                Preferences.resizefanart = 3
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton34_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton34.CheckedChanged
        Try
            If RadioButton34.Checked = True Then
                Preferences.resizefanart = 2
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox18_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox18.CheckedChanged
        Try
            If CheckBox18.CheckState = CheckState.Checked Then
                Preferences.scrapemovieposters = True
            Else
                Preferences.scrapemovieposters = False
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox13_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox13.CheckedChanged
        Try
            If CheckBox13.CheckState = CheckState.Checked Then
                Preferences.savefanart = True
            Else
                Preferences.savefanart = False
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox11_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox11.CheckedChanged
        Try
            If CheckBox11.CheckState = CheckState.Checked Then
                Preferences.gettrailer = True
            Else
                Preferences.gettrailer = False
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_Use_XBMC_Scraper_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_Use_XBMC_Scraper.CheckedChanged
        Try
            If CheckBox_Use_XBMC_Scraper.CheckState = CheckState.Checked Then
                Preferences.movies_useXBMC_Scraper = True
                GroupBox_MovieIMDBMirror.Enabled = False
                GroupBox_MovieIMDBMirror.Visible = False
                GroupBox_IMDB_Scraper_Preferences.Enabled = True
                GroupBox_IMDB_Scraper_Preferences.Visible = True
                GroupBox_IMDB_Scraper_Preferences.BringToFront()
                GroupBox11.Visible = False
                ComboBox7.Visible = False
                ComboBox6.Visible = False
                Label98.Visible = False
                Label92.Visible = False

                Label93.Enabled = False
                Label99.Enabled = False
                ListBox10.Enabled = False
                Button73.Enabled = False
                Button61.Enabled = False



                RadioButton51.Enabled = True
                RadioButton52.Enabled = True
                If Preferences.XBMC_Scraper = "imdb" Then
                    RadioButton51.Checked = True
                    GroupBox_IMDB_Scraper_Preferences.Enabled = True
                    GroupBox_IMDB_Scraper_Preferences.Visible = True
                    GroupBox_IMDB_Scraper_Preferences.BringToFront()
                    GroupBox_TMDB_Scraper_Preferences.Enabled = False
                    GroupBox_TMDB_Scraper_Preferences.Visible = False
                    GroupBox_TMDB_Scraper_Preferences.SendToBack()
                ElseIf Preferences.XBMC_Scraper = "tmdb" Then
                    RadioButton52.Checked = True
                    GroupBox_IMDB_Scraper_Preferences.Enabled = False
                    GroupBox_IMDB_Scraper_Preferences.Visible = False
                    GroupBox_IMDB_Scraper_Preferences.SendToBack()
                    GroupBox_TMDB_Scraper_Preferences.Enabled = True
                    GroupBox_TMDB_Scraper_Preferences.Visible = True
                    GroupBox_TMDB_Scraper_Preferences.BringToFront()
                End If
            Else
                Preferences.movies_useXBMC_Scraper = False
                GroupBox_MovieIMDBMirror.Enabled = True
                GroupBox_MovieIMDBMirror.Visible = True
                GroupBox_MovieIMDBMirror.BringToFront()



                GroupBox11.Visible = True
                ComboBox7.Visible = True
                ComboBox6.Visible = True
                Label98.Visible = True
                Label92.Visible = True
                Label93.Enabled = True
                Label99.Enabled = True
                ListBox10.Enabled = True
                Button73.Enabled = True
                Button61.Enabled = True
                RadioButton51.Enabled = False
                RadioButton52.Enabled = False
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub RadioButton51_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton51.CheckedChanged
        Try
            If RadioButton51.Checked = True Then
                Preferences.XBMC_Scraper = "imdb"
                Read_XBMC_IMDB_Scraper_Config()
                GroupBox_IMDB_Scraper_Preferences.Enabled = True
                GroupBox_IMDB_Scraper_Preferences.Visible = True
                GroupBox_IMDB_Scraper_Preferences.BringToFront()
                GroupBox_TMDB_Scraper_Preferences.Enabled = False
                GroupBox_TMDB_Scraper_Preferences.Visible = False
                GroupBox_TMDB_Scraper_Preferences.SendToBack()
            Else
                GroupBox_IMDB_Scraper_Preferences.Enabled = False
                GroupBox_IMDB_Scraper_Preferences.Visible = False
                GroupBox_IMDB_Scraper_Preferences.SendToBack()
                GroupBox_TMDB_Scraper_Preferences.Enabled = True
                GroupBox_TMDB_Scraper_Preferences.Visible = True
                GroupBox_TMDB_Scraper_Preferences.BringToFront()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton52_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton52.CheckedChanged
        Try
            If RadioButton52.Checked = True Then
                Preferences.XBMC_Scraper = "tmdb"
                Read_XBMC_TMDB_Scraper_Config()
                GroupBox_IMDB_Scraper_Preferences.Enabled = False
                GroupBox_IMDB_Scraper_Preferences.Visible = False
                GroupBox_IMDB_Scraper_Preferences.SendToBack()
                GroupBox_TMDB_Scraper_Preferences.Enabled = True
                GroupBox_TMDB_Scraper_Preferences.Visible = True
                GroupBox_TMDB_Scraper_Preferences.BringToFront()
            Else
                GroupBox_IMDB_Scraper_Preferences.Enabled = True
                GroupBox_IMDB_Scraper_Preferences.Visible = True
                GroupBox_IMDB_Scraper_Preferences.BringToFront()
                GroupBox_TMDB_Scraper_Preferences.Enabled = False
                GroupBox_TMDB_Scraper_Preferences.Visible = False
                GroupBox_TMDB_Scraper_Preferences.SendToBack()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub chkbx_usefoldernames_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkbx_usefoldernames.CheckedChanged
        Try
            If chkbx_usefoldernames.CheckState = CheckState.Checked Then
                Preferences.usefoldernames = True
            Else
                Preferences.usefoldernames = False
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub chkbx_createfolderjpg_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkbx_createfolderjpg.CheckedChanged
        Try
            If chkbx_createfolderjpg.CheckState = CheckState.Checked Then
                Preferences.createfolderjpg = True
            Else
                Preferences.createfolderjpg = False
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ListBox9_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ListBox9.SelectedIndexChanged
        Try
            Preferences.imdbmirror = ListBox9.SelectedItem
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ComboBox7_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox7.SelectedIndexChanged
        Try
            If IsNumeric(ComboBox7.SelectedItem) Then
                Preferences.maxactors = Convert.ToInt32(ComboBox7.SelectedItem)
            ElseIf ComboBox7.SelectedItem.ToString.ToLower = "none" Then
                Preferences.maxactors = 0
            Else
                Preferences.maxactors = 9999
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub ComboBox6_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox6.SelectedIndexChanged
        Try
            If IsNumeric(ComboBox6.SelectedItem) Then
                Preferences.maxmoviegenre = Convert.ToInt32(ComboBox6.SelectedItem)
            ElseIf ComboBox6.SelectedItem.ToString.ToLower = "none" Then
                Preferences.maxmoviegenre = 0
            Else
                Preferences.maxmoviegenre = 9999
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub IMPA_chk_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles IMPA_chk.CheckedChanged
        Try
            Call mov_ThumbNailUrlsSet()
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mpdb_chk_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mpdb_chk.CheckedChanged
        Try
            Call mov_ThumbNailUrlsSet()
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub tmdb_chk_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tmdb_chk.CheckedChanged
        Try
            Call mov_ThumbNailUrlsSet()
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub imdb_chk_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles imdb_chk.CheckedChanged
        Try
            Call mov_ThumbNailUrlsSet()
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_ThumbNailUrlsSet()
        If IMPA_chk.CheckState = CheckState.Unchecked And tmdb_chk.CheckState = CheckState.Unchecked And mpdb_chk.CheckState = CheckState.Unchecked And imdb_chk.CheckState = CheckState.Unchecked Then
            Preferences.nfoposterscraper = 0
        ElseIf IMPA_chk.CheckState = CheckState.Checked And tmdb_chk.CheckState = CheckState.Unchecked And mpdb_chk.CheckState = CheckState.Unchecked And imdb_chk.CheckState = CheckState.Unchecked Then
            Preferences.nfoposterscraper = 1
        ElseIf IMPA_chk.CheckState = CheckState.Unchecked And tmdb_chk.CheckState = CheckState.Checked And mpdb_chk.CheckState = CheckState.Unchecked And imdb_chk.CheckState = CheckState.Unchecked Then
            Preferences.nfoposterscraper = 2
        ElseIf IMPA_chk.CheckState = CheckState.Checked And tmdb_chk.CheckState = CheckState.Checked And mpdb_chk.CheckState = CheckState.Unchecked And imdb_chk.CheckState = CheckState.Unchecked Then
            Preferences.nfoposterscraper = 3
        ElseIf IMPA_chk.CheckState = CheckState.Unchecked And tmdb_chk.CheckState = CheckState.Unchecked And mpdb_chk.CheckState = CheckState.Checked And imdb_chk.CheckState = CheckState.Unchecked Then
            Preferences.nfoposterscraper = 4
        ElseIf IMPA_chk.CheckState = CheckState.Checked And tmdb_chk.CheckState = CheckState.Unchecked And mpdb_chk.CheckState = CheckState.Checked And imdb_chk.CheckState = CheckState.Unchecked Then
            Preferences.nfoposterscraper = 5
        ElseIf IMPA_chk.CheckState = CheckState.Unchecked And tmdb_chk.CheckState = CheckState.Checked And mpdb_chk.CheckState = CheckState.Checked And imdb_chk.CheckState = CheckState.Unchecked Then
            Preferences.nfoposterscraper = 6
        ElseIf IMPA_chk.CheckState = CheckState.Checked And tmdb_chk.CheckState = CheckState.Checked And mpdb_chk.CheckState = CheckState.Checked And imdb_chk.CheckState = CheckState.Unchecked Then
            Preferences.nfoposterscraper = 7
        ElseIf IMPA_chk.CheckState = CheckState.Unchecked And tmdb_chk.CheckState = CheckState.Unchecked And mpdb_chk.CheckState = CheckState.Unchecked And imdb_chk.CheckState = CheckState.Checked Then
            Preferences.nfoposterscraper = 8
        ElseIf IMPA_chk.CheckState = CheckState.Checked And tmdb_chk.CheckState = CheckState.Unchecked And mpdb_chk.CheckState = CheckState.Unchecked And imdb_chk.CheckState = CheckState.Checked Then
            Preferences.nfoposterscraper = 9
        ElseIf IMPA_chk.CheckState = CheckState.Unchecked And tmdb_chk.CheckState = CheckState.Checked And mpdb_chk.CheckState = CheckState.Unchecked And imdb_chk.CheckState = CheckState.Checked Then
            Preferences.nfoposterscraper = 10
        ElseIf IMPA_chk.CheckState = CheckState.Checked And tmdb_chk.CheckState = CheckState.Checked And mpdb_chk.CheckState = CheckState.Unchecked And imdb_chk.CheckState = CheckState.Checked Then
            Preferences.nfoposterscraper = 11
        ElseIf IMPA_chk.CheckState = CheckState.Unchecked And tmdb_chk.CheckState = CheckState.Unchecked And mpdb_chk.CheckState = CheckState.Checked And imdb_chk.CheckState = CheckState.Checked Then
            Preferences.nfoposterscraper = 12
        ElseIf IMPA_chk.CheckState = CheckState.Checked And tmdb_chk.CheckState = CheckState.Unchecked And mpdb_chk.CheckState = CheckState.Checked And imdb_chk.CheckState = CheckState.Checked Then
            Preferences.nfoposterscraper = 13
        ElseIf IMPA_chk.CheckState = CheckState.Unchecked And tmdb_chk.CheckState = CheckState.Checked And mpdb_chk.CheckState = CheckState.Checked And imdb_chk.CheckState = CheckState.Checked Then
            Preferences.nfoposterscraper = 14
        ElseIf IMPA_chk.CheckState = CheckState.Checked And tmdb_chk.CheckState = CheckState.Checked And mpdb_chk.CheckState = CheckState.Checked And imdb_chk.CheckState = CheckState.Checked Then
            Preferences.nfoposterscraper = 15
        End If
    End Sub

    Private Sub Button77_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button77.Click
        Try
            Dim theFolderBrowser As New FolderBrowserDialog
            Dim thefoldernames As String
            theFolderBrowser.Description = "Please Select Folder to Save Actor Thumbnails)"
            theFolderBrowser.ShowNewFolderButton = True
            theFolderBrowser.RootFolder = System.Environment.SpecialFolder.Desktop
            theFolderBrowser.SelectedPath = Preferences.lastpath
            If theFolderBrowser.ShowDialog = Windows.Forms.DialogResult.OK Then
                thefoldernames = (theFolderBrowser.SelectedPath)
                localactorpath.Text = thefoldernames
                Preferences.lastpath = thefoldernames
                Preferences.actorsavepath = thefoldernames
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub localactorpath_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles localactorpath.TextChanged
        Try
            Preferences.actorsavepath = localactorpath.Text
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub xbmcactorpath_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles xbmcactorpath.TextChanged
        Try
            Preferences.actornetworkpath = xbmcactorpath.Text
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub chkbx_basicsave_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkbx_basicsave.CheckedChanged
        Try
            If chkbx_basicsave.CheckState = CheckState.Checked Then
                Preferences.basicsavemode = True
            Else
                Preferences.basicsavemode = False
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TabPage26_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles TabPage26.Leave
        Try
            If generalprefschanged = True Then
                Dim tempint As Integer = MessageBox.Show("You appear to have made changes to your preferences," & vbCrLf & "Do wish to save the changes", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                If tempint = DialogResult.Yes Then
                    Preferences.SaveConfig()
                    MsgBox("Changes Saved")
                Else
                    Me.util_ConfigLoad()
                End If
                generalprefschanged = False
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button91_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button91.Click
        Try
            ListBox12.Items.Clear()
            languageList.Clear()
            util_LanguageListLoad()

            Try
                ListBox12.SelectedItem = Preferences.TvdbLanguage
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ListBox12_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ListBox12.SelectedIndexChanged
        Try
            For Each lan In languageList
                If lan.Language.Value = ListBox12.SelectedItem Then
                    Preferences.TvdbLanguage = lan.Language.Value
                    Preferences.TvdbLanguageCode = lan.Abbreviation.Value
                    Exit For
                End If
            Next
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox14_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox14.CheckedChanged
        Try
            If CheckBox14.CheckState = CheckState.Checked Then
                Preferences.tvposter = True
            Else
                Preferences.tvposter = False
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox10_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox10.CheckedChanged
        Try
            If CheckBox10.CheckState = CheckState.Checked Then
                Preferences.tvfanart = True
            Else
                Preferences.tvfanart = False
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox15_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox15.CheckedChanged
        Try
            If CheckBox15.CheckState = CheckState.Checked Then
                Preferences.downloadtvseasonthumbs = True
            Else
                Preferences.downloadtvseasonthumbs = False
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub posterbtn_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles posterbtn.CheckedChanged
        Try
            If posterbtn.Checked = True Then
                Preferences.postertype = "poster"
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub bannerbtn_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bannerbtn.CheckedChanged
        Try
            If bannerbtn.Checked = True Then
                Preferences.postertype = "banner"
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton41_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton41.CheckedChanged
        Try
            'none
            If RadioButton41.Checked = True Then
                Preferences.seasonall = "none"
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton40_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton40.CheckedChanged
        Try
            'poster
            If RadioButton40.Checked = True Then
                Preferences.seasonall = "poster"
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton39_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton39.CheckedChanged
        Try
            'banner
            If RadioButton39.Checked = True Then
                Preferences.seasonall = "wide"
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton43_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton43.CheckedChanged
        Try
            If RadioButton43.Checked = True Then
                Preferences.sortorder = "default"
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton42_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton42.CheckedChanged
        Try
            If RadioButton42.Checked = True Then
                Preferences.sortorder = "dvd"
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ComboBox8_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox8.SelectedIndexChanged
        Try
            Preferences.TvdbActorScrape = ComboBox8.SelectedIndex.ToString
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub tv_PreferencesSetup()
        ComboBox_tv_EpisodeRename.Items.Clear()
        For Each Regex In tv_RegexRename
            ComboBox_tv_EpisodeRename.Items.Add(Regex)
        Next
        ComboBox_tv_EpisodeRename.SelectedIndex = If(Preferences.tvrename < ComboBox_tv_EpisodeRename.Items.Count, Preferences.tvrename, 0)
        If Preferences.eprenamelowercase = True Then
            CheckBox_tv_EpisodeRenameCase.CheckState = CheckState.Checked
        Else
            CheckBox_tv_EpisodeRenameCase.CheckState = CheckState.Unchecked
        End If
        If Preferences.enabletvhdtags = True Then
            CheckBox20.CheckState = CheckState.Checked
        Else
            CheckBox20.CheckState = CheckState.Unchecked
        End If
        If Preferences.autorenameepisodes = True Then
            CheckBox_tv_EpisodeRenameAuto.CheckState = CheckState.Checked
        Else
            CheckBox_tv_EpisodeRenameAuto.CheckState = CheckState.Unchecked
        End If
        If Preferences.autoepisodescreenshot = True Then
            CheckBox36.CheckState = CheckState.Checked
        Else
            CheckBox36.CheckState = CheckState.Unchecked
        End If
        If Preferences.tvshowautoquick = True Then
            CheckBox35.CheckState = CheckState.Checked
        Else
            CheckBox35.CheckState = CheckState.Unchecked
        End If

        If Preferences.copytvactorthumbs = True Then
            CheckBox34.CheckState = CheckState.Checked
        Else
            CheckBox34.CheckState = CheckState.Unchecked
        End If

        If Preferences.disabletvlogs = True Then
            CheckBox17.CheckState = CheckState.Unchecked
        Else
            CheckBox17.CheckState = CheckState.Checked
        End If

        ListBox12.Items.Clear()
        ListBox12.Items.Add(Preferences.tvdblanguage)
        If ListBox12.Items.Count <> 0 Then
            ListBox12.SelectedIndex = 0
        End If

        Select Case Preferences.seasonall
            Case "none"
                RadioButton41.Checked = True
            Case "poster"
                RadioButton40.Checked = True
            Case "wide"
                RadioButton39.Checked = True
        End Select

        If Preferences.tvposter = True Then
            CheckBox14.CheckState = CheckState.Checked
        Else
            CheckBox14.CheckState = CheckState.Unchecked
        End If

        If Preferences.tvfanart = True Then
            CheckBox10.CheckState = CheckState.Checked
        Else
            CheckBox10.CheckState = CheckState.Unchecked
        End If

        If Preferences.downloadtvseasonthumbs = True Then
            CheckBox15.CheckState = CheckState.Checked
        Else
            CheckBox15.CheckState = CheckState.Unchecked
        End If

        ComboBox8.SelectedIndex = Preferences.tvdbactorscrape

        ListBox_tv_RegexScrape.Items.Clear()
        For Each regexc In tv_RegexScraper
            ListBox_tv_RegexScrape.Items.Add(regexc)
        Next

        ListBox_tv_RegexRename.Items.Clear()
        For Each regexc In tv_RegexRename
            ListBox_tv_RegexRename.Items.Add(regexc)
        Next

        If Preferences.enabletvhdtags = True Then
            CheckBox20.CheckState = CheckState.Checked
        Else
            CheckBox20.CheckState = CheckState.Unchecked
        End If

        If Preferences.sortorder = "dvd" Then
            RadioButton42.Checked = True
        Else
            RadioButton43.Checked = True
        End If

        If Preferences.postertype = "poster" Then
            posterbtn.Checked = True
        Else
            bannerbtn.Checked = True
        End If
        If Preferences.tvshow_useXBMC_Scraper = True Then
            CheckBox_Use_XBMC_TVDB_Scraper.Checked = CheckState.Checked
        Else
            CheckBox_Use_XBMC_TVDB_Scraper.Checked = CheckState.Unchecked
        End If
        generalprefschanged = False
    End Sub

    Private Sub Button_tv_RegexScrape_Restore_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button_tv_RegexScrape_Restore.Click
        Try
            util_RegexSetDefaultScraper()
            ListBox_tv_RegexScrape.Items.Clear()
            For Each Regex In tv_RegexScraper
                ListBox_tv_RegexScrape.Items.Add(Regex)
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexRename_Restore_Click(sender As Object, e As System.EventArgs) Handles Button_tv_RegexRename_Restore.Click
        Try
            util_RegexSetDefaultRename()
            ListBox_tv_RegexRename.Items.Clear()
            For Each Regex In tv_RegexRename
                ListBox_tv_RegexRename.Items.Add(Regex)
            Next
            ComboBox_tv_EpisodeRename.Items.Clear()
            For Each Regex In tv_RegexRename
                ComboBox_tv_EpisodeRename.Items.Add(Regex)
            Next
            ComboBox_tv_EpisodeRename.SelectedIndex = Preferences.tvrename
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub CheckBox17_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox17.CheckedChanged
        Try
            If CheckBox17.CheckState = CheckState.Checked Then
                Preferences.disabletvlogs = False
            Else
                Preferences.disabletvlogs = True
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexScrape_Remove_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button_tv_RegexScrape_Remove.Click
        Try
            'remove selected
            Dim tempstring = ListBox_tv_RegexScrape.SelectedItem
            Try
                ListBox_tv_RegexScrape.Items.Remove(ListBox_tv_RegexScrape.SelectedItem)
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
            For Each regexp In tv_RegexScraper
                If regexp = tempstring Then
                    tv_RegexScraper.Remove(regexp)
                    Exit For
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Function util_RegexValidate(ByVal regexs As String)
        Try
            Dim test As Match
            test = Regex.Match("", regexs)
        Catch ex As Exception
            Return False
        End Try
        Return True
    End Function

    Private Sub Button_tv_RegexScrape_Edit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button_tv_RegexScrape_Edit.Click
        Try
            'edit
            If TextBox_tv_RegexScrape_Edit.Text = "" Then
                MsgBox("No Text")
                'TextBox46.Text = ListBox7.SelectedItem     'WTF? Listbox7 = Movie Folder?
                Exit Sub
            End If
            If Not util_RegexValidate(TextBox_tv_RegexScrape_Edit.Text) Then
                MsgBox("Invalid Regex")
                Exit Sub
            End If
            Dim tempint As Integer = ListBox_tv_RegexScrape.SelectedIndex
            ListBox_tv_RegexScrape.Items.RemoveAt(tempint)
            ListBox_tv_RegexScrape.Items.Insert(tempint, TextBox_tv_RegexScrape_Edit.Text)
            ListBox_tv_RegexScrape.SelectedIndex = tempint
            tv_RegexScraper.Clear()
            For Each regexp In ListBox_tv_RegexScrape.Items
                tv_RegexScraper.Add(regexp)
            Next
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexScrape_Add_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button_tv_RegexScrape_Add.Click
        Try
            'add textbox49
            If Not util_RegexValidate(TextBox_tv_RegexScrape_New.Text) Then
                MsgBox("Invalid Regex")
                Exit Sub
            End If
            ListBox_tv_RegexScrape.Items.Add(TextBox_tv_RegexScrape_New.Text)
            tv_RegexScraper.Add(TextBox_tv_RegexScrape_New.Text)

            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexRename_Remove_Click(sender As Object, e As System.EventArgs) Handles Button_tv_RegexRename_Remove.Click
        Try
            Dim strRegexSelected = ListBox_tv_RegexRename.SelectedItem
            Dim idxRegexSelected = ListBox_tv_RegexRename.SelectedIndex

            Try
                ListBox_tv_RegexRename.Items.RemoveAt(idxRegexSelected)
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try

            For Each regexp In tv_RegexRename
                If regexp = strRegexSelected Then
                    tv_RegexRename.Remove(regexp)
                    Exit For
                End If
            Next

            TextBox_tv_RegexRename_Edit.Clear()

            ComboBox_tv_EpisodeRename.Items.Clear()
            For Each Regex In tv_RegexRename
                ComboBox_tv_EpisodeRename.Items.Add(Regex)
            Next
            ComboBox_tv_EpisodeRename.SelectedIndex = If(Preferences.tvrename >= idxRegexSelected, Preferences.tvrename - 1, Preferences.tvrename)

            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexRename_Add_Click(sender As Object, e As System.EventArgs) Handles Button_tv_RegexRename_Add.Click
        Try
            'add
            ListBox_tv_RegexRename.Items.Add(TextBox_tv_RegexRename_New.Text)
            tv_RegexRename.Add(TextBox_tv_RegexRename_New.Text)
            TextBox_tv_RegexRename_New.Clear()
            ComboBox_tv_EpisodeRename.Items.Clear()
            For Each Regex In tv_RegexRename
                ComboBox_tv_EpisodeRename.Items.Add(Regex)
            Next
            ComboBox_tv_EpisodeRename.SelectedIndex = Preferences.tvrename

            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexRename_Edit_Click(sender As Object, e As System.EventArgs) Handles Button_tv_RegexRename_Edit.Click
        Try
            'edit
            If TextBox_tv_RegexRename_Edit.Text = "" Then
                MsgBox("No Text")
                'TextBox50.Text = ListBox7.SelectedItem
                Exit Sub
            End If
            Dim tempint As Integer = ListBox_tv_RegexRename.SelectedIndex
            ListBox_tv_RegexRename.Items.RemoveAt(tempint)
            ListBox_tv_RegexRename.Items.Insert(tempint, TextBox_tv_RegexRename_Edit.Text)
            ListBox_tv_RegexRename.SelectedIndex = tempint
            tv_RegexRename.Clear()
            For Each regexp In ListBox_tv_RegexRename.Items
                tv_RegexRename.Add(regexp)
            Next
            TextBox_tv_RegexRename_Edit.Clear()
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexPrefSave_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button_tv_RegexPrefSave.Click
        Try
            Preferences.SaveConfig()
            Call util_RegexSave()
            ComboBox_tv_EpisodeRename.Items.Clear()
            For Each Regex In tv_RegexRename
                ComboBox_tv_EpisodeRename.Items.Add(Regex)
            Next
            MsgBox("Changes Saved!" & vbCrLf & vbCrLf & "Please restart the program" & vbCrLf & "for the changes to take effect")
            generalprefschanged = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TabPage24_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles TabPage24.Leave
        Try
            If generalprefschanged = True Then
                Dim tempint As Integer = MessageBox.Show("You appear to have made changes to your preferences," & vbCrLf & "Do wish to save the changes", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                If tempint = DialogResult.Yes Then

                    Call util_RegexSave()
                    Preferences.SaveConfig()
                    MsgBox("Changes Saved")
                Else

                    Me.util_ConfigLoad()
                    Call util_RegexLoad()
                End If
                generalprefschanged = False
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexScrape_Test_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button_tv_RegexScrape_Test.Click
        Try
            If TextBox_tv_RegexScrape_TestString.Text = "" Then
                MsgBox("Please Enter a filename or any string to test")
                Exit Sub
            End If
            If ListBox_tv_RegexScrape.SelectedItem = Nothing Then
                MsgBox("Please Select a Regex to test")
                Exit Sub
            End If
            TextBox_tv_RegexScrape_TestResult.Text = ""
            Dim tvseries As String
            Dim tvepisode As String
            Dim s As String
            Dim tempstring As String = TextBox_tv_RegexScrape_TestString.Text
            s = tempstring '.ToLower
            Dim M As Match


            M = Regex.Match(s, ListBox_tv_RegexScrape.SelectedItem)
            If M.Success = True Then
                Try
                    tvseries = M.Groups(1).Value
                    tvepisode = M.Groups(2).Value
                Catch
                    tvseries = "-1"
                    tvepisode = "-1"
                End Try
                Try
                    If tvseries <> "-1" Then
                        TextBox_tv_RegexScrape_TestResult.Text = "Series No = " & tvseries & vbCrLf
                    End If
                    If tvepisode <> "-1" Then
                        TextBox_tv_RegexScrape_TestResult.Text = TextBox_tv_RegexScrape_TestResult.Text & "Episode No = " & tvepisode
                    End If
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
            Else
                TextBox_tv_RegexScrape_TestResult.Text = "No Matches"
            End If

        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub bckgrnd_tvshowscraper_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bckgrnd_tvshowscraper.RunWorkerCompleted
        Try
            ToolStripStatusLabel5.Visible = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub


    Public Function tv_LanguageCheck(ByVal id As String, ByVal language As String)
        Try
            Dim languagecode As String = language
            Dim url As String = "http://thetvdb.com/api/6E82FED600783400/series/" & id & "/" & languagecode & ".xml"
            Dim websource(10000)
            Dim urllinecount As Integer = 0
            Try
                Dim wrGETURL As WebRequest
                wrGETURL = WebRequest.Create(url)
                Dim myProxy As New WebProxy("myproxy", 80)
                myProxy.BypassProxyOnLocal = True
                Dim objStream As Stream
                objStream = wrGETURL.GetResponse.GetResponseStream()
                Dim objReader As New StreamReader(objStream)
                Dim sLine As String = ""
                urllinecount = 0

                Do While Not sLine Is Nothing
                    urllinecount += 1
                    sLine = objReader.ReadLine
                    If Not sLine Is Nothing Then
                        websource(urllinecount) = sLine
                    End If
                Loop
                objReader.Close()
                objStream.Close()
                urllinecount -= 1

            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
                'MsgBox(ex.ToString)
            End Try
            For f = 1 To urllinecount
                If websource(f).IndexOf("<Language>") <> -1 Then
                    websource(f) = websource(f).Replace("<Language>", "")
                    websource(f) = websource(f).Replace("</Language>", "")
                    websource(f) = websource(f).Replace("  ", "")
                    If websource(f).ToLower = languagecode Then
                        Return True
                    Else
                        Return False
                    End If
                End If
            Next
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
        Return "Error"
    End Function

    '    Private Sub bckgrnd_tvshowscraper_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bckgrnd_tvshowscraper.DoWork
    '        Dim speedy As Boolean = Preferences.tvshowautoquick
    '        Do While newTvFolders.Count > 0
    '            Dim tvshownfopath As String = IO.Path.Combine(newTvFolders(0), "tvshow.nfo")
    '            Dim toprocess As Boolean = True
    '            If IO.File.Exists(tvshownfopath) Then
    '                Dim r As New StreamReader(tvshownfopath)
    '                Dim tempholder As String = r.ReadToEnd
    '                If tempholder.IndexOf("<tvshow>") <> -1 And tempholder.IndexOf("</tvshow>") <> -1 Then
    '                    Dim tvshow As New XmlDocument
    '                    Try
    '                        tvshow.Load(tvshownfopath)
    '                        toprocess = False
    '                    Catch ex As Exception
    '                        toprocess = True
    '                    End Try
    '                End If
    '            End If
    '            If toprocess = True Then
    '                Try
    '                    Dim tempname As String = Utilities.GetLastFolder(newTvFolders(0) & "\hifh")
    '                    Dim showyear As String = ""
    '                    If tempname.Contains("(") Then
    '                        Dim M As Match
    '                        M = Regex.Match(tempname, "(\([\d]{4}\))")
    '                        If M.Success = True Then
    '                            showyear = M.Value
    '                            showyear = showyear.Replace("(", "")
    '                            showyear = showyear.Replace(")", "")
    '                            showyear = showyear.Replace("{", "")
    '                            showyear = showyear.Replace("}", "")
    '                        End If
    '                        If tempname.IndexOf("(") <> 0 Then
    '                            tempname = tempname.Substring(0, tempname.IndexOf("("))
    '                            tempname = tempname.TrimEnd(" ")
    '                            If showyear <> "" Then
    '                                tempname = tempname & " (" & showyear & ")"
    '                            End If
    '                        End If
    '                    End If
    '                    Dim tvshowid As String = gettoptvshow(tempname)
    '                    If IsNumeric(tvshowid) Then
    '                        'tvshow found
    '                        Dim newtvshow As New TvShow
    '                        newtvshow.tvdbid = tvshowid
    '                        newtvshow.path = IO.Path.Combine(newTvFolders(0), "tvshow.nfo")
    '                        'Dim tvdbstuff As New TVDB.tvdbscraper 'commented because of removed TVDB.dll
    '                        Dim tvdbstuff As New TVDBScraper
    '                        Dim bannerurl As String = ""
    '                        Dim fanarturl As String = ""
    '                        Dim posterurl As String = ""
    '                        Dim tempstring As String = ""

    '                        If templanguage = Nothing Then templanguage = "en"
    '                        If templanguage = "" Then templanguage = "en"
    '                        Dim tvshowxmlstring As String = tvdbstuff.getshow(tvshowid, templanguage)
    '                        Dim showlist As New XmlDocument
    '                        showlist.LoadXml(tvshowxmlstring)
    '                        Dim thisresult As XmlNode = Nothing
    '                        Dim actcount As Integer = 0
    '                        For Each thisresult In showlist("fulltvshow")
    '                            Select Case thisresult.Name
    '                                Case "title"
    '                                    newtvshow.title = thisresult.InnerText
    '                                Case "mpaa"
    '                                    newtvshow.mpaa = thisresult.InnerText
    '                                Case "premiered"
    '                                    newtvshow.premiered = thisresult.InnerText
    '                                Case "genre"
    '                                    Dim newstring As String
    '                                    newstring = thisresult.InnerText
    '                                    newstring = newstring.TrimEnd("|")
    '                                    newstring = newstring.TrimStart("|")
    '                                    newstring = newstring.Replace("|", " / ")
    '                                    newtvshow.genre = newstring
    '                                Case "imdbid"
    '                                    newtvshow.imdbid = thisresult.InnerText
    '                                Case "studio"
    '                                    newtvshow.studio = thisresult.InnerText
    '                                Case "plot"
    '                                    newtvshow.plot = thisresult.InnerText
    '                                Case "rating"
    '                                    newtvshow.rating = thisresult.InnerText
    '                                Case "runtime"
    '                                    newtvshow.runtime = thisresult.InnerText
    '                                Case "banner"
    '                                    bannerurl = thisresult.InnerText
    '                                Case "fanart"
    '                                    fanarturl = thisresult.InnerText
    '                                Case "poster"
    '                                    posterurl = thisresult.InnerText
    '                                Case "episodeguideurl"
    '                                    newtvshow.episodeguideurl = thisresult.InnerText

    '                                Case "actor"
    '                                    If actcount >= Preferences.maxactors Then
    '                                        Exit For
    '                                    End If
    '                                    actcount += 1
    '                                    If Preferences.tvdbactorscrape = 0 Or Preferences.tvdbactorscrape = 3 Or newtvshow.imdbid = Nothing Then
    '                                        Dim id As String = ""
    '                                        Dim acts As New movieactors
    '                                        Dim results As XmlNode = Nothing
    '                                        Dim lan As New PossibleShowList
    '                                        For Each results In thisresult.ChildNodes
    '                                            Select Case results.Name
    '                                                Case "name"
    '                                                    acts.actorname = results.InnerText
    '                                                Case "role"
    '                                                    acts.actorrole = results.InnerText
    '                                                Case "thumb"
    '                                                    acts.actorthumb = results.InnerText
    '                                                Case "actorid"
    '                                                    id = results.InnerText
    '                                            End Select
    '                                        Next

    '                                        If acts.actorthumb <> Nothing Then
    '                                            If acts.actorthumb <> "" And Preferences.actorseasy = True And speedy = False Then
    '                                                If workingTvShow.tvshowactorsource <> "imdb" Or workingTvShow.imdbid = Nothing Then
    '                                                    Dim workingpath As String = newtvshow.path.Replace(IO.Path.GetFileName(newtvshow.path), "")
    '                                                    workingpath = workingpath & ".actors\"
    '                                                    Dim hg As New IO.DirectoryInfo(workingpath)
    '                                                    Dim destsorted As Boolean = False
    '                                                    If Not hg.Exists Then
    '                                                        Try
    '                                                            IO.Directory.CreateDirectory(workingpath)
    '                                                            destsorted = True
    '                                                        Catch ex As Exception
    '#If SilentErrorScream Then
    '                                                            Throw ex
    '#End If
    '                                                        End Try
    '                                                    Else
    '                                                        destsorted = True
    '                                                    End If
    '                                                    If destsorted = True Then
    '                                                        Dim filename As String = acts.actorname.Replace(" ", "_")
    '                                                        filename = filename & ".tbn"
    '                                                        filename = IO.Path.Combine(workingpath, filename)

    '                                                        Utilities.DownloadFile(acts.actorthumb, filename)
    '                                                    End If
    '                                                End If
    '                                            End If
    '                                            If Preferences.actorsave = True And id <> "" And Preferences.actorseasy = False Then
    '                                                Dim workingpath As String = ""
    '                                                Dim networkpath As String = Preferences.actorsavepath
    '                                                Try
    '                                                    tempstring = networkpath & "\" & id.Substring(id.Length - 2, 2)
    '                                                    Dim hg As New IO.DirectoryInfo(tempstring)
    '                                                    If Not hg.Exists Then
    '                                                        IO.Directory.CreateDirectory(tempstring)
    '                                                    End If
    '                                                    workingpath = networkpath & "\" & id.Substring(id.Length - 2, 2) & "\tv" & id & ".jpg"
    '                                                    If Not IO.File.Exists(workingpath) Then
    '                                                        Utilities.DownloadFile(acts.actorthumb, workingpath)
    '                                                    End If
    '                                                    acts.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, id.Substring(id.Length - 2, 2))
    '                                                    If Preferences.actornetworkpath.IndexOf("/") <> -1 Then
    '                                                        acts.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, id.Substring(id.Length - 2, 2) & "/tv" & id & ".jpg")
    '                                                    Else
    '                                                        acts.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, id.Substring(id.Length - 2, 2) & "\tv" & id & ".jpg")
    '                                                    End If

    '                                                Catch ex As Exception
    '#If SilentErrorScream Then
    '                                                    Throw ex
    '#End If
    '                                                End Try
    '                                            End If
    '                                        End If
    '                                        Dim exists As Boolean = False
    '                                        For Each actors In workingTvShow.listactors
    '                                            If actors.actorname = acts.actorname And actors.actorrole = acts.actorrole Then
    '                                                exists = True
    '                                            End If
    '                                        Next
    '                                        If exists = False Then
    '                                            newtvshow.listactors.Add(acts)
    '                                        End If
    '                                    End If
    '                            End Select
    '                        Next



    '                        If Preferences.tvdbactorscrape = 1 Or Preferences.tvdbactorscrape = 2 And newtvshow.imdbid <> Nothing Then
    '                            Dim imdbscraper As New Classimdb
    '                            Dim actorlist As String
    '                            Dim actorstring As New XmlDocument
    '                            actorlist = imdbscraper.getimdbactors(Preferences.imdbmirror, newtvshow.imdbid)
    '                            Try
    '                                actorstring.LoadXml(actorlist)
    '                                thisresult = Nothing
    '                                For Each thisresult In actorstring("actorlist")
    '                                    Select Case thisresult.Name
    '                                        Case "actor"
    '                                            Dim newactor As New movieactors
    '                                            Dim detail As XmlNode = Nothing
    '                                            For Each detail In thisresult.ChildNodes
    '                                                Select Case detail.Name
    '                                                    Case "name"
    '                                                        newactor.actorname = detail.InnerText
    '                                                    Case "role"
    '                                                        newactor.actorrole = detail.InnerText
    '                                                    Case "thumb"
    '                                                        newactor.actorthumb = detail.InnerText
    '                                                    Case "actorid"
    '                                                        If newactor.actorthumb <> Nothing Then
    '                                                            If Preferences.actorsave = True And detail.InnerText <> "" And speedy = False Then
    '                                                                Dim workingpath As String = ""
    '                                                                Dim networkpath As String = Preferences.actorsavepath
    '                                                                Try
    '                                                                    tempstring = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2)
    '                                                                    Dim hg As New IO.DirectoryInfo(tempstring)
    '                                                                    If Not hg.Exists Then
    '                                                                        IO.Directory.CreateDirectory(tempstring)
    '                                                                    End If
    '                                                                    workingpath = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
    '                                                                    If Not IO.File.Exists(workingpath) Then
    '                                                                        Utilities.DownloadFile(newactor.actorthumb, workingpath)
    '                                                                    End If
    '                                                                    newactor.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, detail.InnerText.Substring(detail.InnerText.Length - 2, 2))
    '                                                                    If Preferences.actornetworkpath.IndexOf("/") <> -1 Then
    '                                                                        newactor.actorthumb = Preferences.actornetworkpath & "/" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "/" & detail.InnerText & ".jpg"
    '                                                                    Else
    '                                                                        newactor.actorthumb = Preferences.actornetworkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
    '                                                                    End If
    '                                                                Catch ex As Exception
    '#If SilentErrorScream Then
    '                                                                    Throw ex
    '#End If
    '                                                                End Try
    '                                                            End If
    '                                                        End If
    '                                                End Select
    '                                            Next
    '                                            newtvshow.listactors.Add(newactor)
    '                                    End Select
    '                                Next
    '                                While newtvshow.listactors.Count > Preferences.maxactors
    '                                    newtvshow.listactors.RemoveAt(newtvshow.listactors.Count - 1)
    '                                End While
    '                            Catch ex As Exception
    '#If SilentErrorScream Then
    '                                Throw ex
    '#End If
    '                            End Try
    '                        End If

    '                        Dim artlist As New List(Of TvBanners)
    '                        artlist.Clear()
    '                        Dim artdone As Boolean = False
    '                        If Preferences.tvfanart = True Or Preferences.tvposter = True Or Preferences.seasonall <> "none" Then
    '                            Dim thumblist As String = tvdbstuff.getposterlist(newtvshow.tvdbid)
    '                            showlist.LoadXml(thumblist)
    '                            artdone = True
    '                            thisresult = Nothing
    '                            'CheckBox3 = seasons
    '                            'CheckBox4 = fanart
    '                            'CheckBox5 = poster
    '                            For Each thisresult In showlist("banners")
    '                                Select Case thisresult.Name
    '                                    Case "banner"
    '                                        Dim individualposter As New TvBanners
    '                                        For Each results In thisresult.ChildNodes
    '                                            Select Case results.Name
    '                                                Case "url"
    '                                                    individualposter.url = results.InnerText
    '                                                Case "bannertype"
    '                                                    individualposter.bannerType = results.InnerText
    '                                                Case "resolution"
    '                                                    individualposter.resolution = results.InnerText
    '                                                Case "language"
    '                                                    individualposter.language = results.InnerText
    '                                                Case "season"
    '                                                    individualposter.season = results.InnerText
    '                                            End Select
    '                                        Next
    '                                        artlist.Add(individualposter)
    '                                End Select
    '                            Next
    '                        End If

    '                        If Preferences.downloadtvseasonthumbs = True And speedy = False Then
    '                            For f = 0 To 1000
    '                                Dim seasonposter As String = ""
    '                                For Each Image In artlist
    '                                    If Image.season = f.ToString And Image.language = templanguage Then
    '                                        seasonposter = Image.url
    '                                        Exit For
    '                                    End If
    '                                Next
    '                                If seasonposter = "" Then
    '                                    For Each Image In artlist
    '                                        If Image.season = f.ToString And Image.language = "en" Then
    '                                            seasonposter = Image.url
    '                                            Exit For
    '                                        End If
    '                                    Next
    '                                End If
    '                                If seasonposter = "" Then
    '                                    For Each Image In artlist
    '                                        If Image.season = f.ToString Then
    '                                            seasonposter = Image.url
    '                                            Exit For
    '                                        End If
    '                                    Next
    '                                End If
    '                                If seasonposter <> "" Then
    '                                    If f < 10 Then
    '                                        tempstring = "0" & f.ToString
    '                                    Else
    '                                        tempstring = f.ToString
    '                                    End If
    '                                    Dim seasonpath As String = newtvshow.path.Replace(IO.Path.GetFileName(newtvshow.path), "season" & tempstring & ".tbn")
    '                                    If tempstring = "00" Then
    '                                        seasonpath = newtvshow.path.Replace(IO.Path.GetFileName(newtvshow.path), "season-specials.tbn")
    '                                    End If
    '                                    If Not IO.File.Exists(seasonpath) Then

    '                                        Utilities.DownloadFile(seasonposter, seasonpath)

    '                                    End If
    '                                End If
    '                            Next
    '                        End If

    '                        If Preferences.tvfanart = True And speedy = False Then
    '                            Dim fanartposter As String
    '                            fanartposter = ""
    '                            If CheckBox7.CheckState = CheckState.Checked Then
    '                                For Each Image In artlist
    '                                    If Image.language = templanguage And Image.bannerType = "fanart" Then
    '                                        fanartposter = Image.url
    '                                        Exit For
    '                                    End If
    '                                Next
    '                            End If
    '                            If fanartposter = "" Then
    '                                For Each Image In artlist
    '                                    If Image.language = "en" And Image.bannerType = "fanart" Then
    '                                        fanartposter = Image.url
    '                                        Exit For
    '                                    End If
    '                                Next
    '                            End If
    '                            If fanartposter = "" Then
    '                                For Each Image In artlist
    '                                    If Image.bannerType = "fanart" Then
    '                                        fanartposter = Image.url
    '                                        Exit For
    '                                    End If
    '                                Next
    '                            End If
    '                            If fanartposter <> "" Then

    '                                Dim seasonpath As String = newtvshow.path.Replace(IO.Path.GetFileName(newtvshow.path), "fanart.jpg")
    '                                If Not IO.File.Exists(seasonpath) Then
    '                                    Try
    '                                        Dim buffer(4000000) As Byte
    '                                        Dim size As Integer = 0
    '                                        Dim bytesRead As Integer = 0

    '                                        Dim thumburl As String = fanartposter
    '                                        Dim req As HttpWebRequest = WebRequest.Create(thumburl)
    '                                        Dim res As HttpWebResponse = req.GetResponse()
    '                                        Dim contents As Stream = res.GetResponseStream()
    '                                        Dim bytesToRead As Integer = CInt(buffer.Length)
    '                                        Dim bmp As New Bitmap(contents)



    '                                        While bytesToRead > 0
    '                                            size = contents.Read(buffer, bytesRead, bytesToRead)
    '                                            If size = 0 Then Exit While
    '                                            bytesToRead -= size
    '                                            bytesRead += size
    '                                        End While


    '                                        Try
    '                                            If Preferences.resizefanart = 1 Then
    '                                                bmp.Save(seasonpath, Imaging.ImageFormat.Jpeg)
    '                                                scraperLog = scraperLog & "Fanart not resized" & vbCrLf
    '                                            ElseIf Preferences.resizefanart = 2 Then
    '                                                If bmp.Width > 1280 Or bmp.Height > 720 Then
    '                                                    Dim bm_source As New Bitmap(bmp)
    '                                                    Dim bm_dest As New Bitmap(1280, 720)
    '                                                    Dim gr As Graphics = Graphics.FromImage(bm_dest)
    '                                                    gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
    '                                                    gr.DrawImage(bm_source, 0, 0, 1280 - 1, 720 - 1)
    '                                                    bm_dest.Save(seasonpath, Imaging.ImageFormat.Jpeg)
    '                                                    scraperLog = scraperLog & "Farart Resized to 1280x720" & vbCrLf
    '                                                Else
    '                                                    scraperLog = scraperLog & "Fanart not resized, already =< required size" & vbCrLf
    '                                                    bmp.Save(seasonpath, Imaging.ImageFormat.Jpeg)
    '                                                End If
    '                                            ElseIf Preferences.resizefanart = 3 Then
    '                                                If bmp.Width > 960 Or bmp.Height > 540 Then
    '                                                    Dim bm_source As New Bitmap(bmp)
    '                                                    Dim bm_dest As New Bitmap(960, 540)
    '                                                    Dim gr As Graphics = Graphics.FromImage(bm_dest)
    '                                                    gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
    '                                                    gr.DrawImage(bm_source, 0, 0, 960 - 1, 540 - 1)
    '                                                    bm_dest.Save(seasonpath, Imaging.ImageFormat.Jpeg)
    '                                                    scraperLog = scraperLog & "Farart Resized to 960x540" & vbCrLf
    '                                                Else
    '                                                    scraperLog = scraperLog & "Fanart not resized, already =< required size" & vbCrLf
    '                                                    bmp.Save(seasonpath, Imaging.ImageFormat.Jpeg)
    '                                                End If

    '                                            End If
    '                                        Catch ex As Exception
    '#If SilentErrorScream Then
    '                                            Throw ex
    '#End If
    '                                        End Try
    '                                    Catch ex As WebException
    '#If SilentErrorScream Then
    '                                        Throw ex
    '#End If
    '                                        'MsgBox("Error Downloading season poster from TVDB")
    '                                    End Try
    '                                End If
    '                            End If
    '                        End If


    '                        Dim seasonallpath As String = ""
    '                        If Preferences.tvposter = True And speedy = False Then
    '                            Dim posterurlpath As String = ""

    '                            If Preferences.postertype = "poster" Then 'poster
    '                                For Each Image In artlist
    '                                    If Image.language = templanguage And Image.bannerType = "poster" Then
    '                                        posterurl = Image.url
    '                                        Exit For
    '                                    End If
    '                                Next
    '                                If posterurlpath = "" Then
    '                                    For Each Image In artlist
    '                                        If Image.language = "en" And Image.bannerType = "poster" Then
    '                                            posterurlpath = Image.url
    '                                            Exit For
    '                                        End If
    '                                    Next
    '                                End If
    '                                If posterurlpath = "" Then
    '                                    For Each Image In artlist
    '                                        If Image.bannerType = "poster" Then
    '                                            posterurlpath = Image.url
    '                                            Exit For
    '                                        End If
    '                                    Next
    '                                End If
    '                                If posterurlpath <> "" And Preferences.seasonall <> "none" Then
    '                                    seasonallpath = posterurlpath
    '                                End If
    '                            ElseIf Preferences.postertype = "banner" Then 'banner
    '                                For Each Image In artlist
    '                                    If Image.language = templanguage And Image.bannerType = "series" And Image.season = Nothing Then
    '                                        posterurl = Image.url
    '                                        Exit For
    '                                    End If
    '                                Next
    '                                If posterurlpath = "" Then
    '                                    For Each Image In artlist
    '                                        If Image.language = "en" And Image.bannerType = "series" And Image.season = Nothing Then
    '                                            posterurlpath = Image.url
    '                                            Exit For
    '                                        End If
    '                                    Next
    '                                End If
    '                                If posterurlpath = "" Then
    '                                    For Each Image In artlist
    '                                        If Image.bannerType = "series" And Image.season = Nothing Then
    '                                            posterurlpath = Image.url
    '                                            Exit For
    '                                        End If
    '                                    Next
    '                                End If
    '                                If posterurlpath <> "" And RadioButton16.Checked = True Then
    '                                    seasonallpath = posterurlpath
    '                                End If
    '                            End If

    '                            If posterurlpath <> "" And speedy = False Then

    '                                Dim seasonpath As String = newtvshow.path.Replace(IO.Path.GetFileName(newtvshow.path), "folder.jpg")
    '                                If Not IO.File.Exists(seasonpath) Then

    '                                        Utilities.DownloadFile(posterurlpath, seasonpath)

    '                                End If
    '                            End If
    '                        End If

    '                        If Preferences.seasonall <> "none" And seasonallpath = "" And speedy = False Then
    '                            If Preferences.seasonall = "poster" Then 'poster
    '                                For Each Image In artlist
    '                                    If Image.language = templanguage And Image.bannerType = "poster" Then
    '                                        seasonallpath = Image.url
    '                                        Exit For
    '                                    End If
    '                                Next
    '                                If seasonallpath = "" Then
    '                                    For Each Image In artlist
    '                                        If Image.language = "en" And Image.bannerType = "poster" Then
    '                                            seasonallpath = Image.url
    '                                            Exit For
    '                                        End If
    '                                    Next
    '                                End If
    '                                If seasonallpath = "" Then
    '                                    For Each Image In artlist
    '                                        If Image.bannerType = "poster" Then
    '                                            seasonallpath = Image.url
    '                                            Exit For
    '                                        End If
    '                                    Next
    '                                End If
    '                            ElseIf Preferences.seasonall = "wide" = True Then 'banner
    '                                For Each Image In artlist
    '                                    If Image.language = templanguage And Image.bannerType = "series" And Image.season = Nothing Then
    '                                        seasonallpath = Image.url
    '                                        Exit For
    '                                    End If
    '                                Next
    '                                If seasonallpath = "" Then
    '                                    For Each Image In artlist
    '                                        If Image.language = "en" And Image.bannerType = "series" And Image.season = Nothing Then
    '                                            seasonallpath = Image.url
    '                                            Exit For
    '                                        End If
    '                                    Next
    '                                End If
    '                                If seasonallpath = "" Then
    '                                    For Each Image In artlist
    '                                        If Image.bannerType = "series" And Image.season = Nothing Then
    '                                            seasonallpath = Image.url
    '                                            Exit For
    '                                        End If
    '                                    Next
    '                                End If
    '                            End If

    '                            If seasonallpath <> "" And speedy = False Then

    '                                Dim seasonpath As String = newtvshow.path.Replace(IO.Path.GetFileName(newtvshow.path), "season-all.tbn")
    '                                If Not IO.File.Exists(seasonpath) Or CheckBox6.CheckState = CheckState.Checked Then

    '                                    Utilities.DownloadFile(seasonallpath, seasonallpath)

    '                                End If
    '                            End If
    '                        ElseIf Preferences.seasonall <> "none" And seasonallpath <> "" And speedy = False Then
    '                            Dim seasonpath As String = newtvshow.path.Replace(IO.Path.GetFileName(newtvshow.path), "season-all.tbn")
    '                            If Not IO.File.Exists(seasonpath) Then
    '                                Utilities.DownloadFile(seasonallpath, seasonpath)
    '                            End If
    '                        End If

    '                        If artdone = False Then
    '                            Dim thumblist As String = tvdbstuff.getposterlist(newtvshow.tvdbid)
    '                            showlist.LoadXml(thumblist)
    '                            artdone = True
    '                            thisresult = Nothing
    '                            'CheckBox3 = seasons
    '                            'CheckBox4 = fanart
    '                            'CheckBox5 = poster
    '                            For Each thisresult In showlist("banners")
    '                                Select Case thisresult.Name
    '                                    Case "banner"
    '                                        Dim individualposter As New TvBanners
    '                                        For Each results In thisresult.ChildNodes
    '                                            Select Case results.Name
    '                                                Case "url"
    '                                                    individualposter.url = results.InnerText
    '                                                Case "bannertype"
    '                                                    individualposter.bannerType = results.InnerText
    '                                                Case "resolution"
    '                                                    individualposter.resolution = results.InnerText
    '                                                Case "language"
    '                                                    individualposter.language = results.InnerText
    '                                                Case "season"
    '                                                    individualposter.season = results.InnerText
    '                                            End Select
    '                                        Next
    '                                        artlist.Add(individualposter)
    '                                End Select
    '                            Next
    '                        End If

    '                        For Each url In artlist
    '                            If url.bannerType <> "fanart" Then
    '                                newtvshow.posters.Add(url.url)
    '                            Else
    '                                newtvshow.fanart.Add(url.url)
    '                            End If
    '                        Next
    '                        newtvshow.locked = 2
    '                        newtvshow.language = Preferences.tvdblanguagecode
    '                        If Preferences.tvdbactorscrape = 0 Or Preferences.tvdbactorscrape = 2 Then
    '                            newtvshow.episodeactorsource = "tvdb"
    '                        Else
    '                            newtvshow.episodeactorsource = "imdb"
    '                        End If
    '                        If Preferences.tvdbactorscrape = 0 Or Preferences.tvdbactorscrape = 3 Then
    '                            newtvshow.tvshowactorsource = "tvdb"
    '                        Else
    '                            newtvshow.tvshowactorsource = "imdb"
    '                        End If

    '                        If tempstring = "0" Or tempstring = "2" Then
    '                            newtvshow.episodeactorsource = "tvdb"
    '                        Else
    '                            newtvshow.episodeactorsource = "imdb"
    '                        End If

    '                        newtvshow.sortorder = Preferences.sortorder

    '                        nfoFunction.savetvshownfo(newtvshow.path, newtvshow, True)
    '                    End If
    '                Catch ex As Exception
    '#If SilentErrorScream Then
    '                    Throw ex
    '#End If

    '                End Try
    '            End If

    '            If Not tvFolders.Contains(newTvFolders(0)) Then
    '                tvFolders.Add(newTvFolders(0))
    '            End If
    '            bckgrnd_tvshowscraper.ReportProgress(0, newTvFolders(0))
    '            newTvFolders.RemoveAt(0)
    '        Loop


    '    End Sub

    Private Sub Button79_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button79.Click
        Try
            For Each pro In profileStruct.profilelist
                If pro.profilename.ToLower = TextBox42.Text.ToLower Then
                    MsgBox("This Profile Already Exists" & vbCrLf & "Please Select Another Name")
                    Exit Sub
                End If
            Next
            Dim done As Boolean = False
            Dim tempint As Integer = 0
            For f = 1 To 1000
                Dim tempstring2 As String = applicationPath & "\Settings\"
                Dim configpath As String = tempstring2 & "config" & f.ToString & ".xml"
                Dim actorcachepath As String = tempstring2 & "actorcache" & f.ToString & ".xml"
                Dim filterspath As String = tempstring2 & "filters" & f.ToString & ".xml"
                Dim moviecachepath As String = tempstring2 & "moviecache" & f.ToString & ".xml"
                Dim regexpath As String = tempstring2 & "regex" & f.ToString & ".xml"
                Dim tvcachepath As String = tempstring2 & "tvcache" & f.ToString & ".xml"
                Dim ok As Boolean = True
                If IO.File.Exists(configpath) Then
                    ok = False
                End If
                If IO.File.Exists(actorcachepath) Then
                    ok = False
                End If
                If IO.File.Exists(filterspath) Then
                    ok = False
                End If
                If IO.File.Exists(moviecachepath) Then
                    ok = False
                End If
                If IO.File.Exists(regexpath) Then
                    ok = False
                End If
                If IO.File.Exists(tvcachepath) Then
                    ok = False
                End If
                If ok = True Then
                    tempint = f
                    Exit For
                End If
            Next
            'new profilename
            Dim tempstring As String = applicationPath & "\Settings\"
            Dim moviecachetocopy As String = String.Empty
            Dim actorcachetocopy As String = String.Empty
            Dim tvcachetocopy As String = String.Empty
            Dim configtocopy As String = String.Empty
            Dim filterstocopy As String = String.Empty
            Dim regextocopy As String = String.Empty
            For Each profs In profileStruct.profilelist
                If profs.profilename = profileStruct.defaultprofile Then
                    moviecachetocopy = profs.moviecache
                    actorcachetocopy = profs.actorcache
                    tvcachetocopy = profs.tvcache
                    configtocopy = profs.config
                    filterstocopy = profs.filters
                    regextocopy = profs.regexlist
                End If
            Next

            Dim profiletoadd As New str_ListOfProfiles(SetDefaults)
            profiletoadd.actorcache = tempstring & "actorcache" & tempint.ToString & ".xml"
            profiletoadd.config = tempstring & "config" & tempint.ToString & ".xml"
            profiletoadd.filters = tempstring & "filters" & tempint.ToString & ".xml"
            profiletoadd.moviecache = tempstring & "moviecache" & tempint.ToString & ".xml"
            profiletoadd.regexlist = tempstring & "regex" & tempint.ToString & ".xml"
            profiletoadd.tvcache = tempstring & "tvcache" & tempint.ToString & ".xml"
            profiletoadd.profilename = TextBox42.Text
            profileStruct.profilelist.Add(profiletoadd)

            If System.IO.File.Exists(moviecachetocopy) = True Then
                System.IO.File.Copy(moviecachetocopy, profiletoadd.moviecache)
            End If
            If System.IO.File.Exists(actorcachetocopy) = True Then
                System.IO.File.Copy(actorcachetocopy, profiletoadd.actorcache)
            End If
            If System.IO.File.Exists(tvcachetocopy) = True Then
                System.IO.File.Copy(tvcachetocopy, profiletoadd.tvcache)
            End If
            If System.IO.File.Exists(configtocopy) = True Then
                System.IO.File.Copy(configtocopy, profiletoadd.config)
            End If
            If System.IO.File.Exists(filterstocopy) = True Then
                System.IO.File.Copy(filterstocopy, profiletoadd.filters)
            End If
            If System.IO.File.Exists(regextocopy) = True Then
                System.IO.File.Copy(regextocopy, profiletoadd.regexlist)
            End If
            ListBox13.Items.Add(TextBox42.Text)
            Call util_ProfileSave()
            done = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button78_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button78.Click
        Try
            'setselected profile to default
            For Each prof In profileStruct.profilelist
                If prof.profilename = ListBox13.SelectedItem Then
                    profileStruct.defaultprofile = prof.profilename
                    Label112.Text = "Current Default Profile Is :- " & prof.profilename
                    Call util_ProfileSave()
                    Exit For
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button93_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button93.Click
        Try
            'setselected profile to startup
            For Each prof In profileStruct.profilelist
                If prof.profilename = ListBox13.SelectedItem Then
                    profileStruct.startupprofile = prof.profilename
                    Label108.Text = "Current Startup Profile Is :- " & prof.profilename
                    Call util_ProfileSave()
                    Exit For
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button80_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button80.Click
        Try
            'remove selected profile
            If ListBox13.SelectedItem = profileStruct.defaultprofile Then
                MsgBox("You can't delete your default profile" & vbCrLf & "Set another Profile to default then delete it")
                Exit Sub
            End If
            If ListBox13.SelectedItem = profileStruct.startupprofile Then
                MsgBox("You can't delete your startup profile" & vbCrLf & "Set another Profile to startup then delete it")
                Exit Sub
            End If
            If ListBox13.SelectedItem = workingProfile.profilename Then
                MsgBox("You can't delete a loaded profile" & vbCrLf & "Load another Profile then delete it")
                Exit Sub
            End If
            Dim tempint As Integer = MessageBox.Show("Removing a profile will delete all associated cache files and settings," & vbCrLf & "Are you sure you want to remove the selected profile", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
            If tempint = DialogResult.Yes Then
                Dim tempint2 As Integer = 0
                For f = 0 To profileStruct.profilelist.Count - 1

                    If profileStruct.profilelist(f).profilename = ListBox13.SelectedItem Then
                        tempint2 = f
                        Try
                            IO.File.Delete(profileStruct.profilelist(f).actorcache)
                        Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                        End Try
                        Try
                            IO.File.Delete(profileStruct.profilelist(f).config)
                        Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                        End Try
                        Try
                            IO.File.Delete(profileStruct.profilelist(f).filters)
                        Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                        End Try
                        Try
                            IO.File.Delete(profileStruct.profilelist(f).moviecache)
                        Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                        End Try
                        Try
                            IO.File.Delete(profileStruct.profilelist(f).regexlist)
                        Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                        End Try
                        Try
                            IO.File.Delete(profileStruct.profilelist(f).tvcache)
                        Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                        End Try
                        Exit For
                    End If
                Next
                profileStruct.profilelist.RemoveAt(tempint2)
                ListBox13.Items.Clear()
                ProfilesToolStripMenuItem.DropDownItems.Clear()
                If profileStruct.profilelist.Count > 1 Then
                    ProfilesToolStripMenuItem.Visible = True
                Else
                    ProfilesToolStripMenuItem.Visible = False
                End If
                ProfilesToolStripMenuItem.DropDownItems.Clear()
                For Each prof In profileStruct.profilelist
                    ListBox13.Items.Add(prof.profilename)
                    ProfilesToolStripMenuItem.DropDownItems.Add(prof.profilename)
                Next


            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub ProfilesToolStripMenuItem_DropDownItemClicked(ByVal sender As Object, ByVal e As System.Windows.Forms.ToolStripItemClickedEventArgs) Handles ProfilesToolStripMenuItem.DropDownItemClicked
        Try
            generalprefschanged = False

            Preferences.SaveConfig()

            For Each prof In profileStruct.profilelist
                If prof.profilename = e.ClickedItem.Text Then
                    workingProfile.actorcache = prof.actorcache
                    workingProfile.config = prof.config
                    workingProfile.filters = prof.filters
                    workingProfile.moviecache = prof.moviecache
                    workingProfile.profilename = prof.profilename
                    workingProfile.regexlist = prof.regexlist
                    workingProfile.tvcache = prof.tvcache
                    Call util_ProfileSetup()
                End If
            Next
            If e.ClickedItem.Text <> workingProfile.profilename Then
                Exit Sub
            End If
            For Each item In ProfilesToolStripMenuItem.DropDownItems
                If item.text = workingProfile.profilename Then
                    With item
                        item.checked = True
                    End With
                Else
                    item.checked = False
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub util_ProfileSetup()

        Dim mess As New frmMessageBox(" Please Wait", , "Loading Profile")
        mess.Show()
        mess.Refresh()
        Application.DoEvents()
        Me.Enabled = False
        If IO.File.Exists(workingProfile.config) Then
            Preferences.moviesets.Clear()
            Me.util_ConfigLoad()
            For Each item In Preferences.moviesets
                ComboBox3.Items.Clear()
                ComboBox3.Items.Add(item)
            Next
        Else
            Call setuppreferences()
        End If

        If Not IO.File.Exists(workingProfile.moviecache) Or Preferences.startupCache = False Then
            Call mov_CacheRebuild(movieFolders)
        Else
            Call mov_CacheReload()
        End If

        If IO.File.Exists(workingProfile.filters) Then
            Call util_GenreLoad()
        End If

        If Not IO.File.Exists(workingProfile.tvcache) Or Preferences.startupCache = False Then
            Call tv_CacheRebuild()
        Else
            Call tv_CacheLoad(("New Function"))
        End If

        If Not IO.File.Exists(workingProfile.actorcache) Or Preferences.startupCache = False Then
            Call mov_ActorRebuild()
        Else
            Call mov_ActorCacheLoad()
        End If







        'If Preferences.maximised = True Then
        '    Me.WindowState = FormWindowState.Maximized
        'Else
        '    If Preferences.locx <> 0 Then
        '        Me.Location = New Point(Preferences.locx, Preferences.locy)
        '    End If
        '    If Preferences.locy <> 0 Then
        '        Me.Location = New Point(Preferences.locx, Preferences.locy)
        '    End If
        '    If Preferences.formheight <> 0 And Preferences.formwidth <> 0 Then
        '        Me.Width = Preferences.formwidth
        '        Me.Height = Preferences.formheight
        '    End If
        'End If

        Me.Refresh()
        Application.DoEvents()

        If Preferences.splt5 = 0 Then
            Dim tempint As Integer = SplitContainer1.Height
            tempint = tempint / 4
            tempint = tempint * 3
            If tempint > 275 Then
                Preferences.splt5 = tempint
            Else
                Preferences.splt5 = 275
            End If
        End If

        If Preferences.startuptab = 0 Then
            SplitContainer1.SplitterDistance = Preferences.splt1
            SplitContainer2.SplitterDistance = Preferences.splt2
            SplitContainer5.SplitterDistance = Preferences.splt5
            TabLevel1.SelectedIndex = 1
            SplitContainer3.SplitterDistance = Preferences.splt3
            SplitContainer4.SplitterDistance = Preferences.splt4
            TabLevel1.SelectedIndex = 0
        Else
            SplitContainer1.SplitterDistance = Preferences.splt1
            SplitContainer2.SplitterDistance = Preferences.splt2
            SplitContainer5.SplitterDistance = Preferences.splt5
            TabLevel1.SelectedIndex = 1
            SplitContainer3.SplitterDistance = Preferences.splt3
            SplitContainer4.SplitterDistance = Preferences.splt4
        End If
        SplitContainer1.IsSplitterFixed = False
        SplitContainer2.IsSplitterFixed = False
        SplitContainer3.IsSplitterFixed = False
        SplitContainer4.IsSplitterFixed = False
        SplitContainer5.IsSplitterFixed = False
        'Dim tempboolean As Boolean = UrlIsValid("http://thetvdb.com/")

        Try
            If ComboBox3.Items.Count <> Preferences.moviesets.Count Then
                ComboBox3.Items.Clear()
                For Each mset In Preferences.moviesets
                    ComboBox3.Items.Add(mset)
                Next
            End If
            If workingMovieDetails.fullmoviebody.movieset <> "-None-" Then
                'For Each mset In Preferences.moviesets
                '    ComboBox3.Items.Add(mset)
                'Next
                For te = 0 To ComboBox3.Items.Count - 1
                    If ComboBox3.Items(te) = workingMovieDetails.fullmoviebody.movieset Then
                        ComboBox3.SelectedIndex = te
                        Exit For
                    End If
                Next
            End If
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
        Try
            TabControl2.SelectedIndex = 0
            currentTabIndex = 0
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
        Try
            TabControl3.SelectedIndex = 0
            tvCurrentTabIndex = 0
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try


        Me.Enabled = True
        mess.Close()
    End Sub

    Private Sub CheckBox19_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox19.CheckedChanged
        Try
            displayRuntimeScraper = True
            If CheckBox19.CheckState = CheckState.Checked Then
                Preferences.enablehdtags = True
                PanelDisplayRuntime.Enabled = True
                If Preferences.movieRuntimeDisplay = "file" Then
                    rbRuntimeFile.Checked = True
                    displayRuntimeScraper = False
                Else
                    rbRuntimeScraper.Checked = True
                End If
            Else
                Preferences.enablehdtags = False
                PanelDisplayRuntime.Enabled = False
                rbRuntimeScraper.Checked = True
            End If
            Call mov_SwitchRuntime()
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Label27_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Label27.Click
        Try
            If runtimetxt.Enabled = True Then
                displayRuntimeScraper = False
            Else
                displayRuntimeScraper = True
            End If
            Call mov_SwitchRuntime()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub rbRuntimeScraper_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles rbRuntimeScraper.CheckedChanged
        Try
            If rbRuntimeScraper.Checked = True Then
                Preferences.movieRuntimeDisplay = "scraper"
                displayRuntimeScraper = True
            Else
                Preferences.movieRuntimeDisplay = "file"
                displayRuntimeScraper = False
            End If
            'Call mov_SwitchRuntime() 'Damn it - this call prevents MC starting, and I have no idea why! HueyHQ
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_SwitchRuntime()
        If workingMovieDetails Is Nothing Then Exit Sub
        If Preferences.enablehdtags = True And workingMovieDetails.filedetails.filedetails_video.DurationInSeconds <> Nothing And Not displayRuntimeScraper Then
            runtimetxt.Text = Utilities.cleanruntime(workingMovieDetails.filedetails.filedetails_video.DurationInSeconds.Value) & " min"
            runtimetxt.Enabled = False
        Else
            runtimetxt.Text = workingMovieDetails.fullmoviebody.runtime
            runtimetxt.Enabled = True
        End If
    End Sub

    Private Sub CheckBox20_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox20.CheckedChanged
        Try
            If CheckBox20.CheckState = CheckState.Checked Then
                Preferences.enabletvhdtags = True
            Else
                Preferences.enabletvhdtags = False
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexScrape_MoveUp_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button_tv_RegexScrape_MoveUp.Click
        'up
        Try
            Dim mSelectedIndex, mOtherIndex As Integer
            If Me.ListBox_tv_RegexScrape.SelectedIndex <> 0 Then
                mSelectedIndex = Me.ListBox_tv_RegexScrape.SelectedIndex
                mOtherIndex = mSelectedIndex - 1
                ListBox_tv_RegexScrape.Items.Insert(mSelectedIndex + 1, ListBox_tv_RegexScrape.Items(mOtherIndex))
                ListBox_tv_RegexScrape.Items.RemoveAt(mOtherIndex)
            End If
            tv_RegexScraper.Clear()
            For Each item In ListBox_tv_RegexScrape.Items
                tv_RegexScraper.Add(item)
            Next
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexScrape_MoveDown_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button_tv_RegexScrape_MoveDown.Click
        'down
        Try
            Dim mSelectedIndex, mOtherIndex As Integer
            If Me.ListBox_tv_RegexScrape.SelectedIndex <> Me.ListBox_tv_RegexScrape.Items.Count - 1 Then
                mSelectedIndex = Me.ListBox_tv_RegexScrape.SelectedIndex
                mOtherIndex = mSelectedIndex + 1
                ListBox_tv_RegexScrape.Items.Insert(mSelectedIndex, ListBox_tv_RegexScrape.Items(mOtherIndex))
                ListBox_tv_RegexScrape.Items.RemoveAt(mOtherIndex + 1)
            End If
            tv_RegexScraper.Clear()
            For Each item In ListBox_tv_RegexScrape.Items
                tv_RegexScraper.Add(item)
            Next
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexRename_MoveUp_Click(sender As System.Object, e As System.EventArgs) Handles Button_tv_RegexRename_MoveUp.Click
        Try
            'up
            Try
                Dim mSelectedIndex, mOtherIndex As Integer
                If Me.ListBox_tv_RegexRename.SelectedIndex <> 0 Then
                    mSelectedIndex = Me.ListBox_tv_RegexRename.SelectedIndex
                    mOtherIndex = mSelectedIndex - 1
                    ListBox_tv_RegexRename.Items.Insert(mSelectedIndex + 1, ListBox_tv_RegexRename.Items(mOtherIndex))
                    ListBox_tv_RegexRename.Items.RemoveAt(mOtherIndex)
                End If
                tv_RegexRename.Clear()
                For Each item In ListBox_tv_RegexRename.Items
                    tv_RegexRename.Add(item)
                Next
                generalprefschanged = True
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexRename_MoveDown_Click(sender As System.Object, e As System.EventArgs) Handles Button_tv_RegexRename_MoveDown.Click
        Try
            'down
            Try
                Dim mSelectedIndex, mOtherIndex As Integer
                If Me.ListBox_tv_RegexRename.SelectedIndex <> Me.ListBox_tv_RegexRename.Items.Count - 1 Then
                    mSelectedIndex = Me.ListBox_tv_RegexRename.SelectedIndex
                    mOtherIndex = mSelectedIndex + 1
                    ListBox_tv_RegexRename.Items.Insert(mSelectedIndex, ListBox_tv_RegexRename.Items(mOtherIndex))
                    ListBox_tv_RegexRename.Items.RemoveAt(mOtherIndex + 1)
                End If
                tv_RegexRename.Clear()
                For Each item In ListBox_tv_RegexRename.Items
                    tv_RegexRename.Add(item)
                Next
                generalprefschanged = True
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ComboBox_tv_EpisodeRename_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox_tv_EpisodeRename.SelectedIndexChanged
        Try
            If Renamer.setRenamePref(tv_RegexRename.Item(ComboBox_tv_EpisodeRename.SelectedIndex)) Then
                Preferences.tvrename = ComboBox_tv_EpisodeRename.SelectedIndex
                generalprefschanged = True
            Else
                MsgBox("Format does not match scraper regex" & vbCrLf & "Please check")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub SearchForNewMoviesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SearchForNewMoviesToolStripMenuItem.Click
        Try
            If Not BckWrkScnMovies.IsBusy Then
                ToolStripStatusLabel1.Visible = True
                ToolStripProgressBar1.Visible = True
                TabPage14.Text = "Cancel Movie Search"
                TabPage14.ToolTipText = "This cancels the movie search" & vbCrLf & "and Movie scraper thread"
                BckWrkScnMovies.RunWorkerAsync()
            Else
                MsgBox("This task is already running")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_FiltersOtherApply()
        Dim newlist As New List(Of str_ComboList)
        newlist.Clear()
        If ComboBox10.SelectedItem = "Title" Then
            For Each item In filteredList
                If item.title.ToLower.IndexOf(txt_titlesearch.Text.ToLower) <> -1 Then
                    newlist.Add(item)
                End If
            Next
            filteredList = newlist
            Exit Sub
        End If

        If ComboBox10.SelectedItem = "Filename" Then
            For Each item In filteredList
                If item.filename.ToLower.IndexOf(txt_titlesearch.Text.ToLower) <> -1 Then
                    newlist.Add(item)
                End If
            Next
            filteredList = newlist
            Exit Sub
        End If
        If ComboBox10.SelectedItem = "Foldername" Then
            For Each item In filteredList
                If item.foldername.ToLower.IndexOf(txt_titlesearch.Text.ToLower) <> -1 Then
                    newlist.Add(item)
                End If
            Next
            filteredList = newlist
            Exit Sub
        End If
        If ComboBox10.SelectedItem = "Genre" Then
            For Each item In filteredList
                If item.genre.ToLower.IndexOf(txt_titlesearch.Text.ToLower) <> -1 Then
                    newlist.Add(item)
                End If
            Next
            filteredList = newlist
            Exit Sub
        End If
        If ComboBox10.SelectedItem = "Rating" Then
            For Each item In filteredList
                If item.rating.ToLower.IndexOf(txt_titlesearch.Text.ToLower) <> -1 Then
                    newlist.Add(item)
                End If
            Next
            filteredList = newlist
            Exit Sub
        End If
        If ComboBox10.SelectedItem = "IMDB ID" Then
            For Each item In filteredList
                If item.id.ToLower.IndexOf(txt_titlesearch.Text.ToLower) <> -1 Then
                    newlist.Add(item)
                End If
            Next
            filteredList = newlist
            Exit Sub
        End If
        If ComboBox10.SelectedItem = "Outline" Then
            For Each item In filteredList
                If item.outline.ToLower.IndexOf(txt_titlesearch.Text.ToLower) <> -1 Then
                    newlist.Add(item)
                End If
            Next
            filteredList = newlist
            Exit Sub
        End If
        If ComboBox10.SelectedItem = "Year" Then
            For Each item In filteredList
                If item.year.ToLower.IndexOf(txt_titlesearch.Text.ToLower) <> -1 Then
                    newlist.Add(item)
                End If
            Next
            filteredList = newlist
            Exit Sub
        End If
        If ComboBox10.SelectedItem = "Runtime" Then
            For Each item In filteredList
                If item.runtime.ToLower.IndexOf(txt_titlesearch.Text.ToLower) <> -1 Then
                    newlist.Add(item)
                End If
            Next
            filteredList = newlist
            Exit Sub
        End If
    End Sub

    Private Sub ComboBox10_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox10.SelectedIndexChanged
        Try
            Call mov_FiltersAndSortApply()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub txt_titlesearch_ModifiedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txt_titlesearch.ModifiedChanged
        Try
            If filterOverride = False Then
                If txt_titlesearch.Text.Length > 0 Then
                    txt_titlesearch.BackColor = Color.Pink
                Else
                    txt_titlesearch.BackColor = Color.White
                End If
                txt_titlesearch.Refresh()
                Call mov_FiltersAndSortApply()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_TableViewSetup()
        Preferences.tableview.Clear()
        Preferences.tableview.Add("title|150|0|true")
        Preferences.tableview.Add("year|35|1|true")
        Preferences.tableview.Add("playcount|55|2|true")
        Preferences.tableview.Add("fullpathandfilename|150|3|false")
        Preferences.tableview.Add("genre|150|4|true")
        Preferences.tableview.Add("runtime|45|5|true")
        Preferences.tableview.Add("outline|200|6|false")
        Preferences.tableview.Add("plot|200|7|false")
        Preferences.tableview.Add("id|75|8|false")
        Preferences.tableview.Add("rating|40|9|true")
        Preferences.tableview.Add("set|150|10|true")
        Preferences.tableview.Add("sorttitle|150|11|false")
        Preferences.tableview.Add("top250|150|12|false")
        Preferences.tableview.Add("missingdata1|150|13|false")
    End Sub

    Private Sub mov_TableSetup()
        DataGridView1.Columns.Clear()
        If Preferences.tablesortorder = Nothing Then Preferences.tablesortorder = "Title|Ascending"
        If Preferences.tablesortorder = "" Then Preferences.tablesortorder = "Title|Ascending"
        If Preferences.tableview.Count <> 14 Then
            Call mov_TableViewSetup()
        End If
        cmbobx_tablesets.Items.Clear()
        Cmbobx_tablewatched.Items.Clear()
        tableSets.Clear()
        For Each item In Preferences.tableview
            Dim tempdata() As String
            tempdata = item.Split("|")
            Dim newcolumn As New str_TableItems(SetDefaults)
            newcolumn.title = tempdata(0)
            newcolumn.width = Convert.ToInt32(tempdata(1))
            newcolumn.index = Convert.ToInt32(tempdata(2))
            If tempdata(3).ToLower = "true" Then
                newcolumn.visible = True
            Else
                newcolumn.visible = False
            End If
            tableSets.Add(newcolumn)
        Next


        DataGridView1.AutoGenerateColumns = False

        Dim doc As New XmlDocument

        Dim thispref As XmlNode = Nothing
        Dim xmlproc As XmlDeclaration

        xmlproc = doc.CreateXmlDeclaration("1.0", "UTF-8", "yes")
        doc.AppendChild(xmlproc)
        Dim root As XmlElement
        Dim child As XmlElement
        root = doc.CreateElement("movie_cache")

        Dim childchild As XmlElement
        For Each movie In filteredList
            child = doc.CreateElement("movie")
            childchild = doc.CreateElement("filedate")
            childchild.InnerText = movie.filedate
            child.AppendChild(childchild)
            childchild = doc.CreateElement("missingdata1")
            childchild.InnerText = movie.missingdata1.ToString
            child.AppendChild(childchild)
            childchild = doc.CreateElement("filename")
            childchild.InnerText = movie.filename
            child.AppendChild(childchild)
            childchild = doc.CreateElement("foldername")
            childchild.InnerText = movie.foldername
            child.AppendChild(childchild)
            childchild = doc.CreateElement("fullpathandfilename")
            childchild.InnerText = movie.fullpathandfilename
            child.AppendChild(childchild)
            If movie.movieset <> Nothing Then
                If movie.movieset <> "" Then
                    childchild = doc.CreateElement("set")
                    childchild.InnerText = movie.movieset
                    child.AppendChild(childchild)
                Else
                    childchild = doc.CreateElement("set")
                    childchild.InnerText = "-None-"
                    child.AppendChild(childchild)
                End If
            Else
                childchild = doc.CreateElement("set")
                childchild.InnerText = "-None-"
                child.AppendChild(childchild)
            End If
            childchild = doc.CreateElement("genre")
            childchild.InnerText = movie.genre
            child.AppendChild(childchild)
            childchild = doc.CreateElement("id")
            childchild.InnerText = movie.id
            child.AppendChild(childchild)
            childchild = doc.CreateElement("playcount")
            childchild.InnerText = movie.playcount
            child.AppendChild(childchild)
            childchild = doc.CreateElement("rating")
            childchild.InnerText = movie.rating
            child.AppendChild(childchild)
            childchild = doc.CreateElement("title")
            childchild.InnerText = movie.title
            child.AppendChild(childchild)
            If movie.sortorder = Nothing Then
                movie.sortorder = movie.title
            End If
            If movie.sortorder = "" Then
                movie.sortorder = movie.title
            End If
            childchild = doc.CreateElement("outline")
            childchild.InnerText = movie.outline
            child.AppendChild(childchild)
            childchild = doc.CreateElement("plot")
            childchild.InnerText = movie.plot
            child.AppendChild(childchild)
            childchild = doc.CreateElement("sortorder")
            childchild.InnerText = movie.sortorder
            child.AppendChild(childchild)
            childchild = doc.CreateElement("titleandyear")
            childchild.InnerText = movie.titleandyear
            child.AppendChild(childchild)
            childchild = doc.CreateElement("runtime")
            childchild.InnerText = movie.runtime
            child.AppendChild(childchild)
            childchild = doc.CreateElement("top250")
            childchild.InnerText = movie.top250
            child.AppendChild(childchild)
            childchild = doc.CreateElement("year")
            childchild.InnerText = movie.year
            child.AppendChild(childchild)
            root.AppendChild(child)
        Next

        doc.AppendChild(root)

        For Each thisresult In doc("movie_cache")
            'Try
            Select Case thisresult.Name
                Case "movie"
                    Dim chi As XmlElement
                    For Each chi In thisresult.childnodes
                        If chi.Name = "runtime" Then
                            chi.InnerText = chi.InnerText.Replace("minutes", "")
                            chi.InnerText = chi.InnerText.Replace("mins", "")
                            chi.InnerText = chi.InnerText.Replace("min", "")
                            chi.InnerText = chi.InnerText.Replace(" ", "")
                            If chi.InnerText.Length = 1 Then
                                chi.InnerText = "00" & chi.InnerText
                            End If
                            If chi.InnerText.Length = 2 Then
                                chi.InnerText = "0" & chi.InnerText
                            End If
                            chi.InnerText = chi.InnerText & " min"
                        End If
                        If chi.Name = "top250" Then
                            If chi.InnerText = "" Then
                                chi.InnerText = "000" & chi.InnerText
                            End If
                            If IsNumeric(chi.InnerText) Then
                                If chi.InnerText.Length = 0 Then
                                    chi.InnerText = "000" & chi.InnerText
                                End If
                                If chi.InnerText.Length = 1 Then
                                    chi.InnerText = "00" & chi.InnerText
                                End If
                                If chi.InnerText.Length = 2 Then
                                    chi.InnerText = "0" & chi.InnerText
                                End If
                            End If
                        End If
                        If chi.Name = "playcount" Then
                            If chi.InnerText = "" Then
                                chi.InnerText = "0"
                            End If
                            If Not IsNumeric(chi.InnerText) Then
                                chi.InnerText = "0"
                            End If
                            Dim play As Integer = Convert.ToInt32(chi.InnerText)
                            Dim bbol As String = "False"
                            If play > 0 Then
                                bbol = "True"
                            Else
                                bbol = "False"
                            End If
                            chi.InnerText = bbol
                        End If
                        If chi.Name = "missingdata1" Then
                            If chi.InnerText = "" Then
                                chi.InnerText = "0"
                            End If
                            If Not IsNumeric(chi.InnerText) Then
                                chi.InnerText = "0"
                            End If
                            Dim play As Integer = Convert.ToInt32(chi.InnerText)
                            Dim bbol As String = String.Empty
                            If play = 0 Then
                                bbol = "None"
                            ElseIf play = 1 Then
                                bbol = "Fanart"
                            ElseIf play = 2 Then
                                bbol = "Poster"
                            ElseIf play = "3" Then
                                bbol = "Poster & Fanart"
                            End If
                            chi.InnerText = bbol
                        End If
                    Next
            End Select
        Next

        Dim movstring As String = doc.InnerXml
        Dim XMLreader2 As StringReader = New System.IO.StringReader(movstring)

        ' Create the dataset
        Dim newDS As DataSet = New DataSet
        newDS.ReadXml(XMLreader2)
        XMLreader2.Dispose()

        DataGridView1.DataSource = newDS.Tables(0)
        DataGridView1.AllowUserToOrderColumns = True
        DataGridView1.RowHeadersVisible = True
        DataGridView1.RowHeadersWidth = 30

        Dim titlecolumn As New DataGridViewColumn()
        With titlecolumn
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            .HeaderText = "Title"
            .DataPropertyName = "title"
            .Name = "title"
            .SortMode = DataGridViewColumnSortMode.Automatic
        End With

        Dim yearcolumn As New DataGridViewColumn()
        With yearcolumn
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            .HeaderText = "Year"
            .DataPropertyName = "year"
            .Name = "year"
            .SortMode = DataGridViewColumnSortMode.Automatic
            .DefaultCellStyle.Alignment = DataGridViewContentAlignment.BottomCenter
        End With


        Dim idcolumn As New DataGridViewColumn()
        With idcolumn
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            .HeaderText = "IMDB ID"
            .DataPropertyName = "id"
            .Name = "id"
            .SortMode = DataGridViewColumnSortMode.Automatic
            .ReadOnly = True
            .DefaultCellStyle.Alignment = DataGridViewContentAlignment.BottomCenter
        End With

        Dim pathcolumn As New DataGridViewColumn()
        With pathcolumn
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            .HeaderText = "Full Path"
            .DataPropertyName = "fullpathandfilename"
            .Name = "fullpathandfilename"
            .SortMode = DataGridViewColumnSortMode.Automatic
            .ReadOnly = True
        End With

        Dim genrecolumn As New DataGridViewColumn()
        With genrecolumn
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            .HeaderText = "Genre"
            .DataPropertyName = "genre"
            .Name = "genre"
            .SortMode = DataGridViewColumnSortMode.Automatic
        End With

        Dim ratingcolumn As New DataGridViewColumn()
        With ratingcolumn
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            .HeaderText = "Rating"
            .DataPropertyName = "rating"
            .Name = "rating"
            .SortMode = DataGridViewColumnSortMode.Automatic
            .DefaultCellStyle.Alignment = DataGridViewContentAlignment.BottomCenter
        End With

        Dim outlinecolumn As New DataGridViewColumn()
        With outlinecolumn
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            '.DefaultCellStyle.WrapMode = DataGridViewTriState.True
            .HeaderText = "Outline"
            .DataPropertyName = "outline"
            .Name = "outline"
            .SortMode = DataGridViewColumnSortMode.Automatic
        End With

        Dim plotcolumn As New DataGridViewColumn()
        With plotcolumn
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            '.DefaultCellStyle.WrapMode = DataGridViewTriState.True
            .HeaderText = "Plot"
            .DataPropertyName = "plot"
            .Name = "plot"
            .SortMode = DataGridViewColumnSortMode.Automatic
        End With

        Dim sorttitlecolumn As New DataGridViewColumn()
        With sorttitlecolumn
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            .HeaderText = "Sort Title"
            .DataPropertyName = "sortorder"
            .Name = "sorttitle"
            .SortMode = DataGridViewColumnSortMode.Automatic
        End With

        Dim top250column As New DataGridViewColumn()
        With top250column
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            .HeaderText = "Top 250"
            .DataPropertyName = "top250"
            .Name = "top250"
            .SortMode = DataGridViewColumnSortMode.Automatic
            .DefaultCellStyle.Alignment = DataGridViewContentAlignment.BottomCenter
        End With

        Dim watchedcolumn As New DataGridViewCheckBoxColumn()
        With watchedcolumn
            'Dim oCell As DataGridViewCell = New DataGridViewComboBoxCell
            '.CellTemplate = oCell
            .HeaderText = "Watched"
            .Name = "playcount"
            .DataPropertyName = "playcount"
            .SortMode = DataGridViewColumnSortMode.Automatic
        End With

        Dim runtimecolumn As New DataGridViewColumn()
        With runtimecolumn
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            .HeaderText = "Runtime"
            .Name = "runtime"
            .DataPropertyName = "runtime"
            .SortMode = DataGridViewColumnSortMode.Automatic
        End With

        Dim setscolumn As New DataGridViewComboBoxColumn
        cmbobx_tablesets.Items.Add("UnChanged")
        For Each sets In Preferences.moviesets
            setscolumn.Items.Add(sets)
            cmbobx_tablesets.Items.Add(sets)
        Next
        cmbobx_tablesets.SelectedItem = "UnChanged"
        With setscolumn
            .HeaderText = "Sets"
            .Name = "set"
            .DataPropertyName = "set"
            .SortMode = DataGridViewColumnSortMode.Automatic
            .DefaultCellStyle.NullValue = "-None-"
        End With

        Dim artcolumn As New DataGridViewColumn()
        With artcolumn
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            .HeaderText = "Missing Artwork"
            .Name = "missingdata1"
            .DataPropertyName = "missingdata1"
            .SortMode = DataGridViewColumnSortMode.Automatic
            .ReadOnly = True
        End With

        For f = 0 To 13
            For Each col In tableSets
                If col.index = f Then
                    Select Case col.title
                        Case "title"
                            titlecolumn.Width = col.width
                            If col.visible = True Then
                                titlecolumn.Visible = True
                            Else
                                titlecolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, titlecolumn)
                            Exit For
                        Case "year"
                            yearcolumn.Width = col.width
                            If col.visible = True Then
                                yearcolumn.Visible = True
                            Else
                                yearcolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, yearcolumn)
                            Exit For
                        Case "playcount"
                            watchedcolumn.Width = col.width
                            If col.visible = True Then
                                watchedcolumn.Visible = True
                                CheckBox25.CheckState = CheckState.Checked
                            Else
                                watchedcolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, watchedcolumn)
                            Exit For
                        Case "fullpathandfilename"
                            pathcolumn.Width = col.width
                            If col.visible = True Then
                                CheckBox23.CheckState = CheckState.Checked
                                pathcolumn.Visible = True
                            Else
                                pathcolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, pathcolumn)
                            Exit For
                        Case "genre"
                            genrecolumn.Width = col.width
                            If col.visible = True Then
                                genrecolumn.Visible = True
                                CheckBox28.CheckState = CheckState.Checked
                            Else
                                genrecolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, genrecolumn)
                            Exit For
                        Case "outline"
                            outlinecolumn.Width = col.width
                            If col.visible = True Then
                                outlinecolumn.Visible = True
                                CheckBox27.CheckState = CheckState.Checked
                            Else
                                outlinecolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, outlinecolumn)
                            Exit For
                        Case "plot"
                            plotcolumn.Width = col.width
                            If col.visible = True Then
                                plotcolumn.Visible = True
                                CheckBox42.CheckState = CheckState.Checked
                            Else
                                plotcolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, plotcolumn)
                            Exit For
                        Case "id"
                            idcolumn.Width = col.width
                            If col.visible = True Then
                                CheckBox24.CheckState = CheckState.Checked
                                idcolumn.Visible = True
                            Else
                                idcolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, idcolumn)
                            Exit For
                        Case "rating"
                            ratingcolumn.Width = col.width
                            If col.visible = True Then
                                ratingcolumn.Visible = True
                                CheckBox26.CheckState = CheckState.Checked
                            Else
                                ratingcolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, ratingcolumn)
                            Exit For
                        Case "set"
                            setscolumn.Width = col.width
                            If col.visible = True Then
                                setscolumn.Visible = True
                                CheckBox30.CheckState = CheckState.Checked
                            Else
                                setscolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, setscolumn)
                            Exit For
                        Case "sorttitle"
                            sorttitlecolumn.Width = col.width
                            If col.visible = True Then
                                CheckBox21.CheckState = CheckState.Checked
                                sorttitlecolumn.Visible = True
                            Else
                                sorttitlecolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, sorttitlecolumn)
                            Exit For
                        Case "top250"
                            top250column.Width = col.width
                            If col.visible = True Then
                                CheckBox29.CheckState = CheckState.Checked
                                top250column.Visible = True
                            Else
                                top250column.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, top250column)
                            Exit For
                        Case "runtime"
                            runtimecolumn.Width = col.width
                            If col.visible = True Then
                                CheckBox31.CheckState = CheckState.Checked
                                runtimecolumn.Visible = True
                            Else
                                runtimecolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, runtimecolumn)
                            Exit For
                        Case "missingdata1"
                            artcolumn.Width = col.width
                            If col.visible = True Then
                                CheckBox32.CheckState = CheckState.Checked
                                artcolumn.Visible = True
                            Else
                                artcolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, artcolumn)
                            Exit For
                    End Select
                End If
            Next
        Next f

        Cmbobx_tablewatched.Items.Add("UnChanged")
        Cmbobx_tablewatched.Items.Add("Watched")
        Cmbobx_tablewatched.Items.Add("Unwatched")

        cmbobx_tablesets.SelectedIndex = 0
        Cmbobx_tablewatched.SelectedIndex = 0

        Dim sortheader As String
        Dim sortord As String
        Dim tempdata2() As String
        tempdata2 = Preferences.tablesortorder.Split("|")
        sortheader = tempdata2(0)
        sortord = tempdata2(1)

        For Each col In DataGridView1.Columns
            If col.headertext = sortheader Then
                If sortord.ToLower.IndexOf("desc") <> -1 Then
                    DataGridView1.Sort(DataGridView1.Columns(col.index), ListSortDirection.Descending)
                Else
                    DataGridView1.Sort(DataGridView1.Columns(col.index), ListSortDirection.Ascending)
                End If
            End If
        Next

        For Each tempRow As System.Windows.Forms.DataGridViewRow In Me.DataGridView1.Rows
            For Each tempCell As Windows.Forms.DataGridViewCell In tempRow.Cells
                If tempCell.Value = "Fanart" Or tempCell.Value = "Poster" Or tempCell.Value = "Poster & Fanart" Then
                    tempCell.Style.BackColor = Color.Red
                End If
            Next
        Next

        Call mov_TextBoxesSetup()
        Try
            For f = 0 To DataGridView1.Rows.Count
                If DataGridView1.Rows(f).Cells("fullpathandfilename").Value = workingMovieDetails.fileinfo.fullpathandfilename Then
                    DataGridView1.ClearSelection()
                    'DataGridView1.CurrentCell = DataGridView1.Rows(f).Cells(0)
                    'DataGridView1.Rows(f).Selected = True
                    DataGridView1.FirstDisplayedScrollingRowIndex = f
                    Exit For
                End If
            Next
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
    End Sub

    Private Sub util_FontSetup()
        If Preferences.font <> Nothing Then
            If Preferences.font <> "" Then
                Try
                    Dim tcc As TypeConverter = TypeDescriptor.GetConverter(GetType(System.Drawing.Font))
                    Dim newFont As System.Drawing.Font = CType(tcc.ConvertFromString(Preferences.font), System.Drawing.Font)
                    genretxt.Font = newFont
                    certtxt.Font = newFont
                    directortxt.Font = newFont
                    creditstxt.Font = newFont
                    outlinetxt.Font = newFont
                    runtimetxt.Font = newFont
                    studiotxt.Font = newFont
                    taglinetxt.Font = newFont
                    actorcb.Font = newFont
                    roletxt.Font = newFont
                    pathtxt.Font = newFont
                    'CheckedListBox1.Font = newFont
                    TextBox34.Font = newFont
                    ComboBox3.Font = newFont
                    MovieListComboBox.Font = newFont
                    plottxt.Font = newFont
                    txtStars.Font = newFont
                    'titletxt.Font = newFont
                    ComboBox3.Font = newFont
                    ComboBox5.Font = newFont
                    TvTreeview.Font = newFont
                    TextBox25.Font = newFont
                    TextBox22.Font = newFont
                    TextBox23.Font = newFont
                    TextBox21.Font = newFont
                    TextBox24.Font = newFont
                    TextBox20.Font = newFont
                    TextBox17.Font = newFont
                    TextBox29.Font = newFont
                    TextBox19.Font = newFont
                    ComboBox4.Font = newFont
                    TextBox18.Font = newFont
                    TextBox15.Font = newFont
                    TextBox16.Font = newFont
                    TextBox10.Font = newFont
                    TextBox13.Font = newFont
                    TextBox9.Font = newFont
                    TextBox11.Font = newFont
                    TextBox12.Font = newFont
                    TextBox14.Font = newFont
                    Me.Refresh()
                    Application.DoEvents()
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
            End If
        End If


    End Sub

    Private Sub ListBox_tv_RegexScrape_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ListBox_tv_RegexScrape.SelectedIndexChanged
        Try
            If ListBox_tv_RegexScrape.SelectedItem <> Nothing Then
                TextBox_tv_RegexScrape_Edit.Text = ListBox_tv_RegexScrape.SelectedItem
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ListBox_tv_RegexRename_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles ListBox_tv_RegexRename.SelectedIndexChanged
        Try
            If ListBox_tv_RegexRename.SelectedItem <> Nothing Then
                TextBox_tv_RegexRename_Edit.Text = ListBox_tv_RegexRename.SelectedItem
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button96_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button96.Click
        Try
            Dim dlg As FontDialog = New FontDialog()
            Dim res As DialogResult = dlg.ShowDialog()
            If res = Windows.Forms.DialogResult.OK Then
                Dim tc As TypeConverter = TypeDescriptor.GetConverter(GetType(System.Drawing.Font))
                Dim fontString As String = tc.ConvertToString(dlg.Font)

                Preferences.font = fontString

                Dim tcc As TypeConverter = TypeDescriptor.GetConverter(GetType(System.Drawing.Font))
                Dim newFont As System.Drawing.Font = CType(tcc.ConvertFromString(Preferences.font), System.Drawing.Font)

                Label130.Font = newFont
                Label130.Text = fontString
                generalprefschanged = True
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TabPage32_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles TabPage32.Leave
        Try
            Try
                DataGridView1.EndEdit()
                Preferences.tableview.Clear()
                For Each column In DataGridView1.Columns
                    Dim tempstring As String = String.Format("{0}|{1}|{2}|{3}", column.name, column.width, column.displayindex, column.visible)
                    Preferences.tableview.Add(tempstring)
                Next
                Preferences.tablesortorder = String.Format("{0} | {1}", DataGridView1.SortedColumn.HeaderText, DataGridView1.SortOrder.ToString)
                Preferences.SaveConfig()

                Dim changed As Boolean = False
                Dim gridrow As DataGridViewRow

                For Each gridrow In DataGridView1.Rows
                    Dim idpath As String = gridrow.Cells("fullpathandfilename").Value

                    For Each mov In fullMovieList
                        If mov.fullpathandfilename = idpath Then
                            If mov.title <> gridrow.Cells("Title").Value Then
                                changed = True
                            End If
                            If mov.outline <> gridrow.Cells("Outline").Value Then
                                changed = True
                            End If
                            If mov.plot <> gridrow.Cells("Plot").Value Then
                                changed = True
                            End If
                            If mov.genre <> gridrow.Cells("genre").Value Then
                                changed = True
                            End If
                            If mov.rating <> gridrow.Cells("rating").Value Then
                                changed = True
                            End If
                            Try
                                If gridrow.Cells("playcount").Value Then
                                    If Convert.ToInt32(mov.playcount) <= 0 Then
                                        changed = True
                                    End If
                                Else
                                    If Convert.ToInt32(mov.playcount) > 0 Then
                                        changed = True
                                    End If
                                End If
                            Catch
                                If Convert.ToInt32(mov.playcount) > 0 Then
                                    changed = True
                                End If
                            End Try
                            If mov.sortorder <> gridrow.Cells("sorttitle").Value Then
                                changed = True
                            End If
                            If mov.year <> gridrow.Cells("year").Value Then
                                If IsNumeric(gridrow.Cells("year").Value) Then
                                    changed = True
                                End If
                            End If
                            Try
                                If Convert.ToInt32(mov.top250) <> Convert.ToInt32(gridrow.Cells("top250").Value) Then
                                    If IsNumeric(gridrow.Cells("top250").Value) Then
                                        changed = True
                                    End If
                                End If
                            Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                            End Try
                            Dim runtime As String = gridrow.Cells("runtime").Value
                            runtime = runtime.Replace("min", "")
                            runtime = runtime.Trim(" ")
                            If IsNumeric(runtime) Then
                                Dim temruntime As Integer = Convert.ToInt32(runtime)
                                Dim tempstrin As String = temruntime.ToString & " min"
                                If mov.runtime <> tempstrin Then
                                    changed = True
                                End If
                            End If
                            If mov.movieset <> gridrow.Cells("set").Value Then
                                If mov.movieset = "-None-" And gridrow.Cells("set").Value = Nothing Then
                                Else
                                    If mov.movieset = Nothing Then
                                        If gridrow.Cells("set").Value <> "-None-" Then
                                            changed = True
                                        End If
                                    Else
                                        changed = True
                                    End If
                                End If
                            End If
                        End If
                        If changed = True Then Exit For
                    Next
                    If changed = True Then
                        Exit For
                    End If

                Next gridrow
                If changed = True Then
                    Dim tempint As Integer = MessageBox.Show("You appear to have made changes to some of your movie details." & vbCrLf & vbCrLf & "Any changes will be lost if you do not save the changes now." & "                 Do wish to save the changes?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                    If tempint = DialogResult.Yes Then
                        Call mov_TableChangesSave()
                        MsgBox("Changes Saved")
                    End If
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub CheckBox21_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox21.CheckedChanged
        Try
            Try
                If CheckBox21.CheckState = CheckState.Checked Then
                    Me.DataGridView1.Columns("sorttitle").Visible = True
                    Call mov_TextBoxesSetup()
                Else
                    Me.DataGridView1.Columns("sorttitle").Visible = False
                    Call mov_TextBoxesSetup()
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox23_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox23.CheckedChanged
        Try
            Try
                If CheckBox23.CheckState = CheckState.Checked Then
                    Me.DataGridView1.Columns("fullpathandfilename").Visible = True
                    Call mov_TextBoxesSetup()
                Else
                    Me.DataGridView1.Columns("fullpathandfilename").Visible = False
                    Call mov_TextBoxesSetup()
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox24_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox24.CheckedChanged
        Try
            Try
                If CheckBox24.CheckState = CheckState.Checked Then
                    Me.DataGridView1.Columns("id").Visible = True
                    Call mov_TextBoxesSetup()
                Else
                    Me.DataGridView1.Columns("id").Visible = False
                    Call mov_TextBoxesSetup()
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox25_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox25.CheckedChanged
        Try
            Try
                If CheckBox25.CheckState = CheckState.Checked Then
                    Me.DataGridView1.Columns("playcount").Visible = True
                    Call mov_TextBoxesSetup()
                Else
                    Me.DataGridView1.Columns("playcount").Visible = False
                    Call mov_TextBoxesSetup()
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox26_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox26.CheckedChanged
        Try
            Try
                If CheckBox26.CheckState = CheckState.Checked Then
                    Me.DataGridView1.Columns("rating").Visible = True
                    Call mov_TextBoxesSetup()
                Else
                    Me.DataGridView1.Columns("rating").Visible = False
                    Call mov_TextBoxesSetup()
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub CheckBox27_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox27.CheckedChanged
        Try
            Try
                If CheckBox27.CheckState = CheckState.Checked Then
                    Me.DataGridView1.Columns("outline").Visible = True
                    Call mov_TextBoxesSetup()
                Else
                    Me.DataGridView1.Columns("outline").Visible = False
                    Call mov_TextBoxesSetup()
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox28_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox28.CheckedChanged
        Try
            Try
                If CheckBox28.CheckState = CheckState.Checked Then
                    Me.DataGridView1.Columns("genre").Visible = True
                    Call mov_TextBoxesSetup()
                Else
                    Me.DataGridView1.Columns("genre").Visible = False
                    Call mov_TextBoxesSetup()
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox29_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox29.CheckedChanged
        Try
            If CheckBox29.CheckState = CheckState.Checked Then
                Me.DataGridView1.Columns("top250").Visible = True
                Call mov_TextBoxesSetup()
            Else
                Me.DataGridView1.Columns("top250").Visible = False
                Call mov_TextBoxesSetup()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox30_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox30.CheckedChanged
        Try
            Try
                If CheckBox30.CheckState = CheckState.Checked Then
                    Me.DataGridView1.Columns("set").Visible = True
                    Call mov_TextBoxesSetup()
                Else
                    Me.DataGridView1.Columns("set").Visible = False
                    Call mov_TextBoxesSetup()
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub CheckBox31_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox31.CheckedChanged
        Try
            Try
                If CheckBox31.CheckState = CheckState.Checked Then
                    Me.DataGridView1.Columns("runtime").Visible = True
                    Call mov_TextBoxesSetup()
                Else
                    Me.DataGridView1.Columns("runtime").Visible = False
                    Call mov_TextBoxesSetup()
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_TableChangesSave()
        'Dim mess As New frmMessageBox("Saving Changes", "", "Please Wait")
        'mess.Show()
        'mess.Refresh()
        frmSplash2.Text = "Saving Table Changes..."
        frmSplash2.Label1.Text = "Saving Movie Data....."
        frmSplash2.Label1.Visible = True
        frmSplash2.Label2.Visible = True
        frmSplash2.ProgressBar1.Visible = True
        frmSplash2.ProgressBar1.Maximum = DataGridView1.Rows.Count
        frmSplash2.Show()
        Dim progcount As Integer = 0
        Application.DoEvents()
        Dim gridrow As DataGridViewRow

        For Each gridrow In DataGridView1.Rows
            progcount += 1
            frmSplash2.ProgressBar1.Value = progcount


            Dim changed As Boolean = False
            Dim idpath As String = gridrow.Cells("fullpathandfilename").Value
            Dim array As New List(Of String)
            frmSplash2.Label2.Text = gridrow.Cells("Title").Value
            For f = fullMovieList.Count - 1 To 0 Step -1
                changed = False
                If Not array.Contains(fullMovieList(f).fullpathandfilename) Then
                    If fullMovieList(f).fullpathandfilename = idpath Then
                        array.Add(fullMovieList(f).fullpathandfilename)
                        Try
                            If fullMovieList(f).title <> gridrow.Cells("Title").Value Then
                                changed = True
                            End If
                        Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                        End Try
                        Try
                            If fullMovieList(f).outline <> gridrow.Cells("Outline").Value Then
                                changed = True
                            End If
                        Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                        End Try
                        Try
                            If fullMovieList(f).genre <> gridrow.Cells("genre").Value Then
                                changed = True
                            End If
                        Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                        End Try
                        Try
                            If fullMovieList(f).rating <> gridrow.Cells("rating").Value Then
                                changed = True
                            End If
                        Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                        End Try
                        Try
                            If gridrow.Cells("playcount").Value = True Then
                                If fullMovieList(f).playcount <= 0 Then
                                    changed = True
                                End If
                            Else
                                If fullMovieList(f).playcount > 0 Then
                                    changed = True
                                End If
                            End If
                        Catch
                            If fullMovieList(f).playcount > 0 Then
                                changed = True
                            End If
                        End Try
                        Try
                            If fullMovieList(f).sortorder <> gridrow.Cells("sorttitle").Value Then
                                changed = True
                            End If
                        Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                        End Try
                        Try
                            If fullMovieList(f).year <> gridrow.Cells("year").Value Then
                                If IsNumeric(gridrow.Cells("year").Value) Then
                                    changed = True
                                End If
                            End If
                        Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                        End Try
                        Try
                            If Convert.ToInt32(fullMovieList(f).top250) <> Convert.ToInt32(gridrow.Cells("top250").Value) Then
                                If IsNumeric(gridrow.Cells("top250").Value) Then
                                    changed = True
                                End If
                            End If
                        Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                        End Try
                        Try
                            Dim runtime As String = gridrow.Cells("runtime").Value
                            runtime = runtime.Replace("min", "")
                            runtime = runtime.Trim(" ")
                            If IsNumeric(runtime) Then
                                Dim temruntime As Integer = Convert.ToInt32(runtime)
                                Dim tempstrin As String = temruntime.ToString & " min"
                                If fullMovieList(f).runtime <> tempstrin Then
                                    changed = True
                                End If
                            End If
                        Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                        End Try
                        Try
                            If fullMovieList(f).movieset <> gridrow.Cells("set").Value Then
                                changed = True
                            End If
                        Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                        End Try
                    End If
                    If changed = True And IO.File.Exists(fullMovieList(f).fullpathandfilename) Then
                        Dim changedmoviedetails As New FullMovieDetails
                        Dim changedmovie As New str_ComboList(SetDefaults)
                        changedmoviedetails = nfoFunction.mov_NfoLoadFull(fullMovieList(f).fullpathandfilename)
                        If Not changedmoviedetails Is Nothing Then
                            changedmovie = fullMovieList(f)
                            Try
                                changedmovie.genre = gridrow.Cells("genre").Value
                            Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                            End Try
                            Try
                                changedmovie.title = gridrow.Cells("title").Value
                            Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                            End Try
                            Try
                                changedmovie.year = gridrow.Cells("year").Value
                            Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                            End Try
                            Try
                                changedmovie.sortorder = gridrow.Cells("sorttitle").Value
                            Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                            End Try
                            Try
                                changedmovie.rating = gridrow.Cells("rating").Value
                            Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                            End Try
                            Try
                                changedmovie.outline = gridrow.Cells("outline").Value
                            Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                            End Try
                            ' Because plot is truncated to 100 chars to save moviecache.xml length, we don't want the user to overwrite the real plot
                            '                            Try
                            '                                changedmovie.plot = gridrow.Cells("plot").Value
                            '                            Catch ex As Exception
                            '#If SilentErrorScream Then
                            '                                Throw ex
                            '#End If
                            '                            End Try
                            Try
                                changedmovie.movieset = gridrow.Cells("set").Value
                            Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                            End Try

                            Try
                                If IsNumeric(gridrow.Cells("top250").Value) Then
                                    changed = True
                                End If
                                changedmovie.top250 = Convert.ToInt32(gridrow.Cells("top250").Value).ToString
                            Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                            End Try

                            Try
                                If gridrow.Cells("playcount").EditedFormattedValue = True Then
                                    If Convert.ToInt32(changedmovie.playcount) > 0 Then
                                    Else
                                        changedmovie.playcount = "1"
                                    End If
                                Else
                                    changedmovie.playcount = "0"
                                End If
                            Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                            End Try

                            Try
                                'Dim runtime As String = gridrow.Cells("runtime").Value
                                'runtime = runtime.Replace("min", "")
                                'runtime = runtime.Trim(" ")
                                'If IsNumeric(runtime) Then
                                '    Dim temruntime As Integer = Convert.ToInt32(runtime)
                                '    Dim tempstrin As String = temruntime.ToString & " min"
                                '    If changedmovie.runtime <> tempstrin Then
                                '        changedmovie.runtime = tempstrin
                                '    End If
                                'End If
                                changedmovie.runtime = Utilities.cleanruntime(gridrow.Cells("runtime").Value)
                            Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                            End Try

                            changedmoviedetails.fullmoviebody.runtime = changedmovie.runtime
                            'changedmoviedetails.filedetails.filedetails_video.DurationInSeconds.Value = changedmovie.runtime.ToString

                            changedmoviedetails.fullmoviebody.title = changedmovie.title
                            changedmoviedetails.fullmoviebody.year = changedmovie.year
                            changedmoviedetails.fullmoviebody.playcount = changedmovie.playcount
                            changedmoviedetails.fullmoviebody.genre = changedmovie.genre
                            changedmoviedetails.fullmoviebody.outline = changedmovie.outline
                            'changedmoviedetails.fullmoviebody.plot = changedmovie.plot
                            changedmoviedetails.fullmoviebody.rating = changedmovie.rating
                            changedmoviedetails.fullmoviebody.movieset = changedmovie.movieset
                            changedmoviedetails.fullmoviebody.sortorder = changedmovie.sortorder
                            changedmoviedetails.fullmoviebody.top250 = changedmovie.top250

                            nfoFunction.mov_NfoSave(changedmoviedetails.fileinfo.fullpathandfilename, changedmoviedetails, True)
                            changedmovie.titleandyear = changedmovie.title & " (" & changedmovie.year & ")"
                            fullMovieList.RemoveAt(f)
                            fullMovieList.Add(changedmovie)
                            Exit For
                        End If
                    End If
                End If
            Next
        Next gridrow

        Call mov_CacheSave()
        Call mov_FormPopulate()
        Call mov_FiltersAndSortApply()
        frmSplash2.Hide()
        'mess.Close()
        Application.DoEvents()
        Me.BringToFront()
    End Sub

    Private Sub Button97_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button97.Click
        Try
            Call mov_TableChangesSave()
            MsgBox("Changes Saved")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox32_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox32.CheckedChanged
        Try
            Try
                If CheckBox32.CheckState = CheckState.Checked Then
                    Me.DataGridView1.Columns("missingdata1").Visible = True
                    Call mov_TextBoxesSetup()
                Else
                    Me.DataGridView1.Columns("missingdata1").Visible = False
                    Call mov_TextBoxesSetup()
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DataGridView1_ColumnDisplayIndexChanged(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewColumnEventArgs) Handles DataGridView1.ColumnDisplayIndexChanged
        Try
            Call mov_TextBoxesSetup()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DataGridView1_ColumnWidthChanged(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewColumnEventArgs) Handles DataGridView1.ColumnWidthChanged
        Try
            Call mov_TextBoxesSetup()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DataGridView1_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles DataGridView1.MouseDown
        Try
            If e.Button = Windows.Forms.MouseButtons.Right Then
                If DataGridView1.SelectedRows.Count < 2 Then
                    Dim hti As DataGridView.HitTestInfo = sender.HitTest(e.X, e.Y)

                    'If hti.Type = DataGridViewHitTestType.Cell Then

                    '    If Not DataGridView1.Rows(hti.RowIndex).Selected Then

                    ' User right clicked a row that is not selected, so throw away all other selections and select this row

                    DataGridView1.ClearSelection()

                    DataGridView1.Rows(hti.RowIndex).Selected = True
                End If
                'End If

                '    End If

            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DataGridView1_RowHeadersWidthChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles DataGridView1.RowHeadersWidthChanged
        Try
            Call mov_TextBoxesSetup()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DataGridView1_SelectionChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles DataGridView1.SelectionChanged
        Try
            If DataGridView1.SelectedRows.Count > 1 Then
                txt_tabletitle.Visible = True
                txt_tabletop250.Visible = True
                txt_tableyear.Visible = True
                txt_tablesorttitle.Visible = True
                txt_tableruntime.Visible = True
                txt_tablerating.Visible = True
                txt_tableoutline.Visible = True
                txt_tableplot.Visible = True
                txt_tablegenre.Visible = True
                cmbobx_tablesets.Visible = True
                Cmbobx_tablewatched.Visible = True
                Button98.Visible = True
                Button99.Visible = True
                Button100.Visible = True
                Label132.Visible = True
                Call mov_TextBoxesSetup()
            Else
                Cmbobx_tablewatched.Visible = False
                txt_tabletitle.Visible = False
                txt_tabletop250.Visible = False
                txt_tableyear.Visible = False
                txt_tablesorttitle.Visible = False
                txt_tableruntime.Visible = False
                txt_tablerating.Visible = False
                txt_tableoutline.Visible = False
                txt_tableplot.Visible = False
                txt_tablegenre.Visible = False
                cmbobx_tablesets.Visible = False
                Button98.Visible = False
                Button99.Visible = False
                Button100.Visible = False
                Label132.Visible = False
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DataGridView1_Sorted(ByVal sender As Object, ByVal e As System.EventArgs) Handles DataGridView1.Sorted
        Try
            For Each tempRow As System.Windows.Forms.DataGridViewRow In Me.DataGridView1.Rows
                For Each tempCell As Windows.Forms.DataGridViewCell In tempRow.Cells
                    If tempCell.Value = "Fanart" Or tempCell.Value = "Poster" Or tempCell.Value = "Poster & Fanart" Then
                        tempCell.Style.BackColor = Color.Red
                    End If
                Next
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub MarkAllSelectedAsWatchedToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MarkAllSelectedAsWatchedToolStripMenuItem.Click
        Try
            For Each selecteditem In DataGridView1.SelectedRows
                selecteditem.Cells("playcount").Value = True
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub MarkAllSelectedAsUnWatchedToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MarkAllSelectedAsUnWatchedToolStripMenuItem.Click
        Try
            For Each selecteditem In DataGridView1.SelectedRows
                selecteditem.Cells("playcount").Value = False
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_TextBoxesSetup()
        If DataGridView1.SelectedRows.Count < 2 Then
            Exit Sub
        End If
        txt_tabletitle.Visible = False
        txt_tabletop250.Visible = False
        txt_tableyear.Visible = False
        txt_tablesorttitle.Visible = False
        txt_tableruntime.Visible = False
        txt_tablerating.Visible = False
        txt_tableoutline.Visible = False
        txt_tableplot.Visible = False
        txt_tablegenre.Visible = False
        Cmbobx_tablewatched.Visible = False
        cmbobx_tablesets.Visible = False

        For Each column In DataGridView1.Columns
            Select Case column.visible
                Case True
                    Select Case column.headertext.tolower
                        Case "title"
                            txt_tabletitle.Width = column.width - 4
                            txt_tabletitle.Visible = True
                            Dim locx As Integer = 0
                            For Each col In DataGridView1.Columns
                                Try
                                    If col.displayindex < DataGridView1.Columns("Title").DisplayIndex And col.visible = True Then
                                        locx = locx + col.width
                                        'Else
                                        '    If col.visible = True And col.headertext.tolower = "title" Then Exit For
                                    End If
                                Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                End Try
                            Next
                            locx = locx + DataGridView1.RowHeadersWidth
                            txt_tabletitle.Location = New Point(locx + 2, DataGridView1.Height + 31)
                        Case "year"
                            txt_tableyear.Width = column.width - 4
                            txt_tableyear.Visible = True
                            Dim locx As Integer = 0
                            For Each col In DataGridView1.Columns
                                Try
                                    If col.displayindex < DataGridView1.Columns("Year").DisplayIndex And col.visible = True Then
                                        locx = locx + col.width
                                        'Else
                                        '    If col.visible = True And col.headertext.tolower = "year" Then Exit For
                                    End If
                                Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                End Try
                            Next
                            locx = locx + DataGridView1.RowHeadersWidth
                            txt_tableyear.Location = New Point(locx + 2, DataGridView1.Height + 31)
                        Case "top 250"
                            txt_tabletop250.Width = column.width - 4
                            txt_tabletop250.Visible = True
                            Dim locx As Integer = 0
                            For Each col In DataGridView1.Columns
                                Try
                                    If col.displayindex < DataGridView1.Columns("top250").DisplayIndex And col.visible = True Then
                                        locx = locx + col.width
                                        'Else
                                        '    If col.visible = True And col.headertext.tolower = "top 250" Then Exit For
                                    End If
                                Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                End Try
                            Next
                            locx = locx + DataGridView1.RowHeadersWidth
                            txt_tabletop250.Location = New Point(locx + 2, DataGridView1.Height + 31)
                        Case "outline"
                            txt_tableoutline.Width = column.width - 4
                            txt_tableoutline.Visible = True
                            Dim locx As Integer = 0
                            For Each col In DataGridView1.Columns
                                Try
                                    If col.displayindex < DataGridView1.Columns("Outline").DisplayIndex And col.visible = True Then
                                        locx = locx + col.width
                                        'Else
                                        '    If col.visible = True And col.headertext.tolower = "outline" Then Exit For
                                    End If
                                Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                End Try
                            Next
                            locx = locx + DataGridView1.RowHeadersWidth
                            txt_tableoutline.Location = New Point(locx + 2, DataGridView1.Height + 31)
                        Case "plot"
                            txt_tableplot.Width = column.width - 4
                            txt_tableplot.Visible = True
                            Dim locx As Integer = 0
                            For Each col In DataGridView1.Columns
                                Try
                                    If col.displayindex < DataGridView1.Columns("Plot").DisplayIndex And col.visible = True Then
                                        locx = locx + col.width
                                        'Else
                                        '    If col.visible = True And col.headertext.tolower = "plot" Then Exit For
                                    End If
                                Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                End Try
                            Next
                            locx = locx + DataGridView1.RowHeadersWidth
                            txt_tableplot.Location = New Point(locx + 2, DataGridView1.Height + 31)
                        Case "rating"
                            txt_tablerating.Width = column.width - 4
                            txt_tablerating.Visible = True
                            Dim locx As Integer = 0
                            For Each col In DataGridView1.Columns
                                Try
                                    If col.displayindex < DataGridView1.Columns("Rating").DisplayIndex And col.visible = True Then
                                        locx = locx + col.width
                                        'Else
                                        '    If col.visible = True And col.headertext.tolower = "rating" Then Exit For
                                    End If
                                Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                End Try
                            Next
                            locx = locx + DataGridView1.RowHeadersWidth
                            txt_tablerating.Location = New Point(locx + 2, DataGridView1.Height + 31)
                        Case "sort title"
                            txt_tablesorttitle.Width = column.width - 4
                            txt_tablesorttitle.Visible = True
                            Dim locx As Integer = 0
                            For Each col In DataGridView1.Columns
                                Try
                                    If col.displayindex < DataGridView1.Columns("sorttitle").DisplayIndex And col.visible = True Then
                                        locx = locx + col.width
                                        'Else
                                        '    If col.visible = True And col.headertext.tolower = "sort title" Then Exit For
                                    End If
                                Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                End Try
                            Next
                            locx = locx + DataGridView1.RowHeadersWidth
                            txt_tablesorttitle.Location = New Point(locx + 2, DataGridView1.Height + 31)
                        Case "genre"
                            txt_tablegenre.Width = column.width - 4
                            txt_tablegenre.Visible = True
                            Dim locx As Integer = 0
                            For Each col In DataGridView1.Columns
                                Try
                                    If col.displayindex < DataGridView1.Columns("Genre").DisplayIndex And col.visible = True Then
                                        locx = locx + col.width
                                        'Else
                                        '    If col.visible = True And col.headertext.tolower = "genre" Then Exit For
                                    End If
                                Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                End Try
                            Next
                            locx = locx + DataGridView1.RowHeadersWidth
                            txt_tablegenre.Location = New Point(locx + 2, DataGridView1.Height + 31)
                        Case "runtime"
                            txt_tableruntime.Width = column.width - 4
                            txt_tableruntime.Visible = True
                            Dim locx As Integer = 0
                            For Each col In DataGridView1.Columns
                                Try
                                    If col.displayindex < DataGridView1.Columns("Runtime").DisplayIndex And col.visible = True Then
                                        locx = locx + col.width
                                        'Else
                                        '    If col.visible = True And col.headertext.tolower = "runtime" Then Exit For
                                    End If
                                Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                End Try
                            Next
                            locx = locx + DataGridView1.RowHeadersWidth
                            txt_tableruntime.Location = New Point(locx + 2, DataGridView1.Height + 31)
                        Case "watched"
                            Cmbobx_tablewatched.Visible = True
                            Cmbobx_tablewatched.Width = column.width - 4
                            Dim locx As Integer = 0
                            For Each col In DataGridView1.Columns
                                Try
                                    If col.displayindex < DataGridView1.Columns("playcount").DisplayIndex And col.visible = True Then
                                        locx = locx + col.width
                                    End If
                                Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                End Try
                            Next
                            locx = locx + DataGridView1.RowHeadersWidth
                            Cmbobx_tablewatched.Location = New Point(locx + 2, DataGridView1.Height + 31)
                        Case "sets"
                            cmbobx_tablesets.Visible = True
                            cmbobx_tablesets.Width = column.width - 4
                            Dim locx As Integer = 0
                            For Each col In DataGridView1.Columns
                                Try
                                    If col.displayindex < DataGridView1.Columns("Set").DisplayIndex And col.visible = True Then
                                        locx = locx + col.width
                                        'Else
                                        '    If col.visible = True And col.headertext.tolower = "sets" Then Exit For
                                    End If
                                Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                End Try
                            Next
                            locx = locx + DataGridView1.RowHeadersWidth
                            cmbobx_tablesets.Location = New Point(locx + 2, DataGridView1.Height + 31)
                    End Select
            End Select
        Next
    End Sub

    Private Sub GoToToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles GoToToolStripMenuItem.Click
        Try
            Dim tempstring As String = ""
            For Each selecteditem In DataGridView1.SelectedRows
                tempstring = selecteditem.Cells("fullpathandfilename").Value
            Next
            For f = 0 To MovieListComboBox.Items.Count - 1
                If CType(MovieListComboBox.Items(f), ValueDescriptionPair).Value = tempstring Then
                    MovieListComboBox.SelectedItems.Clear()
                    MovieListComboBox.SelectedIndex = f
                    Application.DoEvents()
                    currentTabIndex = 0
                    Me.TabControl2.SelectedIndex = 0
                    Exit For
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button98_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button98.Click
        Try
            Call mov_TableUpdate()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button99_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button99.Click
        Try
            Call mov_TableUpdate()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_TableUpdate()
        For Each row In DataGridView1.SelectedRows
            If txt_tabletitle.Text <> "" And txt_tabletitle.Visible = True Then
                row.cells("title").value = txt_tabletitle.Text
            End If
            If txt_tabletop250.Text <> "" And txt_tabletop250.Visible = True Then
                row.cells("top250").value = txt_tabletop250.Text
            End If
            If txt_tableyear.Text <> "" And txt_tableyear.Visible = True Then
                row.cells("year").value = txt_tableyear.Text
            End If
            If txt_tablesorttitle.Text <> "" And txt_tablesorttitle.Visible = True Then
                row.cells("sorttitle") = txt_tablesorttitle.Text
            End If
            If txt_tableruntime.Text <> "" And txt_tableruntime.Visible = True Then
                row.cells("runtime").value = txt_tableruntime.Text
            End If
            If txt_tablerating.Text <> "" And txt_tablerating.Visible = True Then
                row.cells("rating").value = txt_tablerating.Text
            End If
            If txt_tableoutline.Text <> "" And txt_tableoutline.Visible = True Then
                row.cells("outline").value = txt_tableoutline.Text
            End If
            If txt_tableplot.Text <> "" And txt_tableplot.Visible = True Then
                row.cells("plot").value = txt_tableplot.Text
            End If
            If txt_tablegenre.Text <> "" And txt_tablegenre.Visible = True Then
                row.cells("genre").value = txt_tablegenre.Text
            End If

            If Cmbobx_tablewatched.SelectedIndex <> 0 And Cmbobx_tablewatched.Visible = True Then
                If Cmbobx_tablewatched.SelectedIndex = 1 Then
                    row.cells("playcount").value = True
                ElseIf Cmbobx_tablewatched.SelectedIndex = 2 Then
                    row.cells("playcount").value = False
                End If
            End If
            If cmbobx_tablesets.SelectedItem <> "UnChanged" And cmbobx_tablesets.Visible = True Then
                row.cells("set").value = cmbobx_tablesets.SelectedItem
            End If
        Next
    End Sub

    Private Sub Button100_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button100.Click
        Try
            Call mov_TableUpdate()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub GoToSelectedMoviePosterSelectorToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles GoToSelectedMoviePosterSelectorToolStripMenuItem.Click
        Try
            Dim tempstring As String = ""
            For Each selecteditem In DataGridView1.SelectedRows
                tempstring = selecteditem.Cells("fullpathandfilename").Value
            Next
            For f = 0 To MovieListComboBox.Items.Count - 1
                If CType(MovieListComboBox.Items(f), ValueDescriptionPair).Value = tempstring Then
                    MovieListComboBox.SelectedItems.Clear()
                    MovieListComboBox.SelectedIndex = f
                    For Each tabs In TabControl2.TabPages
                        If tabs.text = "Posters" Then
                            currentTabIndex = tabs.tabindex + 1
                            Me.TabControl2.SelectedIndex = tabs.tabindex + 1
                            Exit For
                        End If
                    Next
                    Exit For
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub GoToSelectedMovieFanartSelectorToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles GoToSelectedMovieFanartSelectorToolStripMenuItem.Click
        Try
            Dim tempstring As String = ""
            For Each selecteditem In DataGridView1.SelectedRows
                tempstring = selecteditem.Cells("fullpathandfilename").Value
            Next
            For f = 0 To MovieListComboBox.Items.Count - 1
                If CType(MovieListComboBox.Items(f), ValueDescriptionPair).Value = tempstring Then
                    MovieListComboBox.SelectedItems.Clear()
                    MovieListComboBox.SelectedIndex = f
                    For Each tabs In TabControl2.TabPages
                        If tabs.text = "Fanart" Then
                            currentTabIndex = tabs.tabindex + 1
                            Me.TabControl2.SelectedIndex = tabs.tabindex + 1
                            Exit For
                        End If
                    Next
                    Exit For
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub SearchForNewEpisodesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SearchForNewEpisodesToolStripMenuItem.Click
        Try
            'If Not bckgroundscanepisodes.IsBusy Then
            '    'ToolStripButton10.Visible = True
            '    TabPage15.Text = "Cancel Episode Search"
            '    TabPage15.ToolTipText = "This cancels the episode search" & vbCrLf & "and episode scraper thread"
            '    showstoscrapelist.Clear()
            '    For Each item In basictvlist
            '        If (item.fullpath.ToLower.IndexOf("tvshow.nfo") <> -1) And (item.locked = 0) Then
            '            showstoscrapelist.Add(item.fullpath)
            '        End If
            '    Next
            '    bckgroundscanepisodes.RunWorkerAsync()
            'Else
            '    MsgBox("This TV Scraper is already running")
            'End If
            Call ep_Search()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_ScrapeSpecific(ByVal field As String)

        Try
            Dim frmProgSplash As New frmProgressScreen
            frmProgSplash.Text = "ReScraping Specific Field : " & field
            frmProgSplash.Label1.Text = ""
            frmProgSplash.Label1.Visible = True
            frmProgSplash.Label2.Visible = False
            frmProgSplash.ProgressBar1.Visible = True
            frmProgSplash.Show()



            Dim originalworking As String = workingMovieDetails.fileinfo.fullpathandfilename
            Dim list As New List(Of String)
            For Each selected In MovieListComboBox.SelectedItems
                list.Add(selected.value)
            Next

            'Dim mes As String = "Rescraping " & field & " for selected movies"

            'Dim messbox As New frmMessageBox("Please Wait", "", mes)
            'messbox.Show()
            'messbox.Refresh()
            'Application.DoEvents()

            frmProgSplash.ProgressBar1.Maximum = list.Count            'for user feedback - when only 1 movie, max is 2, we show prog @50% effect diminishes as count goes up

            Dim progcount As Integer = 0
            For Each ite In list
                progcount += 1


                frmProgSplash.ProgressBar1.Value = progcount
                frmProgSplash.ProgressBar1.Invalidate()

                Application.DoEvents()

                Dim process As Boolean = True
                For Each movie In filteredList                              'find matching movie to selected movie & load current values
                    If movie.fullpathandfilename = ite Then
                        frmProgSplash.Label1.Text = movie.title
                        frmProgSplash.Label1.Refresh()
                        If IO.File.Exists(movie.fullpathandfilename) Then       'if nfo exists, & workingMovie contains wrong data, reload data from memory
                            If workingMovie.fullpathandfilename <> movie.fullpathandfilename Then
                                workingMovieDetails = nfoFunction.mov_NfoLoadFull(movie.fullpathandfilename)
                                'workingMovie.filedate = movie.filedate
                                'workingMovie.filename = movie.foldername
                                'workingMovie.foldername = movie.foldername
                                'workingMovie.fullpathandfilename = movie.fullpathandfilename
                                'workingMovie.genre = movie.genre
                                'workingMovie.id = movie.id
                                'workingMovie.playcount = movie.playcount
                                'workingMovie.rating = movie.rating
                                'workingMovie.title = movie.title
                                'workingMovie.originaltitle = movie.originaltitle     'added 7/7/11 SK    these extras should be here I think?
                                'workingMovie.titleandyear = movie.titleandyear
                                'workingMovie.top250 = movie.top250
                                'workingMovie.year = movie.year
                                'workingMovie.plot = movie.plot            'added 7/7/11 SK
                                'workingMovie.movieset = movie.movieset  'added 7/7/11 SK
                                'workingMovie.createdate = movie.createdate  'added 7/7/11 SK
                                'workingMovie.missingdata1 = movie.missingdata1  'added 7/7/11 SK
                                'workingMovie.outline = movie.outline    'added 7/7/11 SK
                                'workingMovie.runtime = movie.runtime    'added 7/7/11 SK
                                'workingMovie.sortorder = movie.sortorder    'added 7/7/11 SK
                                'Call loadinfofile()                         'not sure why we call to display data when we will do it at end with new data
                            End If
                            Exit For
                        Else
                            process = False
                        End If
                    End If
                Next
                frmProgSplash.Activate()
                If process = True Then
                    Dim newnfo As Boolean = False
                    frmProgSplash.Label1.Text &= " - Scraping..."
                    frmProgSplash.Label1.Refresh()

                    If field <> "hdtags" And field <> "poster" And field <> "backdrop" And field <> "runtime_file" And field <> "actors" Then
                        '                    Dim scraper As New imdb.Classimdbscraper
                        Dim scraper As New Classimdb


                        Dim body As String
                        body = scraper.getimdbbody(workingMovieDetails.fullmoviebody.title, workingMovieDetails.fullmoviebody.year, workingMovieDetails.fullmoviebody.imdbid, Preferences.imdbmirror)
                        'Dim newscraper As New Classimdb
                        'body = newscraper.getimdbbody(workingmoviedetails.fullmoviebody.title, workingmoviedetails.fullmoviebody.year, workingmoviedetails.fullmoviebody.imdbid, Preferences.imdbmirror)
                        If body <> "MIC" Then
                            frmProgSplash.Label1.Text &= "OK!"
                            If field = "title" Then
                                workingMovieDetails.alternativetitles.Clear()
                            End If
                            Dim thumbstring As New XmlDocument
                            Dim thisresult As XmlNode = Nothing
                            thumbstring.LoadXml(body)
                            Dim certificates As New List(Of String)

                            For Each thisresult In thumbstring("movie")
                                Select Case thisresult.Name
                                    Case "title"
                                        If field = "title" Then
                                            If Preferences.keepfoldername = False Then
                                                workingMovieDetails.fullmoviebody.title = thisresult.InnerText
                                            Else
                                                If Preferences.usefoldernames = False Then
                                                    Dim tempstring
                                                    tempstring = IO.Path.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename)
                                                    workingMovieDetails.fullmoviebody.title = Utilities.CleanFileName(tempstring)
                                                Else
                                                    workingMovieDetails.fullmoviebody.title = Utilities.CleanFileName(workingMovieDetails.fileinfo.foldername)
                                                End If
                                            End If
                                        End If
                                    Case "alternativetitle"
                                        If field = "title" Then
                                            workingMovieDetails.alternativetitles.Add(thisresult.InnerText)
                                        End If
                                    Case "credits"
                                        If field = "credits" Then
                                            workingMovieDetails.fullmoviebody.credits = thisresult.InnerText
                                        End If
                                    Case "director"
                                        If field = "director" Then
                                            workingMovieDetails.fullmoviebody.director = thisresult.InnerText
                                        End If
                                    Case "stars"
                                        If field = "stars" Then
                                            workingMovieDetails.fullmoviebody.stars = thisresult.InnerText
                                        End If
                                    Case "genre"
                                        If field = "genre" Then
                                            Dim strarr() As String
                                            strarr = thisresult.InnerText.Split("/")
                                            For count = 0 To strarr.Length - 1
                                                strarr(count) = strarr(count).Replace(" ", "")
                                            Next
                                            If strarr.Length <= Preferences.maxmoviegenre Then
                                                workingMovieDetails.fullmoviebody.genre = thisresult.InnerText
                                            Else
                                                For f = 0 To Preferences.maxmoviegenre - 1
                                                    If f = 0 Then
                                                        workingMovieDetails.fullmoviebody.genre = strarr(f)
                                                    Else
                                                        workingMovieDetails.fullmoviebody.genre += " / " & strarr(f)
                                                    End If
                                                Next
                                            End If
                                        End If
                                    Case "mpaa"
                                        If field = "cert" Then
                                            workingMovieDetails.fullmoviebody.mpaa = thisresult.InnerText
                                        End If
                                    Case "outline"
                                        If field = "outline" Then
                                            workingMovieDetails.fullmoviebody.outline = thisresult.InnerText
                                        End If
                                    Case "plot"
                                        If field = "plot" Then
                                            workingMovieDetails.fullmoviebody.plot = thisresult.InnerText
                                        End If
                                    Case "rating"
                                        If field = "rating" Then
                                            workingMovieDetails.fullmoviebody.rating = thisresult.InnerText
                                        End If
                                    Case "runtime"
                                        If field = "runtime_imdb" Then
                                            workingMovieDetails.fullmoviebody.runtime = thisresult.InnerText
                                        End If
                                    Case "studio"
                                        If field = "studio" Then
                                            workingMovieDetails.fullmoviebody.studio = thisresult.InnerText
                                        End If
                                    Case "tagline"
                                        If field = "tagline" Then
                                            workingMovieDetails.fullmoviebody.tagline = thisresult.InnerText
                                        End If
                                    Case "votes"
                                        If field = "votes" Then
                                            workingMovieDetails.fullmoviebody.votes = thisresult.InnerText
                                        End If
                                    Case "year"
                                        workingMovieDetails.fullmoviebody.year = thisresult.InnerText
                                    Case "cert"
                                        If field = "cert" Then
                                            certificates.Add(thisresult.InnerText)
                                        End If
                                End Select
                            Next

                            ' If plot is empty, use outline
                            If workingMovieDetails.fullmoviebody.plot = "" Then workingMovieDetails.fullmoviebody.plot = workingMovieDetails.fullmoviebody.outline

                            If field = "cert" Then
                                Dim done As Boolean = False
                                For f = 0 To UBound(Preferences.certificatepriority)
                                    Try
                                        For Each cert In certificates
                                            If cert.IndexOf(Preferences.certificatepriority(f)) <> -1 Then
                                                workingMovieDetails.fullmoviebody.mpaa = cert.Substring(cert.IndexOf("|") + 1, cert.Length - cert.IndexOf("|") - 1)
                                                done = True
                                                Exit For
                                            End If
                                        Next
                                    Catch ex As Exception
#If SilentErrorScream Then
                                        Throw ex
#End If
                                    End Try
                                    If done = True Then Exit For
                                Next
                            End If
                        End If
                        nfoFunction.mov_NfoSave(workingMovieDetails.fileinfo.fullpathandfilename, workingMovieDetails, True)
                        newnfo = True
                        'Call loadinfofile()
                    ElseIf field = "hdtags" Or field = "runtime_file" Then
                        Try
                            frmProgSplash.Label1.Text &= " - Scraping..."
                            'Dim tempstring As String
                            Dim tempint As Integer = 0
                            Dim tempname As String = Utilities.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename)
                            Dim newfiledetails As New FullFileDetails
                            If tempname <> Nothing Then newfiledetails = Preferences.Get_HdTags(tempname)
                            If newfiledetails.filedetails_video.DurationInSeconds.Value <> Nothing Then
                                Try
                                    '1h 24mn 48s 546ms
                                    'frmProgSplash.Label1.Text &= "OK!"
                                    'Dim hours As Integer = 0
                                    'Dim minutes As Integer = 0
                                    'tempstring = newfiledetails.filedetails_video.DurationInSeconds.Value
                                    'tempint = tempstring.IndexOf("h")
                                    'If tempint <> -1 Then
                                    '    hours = Convert.ToInt32(tempstring.Substring(0, tempint))
                                    '    tempstring = tempstring.Substring(tempint + 1, tempstring.Length - (tempint + 1))
                                    '    tempstring = Trim(tempstring)
                                    'End If
                                    'tempint = tempstring.IndexOf("mn")
                                    'If tempint <> -1 Then
                                    '    minutes = Convert.ToInt32(tempstring.Substring(0, tempint))
                                    'End If
                                    'If hours <> 0 Then
                                    '    hours = hours * 60
                                    'End If
                                    'minutes = minutes + hours
                                    'If minutes = 0 Then
                                    '    If tempstring.IndexOf("min") <> -1 Then
                                    '        tempstring = tempstring.Replace("min", "")
                                    '        tempstring = tempstring.Replace(" ", "")
                                    '        If IsNumeric(tempstring) Then
                                    '            minutes = Convert.ToInt32(tempstring)
                                    '        End If
                                    '    End If
                                    'End If
                                    'If minutes = 0 Then
                                    '    If tempstring.IndexOf("min") <> -1 Then
                                    '        tempstring = tempstring.Replace("min", "")
                                    '        tempstring = tempstring.Replace(" ", "")
                                    '        If IsNumeric(tempstring) Then
                                    '            minutes = Convert.ToInt32(tempstring)
                                    '        End If
                                    '    End If
                                    'End If
                                    'If minutes <> 0 And field = "runtime_file" Then
                                    '    workingMovieDetails.fullmoviebody.runtime = minutes.ToString & " min"
                                    If field = "runtime_file" Then
                                        workingMovieDetails.fullmoviebody.runtime = Utilities.cleanruntime(newfiledetails.filedetails_video.DurationInSeconds.Value)
                                    End If
                                    If field = "hdtags" Then
                                        workingMovieDetails.filedetails = newfiledetails
                                    End If

                                Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                End Try
                            End If
                        Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                        End Try
                        nfoFunction.mov_NfoSave(workingMovieDetails.fileinfo.fullpathandfilename, workingMovieDetails, True)
                        newnfo = True
                        'Call loadinfofile()
                    ElseIf field = "actors" Then
                        frmProgSplash.Label1.Text &= " - Scraping..."
                        Dim actorlist As String
                        '                    Dim scraper As New imdb.Classimdbscraper
                        Dim scraper As New Classimdb
                        actorlist = scraper.getimdbactors(Preferences.imdbmirror, workingMovieDetails.fullmoviebody.imdbid, workingMovieDetails.fullmoviebody.title, Preferences.maxactors)
                        workingMovieDetails.listactors.Clear()
                        If actorlist <> Nothing Then
                            frmProgSplash.Label1.Text &= "OK!"

                            Dim tempstring As String
                            Dim thumbstring As New XmlDocument
                            Dim thisresult As XmlNode = Nothing
                            Try
                                thumbstring.LoadXml(actorlist)
                                thisresult = Nothing
                                For Each thisresult In thumbstring("actorlist")
                                    Select Case thisresult.Name
                                        Case "actor"
                                            Dim newactor As New str_MovieActors(SetDefaults)
                                            Dim detail As XmlNode = Nothing
                                            For Each detail In thisresult.ChildNodes
                                                Select Case detail.Name
                                                    Case "name"
                                                        newactor.actorname = detail.InnerText
                                                    Case "role"
                                                        newactor.actorrole = detail.InnerText
                                                    Case "thumb"
                                                        newactor.actorthumb = detail.InnerText
                                                    Case "actorid"
                                                        If newactor.actorthumb <> Nothing Then
                                                            If detail.InnerText <> "" And Preferences.actorseasy = True Then
                                                                Dim workingpath As String = workingMovieDetails.fileinfo.fullpathandfilename.Replace(IO.Path.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename), "")
                                                                workingpath = workingpath & ".actors\"
                                                                Dim hg As New IO.DirectoryInfo(workingpath)
                                                                Dim destsorted As Boolean = False
                                                                If Not hg.Exists Then
                                                                    Try
                                                                        IO.Directory.CreateDirectory(workingpath)
                                                                        destsorted = True
                                                                    Catch ex As Exception
#If SilentErrorScream Then
                                                                        Throw ex
#End If
                                                                    End Try
                                                                Else
                                                                    destsorted = True
                                                                End If
                                                                If destsorted = True Then
                                                                    Try
                                                                        Dim filename As String = newactor.actorname.Replace(" ", "_")
                                                                        filename = filename & ".tbn"
                                                                        filename = IO.Path.Combine(workingpath, filename)
                                                                        If Not IO.File.Exists(filename) Then
                                                                            Utilities.DownloadFile(newactor.actorthumb, filename)
                                                                            'Dim buffer(4000000) As Byte
                                                                            'Dim size As Integer = 0
                                                                            'Dim bytesRead As Integer = 0
                                                                            'Dim thumburl As String = newactor.actorthumb
                                                                            'Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                                                            'Dim res As HttpWebResponse = req.GetResponse()
                                                                            'Dim contents As Stream = res.GetResponseStream()
                                                                            'Dim bytesToRead As Integer = CInt(buffer.Length)
                                                                            'While bytesToRead > 0
                                                                            '    size = contents.Read(buffer, bytesRead, bytesToRead)
                                                                            '    If size = 0 Then Exit While
                                                                            '    bytesToRead -= size
                                                                            '    bytesRead += size
                                                                            'End While

                                                                            'Dim fstrm As New FileStream(filename, FileMode.OpenOrCreate, FileAccess.Write)
                                                                            'fstrm.Write(buffer, 0, bytesRead)
                                                                            'contents.Close()
                                                                            'fstrm.Close()
                                                                        End If
                                                                    Catch ex As Exception
#If SilentErrorScream Then
                                                                        Throw ex
#End If
                                                                    End Try
                                                                End If
                                                            End If
                                                            If Preferences.actorsave = True And detail.InnerText <> "" And Preferences.actorseasy = False Then
                                                                Dim workingpath As String = ""
                                                                Dim networkpath As String = Preferences.actorsavepath
                                                                Try
                                                                    tempstring = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2)
                                                                    Dim hg As New IO.DirectoryInfo(tempstring)
                                                                    If Not hg.Exists Then
                                                                        IO.Directory.CreateDirectory(tempstring)
                                                                    End If
                                                                    workingpath = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                                    If Not IO.File.Exists(workingpath) Then
                                                                        Utilities.DownloadFile(newactor.actorthumb, workingpath)
                                                                        'Dim buffer(4000000) As Byte
                                                                        'Dim size As Integer = 0
                                                                        'Dim bytesRead As Integer = 0
                                                                        'Dim thumburl As String = newactor.actorthumb
                                                                        'Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                                                        'Dim res As HttpWebResponse = req.GetResponse()
                                                                        'Dim contents As Stream = res.GetResponseStream()
                                                                        'Dim bytesToRead As Integer = CInt(buffer.Length)
                                                                        'While bytesToRead > 0
                                                                        '    size = contents.Read(buffer, bytesRead, bytesToRead)
                                                                        '    If size = 0 Then Exit While
                                                                        '    bytesToRead -= size
                                                                        '    bytesRead += size
                                                                        'End While

                                                                        'Dim fstrm As New FileStream(workingpath, FileMode.OpenOrCreate, FileAccess.Write)
                                                                        'fstrm.Write(buffer, 0, bytesRead)
                                                                        'contents.Close()
                                                                        'fstrm.Close()
                                                                    End If
                                                                    newactor.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, detail.InnerText & ".jpg")
                                                                Catch ex As Exception
#If SilentErrorScream Then
                                                                    Throw ex
#End If
                                                                End Try
                                                            End If
                                                        End If
                                                End Select
                                            Next
                                            workingMovieDetails.listactors.Add(newactor)
                                            Dim actornew As New str_ActorDatabase(SetDefaults)
                                            actornew.actorname = newactor.actorname
                                            actornew.movieid = workingMovieDetails.fullmoviebody.imdbid
                                            actorDB.Add(actornew)
                                    End Select
                                Next
                            Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                            End Try
                            nfoFunction.mov_NfoSave(workingMovieDetails.fileinfo.fullpathandfilename, workingMovieDetails, True)
                            newnfo = True
                            'Call loadinfofile()
                        End If






                    End If
                    If newnfo = True Then
                        For f = 0 To fullMovieList.Count - 1
                            If fullMovieList(f).fullpathandfilename = workingMovieDetails.fileinfo.fullpathandfilename Then

                                Dim newfullmovie As New str_ComboList(SetDefaults) 'added new to initialise varibles in structure
                                newfullmovie = fullMovieList(f)
                                '-------------- Aqui
                                If Preferences.ignorearticle = True Then
                                    If workingMovieDetails.fullmoviebody.title.ToLower.IndexOf("the ") = 0 Then
                                        newfullmovie.titleandyear = workingMovieDetails.fullmoviebody.title.Substring(4, workingMovieDetails.fullmoviebody.title.Length - 4) & ", The" & " (" & workingMovieDetails.fullmoviebody.year & ")"
                                    Else
                                        newfullmovie.titleandyear = workingMovieDetails.fullmoviebody.title & " (" & workingMovieDetails.fullmoviebody.year & ")"
                                    End If
                                Else
                                    newfullmovie.titleandyear = workingMovieDetails.fullmoviebody.title & " (" & workingMovieDetails.fullmoviebody.year & ")"
                                End If
                                newfullmovie.genre = workingMovieDetails.fullmoviebody.genre
                                Dim filecreation2 As New IO.FileInfo(workingMovieDetails.fileinfo.fullpathandfilename)
                                Dim myDate2 As Date = filecreation2.LastWriteTime
                                Try
                                    newfullmovie.filedate = Format(myDate2, "yyyyMMddHHmmss").ToString
                                Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                End Try
                                If workingMovieDetails.fileinfo.createdate <> Nothing Then
                                    newfullmovie.createdate = workingMovieDetails.fileinfo.createdate
                                ElseIf workingMovieDetails.fileinfo.createdate <> "" Then
                                    newfullmovie.createdate = workingMovieDetails.fileinfo.createdate = workingMovieDetails.fileinfo.createdate
                                Else
                                    newfullmovie.createdate = newfullmovie.filedate
                                End If
                                newfullmovie.outline = workingMovieDetails.fullmoviebody.outline
                                newfullmovie.playcount = workingMovieDetails.fullmoviebody.playcount
                                newfullmovie.rating = workingMovieDetails.fullmoviebody.rating
                                newfullmovie.top250 = workingMovieDetails.fullmoviebody.top250
                                newfullmovie.runtime = workingMovieDetails.fullmoviebody.runtime
                                If workingMovieDetails.fullmoviebody.sortorder = Nothing Then
                                    workingMovieDetails.fullmoviebody.sortorder = newfullmovie.title
                                End If
                                If workingMovieDetails.fullmoviebody.sortorder = "" Then
                                    workingMovieDetails.fullmoviebody.sortorder = newfullmovie.title
                                End If
                                fullMovieList.RemoveAt(f)
                                fullMovieList.Add(newfullmovie)
                                Exit For
                            End If
                        Next
                    End If
                End If
            Next
            mov_FiltersAndSortApply()
            Call mov_FormPopulate()
            frmProgSplash.Close()
            'messbox.Close()
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        Finally
            ' MsgBox("There was an error during specific rescrape of movie field : " & field)
        End Try
    End Sub

    Private Sub ToolStripMenuItem3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem3.Click
        Try
            Call mov_ScrapeSpecific("title")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem4.Click
        Try
            Call mov_ScrapeSpecific("plot")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem5.Click
        Try
            Call mov_ScrapeSpecific("tagline")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem6.Click
        Try
            Call mov_ScrapeSpecific("director")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem7.Click
        Try
            Call mov_ScrapeSpecific("credits")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem8.Click
        Try
            Call mov_ScrapeSpecific("cert")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem9.Click
        Try
            Call mov_ScrapeSpecific("genre")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem10_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem10.Click
        Try
            Call mov_ScrapeSpecific("outline")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem12_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem12.Click
        Try
            Call mov_ScrapeSpecific("runtime_imdb")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem13_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem13.Click
        Try
            Call mov_ScrapeSpecific("runtime_file")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem14_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem14.Click
        Try
            Call mov_ScrapeSpecific("studio")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem15_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem15.Click
        Try
            Call mov_ScrapeSpecific("actors")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem16_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem16.Click
        Try
            Call mov_ScrapeSpecific("backdrop")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem17_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem17.Click
        Try
            Call mov_ScrapeSpecific("poster")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem18_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem18.Click
        Try
            Call mov_ScrapeSpecific("hdtags")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem19_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem19.Click
        Try
            Call mov_ScrapeSpecific("rating")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem20_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem20.Click
        Try
            Call mov_ScrapeSpecific("votes")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem21_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem21.Click
        Try
            Call mov_ScrapeSpecific("stars")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub YearToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles YearToolStripMenuItem.Click
        Try
            Call mov_ScrapeSpecific("year")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub PictureBox7_MouseEnter(ByVal sender As Object, ByVal e As System.EventArgs) Handles PictureBox7.MouseEnter
        Try
            RescrapePToolStripMenuItem.Visible = False
            RescrapePosterFromTMDBToolStripMenuItem.Visible = False
            RescraToolStripMenuItem.Visible = False
            PeToolStripMenuItem.Visible = False
            DownloadPosterToolStripMenuItem.Visible = False
            DownloadPosterFromTMDBToolStripMenuItem.Visible = False
            DownloadPosterFromMPDBToolStripMenuItem.Visible = False
            DownloadPosterFromIMDBToolStripMenuItem.Visible = False
            RescrapeFanartToolStripMenuItem.Visible = False
            DownloadFanartToolStripMenuItem.Visible = False
            Try
                If IO.File.Exists(Preferences.GetFanartPath(workingMovieDetails.fileinfo.fullpathandfilename)) Then
                    RescrapeFanartToolStripMenuItem.Visible = True
                Else
                    DownloadFanartToolStripMenuItem.Visible = True
                End If
            Catch
                RescrapePToolStripMenuItem.Visible = False
                RescrapeFanartToolStripMenuItem.Visible = False
                DownloadFanartToolStripMenuItem.Visible = False
                DownloadPosterToolStripMenuItem.Visible = False
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub moviethumb_MouseEnter(ByVal sender As Object, ByVal e As System.EventArgs) Handles moviethumb.MouseEnter
        Try
            RescrapePToolStripMenuItem.Visible = False
            RescrapePosterFromTMDBToolStripMenuItem.Visible = False
            RescraToolStripMenuItem.Visible = False
            PeToolStripMenuItem.Visible = False
            DownloadPosterToolStripMenuItem.Visible = False
            DownloadPosterFromTMDBToolStripMenuItem.Visible = False
            DownloadPosterFromMPDBToolStripMenuItem.Visible = False
            DownloadPosterFromIMDBToolStripMenuItem.Visible = False
            RescrapeFanartToolStripMenuItem.Visible = False
            DownloadFanartToolStripMenuItem.Visible = False
            Try
                If IO.File.Exists(Preferences.GetPosterPath(workingMovieDetails.fileinfo.fullpathandfilename)) Then
                    RescrapePToolStripMenuItem.Visible = True
                    RescrapePosterFromTMDBToolStripMenuItem.Visible = True
                    RescraToolStripMenuItem.Visible = True
                    PeToolStripMenuItem.Visible = True
                Else
                    DownloadPosterToolStripMenuItem.Visible = True
                    DownloadPosterFromTMDBToolStripMenuItem.Visible = True
                    DownloadPosterFromMPDBToolStripMenuItem.Visible = True
                    DownloadPosterFromIMDBToolStripMenuItem.Visible = True
                End If
            Catch
                RescrapePToolStripMenuItem.Visible = False
                RescrapePosterFromTMDBToolStripMenuItem.Visible = False
                RescraToolStripMenuItem.Visible = False
                PeToolStripMenuItem.Visible = False
                DownloadPosterToolStripMenuItem.Visible = False
                DownloadPosterFromTMDBToolStripMenuItem.Visible = False
                DownloadPosterFromMPDBToolStripMenuItem.Visible = False
                DownloadPosterFromIMDBToolStripMenuItem.Visible = False
                RescrapeFanartToolStripMenuItem.Visible = False
                DownloadFanartToolStripMenuItem.Visible = False
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub
    'rescrape fanart
    Private Sub RescrapeFanartToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RescrapeFanartToolStripMenuItem.Click
        Try
            'rescrape fanart
            Call mov_FanartGet()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DownloadFanartToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DownloadFanartToolStripMenuItem.Click
        Try
            'download fanart
            Call mov_FanartGet()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_FanartGet()
        Dim messbox As New frmMessageBox("      Pleas Wait,", "", "Attempting to download Fanart")
        messbox.Show()
        messbox.Refresh()
        Application.DoEvents()
        Dim backpath As String = ""
        If Not workingMovieDetails Is Nothing Then
            If workingMovieDetails.fileinfo.fullpathandfilename <> Nothing Then
                If workingMovieDetails.fileinfo.fullpathandfilename <> "" Then
                    backpath = Preferences.GetFanartPath(workingMovieDetails.fileinfo.fullpathandfilename)
                End If
            End If
        End If
        If backpath <> "" Then
            Dim moviethumburl As String = String.Empty
            Try
                Dim temp As String = workingMovieDetails.fullmoviebody.imdbid

                Dim fanarturl As String = "http://api.themoviedb.org/2.1/Movie.imdbLookup/en/xml/3f026194412846e530a208cf8a39e9cb/" & temp
                Dim apple2(2000) As String
                Dim fanartlinecount As Integer = 0
                Try
                    Dim wrGETURL As WebRequest
                    wrGETURL = WebRequest.Create(fanarturl)
                    Dim myProxy As New WebProxy("myproxy", 80)
                    myProxy.BypassProxyOnLocal = True
                    Dim objStream As Stream
                    objStream = wrGETURL.GetResponse.GetResponseStream()
                    Dim objReader As New StreamReader(objStream)
                    Dim sLine As String = ""
                    fanartlinecount = 0
                    Do While Not sLine Is Nothing
                        fanartlinecount += 1
                        sLine = objReader.ReadLine
                        apple2(fanartlinecount) = sLine
                    Loop
                    fanartlinecount -= 1
                    Dim fanartfound As Boolean = False
                    For g = 1 To fanartlinecount
                        If apple2(g).IndexOf("<image type=""backdrop""") <> -1 Then
                            If apple2(g).IndexOf("size=""original""") <> -1 Then
                                Dim StartofURL As Integer = apple2(g).IndexOf("url=""") + 5
                                Dim EndofURL As Integer = apple2(g).IndexOf("size=""original""") - 2
                                apple2(g) = apple2(g).Substring(StartofURL, (EndofURL - StartofURL))
                                apple2(g) = apple2(g).Trim
                                If apple2(g).ToLower.IndexOf("http") <> -1 And apple2(g).ToLower.IndexOf(".jpg") <> -1 Or apple2(g).IndexOf(".jpeg") <> -1 Or apple2(g).IndexOf(".png") <> -1 Then
                                    moviethumburl = apple2(g)
                                    fanartfound = True
                                End If
                            End If
                            Exit For
                        End If
                    Next
                    If fanartfound = False Then moviethumburl = ""
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try

                If moviethumburl <> "" Then
                    Try
                        'Utilities.DownloadFile(moviethumburl, bmp)
                        Dim buffer(4000000) As Byte
                        Dim size As Integer = 0
                        Dim bytesRead As Integer = 0

                        Dim thumburl As String = moviethumburl
                        Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                        Dim res As HttpWebResponse = req.GetResponse()
                        Dim contents As Stream = res.GetResponseStream()
                        Dim bytesToRead As Integer = CInt(buffer.Length)
                        Dim bmp As New Bitmap(contents)



                        While bytesToRead > 0
                            size = contents.Read(buffer, bytesRead, bytesToRead)
                            If size = 0 Then Exit While
                            bytesToRead -= size
                            bytesRead += size
                        End While



                        If Preferences.resizefanart = 1 Then
                            bmp.Save(backpath, Imaging.ImageFormat.Jpeg)
                            scraperLog = scraperLog & "Fanart not resized" & vbCrLf
                        ElseIf Preferences.resizefanart = 2 Then
                            If bmp.Width > 1280 Or bmp.Height > 720 Then
                                Dim bm_source As New Bitmap(bmp)
                                Dim bm_dest As New Bitmap(1280, 720)
                                Dim gr As Graphics = Graphics.FromImage(bm_dest)
                                gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                                gr.DrawImage(bm_source, 0, 0, 1280 - 1, 720 - 1)
                                bm_dest.Save(backpath, Imaging.ImageFormat.Jpeg)
                                scraperLog = scraperLog & "Farart Resized to 1280x720" & vbCrLf
                            Else
                                scraperLog = scraperLog & "Fanart not resized, already =< required size" & vbCrLf
                                bmp.Save(backpath, Imaging.ImageFormat.Jpeg)
                            End If
                        ElseIf Preferences.resizefanart = 3 Then
                            If bmp.Width > 960 Or bmp.Height > 540 Then
                                Dim bm_source As New Bitmap(bmp)
                                Dim bm_dest As New Bitmap(960, 540)
                                Dim gr As Graphics = Graphics.FromImage(bm_dest)
                                gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                                gr.DrawImage(bm_source, 0, 0, 960 - 1, 540 - 1)
                                bm_dest.Save(backpath, Imaging.ImageFormat.Jpeg)
                                scraperLog = scraperLog & "Farart Resized to 960x540" & vbCrLf
                            Else
                                scraperLog = scraperLog & "Fanart not resized, already =< required size" & vbCrLf
                                bmp.Save(backpath, Imaging.ImageFormat.Jpeg)
                            End If

                        End If
                        If IO.File.Exists(backpath) Then
                            For Each paths In Preferences.offlinefolders
                                Dim offlinepath As String = paths & "\"
                                If workingMovieDetails.fileinfo.fanartpath.IndexOf(offlinepath) <> -1 Then
                                    Dim mediapath As String
                                    mediapath = Utilities.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename)
                                    Call mov_OfflineDvdProcess(workingMovieDetails.fileinfo.fullpathandfilename, workingMovieDetails.fullmoviebody.title, mediapath)
                                End If
                            Next
                            Dim bitmap3 As New Bitmap(backpath)
                            Dim bmp4 As New Bitmap(bitmap3)
                            bitmap3.Dispose()
                            PictureBox7.Image = bmp4
                            PictureBox2.Image = bmp4
                        End If
                    Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                    End Try
                Else
                    MsgBox("No Fanart Found on TMDB")
                End If
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
        End If
        messbox.Close()
    End Sub
    'Rescrape Poster
    Private Sub RescrapePToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RescrapePToolStripMenuItem.Click
        Try
            'rescrape poster IMPA
            mov_PosterGet("impa")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RescrapePosterFromTMDBToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RescrapePosterFromTMDBToolStripMenuItem.Click
        Try
            'rescrape poster tmdb
            mov_PosterGet("tmdb")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RescraToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RescraToolStripMenuItem.Click
        Try
            'rescrape poster mpdb
            mov_PosterGet("mpdb")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub PeToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PeToolStripMenuItem.Click
        Try
            'rescrape poster imdb
            mov_PosterGet("imdb")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DownloadPosterToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DownloadPosterToolStripMenuItem.Click
        Try
            'downloadposter impa
            mov_PosterGet("impa")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DownloadPosterFromTMDBToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DownloadPosterFromTMDBToolStripMenuItem.Click
        Try
            'downloadposter tmdb
            mov_PosterGet("tmdb")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DownloadPosterFromMPDBToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DownloadPosterFromMPDBToolStripMenuItem.Click
        Try
            'downloadposter mpdb
            mov_PosterGet("mpdb")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DownloadPosterFromIMDBToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DownloadPosterFromIMDBToolStripMenuItem.Click
        Try
            'downloadposter imdb
            mov_PosterGet("imdb")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_PosterGet(ByVal source As String)
        Try
            Dim messbox As New frmMessageBox("          Pleas Wait,", "", "Attempting to download Poster from " & source.ToUpper)
            messbox.Show()
            messbox.Refresh()
            Application.DoEvents()
            Dim posterpath As String = ""
            If Not workingMovieDetails Is Nothing Then
                If workingMovieDetails.fileinfo.fullpathandfilename <> Nothing Then
                    If workingMovieDetails.fileinfo.fullpathandfilename <> "" Then
                        posterpath = Preferences.GetPosterPath(workingMovieDetails.fileinfo.fullpathandfilename)
                    End If
                End If
            End If

            If posterpath <> "" Then
                Dim moviethumburl As String = ""
                If source = "impa" Then
                    If workingMovieDetails.fullmoviebody.title <> "" And workingMovieDetails.fullmoviebody.year <> "" Then
                        moviethumburl = scraperFunction2.impathumb(workingMovieDetails.fullmoviebody.title, workingMovieDetails.fullmoviebody.year)
                    End If
                ElseIf source = "tmdb" Then
                    If workingMovieDetails.fullmoviebody.imdbid <> "" Then
                        moviethumburl = scraperFunction2.tmdbthumb(workingMovieDetails.fullmoviebody.imdbid)
                    End If
                ElseIf source = "mpdb" Then
                    If workingMovieDetails.fullmoviebody.imdbid <> "" Then
                        moviethumburl = scraperFunction2.mpdbthumb(workingMovieDetails.fullmoviebody.imdbid)
                    End If
                ElseIf source = "imdb" Then
                    If workingMovieDetails.fullmoviebody.imdbid <> "" Then
                        moviethumburl = scraperFunction2.imdbthumb(workingMovieDetails.fullmoviebody.imdbid)
                    End If
                End If

                If moviethumburl <> "" And moviethumburl <> "na" Then
                    Try
                        'Utilities.DownloadFile(moviethumburl, buffer)
                        Dim buffer(4000000) As Byte
                        Dim size As Integer = 0
                        Dim bytesRead As Integer = 0
                        Dim thumburl As String = moviethumburl
                        Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                        Dim res As HttpWebResponse = req.GetResponse()
                        Dim contents As Stream = res.GetResponseStream()
                        Dim bytesToRead As Integer = CInt(buffer.Length)
                        While bytesToRead > 0
                            size = contents.Read(buffer, bytesRead, bytesToRead)
                            If size = 0 Then Exit While
                            bytesToRead -= size
                            bytesRead += size
                        End While
                        Dim fstrm As New FileStream(posterpath, FileMode.OpenOrCreate, FileAccess.Write)
                        fstrm.Write(buffer, 0, bytesRead)
                        contents.Close()
                        fstrm.Close()

                        Dim temppath As String = posterpath.Replace(System.IO.Path.GetFileName(posterpath), "folder.jpg")
                        If Preferences.createfolderjpg = True Then
                            If Preferences.overwritethumbs = True Or System.IO.File.Exists(temppath) = False Then
                                Dim fstrm2 As New FileStream(temppath, FileMode.OpenOrCreate, FileAccess.Write)
                                fstrm2.Write(buffer, 0, bytesRead)
                                contents.Close()
                                fstrm2.Close()
                            End If
                        End If
                    Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                    End Try
                    Dim bitmap3 As New Bitmap(posterpath)
                    Dim bmp4 As New Bitmap(bitmap3)
                    bitmap3.Dispose()
                    PictureBox3.Image = bmp4
                    moviethumb.Image = bmp4


                    Dim bitmap5 As New Bitmap(posterpath)
                    Dim bitmap6 As New Bitmap(bitmap5)
                    bitmap5.Dispose()
                    Dim bm_source As New Bitmap(bitmap6)
                    Dim bm_dest As New Bitmap(150, 200)
                    Dim gr As Graphics = Graphics.FromImage(bm_dest)
                    gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                    gr.DrawImage(bm_source, 0, 0, 150 - 1, 200 - 1)
                    Dim tempbitmap As Bitmap = bm_dest
                    Dim path As String = IO.Path.Combine(applicationPath, "settings\postercache\" & workingMovieDetails.fullmoviebody.imdbid & ".jpg")
                    tempbitmap.Save(path, Imaging.ImageFormat.Jpeg)
                    tempbitmap.Dispose()

                    For Each poster As PictureBox In TabPage22.Controls
                        If poster.Tag = workingMovieDetails.fileinfo.fullpathandfilename Then
                            poster.ImageLocation = IO.Path.Combine(applicationPath, "settings\postercache\" & workingMovieDetails.fullmoviebody.imdbid & ".jpg")
                            poster.Load()
                            Exit For
                        End If
                    Next
                Else
                    MsgBox("Unable to obtain a Poster from " & source.ToUpper)
                End If
            End If
            messbox.Close()
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        Finally

        End Try

    End Sub

    Private Sub mov_OfflineDvdProcess(ByVal nfopath As String, ByVal title As String, ByVal mediapath As String)
        Dim tempint2 As Integer = 2097152
        Dim SizeOfFile As Integer = FileLen(mediapath)
        If SizeOfFile > tempint2 Then
            Exit Sub
        End If
        Try
            Dim fanartpath As String = ""
            If IO.File.Exists(Preferences.GetFanartPath(nfopath)) Then
                fanartpath = Preferences.GetFanartPath(nfopath)
            Else
                fanartpath = defaultOfflineArt
            End If
            Dim curImage As Image = Image.FromFile(fanartpath)
            'Dim tempstring As String = "Please Insert '" & title & "' DVD"

            Dim tempstring As String = TextBox_OfflineDVDTitle.Text.Replace("%T", title)

            Dim g As System.Drawing.Graphics

            g = Graphics.FromImage(curImage)
            Dim semiTransBrush As New SolidBrush(Color.FromArgb(80, 0, 0, 0))

            Dim drawString As String = tempstring

            Dim drawFont As New System.Drawing.Font("Arial", 40)
            Dim drawBrush As New SolidBrush(Color.White)

            Dim StringSize As New SizeF
            StringSize = g.MeasureString(drawString, drawFont)
            Dim width As Single = StringSize.Width + 5
            Dim height As Single = StringSize.Height + 5



            If height < (curImage.Height / 100) * 8 Then
                Do
                    Dim newsize As Integer = drawFont.Size + 1
                    drawFont = New System.Drawing.Font("Arial", newsize)
                    StringSize = g.MeasureString(drawString, drawFont)
                    height = StringSize.Height
                Loop Until height > (curImage.Height / 100) * 8
            End If
            If height > (curImage.Height / 100) * 8 Then
                Do
                    Dim newsize As Integer = drawFont.Size - 1
                    drawFont = New System.Drawing.Font("Arial", newsize)
                    StringSize = g.MeasureString(drawString, drawFont)
                    height = StringSize.Height
                Loop Until height < (curImage.Height / 100) * 8
            End If
            StringSize = g.MeasureString(drawString, drawFont)
            width = StringSize.Width
            height = StringSize.Height
            If width > curImage.Width - 30 Then
                Do
                    Dim newsize As Integer = drawFont.Size - 1
                    drawFont = New System.Drawing.Font("Arial", newsize)
                    StringSize = g.MeasureString(drawString, drawFont)
                    width = StringSize.Width + 20
                Loop Until width < curImage.Width - 30
            End If
            StringSize = g.MeasureString(drawString, drawFont)
            width = StringSize.Width + 5
            height = StringSize.Height + 5
            Dim x As Integer = (curImage.Width / 2) - (width / 2)
            Dim y As Integer = (curImage.Height - StringSize.Height) - ((curImage.Height / 100) * 2)
            Dim drawRect As New RectangleF(x, y, width, height)


            g.FillRectangle(semiTransBrush, New Rectangle(x, y, width, height))

            Dim drawFormat As New StringFormat
            drawFormat.Alignment = StringAlignment.Center

            g.DrawString(drawString, drawFont, drawBrush, drawRect, drawFormat)
            For f = 1 To 16
                Dim path As String
                If f < 10 Then
                    path = applicationPath & "\Settings\00" & f.ToString & ".jpg"
                Else
                    path = applicationPath & "\Settings\0" & f.ToString & ".jpg"
                End If
                curImage.Save(path, Drawing.Imaging.ImageFormat.Jpeg)
            Next

            Dim myProcess As Process = New Process
            myProcess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden
            myProcess.StartInfo.CreateNoWindow = False
            myProcess.StartInfo.FileName = applicationPath & "\Assets\ffmpeg.exe"
            Dim proc_arguments As String = "-r 1 -b 1800 -qmax 6 -i """ & applicationPath & "\Settings\%03d.jpg"" -vcodec msmpeg4v2 """ & mediapath & """"
            myProcess.StartInfo.Arguments = proc_arguments
            myProcess.Start()
            myProcess.WaitForExit()

            For f = 1 To 16
                Dim tempstring4 As String
                If f < 10 Then
                    tempstring4 = applicationPath & "\Settings\00" & f.ToString & ".jpg"
                Else
                    tempstring4 = applicationPath & "\Settings\0" & f.ToString & ".jpg"
                End If
                Try
                    IO.File.Delete(tempstring4)
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
            Next
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
    End Sub

    Private Sub Button102_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button102.Click
        Try
            'add offline movie folder browser
            Dim allok As Boolean = True
            Dim theFolderBrowser As New FolderBrowserDialog
            Dim thefoldernames As String
            theFolderBrowser.Description = "Please Select a Root Offline DVD Folder to Add to DB"
            theFolderBrowser.ShowNewFolderButton = True
            theFolderBrowser.RootFolder = System.Environment.SpecialFolder.Desktop
            theFolderBrowser.SelectedPath = Preferences.lastpath
            If theFolderBrowser.ShowDialog = Windows.Forms.DialogResult.OK Then
                thefoldernames = (theFolderBrowser.SelectedPath)
                Preferences.lastpath = thefoldernames
                For Each item As Object In ListBox15.Items
                    If thefoldernames.ToString = item.ToString Then allok = False
                Next

                If allok = True Then
                    ListBox15.Items.Add(thefoldernames)
                    ListBox15.Refresh()
                Else
                    MsgBox("        Folder Already Exists")
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button101_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button101.Click
        Try
            'remove selected offline movie folders
            While ListBox15.SelectedItems.Count > 0
                ListBox15.Items.Remove(ListBox15.SelectedItems(0))
            End While
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox33_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox33.CheckedChanged
        Try
            If CheckBox33.Checked = True Then
                Preferences.actorseasy = True
            Else
                Preferences.actorseasy = False
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox34_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox34.CheckedChanged
        Try
            If CheckBox34.Checked = True Then
                Preferences.copytvactorthumbs = True
            Else
                Preferences.copytvactorthumbs = False
            End If
            If prefsload = False Then generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button103_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button103.Click
        Try
            If SplitContainer4.Orientation = Orientation.Horizontal Then
                SplitContainer4.Orientation = Orientation.Vertical
            Else
                SplitContainer4.Orientation = Orientation.Horizontal
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    '    Private Sub DownloadAvaileableMissingArtForShowToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DownloadAvaileableMissingArtForShowToolStripMenuItem.Click
    '        Dim messbox As New frmMessageBox("Attempting to download art", "", "       Please Wait")
    '        messbox.Show()
    '        messbox.Refresh()
    '        Application.DoEvents()
    '        Try
    '            templanguage = Preferences.tvdblanguagecode
    '            'Dim tvdbstuff As New TVDB.tvdbscraper 'commented because of removed TVDB.dll
    '            Dim tvdbstuff As New TVDBScraper
    '            Dim showlist As New XmlDocument
    '            Dim thumblist As String = tvdbstuff.getposterlist(workingTvShow.tvdbid)
    '            showlist.LoadXml(thumblist)
    '            Dim thisresult As XmlNode = Nothing
    '            Dim artlist As New List(Of TvBanners)
    '            artlist.Clear()
    '            For Each thisresult In showlist("banners")
    '                Select Case thisresult.Name
    '                    Case "banner"
    '                        Dim individualposter As New TvBanners
    '                        For Each results In thisresult.ChildNodes
    '                            Select Case results.Name
    '                                Case "url"
    '                                    individualposter.url = results.InnerText
    '                                Case "bannertype"
    '                                    individualposter.bannerType = results.InnerText
    '                                Case "resolution"
    '                                    individualposter.resolution = results.InnerText
    '                                Case "language"
    '                                    individualposter.language = results.InnerText
    '                                Case "season"
    '                                    individualposter.season = results.InnerText
    '                            End Select
    '                        Next
    '                        artlist.Add(individualposter)
    '                End Select
    '            Next
    '            If artlist.Count = 0 Then
    '                Exit Sub
    '            End If
    '            For f = 0 To 1000
    '                Dim seasonposter As String = ""
    '                For Each Image In artlist
    '                    If Image.season = f.ToString And Image.language = templanguage Then
    '                        seasonposter = Image.url
    '                        Exit For
    '                    End If
    '                Next
    '                If seasonposter = "" Then
    '                    For Each Image In artlist
    '                        If Image.season = f.ToString And Image.language = "en" Then
    '                            seasonposter = Image.url
    '                            Exit For
    '                        End If
    '                    Next
    '                End If
    '                If seasonposter = "" Then
    '                    For Each Image In artlist
    '                        If Image.season = f.ToString Then
    '                            seasonposter = Image.url
    '                            Exit For
    '                        End If
    '                    Next
    '                End If
    '                Dim tempstring As String = ""
    '                If seasonposter <> "" Then
    '                    If f < 10 Then
    '                        tempstring = "0" & f.ToString
    '                    Else
    '                        tempstring = f.ToString
    '                    End If
    '                    Dim seasonpath As String = workingTvShow.path.Replace(IO.Path.GetFileName(workingTvShow.path), "season" & tempstring & ".tbn")
    '                    If tempstring = "00" Then
    '                        seasonpath = workingTvShow.path.Replace(IO.Path.GetFileName(workingTvShow.path), "season-specials.tbn")
    '                    End If
    '                    If Not IO.File.Exists(seasonpath) Then
    '                        Try
    '                            Dim buffer(4000000) As Byte
    '                            Dim size As Integer = 0
    '                            Dim bytesRead As Integer = 0
    '                            Dim thumburl As String = seasonposter
    '                            Dim req As HttpWebRequest = WebRequest.Create(thumburl)
    '                            Dim res As HttpWebResponse = req.GetResponse()
    '                            Dim contents As Stream = res.GetResponseStream()
    '                            Dim bytesToRead As Integer = CInt(buffer.Length)
    '                            While bytesToRead > 0
    '                                size = contents.Read(buffer, bytesRead, bytesToRead)
    '                                If size = 0 Then Exit While
    '                                bytesToRead -= size
    '                                bytesRead += size
    '                            End While
    '                            Dim fstrm As New FileStream(seasonpath, FileMode.OpenOrCreate, FileAccess.Write)
    '                            fstrm.Write(buffer, 0, bytesRead)
    '                            contents.Close()
    '                            fstrm.Close()
    '                        Catch ex As WebException
    '#If SilentErrorScream Then
    '                            Throw ex
    '#End If
    '                        End Try
    '                    End If
    '                End If
    '            Next
    '            Dim fanartposter As String
    '            fanartposter = ""
    '            For Each Image In artlist
    '                If Image.language = templanguage And Image.bannerType = "fanart" Then
    '                    fanartposter = Image.url
    '                    Exit For
    '                End If
    '            Next
    '            If fanartposter = "" Then
    '                For Each Image In artlist
    '                    If Image.language = "en" And Image.bannerType = "fanart" Then
    '                        fanartposter = Image.url
    '                        Exit For
    '                    End If
    '                Next
    '            End If
    '            If fanartposter = "" Then
    '                For Each Image In artlist
    '                    If Image.bannerType = "fanart" Then
    '                        fanartposter = Image.url
    '                        Exit For
    '                    End If
    '                Next
    '            End If
    '            If fanartposter <> "" Then

    '                Dim seasonpath As String = workingTvShow.path.Replace(IO.Path.GetFileName(workingTvShow.path), "fanart.jpg")
    '                If Not IO.File.Exists(seasonpath) Then
    '                    Try
    '                        Dim buffer(4000000) As Byte
    '                        Dim size As Integer = 0
    '                        Dim bytesRead As Integer = 0

    '                        Dim thumburl As String = fanartposter
    '                        Dim req As HttpWebRequest = WebRequest.Create(thumburl)
    '                        Dim res As HttpWebResponse = req.GetResponse()
    '                        Dim contents As Stream = res.GetResponseStream()
    '                        Dim bytesToRead As Integer = CInt(buffer.Length)
    '                        Dim bmp As New Bitmap(contents)



    '                        While bytesToRead > 0
    '                            size = contents.Read(buffer, bytesRead, bytesToRead)
    '                            If size = 0 Then Exit While
    '                            bytesToRead -= size
    '                            bytesRead += size
    '                        End While


    '                        Try
    '                            If Preferences.resizefanart = 1 Then
    '                                bmp.Save(seasonpath, Imaging.ImageFormat.Jpeg)
    '                                scraperLog = scraperLog & "Fanart not resized" & vbCrLf
    '                            ElseIf Preferences.resizefanart = 2 Then
    '                                If bmp.Width > 1280 Or bmp.Height > 720 Then
    '                                    Dim bm_source As New Bitmap(bmp)
    '                                    Dim bm_dest As New Bitmap(1280, 720)
    '                                    Dim gr As Graphics = Graphics.FromImage(bm_dest)
    '                                    gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
    '                                    gr.DrawImage(bm_source, 0, 0, 1280 - 1, 720 - 1)
    '                                    bm_dest.Save(seasonpath, Imaging.ImageFormat.Jpeg)
    '                                    scraperLog = scraperLog & "Farart Resized to 1280x720" & vbCrLf
    '                                Else
    '                                    scraperLog = scraperLog & "Fanart not resized, already =< required size" & vbCrLf
    '                                    bmp.Save(seasonpath, Imaging.ImageFormat.Jpeg)
    '                                End If
    '                            ElseIf Preferences.resizefanart = 3 Then
    '                                If bmp.Width > 960 Or bmp.Height > 540 Then
    '                                    Dim bm_source As New Bitmap(bmp)
    '                                    Dim bm_dest As New Bitmap(960, 540)
    '                                    Dim gr As Graphics = Graphics.FromImage(bm_dest)
    '                                    gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
    '                                    gr.DrawImage(bm_source, 0, 0, 960 - 1, 540 - 1)
    '                                    bm_dest.Save(seasonpath, Imaging.ImageFormat.Jpeg)
    '                                    scraperLog = scraperLog & "Farart Resized to 960x540" & vbCrLf
    '                                Else
    '                                    scraperLog = scraperLog & "Fanart not resized, already =< required size" & vbCrLf
    '                                    bmp.Save(seasonpath, Imaging.ImageFormat.Jpeg)
    '                                End If

    '                            End If
    '                        Catch
    '                        End Try
    '                    Catch ex As WebException
    '#If SilentErrorScream Then
    '                        Throw ex
    '#End If
    '                    End Try
    '                End If
    '            End If

    '            Dim seasonallpath As String = ""
    '            Dim posterurlpath As String = ""
    '            Dim posterurl As String = ""
    '            If Preferences.postertype = "poster" Then 'poster
    '                For Each Image In artlist
    '                    If Image.language = templanguage And Image.bannerType = "poster" Then
    '                        posterurl = Image.url
    '                        Exit For
    '                    End If
    '                Next
    '                If posterurlpath = "" Then
    '                    For Each Image In artlist
    '                        If Image.language = "en" And Image.bannerType = "poster" Then
    '                            posterurlpath = Image.url
    '                            Exit For
    '                        End If
    '                    Next
    '                End If
    '                If posterurlpath = "" Then
    '                    For Each Image In artlist
    '                        If Image.bannerType = "poster" Then
    '                            posterurlpath = Image.url
    '                            Exit For
    '                        End If
    '                    Next
    '                End If
    '                If posterurlpath <> "" And Preferences.seasonall <> "none" Then
    '                    seasonallpath = posterurlpath
    '                End If
    '            ElseIf Preferences.postertype = "banner" Then 'banner
    '                For Each Image In artlist
    '                    If Image.language = templanguage And Image.bannerType = "series" And Image.season = Nothing Then
    '                        posterurl = Image.url
    '                        Exit For
    '                    End If
    '                Next
    '                If posterurlpath = "" Then
    '                    For Each Image In artlist
    '                        If Image.language = "en" And Image.bannerType = "series" And Image.season = Nothing Then
    '                            posterurlpath = Image.url
    '                            Exit For
    '                        End If
    '                    Next
    '                End If
    '                If posterurlpath = "" Then
    '                    For Each Image In artlist
    '                        If Image.bannerType = "series" And Image.season = Nothing Then
    '                            posterurlpath = Image.url
    '                            Exit For
    '                        End If
    '                    Next
    '                End If
    '                If posterurlpath <> "" And RadioButton16.Checked = True Then
    '                    seasonallpath = posterurlpath
    '                End If
    '            End If

    '            If posterurlpath <> "" Then

    '                Dim seasonpath As String = workingTvShow.path.Replace(IO.Path.GetFileName(workingTvShow.path), "folder.jpg")
    '                If Not IO.File.Exists(seasonpath) Then
    '                    Try
    '                        Dim buffer(4000000) As Byte
    '                        Dim size As Integer = 0
    '                        Dim bytesRead As Integer = 0
    '                        Dim thumburl As String = posterurlpath
    '                        Dim req As HttpWebRequest = WebRequest.Create(thumburl)
    '                        Dim res As HttpWebResponse = req.GetResponse()
    '                        Dim contents As Stream = res.GetResponseStream()
    '                        Dim bytesToRead As Integer = CInt(buffer.Length)
    '                        While bytesToRead > 0
    '                            size = contents.Read(buffer, bytesRead, bytesToRead)
    '                            If size = 0 Then Exit While
    '                            bytesToRead -= size
    '                            bytesRead += size
    '                        End While
    '                        Dim fstrm As New FileStream(seasonpath, FileMode.OpenOrCreate, FileAccess.Write)
    '                        fstrm.Write(buffer, 0, bytesRead)
    '                        contents.Close()
    '                        fstrm.Close()
    '                    Catch ex As WebException
    '#If SilentErrorScream Then
    '                        Throw ex
    '#End If
    '                        'MsgBox("Error Downloading main poster from TVDB")
    '                    End Try
    '                End If
    '            End If



    '            If Preferences.seasonall <> "none" And seasonallpath = "" Then
    '                If Preferences.seasonall = "poster" Then 'poster
    '                    For Each Image In artlist
    '                        If Image.language = templanguage And Image.bannerType = "poster" Then
    '                            seasonallpath = Image.url
    '                            Exit For
    '                        End If
    '                    Next
    '                    If seasonallpath = "" Then
    '                        For Each Image In artlist
    '                            If Image.language = "en" And Image.bannerType = "poster" Then
    '                                seasonallpath = Image.url
    '                                Exit For
    '                            End If
    '                        Next
    '                    End If
    '                    If seasonallpath = "" Then
    '                        For Each Image In artlist
    '                            If Image.bannerType = "poster" Then
    '                                seasonallpath = Image.url
    '                                Exit For
    '                            End If
    '                        Next
    '                    End If
    '                ElseIf Preferences.seasonall = "wide" = True Then 'banner
    '                    For Each Image In artlist
    '                        If Image.language = templanguage And Image.bannerType = "series" And Image.season = Nothing Then
    '                            seasonallpath = Image.url
    '                            Exit For
    '                        End If
    '                    Next
    '                    If seasonallpath = "" Then
    '                        For Each Image In artlist
    '                            If Image.language = "en" And Image.bannerType = "series" And Image.season = Nothing Then
    '                                seasonallpath = Image.url
    '                                Exit For
    '                            End If
    '                        Next
    '                    End If
    '                    If seasonallpath = "" Then
    '                        For Each Image In artlist
    '                            If Image.bannerType = "series" And Image.season = Nothing Then
    '                                seasonallpath = Image.url
    '                                Exit For
    '                            End If
    '                        Next
    '                    End If
    '                End If

    '                If seasonallpath <> "" Then

    '                    Dim seasonpath As String = workingTvShow.path.Replace(IO.Path.GetFileName(workingTvShow.path), "season-all.tbn")
    '                    If Not IO.File.Exists(seasonpath) Or CheckBox6.CheckState = CheckState.Checked Then
    '                        Try
    '                            Dim buffer(4000000) As Byte
    '                            Dim size As Integer = 0
    '                            Dim bytesRead As Integer = 0
    '                            Dim thumburl As String = seasonallpath
    '                            Dim req As HttpWebRequest = WebRequest.Create(thumburl)
    '                            Dim res As HttpWebResponse = req.GetResponse()
    '                            Dim contents As Stream = res.GetResponseStream()
    '                            Dim bytesToRead As Integer = CInt(buffer.Length)
    '                            While bytesToRead > 0
    '                                size = contents.Read(buffer, bytesRead, bytesToRead)
    '                                If size = 0 Then Exit While
    '                                bytesToRead -= size
    '                                bytesRead += size
    '                            End While
    '                            Dim fstrm As New FileStream(seasonpath, FileMode.OpenOrCreate, FileAccess.Write)
    '                            fstrm.Write(buffer, 0, bytesRead)
    '                            contents.Close()
    '                            fstrm.Close()
    '                        Catch ex As WebException
    '#If SilentErrorScream Then
    '                            Throw ex
    '#End If
    '                            'MsgBox("Error Downloading main poster from TVDB")
    '                        End Try
    '                    End If
    '                End If
    '            ElseIf Preferences.seasonall <> "none" And seasonallpath <> "" Then
    '                Dim seasonpath As String = workingTvShow.path.Replace(IO.Path.GetFileName(workingTvShow.path), "season-all.tbn")
    '                If Not IO.File.Exists(seasonpath) Then
    '                    Try
    '                        Dim buffer(4000000) As Byte
    '                        Dim size As Integer = 0
    '                        Dim bytesRead As Integer = 0
    '                        Dim thumburl As String = seasonallpath
    '                        Dim req As HttpWebRequest = WebRequest.Create(thumburl)
    '                        Dim res As HttpWebResponse = req.GetResponse()
    '                        Dim contents As Stream = res.GetResponseStream()
    '                        Dim bytesToRead As Integer = CInt(buffer.Length)
    '                        While bytesToRead > 0
    '                            size = contents.Read(buffer, bytesRead, bytesToRead)
    '                            If size = 0 Then Exit While
    '                            bytesToRead -= size
    '                            bytesRead += size
    '                        End While
    '                        Dim fstrm As New FileStream(seasonpath, FileMode.OpenOrCreate, FileAccess.Write)
    '                        fstrm.Write(buffer, 0, bytesRead)
    '                        contents.Close()
    '                        fstrm.Close()
    '                    Catch ex As WebException
    '                        'MsgBox("Error Downloading main poster from TVDB")
    '                    End Try
    '                End If
    '            End If
    '        Catch
    '        End Try
    '        Call loadtvshow(TvTreeview.SelectedNode.Name)
    '        messbox.Close()
    '    End Sub

    Private Sub CheckBox35_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox35.CheckedChanged
        Try
            If CheckBox35.CheckState = CheckState.Checked Then
                Preferences.tvshowautoquick = True
            Else
                Preferences.tvshowautoquick = False
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox36_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox36.CheckedChanged
        Try
            If CheckBox36.CheckState = CheckState.Checked Then
                Preferences.autoepisodescreenshot = True
            Else
                Preferences.autoepisodescreenshot = False
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_tv_EpisodeRenameAuto_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_tv_EpisodeRenameAuto.CheckedChanged
        Try
            If CheckBox_tv_EpisodeRenameAuto.CheckState = CheckState.Checked Then
                Preferences.autorenameepisodes = True
            Else
                Preferences.autorenameepisodes = False
            End If
            If prefsload = False Then generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button104_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ButtonFanartSaveLoRes.Click
        Try
            messbox = New frmMessageBox("Please wait,", "", "Downloading Fanart")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            Me.Refresh()
            messbox.Refresh()
            Me.Refresh()
            Application.DoEvents()

            Dim tempstring As String = String.Empty
            Dim tempint As Integer = 0
            Dim tempstring2 As String = String.Empty
            Dim allok As Boolean = False
            For Each button As Control In Me.Panel2.Controls
                If button.Name.IndexOf("checkbox") <> -1 Then
                    Dim b1 As RadioButton = CType(button, RadioButton)
                    If b1.Checked = True Then
                        tempstring = b1.Name
                        tempstring = tempstring.Replace("moviefanartcheckbox", "")
                        tempint = Convert.ToDecimal(tempstring)
                        tempstring2 = fanartArray(tempint).ldposter
                        allok = True
                        Exit For
                    End If
                End If
            Next
            If allok = False Then
                MsgBox("No Fanart Is Selected")
            Else
                Try
                    Panel1.Controls.Remove(Label1)
                    'Utilities.DownloadFile(tempstring2, bmp)
                    Dim buffer(40000000) As Byte
                    Dim size As Integer = 0
                    Dim bytesRead As Integer = 0

                    Dim fanartthumburl As String = tempstring2
                    Dim req As HttpWebRequest = WebRequest.Create(fanartthumburl)
                    Dim res As HttpWebResponse = req.GetResponse()
                    Dim contents As Stream = res.GetResponseStream()
                    Dim bmp As New Bitmap(contents)


                    Dim bytesToRead As Integer = CInt(buffer.Length)

                    While bytesToRead > 0
                        size = contents.Read(buffer, bytesRead, bytesToRead)
                        If size = 0 Then Exit While
                        bytesToRead -= size
                        bytesRead += size
                    End While
                    If Preferences.resizefanart = 1 Then
                        Try
                            Dim tempbitmap As Bitmap = bmp
                            tempbitmap.Save(workingMovieDetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                        Catch ex As Exception
                            tempstring = ex.Message.ToString
                        End Try
                    ElseIf Preferences.resizefanart = 2 Then
                        If bmp.Width > 1280 Or bmp.Height > 720 Then
                            Dim bm_source As New Bitmap(bmp)
                            Dim bm_dest As New Bitmap(1280, 720)
                            Dim gr As Graphics = Graphics.FromImage(bm_dest)
                            gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                            gr.DrawImage(bm_source, 0, 0, 1280 - 1, 720 - 1)
                            Dim tempbitmap As Bitmap = bm_dest
                            tempbitmap.Save(workingMovieDetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                        Else
                            Thread.Sleep(30)
                            bmp.Save(workingMovieDetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                        End If
                    ElseIf Preferences.resizefanart = 3 Then
                        If bmp.Width > 960 Or bmp.Height > 540 Then
                            Dim bm_source As New Bitmap(bmp)
                            Dim bm_dest As New Bitmap(960, 540)
                            Dim gr As Graphics = Graphics.FromImage(bm_dest)
                            gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                            gr.DrawImage(bm_source, 0, 0, 960 - 1, 540 - 1)
                            Dim tempbitmap As Bitmap = bm_dest
                            tempbitmap.Save(workingMovieDetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                        Else
                            Thread.Sleep(30)
                            bmp.Save(workingMovieDetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
                        End If
                    End If
                    Dim exists As Boolean = System.IO.File.Exists(workingMovieDetails.fileinfo.fanartpath)
                    If exists = True Then


                        'mainfanart = New PictureBox
                        PictureBox2.ImageLocation = workingMovieDetails.fileinfo.fanartpath
                        PictureBox2.Load()
                        PictureBox7.ImageLocation = workingMovieDetails.fileinfo.fanartpath
                        PictureBox7.Load()
                        For Each paths In Preferences.offlinefolders
                            Dim offlinepath As String = paths & "\"
                            If workingMovieDetails.fileinfo.fanartpath.IndexOf(offlinepath) <> -1 Then
                                Dim mediapath As String
                                mediapath = Utilities.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename)
                                Call mov_OfflineDvdProcess(workingMovieDetails.fileinfo.fullpathandfilename, workingMovieDetails.fullmoviebody.title, mediapath)
                            End If
                        Next
                    Else
                        PictureBox2.ImageLocation = defaultFanart
                        PictureBox2.Load()
                    End If
                    Label16.Text = PictureBox2.Image.Width
                    Label17.Text = PictureBox2.Image.Height
                    Dim result As Boolean = mov_FanartSaved()
                    If result = True Then

                        If RadioButtonMissingFanart.Checked = True Then
                            ButtonNextFanart.Text = "Click here to move to next Movie"
                            ButtonNextFanart.Enabled = True
                            ButtonNextFanart.Visible = True 'show next movie button
                        Else
                            Call mov_FiltersAndSortApply() 'Apply Filters to movielist combobox
                        End If

                        'Call loadinfofile() 'reloads main page information     'not required is not moving back to main page
                        'TabControl2.SelectedIndex = 0                        'Commented Out so that MC doesn't switch back to Movie/Main Tab after chaneing Fanart 
                        'currentTabIndex = TabControl2.SelectedIndex
                    End If
                Catch ex As WebException
                    MsgBox(ex.Message)
                End Try
            End If

        Catch ex As Exception
            ExceptionHandler.LogError(ex)

        Finally
            messbox.Close()
        End Try

    End Sub

    Private Sub Button105_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button105.Click
        Try
            If TextBox41.Text <> "" And TextBox43.Text <> "" Then
                Dim newcom As New str_ListOfCommands(SetDefaults)
                newcom.command = TextBox43.Text
                newcom.title = TextBox41.Text
                Preferences.commandlist.Add(newcom)
                ListBox16.Items.Add(newcom.title)
                ListBox17.Items.Add(newcom.command)
                ToolsToolStripMenuItem.DropDownItems.Clear()
                For Each com In Preferences.commandlist
                    ToolsToolStripMenuItem.DropDownItems.Add(com.title)
                Next
            Else
                MsgBox("This feature needs both a title & command")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ListBox16_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ListBox16.SelectedIndexChanged
        Try
            ListBox17.SelectedIndex = ListBox16.SelectedIndex
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ListBox17_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ListBox17.SelectedIndexChanged
        Try
            ListBox16.SelectedIndex = ListBox17.SelectedIndex
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button106_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button106.Click
        Try
            If ListBox16.SelectedItem <> "" And ListBox17.SelectedItem <> "" Then
                For Each com In Preferences.commandlist
                    If com.title = ListBox16.SelectedItem And com.command = ListBox17.SelectedItem Then
                        Preferences.commandlist.Remove(com)
                        Exit For
                    End If
                Next
            End If
            ListBox16.Items.Clear()
            ListBox17.Items.Clear()
            ToolsToolStripMenuItem.DropDownItems.Clear()
            For Each com In Preferences.commandlist
                ListBox16.Items.Add(com.title)
                ListBox17.Items.Add(com.command)
                ToolsToolStripMenuItem.DropDownItems.Add(com.title)
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ToolsToolStripMenuItem_DropDownItemClicked(ByVal sender As Object, ByVal e As System.Windows.Forms.ToolStripItemClickedEventArgs) Handles ToolsToolStripMenuItem.DropDownItemClicked
        Try
            For Each temp In Preferences.commandlist
                If temp.title = e.ClickedItem.Text Then
                    Try
                        Process.Start(temp.command)
                    Catch ex As Exception
                    End Try
                    Exit For
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    'Private Sub findmissingepisodes()
    '    For Each item In TvShows

    '        Bckgrndfindmissingepisodes.ReportProgress(0, "Downloading episode data for: " & item.title)
    '        'If item.locked = Nfo.ShowState.Open Then
    '        Dim showid As String = item.tvdbid
    '        If IsNumeric(showid) Then
    '            'http://www.thetvdb.com/api/6E82FED600783400/series/85137/all/en.xml
    '            Dim language As String = ""
    '            If item.language <> "" Then
    '                language = item.language
    '            Else
    '                language = "en"
    '            End If
    '            Dim sortorder As String = item.sortorder
    '            Dim url As String = "http://www.thetvdb.com/api/6E82FED600783400/series/" & showid & "/all/" & language & ".xml"
    '            If sortorder = "" Then
    '                sortorder = "default"
    '            End If
    '            Dim xmlfile As String

    '            xmlfile = Utilities.DownloadTextFiles(url)

    '            Dim SeriesInfo As New Tvdb.ShowData
    '            SeriesInfo.LoadXml(xmlfile)

    '            For Each Episode As Tvdb.Episode In SeriesInfo.Episodes

    '            Next
    '            'Try
    '            Dim ShowList As New XmlDocument
    '            showlist.LoadXml(xmlfile)
    '            Dim thisresult As XmlNode = Nothing
    '            For Each thisresult In showlist("Data")
    '                Select Case thisresult.Name
    '                    Case "Episode"
    '                        Dim newshow As New TvEpisode
    '                        Dim premdate As String = String.Empty
    '                        Dim aired As Boolean = True
    '                        Dim mirrorselection As XmlNode = Nothing
    '                        For Each mirrorselection In thisresult.ChildNodes
    '                            Select Case mirrorselection.Name
    '                                Case "DVD_episodenumber"
    '                                    If sortorder = "dvd" Then
    '                                        If mirrorselection.InnerText <> "" Then
    '                                            Dim temp As String = mirrorselection.InnerText
    '                                            If temp.IndexOf(".") <> -1 Then
    '                                                temp = temp.Substring(0, temp.IndexOf("."))
    '                                            End If
    '                                            newshow.episodeno = Convert.ToInt32(temp).ToString
    '                                        Else
    '                                            sortorder = "default"
    '                                        End If
    '                                    End If
    '                                Case "EpisodeNumber"
    '                                    If sortorder = "default" Then
    '                                        newshow.episodeno = mirrorselection.InnerText
    '                                    End If
    '                                Case "SeasonNumber"
    '                                    newshow.Season.value = mirrorselection.InnerText
    '                                Case "EpisodeName"
    '                                    newshow.title = mirrorselection.InnerText
    '                                Case "FirstAired"
    '                                    premdate = mirrorselection.InnerText
    '                            End Select
    '                        Next
    '                        If premdate = "" Then
    '                            aired = False
    '                        Else
    '                            If premdate <> "0000-00-00" Then
    '                                Try
    '                                    Dim myDate2 As Date = System.DateTime.Now
    '                                    Dim epdate As Date = CDate(premdate)
    '                                    newshow.playcount = premdate
    '                                    Dim strepdate As String
    '                                    strepdate = Format(epdate, "yyyyMMdd")
    '                                    Dim strcurrentdate As String
    '                                    strcurrentdate = Format(myDate2, "yyyyMMdd")
    '                                    Dim oldint As Integer = Convert.ToInt32(strepdate)
    '                                    Dim newint As Integer = Convert.ToInt32(strcurrentdate)
    '                                    If oldint > newint Then
    '                                        aired = False
    '                                    End If
    '                                Catch ex2 As Exception
    '                                End Try
    '                            Else
    '                                'MsgBox("boo")
    '                            End If
    '                        End If

    '                        If aired = True Then newshow.tvdbid = "true"
    '                        If aired = False Then newshow.tvdbid = "false"
    '                        newshow.VideoFilePath = item.fullpath
    '                        Bckgrndfindmissingepisodes.ReportProgress(1, newshow)
    '                End Select
    '            Next
    '        End If
    '        'End If
    '    Next
    'End Sub

    Private Sub SearchForMissingEpisodesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SearchForMissingEpisodesToolStripMenuItem.Click
        Try
            If Not Bckgrndfindmissingepisodes.IsBusy And bckgroundscanepisodes.IsBusy = False Then
                Dim ShowList As New List(Of TvShow)
                For Each shows In Cache.TvCache.Shows
                    shows.MissingEpisodes.Clear()
                    ShowList.Add(shows)
                Next
                'Dim nod As TreeNode
                'For Each nod In TvTreeview.Nodes
                '    Dim nod2 As TreeNode
                '    For Each nod2 In nod.Nodes
                '        Dim nod3 As TreeNode
                '        For Each nod3 In nod2.Nodes
                '            If nod3.Name.IndexOf("Missing: ") = 0 Then
                '                nod3.Remove()
                '            End If
                '        Next
                '    Next
                'Next
                ToolStripStatusLabel2.Text = "Starting search for missing episodes"
                ToolStripStatusLabel2.Visible = True
                Bckgrndfindmissingepisodes.RunWorkerAsync(ShowList)
            ElseIf Bckgrndfindmissingepisodes.IsBusy Then
                MsgBox("Process is already running")
            Else
                MsgBox("Missing episode search cannot be performed" & vbCrLf & "    when the episode scraper is running")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    'Private Sub Bckgrndfindmissingepisodes_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles Bckgrndfindmissingepisodes.DoWork
    '    Call findmissingepisodes()
    'End Sub

    'Private Sub Bckgrndfindmissingepisodes_ProgressChanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles Bckgrndfindmissingepisodes.ProgressChanged
    '    If e.ProgressPercentage = 1 Then
    '        Dim newshow As New TvEpisode
    '        newshow = e.UserState
    '        For Each item In TvShows
    '            If item.fullpath = newshow.VideoFilePath Then
    '                If Convert.ToInt32(newshow.Season.value) > 0 And newshow.title <> "" And newshow.tvdbid = "true" Then
    '                    Dim exists As Boolean = False
    '                    For Each ep In item.allepisodes
    '                        If ep.episodeno = newshow.episodeno And ep.Season.value = newshow.Season.value Then
    '                            exists = True
    '                            Exit For
    '                        End If
    '                    Next
    '                    If exists = False Then
    '                        Dim cnode As TreeNode = Nothing
    '                        Dim shownode As Integer = -1
    '                        For g = 0 To TvTreeview.Nodes.Count - 1
    '                            If TvTreeview.Nodes(g).Name.ToString = item.fullpath Then
    '                                cnode = TvTreeview.Nodes(g)
    '                                shownode = g
    '                                Exit For
    '                            End If
    '                        Next

    '                        Dim seasonstring As String = Nothing
    '                        Dim seasonno As Integer = Convert.ToInt32(newshow.Season.value)
    '                        Dim tempstring As String = String.Empty
    '                        If seasonno <> 0 And seasonno <> -1 Then
    '                            If seasonno < 10 Then
    '                                tempstring = "Season 0" & seasonno.ToString
    '                            Else
    '                                tempstring = "Season " & seasonno.ToString
    '                            End If
    '                        ElseIf seasonno = 0 Then
    '                            tempstring = "Specials"
    '                        End If
    '                        Dim node As TreeNode
    '                        Dim alreadyexists As Boolean = False
    '                        For Each node In cnode.Nodes
    '                            If node.Text = tempstring Then
    '                                alreadyexists = True
    '                                Exit For
    '                            End If
    '                        Next
    '                        If alreadyexists = False Then cnode.Nodes.Add(tempstring)
    '                        Dim tempint As Integer
    '                        For Each node In cnode.Nodes
    '                            If node.Text = tempstring Then
    '                                tempint = node.Index
    '                                Exit For
    '                            End If
    '                        Next

    '                        Dim eps As String
    '                        Dim episodeno As Integer = Convert.ToInt32(newshow.episodeno)
    '                        If episodeno < 10 Then
    '                            eps = "0" & episodeno.ToString
    '                        Else
    '                            eps = episodeno.ToString
    '                        End If
    '                        eps = eps & " - " & newshow.title
    '                        Dim ccnode As TreeNode
    '                        ccnode = TvTreeview.Nodes(shownode).Nodes(tempint)
    '                        Dim tempstring2 As String = "Missing: " & eps
    '                        alreadyexists = False
    '                        For Each node In ccnode.Nodes
    '                            If node.Text = eps Then
    '                                alreadyexists = True
    '                                Exit For
    '                            End If
    '                        Next
    '                        If alreadyexists = False Then
    '                            ccnode.Nodes.Add(tempstring2, eps)
    '                            For Each no As TreeNode In ccnode.Nodes
    '                                If no.Name = tempstring2 Then
    '                                    no.ForeColor = Color.Blue
    '                                    no.Parent.ForeColor = Color.Blue
    '                                    no.Parent.Parent.ForeColor = Color.Blue
    '                                    Exit For
    '                                End If
    '                            Next
    '                            newshow.VideoFilePath = tempstring2
    '                            item.missingepisodes.Add(newshow)
    '                            ToolStripStatusLabel2.Text = "Adding: " & eps
    '                        End If
    '                    End If
    '                End If
    '            End If
    '        Next
    '    Else
    '        ToolStripStatusLabel2.Text = e.UserState
    '    End If
    'End Sub

    'Private Sub Bckgrndfindmissingepisodes_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles Bckgrndfindmissingepisodes.RunWorkerCompleted
    '    ToolStripStatusLabel2.Visible = False
    '    ToolStripStatusLabel2.Text = "TV Show Episode Scan In Progress"

    'End Sub

    Private Sub tv_RebuildSelected(Show As TvShow)
        MsgBox("Please use 'Full Rebuild' as this is not implemented yet")
        'we need to utilise the already created code for cache rebuild but be able to send to it a single TV show to clear & rebuild....
    End Sub

    Private Sub RebuildThisShowToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_RebuildShow.Click
        Try
            Dim Show As TvShow = tv_ShowSelectedCurrently()

            If Show IsNot Nothing Then
                Call tv_RebuildSelected(Show)
            Else
                MsgBox("No Show Selected")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub MissingepisodesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_ShowMissEps.Click
        Try
            Dim Show As TvShow = tv_ShowSelectedCurrently()

            If Not Bckgrndfindmissingepisodes.IsBusy Then
                Dim tempstring As String = ""
                For Each sho In Cache.TvCache.Shows
                    If sho.NfoFilePath = TvTreeview.SelectedNode.Name Then
                        tempstring = "Checking """ & sho.Title.Value & """ for missing episodes"
                        Exit For
                    End If
                Next
                If tempstring = "" Then tempstring = "Checking for missing episodes"
                Dim messbox As New frmMessageBox(tempstring, "", "Please Wait")
                messbox.Show()
                messbox.Refresh()
                Application.DoEvents()
                Dim ShowList As New List(Of TvShow)
                ShowList.Add(Show)
                Bckgrndfindmissingepisodes.RunWorkerAsync(ShowList)
                'Call tv_EpisodesMissingFind()
                messbox.Close()
            Else
                MsgBox("The missing episode thread is already running")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub RadioButton44_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton44.CheckedChanged
        Try
            If RadioButton44.Checked = True Then
                Call tv_Filter("missingeps")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub LockAllToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LockAllToolStripMenuItem.Click
        Try
            For Each Show As TvShow In Cache.TvCache.Shows
                Show.State = ShowState.Locked
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub UnlockAllToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles UnlockAllToolStripMenuItem.Click
        Try
            For Each Show As TvShow In Cache.TvCache.Shows
                Show.State = ShowState.Open
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox38_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox38.CheckedChanged
        Try
            If CheckBox38.Checked = True Then
                Preferences.intruntime = True
            Else
                Preferences.intruntime = False
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button107_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button107.Click
        Try
            'listbox15
            If ListBox15.SelectedItem <> Nothing Then
                Dim tempstring As String = TextBox44.Text
                tempstring = tempstring.Replace("?", "")
                tempstring = tempstring.Replace("/", "")
                tempstring = tempstring.Replace("\", "")
                tempstring = tempstring.Replace("<", "")
                tempstring = tempstring.Replace(">", "")
                tempstring = tempstring.Replace(":", "")
                tempstring = tempstring.Replace("""", "")
                tempstring = tempstring.Replace("*", "")
                If tempstring.Length <> 0 Then
                    Try
                        Dim temppath As String = IO.Path.Combine(ListBox15.SelectedItem, tempstring)
                        Dim f As New IO.DirectoryInfo(temppath)
                        If Not f.Exists Then
                            IO.Directory.CreateDirectory(temppath)
                            MsgBox("Folder Created")
                        Else
                            MsgBox("Folder Already Exists")
                        End If
                    Catch ex As Exception
                        MsgBox("Unable to create folder" & vbCrLf & ex.Message.ToString)
                    End Try
                End If
            Else
                MsgBox("Please Select a folder from the above listbox")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button108_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button108.Click
        Try
            If ListBox15.SelectedItem <> Nothing Then
                Dim tempint As Integer = 0
                Dim textfilename As String = ""
                Dim filebrowser As New OpenFileDialog
                Dim mstrProgramFilesPath As String = System.Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles)
                filebrowser.InitialDirectory = mstrProgramFilesPath
                filebrowser.Filter = "Text Files|*.txt"
                filebrowser.Title = "Select text file to load"
                If filebrowser.ShowDialog = Windows.Forms.DialogResult.OK Then
                    textfilename = filebrowser.FileName
                End If
                If textfilename <> "" Then
                    Using textfile As StreamReader = New StreamReader(textfilename)
                        Dim line As String
                        line = textfile.ReadLine
                        Do While (Not line Is Nothing)
                            ' Add this line to list.
                            Dim tempstring As String = line
                            tempstring = tempstring.Replace("?", "")
                            tempstring = tempstring.Replace("/", "")
                            tempstring = tempstring.Replace("\", "")
                            tempstring = tempstring.Replace("<", "")
                            tempstring = tempstring.Replace(">", "")
                            tempstring = tempstring.Replace(":", "")
                            tempstring = tempstring.Replace("""", "")
                            tempstring = tempstring.Replace("*", "")
                            If tempstring.Length <> 0 Then
                                Try
                                    Dim temppath As String = IO.Path.Combine(ListBox15.SelectedItem, tempstring)
                                    Dim f As New IO.DirectoryInfo(temppath)
                                    If Not f.Exists Then
                                        tempint += 1
                                        IO.Directory.CreateDirectory(temppath)
                                    Else

                                    End If
                                Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                                End Try
                            End If
                            line = textfile.ReadLine
                        Loop
                    End Using
                    MsgBox(tempint.ToString & " Movie Folders added")
                End If
            Else
                MsgBox("Please Select a folder from the above listbox")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub TV_BatchRescrapeWizardToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles TV_BatchRescrapeWizardToolStripMenuItem.Click
        Try
            If Not tvbckrescrapewizard.IsBusy Then


                tvBatchList.epActor = False
                tvBatchList.epAired = False

                tvBatchList.epCredits = False
                tvBatchList.epDirector = False
                tvBatchList.epPlot = False
                tvBatchList.epRating = False
                tvBatchList.epRuntime = False
                tvBatchList.epScreenshot = False

                tvBatchList.epStreamDetails = False
                tvBatchList.epCreateScreenshot = False

                tvBatchList.shActor = False
                tvBatchList.shFanart = False
                tvBatchList.shGenre = False
                tvBatchList.shPosters = False
                tvBatchList.shMpaa = False
                tvBatchList.shPlot = False
                tvBatchList.shRating = False
                tvBatchList.shRuntime = False
                tvBatchList.shStudio = False
                tvBatchList.shYear = False

                tvBatchList.includeLocked = False
                tvBatchList.activate = False

                tvBatchList.doShows = False
                tvBatchList.doEpisodes = False
                tvBatchList.doShowArt = False
                tvBatchList.doShowActors = False
                tvBatchList.doShowBody = False
                tvBatchList.doEpisodeArt = False
                tvBatchList.doEpisodeActors = False
                tvBatchList.doEpisodeBody = False
                tvBatchList.doEpisodeMediaTags = False
                ' doshowbody As Boolean
                'Dim doshowart As Boolean
                'Dim doshowactors As Boolean
                'Dim doepisodebody As Boolean
                'Dim doepisodeart As Boolean
                'Dim doepisodeactors As Boolean
                Dim displaywizard As New tv_batch_wizard
                displaywizard.ShowDialog()

                If tvBatchList.activate = True Then
                    ToolStripStatusLabel8.Text = "Starting TV Batch Scrape"
                    ToolStripStatusLabel8.Visible = True
                    ToolStripProgressBar7.Value = 0
                    ToolStripProgressBar7.Visible = True
                    'ToolStripProgressBar6.Visible = True
                    tvbckrescrapewizard.RunWorkerAsync()
                End If
            Else
                MsgBox("The update Wizard is Already Running")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub tvbckrescrapewizard_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles tvbckrescrapewizard.DoWork
        Try
            Dim showprocesscount As Integer = 0
            Dim progresstext As String = ""
            Dim progress As Integer = 0
            Dim progcount As Integer = 0
            Dim done As Integer = 0
            For f = Cache.TvCache.Shows.Count - 1 To 0 Step -1
                If Cache.TvCache.Shows(f).State = Media_Companion.ShowState.Open Or Cache.TvCache.Shows(f).State = -1 Or tvBatchList.includeLocked = True Then
                    If tvBatchList.doEpisodes = True Then
                        showprocesscount += Cache.TvCache.Shows(f).Episodes.Count
                        showprocesscount += 1
                        progcount += 1
                    Else
                        showprocesscount += 1
                        progcount += 1
                    End If
                End If
            Next
            Dim showsdone As Integer = 0
            Dim showcounter As Integer = 0
            For f = Cache.TvCache.Shows.Count - 1 To 0 Step -1
                Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
                showcounter += 1
                If Cache.TvCache.Shows(f).State = Media_Companion.ShowState.Open Or Cache.TvCache.Shows(f).State = -1 Or tvBatchList.includeLocked = True Then
                    progresstext = "Working on Show: " & showcounter.ToString & " of " & progcount
                    If done > 0 Then
                        progress = (100 / showprocesscount) * done
                    Else
                        progress = 0
                    End If
                    tvbckrescrapewizard.ReportProgress(progress, progresstext)
                    Dim editshow As New TvShow
                    editshow = nfoFunction.tv_NfoLoadFull(Cache.TvCache.Shows(f).NfoFilePath)
                    'Dim tvdbstuff As New TVDB.tvdbscraper 'commented because of removed TVDB.dll
                    Dim tvdbstuff As New TVDBScraper
                    If tvBatchList.doShows = True Then
                        If tvBatchList.doShowBody = True Or tvBatchList.doShowActors = True Then
                            Dim language As String = editshow.Language.Value
                            If language = "" Then language = "en"

                            Dim tvshowxmlstring As String = tvdbstuff.GetShow(editshow.TvdbId.Value, language)
                            Try
                                Dim actorlist As New List(Of str_MovieActors)
                                actorlist.Clear()
                                Dim showlist As New XmlDocument
                                showlist.LoadXml(tvshowxmlstring)
                                Dim thisresult As XmlNode = Nothing
                                Dim maxcount As Integer = 0
                                For Each thisresult In showlist("fulltvshow")
                                    Select Case thisresult.Name
                                        Case "title"
                                            'thisresult.InnerText
                                        Case "mpaa"
                                            If tvBatchList.shMpaa = True Then
                                                editshow.Mpaa.Value = thisresult.InnerText
                                            End If
                                        Case "premiered"
                                            If tvBatchList.shYear = True Then
                                                editshow.Premiered.Value = thisresult.InnerText
                                            End If
                                        Case "genre"
                                            Dim newstring As String
                                            newstring = thisresult.InnerText
                                            newstring = newstring.TrimEnd("|")
                                            newstring = newstring.TrimStart("|")
                                            newstring = newstring.Replace("|", " / ")
                                            If tvBatchList.shGenre = True Then
                                                editshow.Genre.Value = newstring
                                            End If
                                        Case "imdbid"

                                        Case "studio"
                                            If tvBatchList.shStudio = True Then
                                                editshow.Studio.Value = thisresult.InnerText
                                            End If
                                        Case "plot"
                                            If tvBatchList.shPlot = True Then
                                                editshow.Plot.Value = thisresult.InnerText
                                            End If
                                        Case "rating"
                                            If tvBatchList.shRating = True Then
                                                editshow.Rating.Value = thisresult.InnerText
                                            End If
                                        Case "runtime"
                                            If tvBatchList.shRuntime = True Then
                                                editshow.Runtime.Value = thisresult.InnerText
                                            End If
                                        Case "episodeguideurl"

                                        Case "actor"
                                            If editshow.TvShowActorSource.Value = "tvdb" And tvBatchList.doShowActors = True Then
                                                If maxcount >= Preferences.maxactors Then
                                                    Exit For
                                                End If
                                                maxcount += 1
                                                Dim id As String = ""
                                                Dim acts As New str_MovieActors(SetDefaults)
                                                Dim results As XmlNode = Nothing
                                                Dim lan As New str_PossibleShowList(SetDefaults)

                                                For Each results In thisresult.ChildNodes
                                                    Select Case results.Name
                                                        Case "name"
                                                            acts.actorname = results.InnerText
                                                        Case "role"
                                                            acts.actorrole = results.InnerText
                                                        Case "thumb"
                                                            acts.actorthumb = results.InnerText
                                                        Case "actorid"
                                                            id = results.InnerText
                                                    End Select
                                                Next
                                                '.Add(acts)actorlist
                                                If acts.actorthumb <> Nothing Then
                                                    If acts.actorthumb <> "" And Preferences.actorseasy = True Then
                                                        If editshow.TvShowActorSource.Value <> "imdb" Or editshow.ImdbId = Nothing Then
                                                            Try
                                                                Dim workingpath As String = Cache.TvCache.Shows(f).NfoFilePath.Replace(IO.Path.GetFileName(Cache.TvCache.Shows(f).NfoFilePath), "")
                                                                workingpath = workingpath & ".actors\"
                                                                Dim hg As New IO.DirectoryInfo(workingpath)
                                                                Dim destsorted As Boolean = False
                                                                If Not hg.Exists Then
                                                                    Try
                                                                        IO.Directory.CreateDirectory(workingpath)
                                                                        destsorted = True
                                                                    Catch ex As Exception
#If SilentErrorScream Then
                                                                    Throw ex
#End If
                                                                    End Try
                                                                Else
                                                                    destsorted = True
                                                                End If
                                                                If destsorted = True Then
                                                                    Dim filename As String = acts.actorname.Replace(" ", "_")
                                                                    filename = filename & ".tbn"
                                                                    filename = IO.Path.Combine(workingpath, filename)
                                                                    Utilities.DownloadFile(acts.actorthumb, filename)
                                                                    'Dim buffer(4000000) As Byte
                                                                    'Dim size As Integer = 0
                                                                    'Dim bytesRead As Integer = 0
                                                                    'Dim thumburl As String = acts.actorthumb
                                                                    'Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                                                    'Dim res As HttpWebResponse = req.GetResponse()
                                                                    'Dim contents As Stream = res.GetResponseStream()
                                                                    'Dim bytesToRead As Integer = CInt(buffer.Length)
                                                                    'While bytesToRead > 0
                                                                    '    size = contents.Read(buffer, bytesRead, bytesToRead)
                                                                    '    If size = 0 Then Exit While
                                                                    '    bytesToRead -= size
                                                                    '    bytesRead += size
                                                                    'End While

                                                                    'Dim fstrm As New FileStream(filename, FileMode.OpenOrCreate, FileAccess.Write)
                                                                    'fstrm.Write(buffer, 0, bytesRead)
                                                                    'contents.Close()
                                                                    'fstrm.Close()
                                                                End If
                                                            Catch ex As Exception
#If SilentErrorScream Then
                                                            Throw ex
#End If
                                                            End Try
                                                        End If
                                                    End If
                                                End If
                                            End If
                                    End Select
                                Next
                                If tvBatchList.doShowActors = True And editshow.TvShowActorSource.Value = "imdb" Then
                                    '                    Dim imdbscraper As New imdb.Classimdbscraper
                                    Dim imdbscraper As New Classimdb
                                    Dim actorlist2 As String
                                    Dim actorstring As New XmlDocument
                                    actorlist2 = imdbscraper.getimdbactors(Preferences.imdbmirror, Cache.TvCache.Shows(f).ImdbId.Value)
                                    Try
                                        actorstring.LoadXml(actorlist2)
                                        thisresult = Nothing
                                        Dim actorcount As Integer = 0
                                        For Each thisresult In actorstring("actorlist")
                                            Select Case thisresult.Name
                                                Case "actor"
                                                    If actorcount > Preferences.maxactors Then
                                                        Exit For
                                                    End If
                                                    actorcount += 1
                                                    Dim newactor As New str_MovieActors(SetDefaults)
                                                    Dim detail As XmlNode = Nothing
                                                    For Each detail In thisresult.ChildNodes
                                                        Select Case detail.Name
                                                            Case "name"
                                                                newactor.actorname = detail.InnerText
                                                            Case "role"
                                                                newactor.actorrole = detail.InnerText
                                                            Case "thumb"
                                                                newactor.actorthumb = detail.InnerText
                                                            Case "actorid"
                                                                If newactor.actorthumb <> Nothing Then
                                                                    If detail.InnerText <> "" And Preferences.actorseasy = True Then
                                                                        Dim workingpath As String = Cache.TvCache.Shows(f).NfoFilePath.Replace(IO.Path.GetFileName(Cache.TvCache.Shows(f).NfoFilePath), "")
                                                                        workingpath = workingpath & ".actors\"
                                                                        Dim hg As New IO.DirectoryInfo(workingpath)
                                                                        Dim destsorted As Boolean = False
                                                                        If Not hg.Exists Then
                                                                            Try
                                                                                IO.Directory.CreateDirectory(workingpath)
                                                                                destsorted = True
                                                                            Catch ex As Exception
#If SilentErrorScream Then
                                                                            Throw ex
#End If
                                                                            End Try
                                                                        Else
                                                                            destsorted = True
                                                                        End If
                                                                        If destsorted = True Then
                                                                            Dim filename As String = newactor.actorname.Replace(" ", "_")
                                                                            filename = filename & ".tbn"
                                                                            filename = IO.Path.Combine(workingpath, filename)
                                                                            Utilities.DownloadFile(newactor.actorthumb, filename)
                                                                            'Dim buffer(4000000) As Byte
                                                                            'Dim size As Integer = 0
                                                                            'Dim bytesRead As Integer = 0
                                                                            'Dim thumburl As String = newactor.actorthumb
                                                                            'Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                                                            'Dim res As HttpWebResponse = req.GetResponse()
                                                                            'Dim contents As Stream = res.GetResponseStream()
                                                                            'Dim bytesToRead As Integer = CInt(buffer.Length)
                                                                            'While bytesToRead > 0
                                                                            '    size = contents.Read(buffer, bytesRead, bytesToRead)
                                                                            '    If size = 0 Then Exit While
                                                                            '    bytesToRead -= size
                                                                            '    bytesRead += size
                                                                            'End While

                                                                            'Dim fstrm As New FileStream(filename, FileMode.OpenOrCreate, FileAccess.Write)
                                                                            'fstrm.Write(buffer, 0, bytesRead)
                                                                            'contents.Close()
                                                                            'fstrm.Close()
                                                                        End If
                                                                    End If
                                                                    If Preferences.actorsave = True And detail.InnerText <> "" And Preferences.actorseasy = False Then
                                                                        Dim workingpath As String = ""
                                                                        Dim networkpath As String = Preferences.actorsavepath
                                                                        Try
                                                                            Dim tempstring As String = ""
                                                                            tempstring = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2)
                                                                            Dim hg As New IO.DirectoryInfo(tempstring)
                                                                            If Not hg.Exists Then
                                                                                IO.Directory.CreateDirectory(tempstring)
                                                                            End If
                                                                            workingpath = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                                            If Not IO.File.Exists(workingpath) Then
                                                                                Utilities.DownloadFile(newactor.actorthumb, workingpath)
                                                                                'Dim buffer(4000000) As Byte
                                                                                'Dim size As Integer = 0
                                                                                'Dim bytesRead As Integer = 0
                                                                                'Dim thumburl As String = newactor.actorthumb
                                                                                'Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                                                                'Dim res As HttpWebResponse = req.GetResponse()
                                                                                'Dim contents As Stream = res.GetResponseStream()
                                                                                'Dim bytesToRead As Integer = CInt(buffer.Length)
                                                                                'While bytesToRead > 0
                                                                                '    size = contents.Read(buffer, bytesRead, bytesToRead)
                                                                                '    If size = 0 Then Exit While
                                                                                '    bytesToRead -= size
                                                                                '    bytesRead += size
                                                                                'End While

                                                                                'Dim fstrm As New FileStream(workingpath, FileMode.OpenOrCreate, FileAccess.Write)
                                                                                'fstrm.Write(buffer, 0, bytesRead)
                                                                                'contents.Close()
                                                                                'fstrm.Close()
                                                                            End If
                                                                            newactor.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, detail.InnerText.Substring(detail.InnerText.Length - 2, 2))
                                                                            If Preferences.actornetworkpath.IndexOf("/") <> -1 Then
                                                                                newactor.actorthumb = Preferences.actornetworkpath & "/" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "/" & detail.InnerText & ".jpg"
                                                                            Else
                                                                                newactor.actorthumb = Preferences.actornetworkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                                            End If
                                                                        Catch ex As Exception
#If SilentErrorScream Then
                                                                        Throw ex
#End If
                                                                        End Try
                                                                    End If
                                                                End If
                                                        End Select
                                                    Next
                                                    actorlist.Add(newactor)
                                            End Select
                                        Next
                                    Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                    End Try
                                End If
                                If tvBatchList.doShowActors = True Then
                                    If actorlist.Count > 0 Then
                                        editshow.ListActors.Clear()
                                        For Each act In actorlist
                                            editshow.ListActors.Add(act)
                                        Next
                                    End If
                                End If
                            Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                            End Try
                            Call nfoFunction.tv_NfoSave(Cache.TvCache.Shows(f).NfoFilePath, editshow, True)
                        End If



                        'posters
                        Dim artlist As New List(Of TvBanners)
                        Dim showlist2 As New XmlDocument
                        Dim thisresult2 As XmlNode
                        Dim artdone As Boolean = False
                        If tvBatchList.doShowArt = True Then

                            Dim thumblist As String = tvdbstuff.GetPosterList(Cache.TvCache.Shows(f).TvdbId.Value)
                            showlist2.LoadXml(thumblist)
                            artdone = True
                            thisresult2 = Nothing
                            'CheckBox3 = seasons
                            'CheckBox4 = fanart
                            'CheckBox5 = poster
                            For Each thisresult2 In showlist2("banners")
                                Select Case thisresult2.Name
                                    Case "banner"
                                        Dim individualposter As New TvBanners
                                        For Each results In thisresult2.ChildNodes
                                            Select Case results.Name
                                                Case "url"
                                                    individualposter.Url = results.InnerText
                                                Case "bannertype"
                                                    individualposter.BannerType = results.InnerText
                                                Case "resolution"
                                                    individualposter.Resolution = results.InnerText
                                                Case "language"
                                                    individualposter.Language = results.InnerText
                                                Case "season"
                                                    individualposter.Season = results.InnerText
                                            End Select
                                        Next
                                        artlist.Add(individualposter)
                                End Select
                            Next
                            Dim tempstring As String = ""
                            For g = 0 To 1000
                                Dim seasonposter As String = ""
                                If seasonposter = "" Then
                                    For Each Image In artlist
                                        If Image.Season = g.ToString And Image.Language = "en" Then
                                            seasonposter = Image.Url
                                            Exit For
                                        End If
                                    Next
                                End If
                                If seasonposter = "" Then
                                    For Each Image In artlist
                                        If Image.Season = g.ToString Then
                                            seasonposter = Image.Url
                                            Exit For
                                        End If
                                    Next
                                End If
                                If seasonposter <> "" Then
                                    If g < 10 Then
                                        tempstring = "0" & g.ToString
                                    Else
                                        tempstring = g.ToString
                                    End If
                                    If tvBatchList.shPosters = True Then
                                        Dim seasonpath As String = Cache.TvCache.Shows(f).NfoFilePath.Replace(IO.Path.GetFileName(Cache.TvCache.Shows(f).NfoFilePath), "season" & tempstring & ".tbn")
                                        If tempstring = "00" Then
                                            seasonpath = WorkingTvShow.NfoFilePath.Replace(IO.Path.GetFileName(Cache.TvCache.Shows(f).NfoFilePath), "season-specials.tbn")
                                        End If
                                        If Not IO.File.Exists(seasonpath) Then
                                            Utilities.DownloadFile(seasonposter, seasonpath)
'                                            Try
'                                                Dim buffer(4000000) As Byte
'                                                Dim size As Integer = 0
'                                                Dim bytesRead As Integer = 0
'                                                Dim thumburl As String = seasonposter
'                                                Dim req As HttpWebRequest = WebRequest.Create(thumburl)
'                                                Dim res As HttpWebResponse = req.GetResponse()
'                                                Dim contents As Stream = res.GetResponseStream()
'                                                Dim bytesToRead As Integer = CInt(buffer.Length)
'                                                While bytesToRead > 0
'                                                    size = contents.Read(buffer, bytesRead, bytesToRead)
'                                                    If size = 0 Then Exit While
'                                                    bytesToRead -= size
'                                                    bytesRead += size
'                                                End While
'                                                Dim fstrm As New FileStream(seasonpath, FileMode.OpenOrCreate, FileAccess.Write)
'                                                fstrm.Write(buffer, 0, bytesRead)
'                                                contents.Close()
'                                                fstrm.Close()
'                                            Catch ex As WebException
'#If SilentErrorScream Then
'                                            Throw ex
'#End If
'                                                'MsgBox("Error Downloading season poster from TVDB")
'                                            End Try
                                        End If
                                    End If
                                End If
                            Next


                            Dim fanartposter As String = ""
                            If fanartposter = "" Then
                                For Each Image In artlist
                                    If Image.Language = "en" And Image.BannerType = "fanart" Then
                                        fanartposter = Image.Url
                                        Exit For
                                    End If
                                Next
                            End If
                            If fanartposter = "" Then
                                For Each Image In artlist
                                    If Image.BannerType = "fanart" Then
                                        fanartposter = Image.Url
                                        Exit For
                                    End If
                                Next
                            End If
                            If fanartposter <> "" And tvBatchList.shFanart = True Then

                                Dim seasonpath As String = Cache.TvCache.Shows(f).NfoFilePath.Replace(IO.Path.GetFileName(Cache.TvCache.Shows(f).NfoFilePath), "fanart.jpg")
                                If Not IO.File.Exists(seasonpath) Then
                                    Try
                                        'Utilities.DownloadFile(fanartposter, bmp)
                                        Dim buffer(4000000) As Byte
                                        Dim size As Integer = 0
                                        Dim bytesRead As Integer = 0

                                        Dim thumburl As String = fanartposter
                                        Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                        Dim res As HttpWebResponse = req.GetResponse()
                                        Dim contents As Stream = res.GetResponseStream()
                                        Dim bytesToRead As Integer = CInt(buffer.Length)
                                        Dim bmp As New Bitmap(contents)



                                        While bytesToRead > 0
                                            size = contents.Read(buffer, bytesRead, bytesToRead)
                                            If size = 0 Then Exit While
                                            bytesToRead -= size
                                            bytesRead += size
                                        End While


                                        Try
                                            If Preferences.resizefanart = 1 Then
                                                bmp.Save(seasonpath, Imaging.ImageFormat.Jpeg)
                                            ElseIf Preferences.resizefanart = 2 Then
                                                If bmp.Width > 1280 Or bmp.Height > 720 Then
                                                    Dim bm_source As New Bitmap(bmp)
                                                    Dim bm_dest As New Bitmap(1280, 720)
                                                    Dim gr As Graphics = Graphics.FromImage(bm_dest)
                                                    gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                                                    gr.DrawImage(bm_source, 0, 0, 1280 - 1, 720 - 1)
                                                    bm_dest.Save(seasonpath, Imaging.ImageFormat.Jpeg)
                                                Else
                                                    bmp.Save(seasonpath, Imaging.ImageFormat.Jpeg)
                                                End If
                                            ElseIf Preferences.resizefanart = 3 Then
                                                If bmp.Width > 960 Or bmp.Height > 540 Then
                                                    Dim bm_source As New Bitmap(bmp)
                                                    Dim bm_dest As New Bitmap(960, 540)
                                                    Dim gr As Graphics = Graphics.FromImage(bm_dest)
                                                    gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                                                    gr.DrawImage(bm_source, 0, 0, 960 - 1, 540 - 1)
                                                    bm_dest.Save(seasonpath, Imaging.ImageFormat.Jpeg)
                                                Else
                                                    bmp.Save(seasonpath, Imaging.ImageFormat.Jpeg)
                                                End If

                                            End If
                                        Catch
                                        End Try
                                    Catch ex As WebException
#If SilentErrorScream Then
                                    Throw ex
#End If
                                        'MsgBox("Error Downloading season poster from TVDB")
                                    End Try
                                End If
                            End If


                            If Preferences.seasonall <> "none" Then
                                Dim seasonallpath As String = ""
                                Dim posterurlpath As String = ""
                                If Preferences.seasonall = "poster" Then 'poster
                                    For Each Image In artlist
                                        If Image.Language = "en" And Image.BannerType = "poster" Then
                                            posterurlpath = Image.Url
                                            Exit For
                                        End If
                                    Next
                                    If posterurlpath = "" Then
                                        For Each Image In artlist
                                            If Image.BannerType = "poster" Then
                                                posterurlpath = Image.Url
                                                Exit For
                                            End If
                                        Next
                                    End If
                                    seasonallpath = posterurlpath
                                ElseIf Preferences.seasonall = "banner" Then 'banner
                                    If posterurlpath = "" Then
                                        For Each Image In artlist
                                            If Image.Language = "en" And Image.BannerType = "series" And Image.Season = Nothing Then
                                                posterurlpath = Image.Url
                                                Exit For
                                            End If
                                        Next
                                    End If
                                    If posterurlpath = "" Then
                                        For Each Image In artlist
                                            If Image.BannerType = "series" And Image.Season = Nothing Then
                                                posterurlpath = Image.Url
                                                Exit For
                                            End If
                                        Next
                                    End If
                                    If posterurlpath <> "" And RadioButton16.Checked = True Then
                                        seasonallpath = posterurlpath
                                    End If
                                End If
                                Dim seasonpath As String = Cache.TvCache.Shows(f).NfoFilePath.Replace(IO.Path.GetFileName(Cache.TvCache.Shows(f).NfoFilePath), "season-all.tbn")
                                If Not IO.File.Exists(seasonpath) And tvBatchList.shPosters = True Then
                                    Try
                                        'Utilities.DownloadFile(posterurlpath, buffer)
                                        Dim buffer(4000000) As Byte
                                        Dim size As Integer = 0
                                        Dim bytesRead As Integer = 0
                                        Dim thumburl As String = posterurlpath
                                        Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                                        Dim res As HttpWebResponse = req.GetResponse()
                                        Dim contents As Stream = res.GetResponseStream()
                                        Dim bytesToRead As Integer = CInt(buffer.Length)
                                        While bytesToRead > 0
                                            size = contents.Read(buffer, bytesRead, bytesToRead)
                                            If size = 0 Then Exit While
                                            bytesToRead -= size
                                            bytesRead += size
                                        End While
                                        Dim fstrm As New FileStream(seasonpath, FileMode.OpenOrCreate, FileAccess.Write)
                                        fstrm.Write(buffer, 0, bytesRead)
                                        'contents.Close()
                                        fstrm.Close()
                                        seasonpath = Cache.TvCache.Shows(f).NfoFilePath.Replace(IO.Path.GetFileName(Cache.TvCache.Shows(f).NfoFilePath), "folder.jpg")
                                        Dim fstrm2 As New FileStream(seasonpath, FileMode.OpenOrCreate, FileAccess.Write)
                                        fstrm2.Write(buffer, 0, bytesRead)
                                        contents.Close()
                                        fstrm2.Close()
                                    Catch ex As WebException
#If SilentErrorScream Then
                                    Throw ex
#End If
                                        'MsgBox("Error Downloading main poster from TVDB")
                                    End Try
                                End If
                            End If
                        End If
                    End If
                    If tvBatchList.doEpisodes = True Then

                        'progresstext = "Working on Episodes: " & basictvlist(f).title
                        'tvbckrescrapewizard.ReportProgress(999999, progresstext)
                        For g = Cache.TvCache.Shows(f).Episodes.Count - 1 To 0 Step -1
                            progresstext = "Working on Show: " & showcounter.ToString & " of " & progcount & ", Episode: " & Cache.TvCache.Shows(f).Episodes(g).Season.Value & "x" & Cache.TvCache.Shows(f).Episodes(g).Episode.Value
                            'progresstext = "Working on " & basictvlist(f).title & ", Episode: " & basictvlist(f).allepisodes(g).Season.value & "x" & basictvlist(f).allepisodes(g).episodeno
                            If done > 0 Then
                                progress = (100 / showprocesscount) * done
                            Else
                                progress = 0
                            End If
                            tvbckrescrapewizard.ReportProgress(progress, progresstext)
                            If tvBatchList.doEpisodeBody = True Or (tvBatchList.doEpisodeActors = True And Cache.TvCache.Shows(f).EpisodeActorSource.Value <> "") Or (tvBatchList.doEpisodeArt = True) Then
                                Dim listofnewepisodes As New List(Of TvEpisode)
                                listofnewepisodes.Clear()
                                listofnewepisodes = nfoFunction.ep_NfoLoadGeneric(Cache.TvCache.Shows(f).Episodes(g).VideoFilePath)
                                For h = listofnewepisodes.Count - 1 To 0 Step -1
                                    If listofnewepisodes(h).Season.Value = Cache.TvCache.Shows(f).Episodes(g).Season.Value And listofnewepisodes(h).Episode.Value = Cache.TvCache.Shows(f).Episodes(g).Episode.Value Then
                                        Dim newactors As New List(Of str_MovieActors)
                                        newactors.Clear()
                                        Dim sortorder As String = Cache.TvCache.Shows(f).SortOrder.Value
                                        Dim language As String = Cache.TvCache.Shows(f).Language.Value
                                        Dim actorsource As String = Cache.TvCache.Shows(f).EpisodeActorSource.Value
                                        Dim tvdbid As String = Cache.TvCache.Shows(f).TvdbId.Value
                                        Dim imdbid As String = Cache.TvCache.Shows(f).ImdbId.Value
                                        Dim seasonno As String = Cache.TvCache.Shows(f).Episodes(g).Season.Value
                                        Dim episodeno As String = Cache.TvCache.Shows(f).Episodes(g).Episode.Value
                                        'its an episode
                                        Dim episodescreenurl As String = ""
                                        'Dim episodescraper As New TVDB.tvdbscraper 'commented because of removed TVDB.dll
                                        Dim episodescraper As New TVDBScraper
                                        If sortorder = "" Then sortorder = "default"
                                        If language = "" Then language = "en"
                                        If actorsource = "" Then actorsource = "tvdb"
                                        Dim tempepisode As String = episodescraper.getepisode(tvdbid, sortorder, seasonno, episodeno, language)
                                        Dim scrapedepisode As New XmlDocument
                                        Try
                                            scrapedepisode.LoadXml(tempepisode)
                                            Dim thisresult As XmlNode = Nothing
                                            For Each thisresult In scrapedepisode("episodedetails")
                                                Select Case thisresult.Name
                                                    Case "title"
                                                        'listofnewepisodes(h).title = thisresult.InnerText
                                                    Case "premiered"
                                                        If tvBatchList.epAired = True Then
                                                            listofnewepisodes(h).Aired.Value = thisresult.InnerText
                                                        End If
                                                    Case "plot"
                                                        If tvBatchList.epPlot = True Then
                                                            listofnewepisodes(h).Plot.Value = thisresult.InnerText
                                                        End If
                                                    Case "director"
                                                        If tvBatchList.epDirector = True Then
                                                            Dim tempstring As String = ""
                                                            tempstring = thisresult.InnerText
                                                            tempstring = tempstring.TrimStart("|")
                                                            tempstring = tempstring.TrimEnd("|")
                                                            tempstring = tempstring.Replace("|", " / ")
                                                            listofnewepisodes(h).Director.Value = tempstring
                                                        End If
                                                    Case "credits"
                                                        Dim tempstring As String = ""
                                                        If tvBatchList.epCredits = True Then
                                                            tempstring = thisresult.InnerText
                                                            tempstring = tempstring.TrimStart("|")
                                                            tempstring = tempstring.TrimEnd("|")
                                                            tempstring = tempstring.Replace("|", " / ")
                                                            listofnewepisodes(h).Credits.Value = tempstring
                                                        End If
                                                    Case "rating"
                                                        If tvBatchList.epRating = True Then
                                                            listofnewepisodes(h).Rating.Value = thisresult.InnerText
                                                        End If
                                                        Cache.TvCache.Shows(f).Episodes(g).Rating.Value = thisresult.InnerText
                                                    Case "thumb"
                                                        episodescreenurl = thisresult.InnerText
                                                        Dim downloadok As Boolean = True
                                                        If tvBatchList.doEpisodeArt = True And tvBatchList.epScreenshot = True Then
                                                            If episodescreenurl <> "" And episodescreenurl.ToLower <> "http://www.thetvdb.com/banners/" Then
                                                                Try
                                                                    Dim screenshotpath As String = listofnewepisodes(h).VideoFilePath.Replace(IO.Path.GetExtension(listofnewepisodes(h).VideoFilePath), ".tbn")
                                                                    If Not IO.File.Exists(screenshotpath) Then
                                                                        'Utilities.DownloadFile(episodescreenurl, buffer)
                                                                        Dim buffer(4000000) As Byte
                                                                        Dim size As Integer = 0
                                                                        Dim bytesRead As Integer = 0
                                                                        Dim fanartthumburl As String = episodescreenurl
                                                                        Dim req As HttpWebRequest = WebRequest.Create(fanartthumburl)
                                                                        Dim res As HttpWebResponse = req.GetResponse()
                                                                        Dim contents As Stream = res.GetResponseStream()
                                                                        Dim bmp As New Bitmap(contents)
                                                                        Dim bytesToRead As Integer = CInt(buffer.Length)
                                                                        While bytesToRead > 0
                                                                            size = contents.Read(buffer, bytesRead, bytesToRead)
                                                                            If size = 0 Then Exit While
                                                                            bytesToRead -= size
                                                                            bytesRead += size
                                                                        End While
                                                                        Try
                                                                            bmp.Save(screenshotpath, Imaging.ImageFormat.Jpeg)
                                                                        Catch ex As Exception
                                                                            downloadok = False
                                                                        End Try
                                                                    End If
                                                                Catch
                                                                End Try
                                                            Else
                                                                Dim thumbpathandfilename As String = listofnewepisodes(h).VideoFilePath.Replace(IO.Path.GetExtension(listofnewepisodes(h).VideoFilePath), ".tbn")
                                                                Dim pathandfilename As String = listofnewepisodes(h).VideoFilePath.Replace(IO.Path.GetExtension(listofnewepisodes(h).VideoFilePath), "")
                                                                If Not IO.File.Exists(thumbpathandfilename) And tvBatchList.epCreateScreenshot = True Then
                                                                    progresstext = listofnewepisodes(h).VideoFilePath
                                                                    tvbckrescrapewizard.ReportProgress(888888, progresstext)
                                                                End If
                                                            End If
                                                            If downloadok = False Then
                                                                Dim thumbpathandfilename As String = listofnewepisodes(h).VideoFilePath.Replace(IO.Path.GetExtension(listofnewepisodes(h).VideoFilePath), ".tbn")
                                                                Dim pathandfilename As String = listofnewepisodes(h).VideoFilePath.Replace(IO.Path.GetExtension(listofnewepisodes(h).VideoFilePath), "")
                                                                If Not IO.File.Exists(thumbpathandfilename) And tvBatchList.epCreateScreenshot = True Then
                                                                    progresstext = listofnewepisodes(h).VideoFilePath
                                                                    tvbckrescrapewizard.ReportProgress(888888, progresstext)
                                                                End If
                                                            End If
                                                        End If
                                                    Case "actor"
                                                        If tvBatchList.epActor = True And Preferences.episodeacrorsource = "tvdb" Then
                                                            Dim actors As XmlNode = Nothing
                                                            For Each actorl In thisresult.ChildNodes
                                                                Select Case actorl.name
                                                                    Case "name"
                                                                        Dim newactor As New str_MovieActors(SetDefaults)
                                                                        newactor.actorname = actorl.innertext
                                                                        newactors.Add(newactor)
                                                                End Select
                                                            Next
                                                        End If
                                                End Select
                                            Next
                                            'newepisode.playcount = "0"
                                            If Preferences.episodeacrorsource = "tvdb" And tvBatchList.epActor = True And newactors.Count > 0 Then
                                                listofnewepisodes(h).ListActors.Clear()
                                                For Each act In newactors
                                                    listofnewepisodes(h).ListActors.Add(act)
                                                Next
                                            End If
                                            If Cache.TvCache.Shows(f).EpisodeActorSource.Value = "imdb" And tvBatchList.epActor = True Then
                                                Dim ac As New actors
                                                Dim actorlist As New List(Of str_MovieActors)
                                                actorlist = ac.EpisodeGetImdbActors(Cache.TvCache.Shows(f).ImdbId.Value, listofnewepisodes(h).Season.Value, listofnewepisodes(h).Episode.Value)
                                                If Preferences.actorseasy = True Then
                                                    ac.savelocalactors(listofnewepisodes(h).VideoFilePath, actorlist, Cache.TvCache.Shows(f).NfoFilePath, True)
                                                End If
                                            End If
                                        Catch ex As Exception
#If SilentErrorScream Then
                                        Throw ex
#End If
                                            'MsgBox("hekp")
                                        End Try
                                        For Each Episode In listofnewepisodes
                                            Episode.Save()
                                        Next
                                        'Call nfoFunction.saveepisodenfo(listofnewepisodes, listofnewepisodes(0).VideoFilePath, listofnewepisodes(h).Season.value, listofnewepisodes(h).episodeno, True )
                                        Exit For
                                    End If




                                Next


                            End If


                            If tvBatchList.doEpisodeMediaTags = True Then
                                Dim listofnewepisodes As New List(Of TvEpisode)
                                listofnewepisodes.Clear()
                                listofnewepisodes = nfoFunction.ep_NfoLoadGeneric(Cache.TvCache.Shows(f).Episodes(g).VideoFilePath)
                                For h = listofnewepisodes.Count - 1 To 0 Step -1
                                    'listofnewepisodes(h).Details = Preferences.Get_HdTags(Utilities.GetFileName(listofnewepisodes(h).VideoFilePath))
                                    listofnewepisodes(h).GetFileDetails()
                                    If listofnewepisodes(h).Details.StreamDetails.Video.DurationInSeconds.Value <> Nothing Then
                                        Try
                                            '1h 24mn 48s 546ms
                                            Dim tempint As Integer = 0
                                            Dim hours As Integer = 0
                                            Dim minutes As Integer = 0
                                            Dim tempstring As String
                                            tempstring = listofnewepisodes(h).Details.StreamDetails.Video.DurationInSeconds.Value
                                            tempint = tempstring.IndexOf("h")
                                            If tempint <> -1 Then
                                                hours = Convert.ToInt32(tempstring.Substring(0, tempint))
                                                tempstring = tempstring.Substring(tempint + 1, tempstring.Length - (tempint + 1))
                                                tempstring = Trim(tempstring)
                                            End If
                                            tempint = tempstring.IndexOf("mn")
                                            If tempint <> -1 Then
                                                minutes = Convert.ToInt32(tempstring.Substring(0, tempint))
                                            End If
                                            If hours <> 0 Then
                                                hours = hours * 60
                                            End If
                                            minutes = minutes + hours
                                            listofnewepisodes(h).Runtime.Value = minutes.ToString & " min"
                                        Catch ex As Exception
#If SilentErrorScream Then
                                        Throw ex
#End If
                                        End Try
                                        For Each Episode In listofnewepisodes
                                            Episode.Save()
                                        Next
                                    End If
                                Next
                            End If
                            done += 1
                        Next
                    End If
                    done += 1
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub tvbckrescrapewizard_ProgressChanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles tvbckrescrapewizard.ProgressChanged
        Try
            If e.ProgressPercentage = 999999 Then
                ToolStripStatusLabel8.Text = e.UserState
            ElseIf e.ProgressPercentage = 888888 Then
                'Dim getthumb As New createscreenshot
                Dim result As String = Utilities.CreateScreenShot(e.UserState)
            Else
                ToolStripStatusLabel8.Text = e.UserState
                ToolStripProgressBar7.Value = e.ProgressPercentage
                ToolStripProgressBar7.ProgressBar.Refresh()
                ToolStripProgressBar7.ProgressBar.PerformStep()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub tvbckrescrapewizard_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles tvbckrescrapewizard.RunWorkerCompleted
        Try
            ToolStripStatusLabel8.Visible = False
            ToolStripProgressBar7.Visible = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_tv_EpisodeRenameCase_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_tv_EpisodeRenameCase.CheckedChanged
        Try
            If CheckBox_tv_EpisodeRenameCase.CheckState = CheckState.Checked Then
                Preferences.eprenamelowercase = True
            Else
                Preferences.eprenamelowercase = False
            End If
            If prefsload = False Then generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Function util_FileSizeGet(ByVal MyFilePath As String) As Long
        Dim MyFile As New IO.FileInfo(MyFilePath)
        Dim FileSize As Long = MyFile.Length
        Return FileSize
    End Function


    Public totalfilesize As Long = 0
    Public listoffilestomove As New List(Of String)
    Private Sub ExportmoviesMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExportmoviesMenuItem.Click
        Try
            listoffilestomove.Clear()

            If MovieListComboBox.SelectedItems.Count > 0 Then

                For Each movie In MovieListComboBox.SelectedItems
                    Dim tempstring As String
                    tempstring = CType(MovieListComboBox.SelectedItem, ValueDescriptionPair).Value
                    Dim playlist As New List(Of String)
                    tempstring = Utilities.GetFileName(tempstring)
                    playlist = Utilities.GetMediaList(tempstring)
                    If playlist.Count > 0 Then
                        For Each File In playlist
                            If Not listoffilestomove.Contains(File) Then
                                listoffilestomove.Add(File)
                            End If
                        Next
                        listoffilestomove.Add(movie.value)
                        If IO.File.Exists(Preferences.GetFanartPath(movie.value)) Then
                            listoffilestomove.Add(Preferences.GetFanartPath(movie.value))
                        End If
                        If IO.File.Exists(Preferences.GetPosterPath(movie.value)) Then
                            listoffilestomove.Add(Preferences.GetPosterPath(movie.value))
                        End If
                        Dim di As DirectoryInfo = New DirectoryInfo(movie.value.Replace(IO.Path.GetFileName(movie.value), ""))
                        Dim filenama As String = IO.Path.GetFileNameWithoutExtension(movie.value)
                        Dim fils As IO.FileInfo() = di.GetFiles(filenama & ".*")
                        For Each fiNext In fils
                            If Not listoffilestomove.Contains(fiNext.FullName) Then
                                listoffilestomove.Add(fiNext.FullName)
                            End If
                        Next
                        Dim trailerpath As String = movie.value.Replace(IO.Path.GetExtension(movie.value), "-trailer.flv")
                        Dim filenama2 As String = IO.Path.GetFileNameWithoutExtension(trailerpath)
                        Dim fils2 As IO.FileInfo() = di.GetFiles(filenama2 & ".*")
                        For Each fiNext In fils2
                            If Not listoffilestomove.Contains(fiNext.FullName) Then
                                listoffilestomove.Add(fiNext.FullName)
                            End If
                        Next
                    End If
                Next

                totalfilesize = 0
                For Each item In listoffilestomove
                    totalfilesize = totalfilesize + util_FileSizeGet(item)
                Next


                With FolderBrowserDialog1
                    .ShowNewFolderButton = True
                    .Description = "Select destination for file copy"
                End With
                Dim drive As String = ""
                Dim savepath As String = ""
                'If FolderBrowserDialog1.ShowDialog = Windows.Forms.DialogResult.OK Then
                '    savepath = FolderBrowserDialog1.SelectedPath
                '    drive = IO.Path.GetPathRoot(savepath)
                '    Me.Visible = True
                '    Me.Show()
                '    Me.Refresh()

                '    Dim listoffilestomove2 As New List(Of String)
                '    listoffilestomove2.Clear()
                '    For Each fil In listoffilestomove
                '        listoffilestomove2.Add(fil)
                '    Next

                '    Dim drivespace As Long
                '    drivespace = GetFreeSpace(drive)
                '    Application.DoEvents()
                '    Me.Refresh()
                '    Dim percentages As New List(Of Integer)

                '    If drivespace > totalfilesize Then
                '        'My.Computer.FileSystem.CopyFile("C:\UserFiles\TestFiles\testFile.txt", "C:\UserFiles\TestFiles2\NewFile.txt", FileIO.UIOption.AllDialogs, FileIO.UICancelOption.DoNothing)

                frmCopyProgress.ShowDialog()
                '    End If
                'End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub frm_ExportTabSetup()
        If TextBox45.Text = "" Then

            Dim tempstring2 As String = workingProfile.config.Replace(IO.Path.GetFileName(workingProfile.config), "pathsubstitution.xml")
            If IO.File.Exists(tempstring2) Then
                relativeFolderList.Clear()
                Dim prefs As New XmlDocument
                Try
                    prefs.Load(tempstring2)
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
                Dim thisresult As XmlNode = Nothing


                For Each thisresult In prefs("relativepaths")

                    Select Case thisresult.Name
                        Case "folder"
                            Dim mc As New str_RelativeFileList(SetDefaults)
                            Dim it2 As XmlNode
                            For Each it2 In thisresult.ChildNodes
                                Select Case it2.Name
                                    Case "mc"
                                        mc.mc = it2.InnerText
                                    Case "xbmc"
                                        mc.xbmc = it2.InnerText
                                        relativeFolderList.Add(mc)
                                End Select
                            Next

                    End Select
                Next
                For Each item In relativeFolderList
                    TextBox45.Text += "<folder>" & vbCrLf
                    TextBox45.Text += "    <mc>" & item.mc & "</mc>" & vbCrLf
                    TextBox45.Text += "    <xbmc>" & item.xbmc & "</xbmc>" & vbCrLf
                    TextBox45.Text += "</folder>" & vbCrLf & vbCrLf
                Next
            End If
            If TextBox45.Text = "" Then
                For Each pat In movieFolders
                    TextBox45.Text += "<folder>" & vbCrLf
                    TextBox45.Text += "    <mc>" & pat & "</mc>" & vbCrLf
                    TextBox45.Text += "    <xbmc>" & pat & "</xbmc>" & vbCrLf
                    TextBox45.Text += "</folder>" & vbCrLf & vbCrLf
                Next
                For Each pat In Preferences.offlinefolders
                    TextBox45.Text += "<folder>" & vbCrLf
                    TextBox45.Text += "    <mc>" & pat & "</mc>" & vbCrLf
                    TextBox45.Text += "    <xbmc>" & pat & "</xbmc>" & vbCrLf
                    TextBox45.Text += "</folder>" & vbCrLf & vbCrLf
                Next
                For Each pat In tvRootFolders
                    TextBox45.Text += "<folder>" & vbCrLf
                    TextBox45.Text += "    <mc>" & pat & "</mc>" & vbCrLf
                    TextBox45.Text += "    <xbmc>" & pat & "</xbmc>" & vbCrLf
                    TextBox45.Text += "</folder>" & vbCrLf & vbCrLf
                Next
            End If
        End If
    End Sub


    Private Sub Button109_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button109.Click
        Try
            relativeFolderList.Clear()
            Dim tempstring2 As String = workingProfile.config.Replace(IO.Path.GetFileName(workingProfile.config), "pathsubstitution.xml")



            Dim temptext As String = ""
            temptext = "<relativepaths>" & TextBox45.Text & "</relativepaths>"
            Dim doc As New XmlDocument
            doc.LoadXml(temptext)
            Dim thisresult As XmlElement
            For Each thisresult In doc("relativepaths")
                Dim newfo As New str_RelativeFileList(SetDefaults)
                For Each innerresult In thisresult
                    Select Case innerresult.Name
                        Case "mc"
                            newfo.mc = innerresult.InnerText
                        Case "xbmc"
                            newfo.xbmc = innerresult.InnerText
                    End Select
                Next
                If newfo.mc <> Nothing Then
                    If newfo.mc <> "" Then
                        If newfo.xbmc <> Nothing Then
                            If newfo.xbmc <> "" Then
                                relativeFolderList.Add(newfo)
                            End If
                        End If
                    End If
                End If
            Next

            If relativeFolderList.Count > 0 Then
                Dim docs As New XmlDocument

                Dim thispref As XmlNode = Nothing
                Dim xmlproc As XmlDeclaration

                xmlproc = docs.CreateXmlDeclaration("1.0", "UTF-8", "yes")
                docs.AppendChild(xmlproc)
                Dim root As XmlElement
                Dim child As XmlElement
                Dim childchild As XmlElement
                root = doc.CreateElement("relativepaths")


                For Each item In relativeFolderList
                    child = doc.CreateElement("folder")
                    childchild = doc.CreateElement("mc")
                    childchild.InnerText = item.mc
                    child.AppendChild(childchild)
                    childchild = doc.CreateElement("xbmc")
                    childchild.InnerText = item.xbmc
                    child.AppendChild(childchild)
                    root.AppendChild(child)
                Next


                Dim output As New XmlTextWriter(tempstring2, System.Text.Encoding.UTF8)
                output.Formatting = Formatting.Indented
                doc.WriteTo(output)
                output.Close()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox41_CheckedChanged_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox41.CheckedChanged
        Try
            If CheckBox41.CheckState = CheckState.Checked Then
                Preferences.ignorearticle = True
            Else
                Preferences.ignorearticle = False
            End If
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton45_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton45.CheckedChanged
        Try
            If RadioButton45.Checked = True Then
                '            TextBox_GenreFilter.Enabled = True
                '            TextBox_GenreFilter.Text = "Genre Filter (AND)"
                '            ComboBox11.Enabled = True
                '            ComboBox11.SelectedIndex = 0
                '            Call CheckSpecials("all")
                mov_FiltersAndSortApply("all")
            End If
            '        applyfilters()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton46_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton46.CheckedChanged
        Try
            If RadioButton46.Checked = True Then
                '            CheckedListBox1.ClearSelected()
                '            TextBox_GenreFilter.Enabled = False
                '            ComboBox11.SelectedIndex = 0
                '            ComboBox11.Enabled = False
                '            Call CheckSpecials("watched")
                '            TextBox_GenreFilter.Text = "Genre Filter (AND)"
                mov_FiltersAndSortApply("watched")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton47_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton47.CheckedChanged
        Try
            If RadioButton47.Checked = True Then
                '            CheckedListBox1.ClearSelected()
                '            TextBox_GenreFilter.Enabled = False
                '            ComboBox11.SelectedIndex = 0
                '            ComboBox11.Enabled = False
                '            Call CheckSpecials("unwatched")
                '            TextBox_GenreFilter.Text = "Genre Filter (AND)"
                mov_FiltersAndSortApply("unwatched")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton48_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton48.CheckedChanged
        Try
            If RadioButton48.Checked = True Then
                '            CheckedListBox1.ClearSelected()
                '            TextBox_GenreFilter.Enabled = False
                '            ComboBox11.SelectedIndex = 0
                '            ComboBox11.Enabled = False
                '            Call CheckSpecials("duplicates")
                '            TextBox_GenreFilter.Text = "Genre Filter (AND)"
                mov_FiltersAndSortApply("duplicates")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton49_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton49.CheckedChanged
        Try
            If RadioButton49.Checked = True Then
                '            CheckedListBox1.ClearSelected()
                '            TextBox_GenreFilter.Enabled = False
                '            ComboBox11.SelectedIndex = 0
                '            ComboBox11.Enabled = False
                '            Call CheckSpecials("missing posters")
                '            TextBox_GenreFilter.Text = "Genre Filter (AND)"
                mov_FiltersAndSortApply("missing posters")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton50_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButtonMissingFanart.CheckedChanged
        Try
            If RadioButtonMissingFanart.Checked = True Then
                '            CheckedListBox1.ClearSelected()
                '            TextBox_GenreFilter.Enabled = False
                '            ComboBox11.SelectedIndex = 0
                '            ComboBox11.Enabled = False
                '            Call CheckSpecials("missing fanart")
                '            TextBox_GenreFilter.Text = "Genre Filter (AND)"
                mov_FiltersAndSortApply("missing fanart")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_Use_XBMC_TVDB_Scraper_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_Use_XBMC_TVDB_Scraper.CheckedChanged
        Try
            If CheckBox_Use_XBMC_TVDB_Scraper.CheckState = CheckState.Checked Then
                Preferences.tvshow_useXBMC_Scraper = True
                GroupBox2.Enabled = False
                GroupBox3.Enabled = False
                GroupBox5.Enabled = False
                GroupBox22.Visible = False
                GroupBox22.SendToBack()
                GroupBox_TVDB_Scraper_Preferences.Visible = True
                GroupBox_TVDB_Scraper_Preferences.BringToFront()
            Else
                Preferences.tvshow_useXBMC_Scraper = False
                GroupBox2.Enabled = True
                GroupBox3.Enabled = True
                GroupBox5.Enabled = True
                GroupBox22.Visible = True
                GroupBox22.BringToFront()
                GroupBox_TVDB_Scraper_Preferences.Visible = False
                GroupBox_TVDB_Scraper_Preferences.SendToBack()
            End If
            Read_XBMC_TVDB_Scraper_Config()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox3_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox3.CheckedChanged
        Try
            If CheckBox3.Checked = True Then
                Preferences.downloadtvseasonthumbs = True
            Else
                Preferences.downloadtvseasonthumbs = False
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox4_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox4.CheckedChanged
        Try
            If CheckBox4.Checked = True Then
                Preferences.tvfanart = True
            Else
                Preferences.tvfanart = False
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox5_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox5.CheckedChanged
        Try
            If CheckBox5.Checked = True Then
                Preferences.tvposter = True
            Else
                Preferences.tvposter = False
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton8_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton8.CheckedChanged
        Try
            If RadioButton8.Checked = True Then
                Preferences.postertype = "banner"
            Else
                Preferences.postertype = "poster"
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton9_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton9.CheckedChanged
        Try
            If RadioButton9.Checked = True Then
                Preferences.postertype = "poster"
            Else
                Preferences.postertype = "banner"
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton16_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton16.CheckedChanged
        Try
            If RadioButton16.Checked = True Then
                Preferences.seasonall = "wide"
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub RadioButton17_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton17.CheckedChanged
        Try
            If RadioButton17.Checked = True Then
                Preferences.seasonall = "poster"
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub RadioButton18_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton18.CheckedChanged
        Try
            If RadioButton18.Checked = True Then
                Preferences.seasonall = "none"
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton_XBMC_Scraper_TVDB_DVDOrder_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton_XBMC_Scraper_TVDB_DVDOrder.CheckedChanged
        Try
            If RadioButton_XBMC_Scraper_TVDB_DVDOrder.Checked = True Then
                Save_XBMC_TVDB_Scraper_Config("dvdorder", "true")
                Save_XBMC_TVDB_Scraper_Config("absolutenumber", "false")
            Else
                Save_XBMC_TVDB_Scraper_Config("dvdorder", "false")
                Save_XBMC_TVDB_Scraper_Config("absolutenumber", "true")
            End If
            'Read_XBMC_TVDB_Scraper_Config()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_XBMC_Scraper_TVDB_Fanart_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_XBMC_Scraper_TVDB_Fanart.CheckedChanged
        Try
            If CheckBox_XBMC_Scraper_TVDB_Fanart.Checked = True Then
                Save_XBMC_TVDB_Scraper_Config("fanart", "true")
            Else
                Save_XBMC_TVDB_Scraper_Config("fanart", "false")
            End If
            'Read_XBMC_TVDB_Scraper_Config()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_XBMC_Scraper_TVDB_Posters_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_XBMC_Scraper_TVDB_Posters.CheckedChanged
        Try
            If CheckBox_XBMC_Scraper_TVDB_Posters.Checked = True Then
                Save_XBMC_TVDB_Scraper_Config("posters", "true")
            Else
                Save_XBMC_TVDB_Scraper_Config("posters", "false")
            End If
            'Read_XBMC_TVDB_Scraper_Config()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ComboBox_TVDB_Language_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox_TVDB_Language.SelectedIndexChanged
        Try
            Save_XBMC_TVDB_Scraper_Config("language", ComboBox_TVDB_Language.Text)
            'Read_XBMC_TVDB_Scraper_Config()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_XBMC_Scraper_TMDB_Fanart_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_XBMC_Scraper_TMDB_Fanart.CheckedChanged
        Try
            If CheckBox_XBMC_Scraper_TMDB_Fanart.Checked = True Then
                Save_XBMC_TMDB_Scraper_Config("fanart", "true")
            Else
                Save_XBMC_TMDB_Scraper_Config("fanart", "false")
            End If
            'Read_XBMC_TMDB_Scraper_Config()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_XBMC_Scraper_TMDB_IMDBRatings_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_XBMC_Scraper_TMDB_IMDBRatings.CheckedChanged
        Try
            If CheckBox_XBMC_Scraper_TMDB_IMDBRatings.Checked = True Then
                Save_XBMC_TMDB_Scraper_Config("imdbrating", "true")
            Else
                Save_XBMC_TMDB_Scraper_Config("imdbrating", "false")
            End If
            'Read_XBMC_TMDB_Scraper_Config()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ComboBox_TMDB_HD_Trailer_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox_TMDB_HD_Trailer.SelectedIndexChanged
        Try
            Save_XBMC_TMDB_Scraper_Config("trailerq", ComboBox_TMDB_HD_Trailer.Text)
            'Read_XBMC_TMDB_Scraper_Config()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ComboBox_TMDB_Title_Language_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox_TMDB_Title_Language.SelectedIndexChanged
        Try
            Save_XBMC_TMDB_Scraper_Config("language", ComboBox_TMDB_Title_Language.Text)
            'Read_XBMC_TMDB_Scraper_Config()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_XBMC_Scraper_IMDB_FullCredits_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_XBMC_Scraper_IMDB_FullCredits.CheckedChanged
        Try
            If CheckBox_XBMC_Scraper_IMDB_FullCredits.Checked = True Then
                Save_XBMC_IMDB_Scraper_Config("fullcredits", "true")
            Else
                Save_XBMC_IMDB_Scraper_Config("fullcredits", "false")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_XBMC_Scraper_IMDB_Fanart_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_XBMC_Scraper_IMDB_Fanart.CheckedChanged
        Try
            If CheckBox_XBMC_Scraper_IMDB_Fanart.Checked = True Then
                Save_XBMC_IMDB_Scraper_Config("fanart", "true")
            Else
                Save_XBMC_IMDB_Scraper_Config("fanart", "false")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_XBMC_Scraper_IMDB_Posters_MovieDB_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_XBMC_Scraper_IMDB_Posters_MovieDB.CheckedChanged
        Try
            If CheckBox_XBMC_Scraper_IMDB_Posters_MovieDB.Checked = True Then
                Save_XBMC_IMDB_Scraper_Config("tmdbthumbs", "true")
            Else
                Save_XBMC_IMDB_Scraper_Config("tmdbthumbs", "false")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_XBMC_Scraper_IMDB_Posters_IMPAwards_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_XBMC_Scraper_IMDB_Posters_IMPAwards.CheckedChanged
        Try
            If CheckBox_XBMC_Scraper_IMDB_Posters_IMPAwards.Checked = True Then
                Save_XBMC_IMDB_Scraper_Config("impawards", "true")
            Else
                Save_XBMC_IMDB_Scraper_Config("impawards", "false")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_XBMC_Scraper_IMDB_Posters_MoviePosterDB_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_XBMC_Scraper_IMDB_Posters_MoviePosterDB.CheckedChanged
        Try
            If CheckBox_XBMC_Scraper_IMDB_Posters_MoviePosterDB.Checked = True Then
                Save_XBMC_IMDB_Scraper_Config("movieposterdb", "true")
            Else
                Save_XBMC_IMDB_Scraper_Config("movieposterdb", "false")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_XBMC_Scraper_IMDB_Trailer_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_XBMC_Scraper_IMDB_Trailer.CheckedChanged
        Try
            If CheckBox_XBMC_Scraper_IMDB_Trailer.Checked = True Then
                Save_XBMC_IMDB_Scraper_Config("imdbtrailer", "true")
            Else
                Save_XBMC_IMDB_Scraper_Config("imdbtrailer", "false")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ComboBox_IMDB_HD_Trailer_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox_IMDB_HD_Trailer.SelectedIndexChanged
        Try
            Save_XBMC_IMDB_Scraper_Config("trailerq", ComboBox_IMDB_HD_Trailer.Text)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ComboBox_IMDB_Poster_Actor_Size_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox_IMDB_Poster_Actor_Size.SelectedIndexChanged
        Try
            Save_XBMC_IMDB_Scraper_Config("imdbscale", ComboBox_IMDB_Poster_Actor_Size.Text)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ComboBox_IMDB_Title_Language_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox_IMDB_Title_Language.SelectedIndexChanged
        Try
            Save_XBMC_IMDB_Scraper_Config("akatitles", ComboBox_IMDB_Title_Language.Text)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub



    Private Sub Button111_Click(sender As System.Object, e As System.EventArgs) Handles Button111.Click
        Try
            'Reset Font
            'Dim tc As TypeConverter = TypeDescriptor.GetConverter(GetType(System.Drawing.Font))
            'Dim fontString As String = tc.ConvertToString("Times New Roman, 9pt")

            Preferences.font = "Times New Roman, 9pt"

            Dim tcc As TypeConverter = TypeDescriptor.GetConverter(GetType(System.Drawing.Font))
            Dim newFont As System.Drawing.Font = CType(tcc.ConvertFromString(Preferences.font), System.Drawing.Font)

            Label130.Font = newFont
            Label130.Text = "Times New Roman, 9pt"
            generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub SplitContainer1_SplitterMoved(ByVal sender As System.Object, ByVal e As System.Windows.Forms.SplitterEventArgs) Handles SplitContainer1.SplitterMoved
        Try
            DebugSplitter1PosLabel.Text = SplitContainer1.SplitterDistance
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub SplitContainer5_SplitterMoved(ByVal sender As System.Object, ByVal e As System.Windows.Forms.SplitterEventArgs) Handles SplitContainer5.SplitterMoved
        Try
            DebugSplitter5PosLabel.Text = SplitContainer5.SplitterDistance
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ExtraDebugEnable_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExtraDebugEnable.CheckedChanged
        Try
            If ExtraDebugEnable.Checked = True Then
                DebugSplitter1PosLabel.Visible = True
                DebugSplitter2PosLabel.Visible = True
                DebugSplitter5PosLabel.Visible = True
                DebugScreenSizeLabel.Visible = True
            Else
                DebugSplitter1PosLabel.Visible = False
                DebugSplitter2PosLabel.Visible = False
                DebugSplitter5PosLabel.Visible = False
                DebugScreenSizeLabel.Visible = False
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub SplitContainer2_SplitterMoved(ByVal sender As System.Object, ByVal e As System.Windows.Forms.SplitterEventArgs) Handles SplitContainer2.SplitterMoved
        Try
            DebugSplitter2PosLabel.Text = SplitContainer2.SplitterDistance
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ScrapeFullCertCheckBox_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles ScrapeFullCertCheckBox.CheckedChanged
        Try
            If ScrapeFullCertCheckBox.Checked Then
                Preferences.scrapefullcert = True
            Else
                Preferences.scrapefullcert = False
            End If
            'generalprefschanged = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub MediaCompanionCodeplexSiteToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MediaCompanionCodeplexSiteToolStripMenuItem.Click
        Try
            Dim webAddress As String = "http://mediacompanion.codeplex.com/"
            Process.Start(webAddress)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub


    Private Sub CheckBoxDebugShowXML_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles CheckBoxDebugShowXML.CheckedChanged
        Try
            If CheckBoxDebugShowXML.Checked = False Then
                TabLevel1.TabPages.Remove(Me.TabConfigXML)
                TabLevel1.TabPages.Remove(Me.TabMovieCacheXML)
                TabLevel1.TabPages.Remove(Me.TabTVCacheXML)
                TabLevel1.TabPages.Remove(Me.TabProfile)
                TabLevel1.TabPages.Remove(Me.TabActorCache)
                TabLevel1.TabPages.Remove(Me.TabRegex)
            Else
                TabLevel1.TabPages.Add(Me.TabConfigXML)
                TabLevel1.TabPages.Add(Me.TabMovieCacheXML)
                TabLevel1.TabPages.Add(Me.TabTVCacheXML)
                TabLevel1.TabPages.Add(Me.TabProfile)
                TabLevel1.TabPages.Add(Me.TabActorCache)
                TabLevel1.TabPages.Add(Me.TabRegex)
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button112_Click(sender As System.Object, e As System.EventArgs) Handles ButtonNextFanart.Click
        Try
            If noFanart = False Then
                Call mov_FiltersAndSortApply("missing fanart") 'Apply Filters to movielist combobox
                Call mov_FanartLoad()   'refresh fanart for the current movie
                If MovieListComboBox.Items.Count = 0 Then   'last fanart saved
                    ButtonNextFanart.Visible = True
                    ButtonNextFanart.Enabled = False
                    ButtonNextFanart.Text = "All Fanart Done!"
                Else
                    If noFanart = False Then ButtonNextFanart.Visible = False 'Hide button whilst getting new fanart NOTE: noFanart can be changed by loadfanart inside the original If noFanart false
                End If
            Else
                Dim maxIndex As Integer = MovieListComboBox.Items.Count - 1
                Dim currentIndex As Integer = MovieListComboBox.SelectedIndex
                currentIndex += 1
                If currentIndex > maxIndex Then
                    ButtonNextFanart.Enabled = False
                    ButtonNextFanart.Text = "All Fanart Done!"
                Else
                    MovieListComboBox.ClearSelected()
                    MovieListComboBox.SetSelected(currentIndex, True)
                    mov_FanartLoad()
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub


    Private Sub CheckBoxRenameNFOtoINFO_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBoxRenameNFOtoINFO.CheckedChanged
        Try
            If CheckBoxRenameNFOtoINFO.Checked = False Then
                Preferences.renamenfofiles = False
            Else
                Preferences.renamenfofiles = True
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox42_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles CheckBox42.CheckedChanged
        Try
            Try
                If CheckBox42.CheckState = CheckState.Checked Then
                    Me.DataGridView1.Columns("plot").Visible = True
                    Call mov_TextBoxesSetup()
                Else
                    Me.DataGridView1.Columns("plot").Visible = False
                    Call mov_TextBoxesSetup()
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

   
    Public Sub util_ConfigLoad()
        Preferences.LoadConfig()
        Me.GroupBox22.Visible = Not Preferences.tvshow_useXBMC_Scraper
        Me.GroupBox22.SendToBack()
        Me.GroupBox_TVDB_Scraper_Preferences.Visible = Preferences.tvshow_useXBMC_Scraper
        Me.GroupBox_TVDB_Scraper_Preferences.BringToFront()

        Me.RadioButton51.Enabled = Preferences.movies_useXBMC_Scraper
        Me.RadioButton52.Enabled = Preferences.movies_useXBMC_Scraper
        Me.RadioButton51.Checked = CBool(Preferences.whatXBMCScraperIMBD)

        Me.CheckBoxRenameNFOtoINFO.Checked = Preferences.renamenfofiles
        Me.ScrapeFullCertCheckBox.Checked = Preferences.scrapefullcert

        Me.TextBox_OfflineDVDTitle.Text = Preferences.OfflineDVDTitle
        Me.CheckBox_ShowDateOnMovieList.Checked = Preferences.showsortdate
        Renamer.setRenamePref(tv_RegexRename.Item(Preferences.tvrename))
        Read_XBMC_IMDB_Scraper_Config()
    End Sub

    
    Private Sub MediaCompanionHelpFileToolStripMenuItem_Click(sender As System.Object, e As System.EventArgs) Handles MediaCompanionHelpFileToolStripMenuItem.Click
        Try
            Process.Start(applicationPath & "\Media_Companion.chm")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

  
    Private Sub CheckBox_ShowDateOnMovieList_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles CheckBox_ShowDateOnMovieList.CheckedChanged
        Try
            If CheckBox_ShowDateOnMovieList.Checked = True Then
                Preferences.showsortdate = True
            Else
                Preferences.showsortdate = False
            End If
            Call mov_MovieComboListSort()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DisplayEpisodesByAiredDateToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_DispByAiredDate.Click
        Try
            MsgBox("Aired Date Coming soon")
            'Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()

            'Dim WorkingEpisode As TvEpisode = ep_SelectedCurrently()
            'Dim testmax As Integer = 0
            'Dim textstring As String = ""   'this is the string used to add our text together to make our final list to be shown
            'Dim Abort As Boolean = True     'this is used to verify that we actually hjave episodes to process

            'Dim mySortedList As New SortedList()        'this is our sorted list, we add to the list a key (aired date) & the associated data (episode name), then we sort it & then we read out the data

            'Dim childNodeLevel1 As TreeNode = TvTreeview.SelectedNode    'this section steps down through the tree to get from the tvshow to each episode
            'For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes
            '    For Each childNodeLevel3 As TreeNode In childNodeLevel2.Nodes
            '        Abort = False                                       'if we get here then there is at least 1 episode
            '        Dim path As String = childNodeLevel3.Name           'this holds the full path to the actual nfo file of the episode
            '        'we load that nfo so that we can retrieve the data we want from it in workingEpisode
            '        Dim EpAired As String = ""                          'define & set our episode aired date as nothing

            '        '
            '        'If workingEpisode.Count > testmax Then testmax = workingEpisode.Count
            '        '
            '        Dim f = 0                                           'We find each episode individually so we only need to look at the first index
            '        If WorkingEpisode.aired <> Nothing Then          'If we have a valid date figure then set our date figure
            '            EpAired = WorkingEpisode.Aired.Value

            '            'Convert episode to 2 digits for formatting
            '            Dim episode2digit As New List(Of String)
            '            episode2digit.Clear()
            '            episode2digit.Add(WorkingEpisode.Episode.Value)
            '            If episode2digit(0).Length = 1 Then episode2digit(0) = "0" & episode2digit(0)

            '            'Convert season to 2 digits for formatting
            '            Dim season2digit As String = WorkingEpisode.Season.value
            '            If season2digit.Length = 1 Then season2digit = "0" & season2digit

            '            'here we add our data in the order that it is read in the tree - the sorted list will sort it for us
            '            'using the key value .aired (date format is yyyy-mm-dd so simple alphabetical sort is all that is required)
            '            'FormatTVFilename formats the show title,episode tile, season no & episode no as per the users preferences
            '            mySortedList.Add(WorkingEpisode.Aired, Renamer.setTVFilename(WorkingTvShow.Title.Value, WorkingEpisode.Title.Value, episode2digit, season2digit))

            '        End If
            '    Next
            'Next

            'If Not Abort Then   'i.e. we have episodes in this show.... 
            '    textstring = WorkingTvShow.Title.Value & vbCrLf                                               'start our text with the show title
            '    textstring = textstring & StrDup(WorkingTvShow.Title.Value.Length, "-") & vbCrLf              'add an underline of the same length    

            '    For Line = 0 To mySortedList.Count - 1                                                  'read the data from the sorted list
            '        textstring = textstring & mySortedList.GetKey(Line) & " " & mySortedList.GetByIndex(Line) & vbCrLf
            '    Next

            '    textstring = textstring & vbCrLf & "* missing episodes are not listed" & vbCrLf         'add a note about the missing episodes (they use the playcount field but are not in workingEpisodes

            '    '                                                                                   'Show Final Listing Screen
            '    Dim MyFormObject As New frmoutputlog(textstring, True)                                   'create the log form & modify it to suit our needs   
            '    MyFormObject.Font = New System.Drawing.Font("Courier New", 10.2!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte)) 'constant width font
            '    MyFormObject.Button1.AutoSize = True                                                    'change button size to text will fit automatically
            '    MyFormObject.Button1.Text = "Save Details..."                                           'change the button text
            '    MyFormObject.Text = "Episodes in Aired Order for " & WorkingTvShow.Title.Value              'change the form title text
            '    MyFormObject.ShowDialog()                                                               'show the form

            'Else                    'we get here if abort still = true, i.e. no episodes
            '    MsgBox("There are no epsiodes scraped for this show" & vbCrLf & "Missing Episodes do not have the 'aired' date detail", MsgBoxStyle.OkOnly, "No Episodes")
            'End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub PlayMovieToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PlayMovieToolStripMenuItem1.Click
        Try
            mov_Play()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RescrapeThisShowToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_RescrapeShowOrEpisode.Click
        Try
            tv_Rescrape()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TextBox_OfflineDVDTitle_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles TextBox_OfflineDVDTitle.TextChanged
        Try
            Preferences.OfflineDVDTitle = TextBox_OfflineDVDTitle.Text
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TvTreeview_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles TvTreeview.MouseUp
        Try
            If e.Button = MouseButtons.Right Then
                Dim pt As Point
                pt.X = e.X
                pt.Y = e.Y
                MovieListComboBox.SelectedIndex = MovieListComboBox.IndexFromPoint(pt)
                TvTreeview.SelectedNode = TvTreeview.GetNodeAt(TvTreeview.PointToClient(Cursor.Position)) '***select actual the node 

                'context menu will be shown soon so we modify it to suit...***after*** we make the selection of the node 
                Tv_TreeViewContextMenuItemsEnable()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    
    Private Sub ToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_ViewNfo.Click
        Try
            If TvTreeview.SelectedNode Is Nothing Then Exit Sub
            If TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvShow Then
                Utilities.NfoNotepadDisplay(DirectCast(TvTreeview.SelectedNode.Tag, Media_Companion.TvShow).NfoFilePath)
            ElseIf TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvSeason Then
                MsgBox("A Season NFO is invalid so it can't be shown")
            ElseIf TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvEpisode Then
                Utilities.NfoNotepadDisplay(DirectCast(TvTreeview.SelectedNode.Tag, Media_Companion.TvEpisode).NfoFilePath)
            Else
                MsgBox("None")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

        Debug.Print(Me.Controls.Count)
    End Sub

    Private Sub Tv_TreeViewContext_FindMissArt_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_FindMissArt.Click
        Try
            tv_MissingArtDownload(tv_ShowSelectedCurrently)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub CheckBox_fixNFOid_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles CheckBox_fixNFOid.CheckedChanged
        Try
            If CheckBox_fixNFOid.CheckState = CheckState.Checked Then
                Preferences.fixnfoid = True
            Else
                Preferences.fixnfoid = False
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ContextMenuStrip1_Opening(ByVal sender As System.Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles ContextMenuStrip1.Opening
        Try
            If (MovieListComboBox.SelectedItems.Count = 0) Then
                e.Cancel = True
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ContextMenuStrip2_Opening(ByVal sender As System.Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles ContextMenuStrip2.Opening
        Try
            If (TvTreeview.SelectedNode Is Nothing) Then
                e.Cancel = True
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub SaveSelectedFanartAsToolStripMenuItem_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles SaveSelectedFanartAsToolStripMenuItem.Click
        Try
            messbox = New frmMessageBox("Please wait,", "", "Downloading Fanart")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            Me.Refresh()
            messbox.Refresh()
            Me.Refresh()
            Application.DoEvents()

            Dim tempstring As String
            Dim tempint As Integer = 0
            Dim tempstring2 As String = String.Empty
            Dim allok As Boolean = False
            For Each button As Control In Me.Panel2.Controls
                If button.Name.IndexOf("checkbox") <> -1 Then
                    Dim b1 As RadioButton = CType(button, RadioButton)
                    If b1.Checked = True Then
                        tempstring = b1.Name
                        tempstring = tempstring.Replace("moviefanartcheckbox", "")
                        tempint = Convert.ToDecimal(tempstring)
                        tempstring2 = fanartArray(tempint).hdposter
                        allok = True
                        Exit For
                    End If
                End If
            Next
            If allok = False Then
                MsgBox("No Fanart Is Selected")
            Else
                Try
                    Panel1.Controls.Remove(Label1)
                    Dim buffer(40000000) As Byte
                    Dim size As Integer = 0
                    Dim bytesRead As Integer = 0

                    Dim fanartthumburl As String = tempstring2
                    Dim req As HttpWebRequest = WebRequest.Create(fanartthumburl)
                    Dim res As HttpWebResponse = req.GetResponse()
                    Dim contents As Stream = res.GetResponseStream()
                    Dim bmp As New Bitmap(contents)
                    Dim savepath As String

                    Dim bytesToRead As Integer = CInt(buffer.Length)

                    While bytesToRead > 0
                        size = contents.Read(buffer, bytesRead, bytesToRead)
                        If size = 0 Then Exit While
                        bytesToRead -= size
                        bytesRead += size
                    End While
                    With SaveFileDialog1
                        .AddExtension = True
                        .DefaultExt = "jpg"
                        .Filter = "Jpg Pictures (*.jpg)|*.jpg"
                        .Title = "Save Hi-Res Fanart as"
                        .OverwritePrompt = True
                        .CheckPathExists = True
                        .InitialDirectory = workingMovieDetails.fileinfo.path
                    End With
                    If Preferences.resizefanart = 1 Then
                        Try
                            Dim tempbitmap As Bitmap = bmp
                            If SaveFileDialog1.ShowDialog = Windows.Forms.DialogResult.OK Then
                                savepath = SaveFileDialog1.FileName
                                tempbitmap.Save(savepath, Imaging.ImageFormat.Jpeg)
                            End If
                        Catch ex As Exception
                            tempstring = ex.Message.ToString
                        End Try
                    ElseIf Preferences.resizefanart = 2 Then
                        If bmp.Width > 1280 Or bmp.Height > 720 Then
                            Dim bm_source As New Bitmap(bmp)
                            Dim bm_dest As New Bitmap(1280, 720)
                            Dim gr As Graphics = Graphics.FromImage(bm_dest)
                            gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                            gr.DrawImage(bm_source, 0, 0, 1280 - 1, 720 - 1)
                            Dim tempbitmap As Bitmap = bm_dest
                            If SaveFileDialog1.ShowDialog = Windows.Forms.DialogResult.OK Then
                                savepath = SaveFileDialog1.FileName
                                tempbitmap.Save(savepath, Imaging.ImageFormat.Jpeg)
                            End If
                        Else
                            Thread.Sleep(30)
                            If SaveFileDialog1.ShowDialog = Windows.Forms.DialogResult.OK Then
                                savepath = SaveFileDialog1.FileName
                                bmp.Save(savepath, Imaging.ImageFormat.Jpeg)
                            End If
                        End If
                    ElseIf Preferences.resizefanart = 3 Then
                        If bmp.Width > 960 Or bmp.Height > 540 Then
                            Dim bm_source As New Bitmap(bmp)
                            Dim bm_dest As New Bitmap(960, 540)
                            Dim gr As Graphics = Graphics.FromImage(bm_dest)
                            gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                            gr.DrawImage(bm_source, 0, 0, 960 - 1, 540 - 1)
                            Dim tempbitmap As Bitmap = bm_dest
                            If SaveFileDialog1.ShowDialog = Windows.Forms.DialogResult.OK Then
                                savepath = SaveFileDialog1.FileName
                                tempbitmap.Save(savepath, Imaging.ImageFormat.Jpeg)
                            End If
                        Else
                            Thread.Sleep(30)
                            If SaveFileDialog1.ShowDialog = Windows.Forms.DialogResult.OK Then
                                savepath = SaveFileDialog1.FileName
                                bmp.Save(savepath, Imaging.ImageFormat.Jpeg)
                            End If
                        End If
                    End If
                Catch ex As WebException
                    MsgBox(ex.Message)
                End Try
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        Finally
            messbox.Close()
        End Try

    End Sub


    Private Sub TasksDontShowCompleted_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles TasksDontShowCompleted.CheckedChanged
        Me.TasksOnlyIncompleteTasks = TasksDontShowCompleted.Checked
    End Sub
End Class