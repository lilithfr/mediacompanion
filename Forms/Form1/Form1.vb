Option Explicit On

Imports System.Net
Imports System.IO
Imports System.Text.RegularExpressions
Imports System.Threading
Imports Media_Companion.Preferences
Imports System.Xml
Imports System.Reflection
Imports System.Windows.Forms
Imports System.ComponentModel
Imports System.Linq

#Const SilentErrorScream = False
#Const NoRefocus = True


Public Class Form1

    Const NFO_INDEX As Integer = 1

    Public Dim WithEvents BckWrkScnMovies       As BackgroundWorker = New BackgroundWorker
    Public Dim WithEvents BckWrkCheckNewVersion As BackgroundWorker = New BackgroundWorker


    #Region "Movie scraping related objects"
    Public Dim WithEvents oMovies As New Movies

    Public filteredList        As New List(Of ComboList)
    Public rescrapeList        As New RescrapeList
    Public workingMovieDetails As     FullMovieDetails
    Public _rescrapeList       As New RescrapeSpecificParams
    Public ChangeMovieImdb     = ""
    Public droppedItems        As New List(Of String)
    Public ControlsToDisableDuringMovieScrape As IEnumerable(Of Control)

    Public Shared blnAbortFileDownload As Boolean
    Public Shared ReadOnly countLock = New Object
    Public ScraperErrorDetected As Boolean    
    
    #End Region 'Movie scraping objects


    Enum ProgramState
        ResettingFilters
	    UpdatingFilteredList
        ResizingSplitterPanel
	    Other
    End Enum

    Public State As ProgramState=ProgramState.Other


    Public DataDirty As Boolean

    Public CopyOfPreferencesIgnoreArticle As Boolean

    Public _yield               As Boolean
    Public LastMovieDisplayed   As String=""
    Public ActorFilter          As String=""
    Public SetFilter            As String=""
    Public ResolutionFilter     As String=""
    Public AudioCodecsFilter    As String=""
    Public AudioLanguagesFilter As String=""
    Public AudioChannelsFilter  As String=""
    Public AudioBitratesFilter  As String=""
    Public NumAudioTracksFilter As String=""

    'Public Shared Preferences As New Structures

    Public MainFormLoadedStatus As Boolean = False
    Public movieRefreshNeeded As Boolean = True
    Public tvRefreshNeeded As Boolean = True
    Public messbox As New frmMessageBox("blank", "", "")
    Public startup As Boolean = True
    Public tv_RegexScraper As New List(Of String)
    Public tv_RegexRename As New List(Of String)
    Public dList As New List(Of String)
    Public scraperFunction2 As New ScraperFunctions
    Public globalThreadStop As Boolean = False
    Public globalThreadCounter As Integer = 0
    Public nfoFunction As New WorkingWithNfoFiles
    Public mediaInfoExp As New MediaInfoExport

    'Replace the list of structure by a list of objects

    Private ToolTipGridMoviePosition As Point

    Public Data_GridViewMovie As Data_GridViewMovie
    'Public filteredListObj As New List(Of Data_GridViewMovie)
    Public DataGridViewBindingSource As New BindingSource


    Public homemovielist As New List(Of str_BasicHomeMovie)
    Public WorkingHomeMovie As New HomeMovieDetails
    Public workingMovie As New ComboList
    Public tvBatchList As New str_TvShowBatchWizard(SetDefaults)
    Public generalprefschanged As Boolean = False
    Public movieprefschanged As Boolean = False
    Public tvprefschanged As Boolean = False
    Public cleanfilenameprefchanged As Boolean = False
    Public videosourceprefchanged As Boolean = False
    Public scraperLog As String = ""


    Public noFanart As Boolean
    'Public Shared tvScraperLog As String = ""

    Dim WithEvents bigPictureBox As PictureBox
    Dim WithEvents fanartBoxes As PictureBox
    Dim WithEvents fanartCheckBoxes As RadioButton
    Dim WithEvents posterPicBoxes As PictureBox
    Dim WithEvents posterCheckBoxes As RadioButton
    Dim WithEvents posterLabels As Label
    Dim WithEvents resLabel As Label
    Dim WithEvents tvFanartBoxes As PictureBox
    Dim WithEvents tvFanartCheckBoxes As RadioButton
    Dim WithEvents resolutionLabels As Label
    Dim newTvFolders As New List(Of String)
    Dim maximised As Boolean = False
    Public imdbCounter As Integer = 0
    Dim tootip5 As New ToolTip

    Dim prefsload As Boolean = False

    Dim pictureList As New List(Of PictureBox)
    Dim screenshotTab As TabPage

    Dim filterOverride As Boolean = False
    Dim mouseOver As Boolean = False


    Dim bigPanel As Panel
    Dim realMoviePaths As New List(Of String)
    Dim realTvPaths As New List(Of String)
    Dim newTvShows As New List(Of String)
    Dim profileStruct As New Profiles
    Dim frmSplash As New frmSplashscreen
    Dim frmSplash2 As New frmProgressScreen
    Dim progressmode As Boolean
    Dim overItem As String
    Dim scrapeAndQuit As Boolean = False
    Dim mouseDelta As Integer = 0
    Dim resLabels As Label
    Dim fanartUrls(1000, 1) As String
    Dim fanartArray As New List(Of str_ListOfPosters)
    Dim cropString As String
    Dim thumbedItsMade As Boolean = False
    Dim posterArray As New List(Of str_ListOfPosters)
    Dim pageCount As Integer = 0
    Dim currentPage As Integer = 0
    Dim posterThumbedItsMade As Boolean = False
    Dim posterCropString As String
    Dim tab1 As Integer = 0

    Dim listOfTvFanarts As New List(Of str_FanartList)
    Dim lockedList As Boolean = False
    Dim tempTVDBiD As String = String.Empty
    Dim novaThread As Thread
    Dim newMovieFoundTitle As String = String.Empty
    Dim newMovieFoundFilename As String = String.Empty
    Dim tableSets As New List(Of str_TableItems)
    Dim relativeFolderList As New List(Of str_RelativeFileList)

    Dim templanguage As String

    Dim combostart As String = ""

    Dim currentposterid As String = ""
    Dim workingposterpath As String

    Dim WithEvents tvposterpicboxes As PictureBox
    Dim WithEvents tvpostercheckboxes As RadioButton
    Dim WithEvents tvposterlabels As Label
    Dim WithEvents tvreslabel As Label
    Dim tvposterpage As Integer = 1
    Dim walllocked As Boolean = False
    Dim maxcount As Integer = 0
    Dim moviecount_bak As Integer = 0
    Dim displayRuntimeScraper As Boolean = True
    Dim tv_IMDbID_detected As Boolean = False
    Dim tv_IMDbID_warned As Boolean = False
    Dim tv_IMDbID_detectedMsg As String = String.Format("Media Companion has detected one or more TV Shows has an incorrect ID.{0}", vbCrLf) & _
                            String.Format("To rectify, please select the following:{0}", vbCrLf) & _
                            String.Format("  1. TV Preferences -> Fix NFO id during cache refresh{0}", vbCrLf) & _
                            String.Format("  2. TV Shows -> Refresh Shows{0}", vbCrLf) & _
                            String.Format("(This will only be reported once per session)", vbCrLf)
    Dim TVSearchALL As Boolean = False
    Private ClickedControl As String


    Private WithEvents FileToBeDownloaded As WebFileDownloader
    Private tvCurrentTabIndex As Integer = 0
    Private currentTabIndex As Integer = 0
    Private homeTabIndex As Integer = 0

    Public totalfilesize As Long = 0
    Public listoffilestomove As New List(Of String)
    Dim showstoscrapelist As New List(Of String)
    Dim processnow As Boolean = True
    Dim currenttitle As String
    Public homemovietabindex As Integer = 0


    Private Sub Form1_BackgroundImageChanged(sender As Object, e As System.EventArgs) Handles Me.BackgroundImageChanged

    End Sub


    'TODO: (Form1_Load) Need to refactor
    Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load

        AddHandler Preferences.PropertyChanged_MkvMergeGuiPath, AddressOf MkvMergeGuiPath_ChangeHandler
        Label73.Text = ""

        BckWrkScnMovies.WorkerReportsProgress      = true
        BckWrkScnMovies.WorkerSupportsCancellation = true

        oMovies.Bw = BckWrkScnMovies

        For I = 0 To 20
            Common.Tasks.Add(New Tasks.BlankTask())
        Next

        'Preferences.applicationPath = Application.ExecutablePath.Substring(0, Application.ExecutablePath.LastIndexOf("\"))
        'Utilities.applicationPath = Application.ExecutablePath.Substring(0, Application.ExecutablePath.LastIndexOf("\"))
        Preferences.applicationPath = Application.StartupPath
        Utilities.applicationPath = Application.StartupPath
        If Not Utilities.GetFrameworkVersions().IndexOf("4.0") Then
            Dim RequiredNetURL As String = "http://www.microsoft.com/download/en/details.aspx?id=17718"
            If MsgBox("The Client version is available through Windows Updates." & vbCrLf & _
                      "The Full version, while not required, is available from:" & vbCrLf & _
                      RequiredNetURL & vbCrLf & vbCrLf & _
                      "Do you wish to download the Full version?", _
                      MsgBoxStyle.YesNo, "MC Requires .Net 4.0.") = MsgBoxResult.Yes Then
                'Process.Start(RequiredNetURL)
                OpenUrl( RequiredNetURL )
                End
            End If
        End If

        'TasksList.DataSource = Common.Tasks

        ForegroundWorkTimer.Interval = 500
        AddHandler ForegroundWorkTimer.Tick, AddressOf ForegroundWorkPumper

        Dim asm As Assembly = Assembly.GetExecutingAssembly
        Dim InternalResourceNames() As String = asm.GetManifestResourceNames

        For Each Temp In InternalResourceNames
            Dim Temp1 As ManifestResourceInfo = asm.GetManifestResourceInfo(Temp)
        Next

        
        'Try
        '    Dim scraperfunction As New imdb.Classimdbscraper
        '    Dim temp As String = scraperfunction.getversion
        '    If Convert.ToInt32(temp) < 5 Then
        '        MsgBox("             Out of date IMDB scraper file detected" & vbCrLf & "Please replace your 'imdb.dll' file with the one from the downloaded archive")
        '        End
        '    End If
        'Catch

        'End Try
        'Panel4.Location = New Point(149, 23)              'Disabled this direct positioning on Panel 4 so that we can position in GUI....SK
        TvTreeview.Sort()

        For Each arg As String In Environment.GetCommandLineArgs()
            Console.WriteLine(arg)
            If arg = "sq" Then
                Me.WindowState = FormWindowState.Minimized
                scrapeAndQuit = True
            End If
        Next

        If scrapeAndQuit = False Then
            frmSplash.Show()


            frmSplash.Label3.Text = "Status :- Initialising Program"
            frmSplash.Label3.Refresh()
        End If
        Me.Visible = False

        Me.Refresh()
        Application.DoEvents()
        Dim tempstring As String
        tempstring = applicationPath & "\enablemultiple.set"
        If Not File.Exists(tempstring) Then
            Dim tej As Integer = 0
            Dim processes() As Process
            Dim instance As Process
            Dim process As New Process()
            processes = process.GetProcesses
            For Each instance In processes
                If instance.ProcessName = "Media Companion" Then                            'If instance.ProcessName.IndexOf("Media Companion - V") <> -1 Then          This should limit the match to only Median Companion running not Visual Studio 2010
                    tej = tej + 1
                    If tej >= 2 Then
                        MsgBox("XBMC Media Companion is already running")

                        End                         'Close MC since another version of the program is running.
                    End If
                End If
            Next
        End If
        CheckForIllegalCrossThreadCalls = False
        'messbox.Show()
        'messbox.Visible = False



        Preferences.maximised = False
        Preferences.SetUpPreferences()                     'Set defaults to all userpreferences. We then load the preferences from config.xml this way any missing ones have a default already set
        generalprefschanged = False

        tempstring = applicationPath & "\Settings\" 'read in the config.xml to set the stored preferences (if it exists)
        Dim hg As New IO.DirectoryInfo(tempstring)
        If hg.Exists Then
            ' applicationdatapath = tempstring
            Preferences.configpath = tempstring & "config.xml"
            If Not IO.File.Exists(Preferences.configpath) Then

                Preferences.SaveConfig()
            End If
        Else
            IO.Directory.CreateDirectory(tempstring)
            workingProfile.config = tempstring = applicationPath & "\Settings\config.xml"
            Preferences.SaveConfig()
        End If



        If IO.File.Exists(applicationPath & "\settings\profile.xml") = True Then
            Call util_ProfilesLoad()
            For Each prof In profileStruct.ProfileList
                If prof.ProfileName = profileStruct.StartupProfile Then
                    workingProfile.actorcache = prof.actorcache
                    workingProfile.config = prof.config
                    workingProfile.moviecache = prof.moviecache
                    workingProfile.profilename = prof.profilename
                    workingProfile.regexlist = prof.regexlist
                    workingProfile.filters = prof.filters
                    workingProfile.tvcache = prof.tvcache
                    workingProfile.profilename = prof.profilename
                    For Each item In ProfilesToolStripMenuItem.DropDownItems
                        If item.text = workingProfile.profilename Then
                            With item
                                item.checked = True
                            End With
                        Else
                            item.checked = False
                        End If
                    Next
                End If
            Next
        Else
            profileStruct.WorkingProfileName = "Default"
            profileStruct.DefaultProfile = "Default"
            profileStruct.StartupProfile = "Default"
            Dim currentprofile As New ListOfProfiles
            tempstring = applicationPath & "\Settings\"
            currentprofile.ActorCache = tempstring & "actorcache.xml"
            currentprofile.Config = tempstring & "config.xml"
            currentprofile.RegExList = tempstring & "regex.xml"
            currentprofile.TvCache = tempstring & "tvcache.xml"
            currentprofile.Filters = tempstring & "filters.txt"
            currentprofile.MovieCache = tempstring & "moviecache.xml"
            currentprofile.ProfileName = "Default"
            profileStruct.ProfileList.Add(currentprofile)
            profileStruct.WorkingProfileName = "Default"
            Call util_ProfileSave()
            Call util_ProfilesLoad()
            For Each prof In profileStruct.ProfileList
                If prof.ProfileName = profileStruct.StartupProfile Then
                    workingProfile.actorcache = prof.actorcache
                    workingProfile.config = prof.config
                    workingProfile.moviecache = prof.moviecache
                    workingProfile.profilename = prof.profilename
                    workingProfile.regexlist = prof.regexlist
                    workingProfile.filters = prof.filters
                    workingProfile.tvcache = prof.tvcache
                    workingProfile.profilename = prof.profilename
                End If
            Next
        End If


        If workingProfile.homemoviecache = "" Then workingProfile.homemoviecache = tempstring & "homemoviecache.xml"
        'Update Main Form Window Title to show Currrent Version - displays current profile so has to be done after profile is loaded
        util_MainFormTitleUpdate()



        'Application data folder

        'Dim f As New IO.DirectoryInfo(applicationdatapath)
        'If Not f.Exists Then
        '    Try
        '        Directory.CreateDirectory(applicationdatapath)
        '    Catch ex As Exception
        '        MsgBox(ex.Message.ToString)
        '        End
        '    End Try
        'End If

        Dim g As New IO.DirectoryInfo(IO.Path.Combine(applicationPath, "settings\postercache\"))
        If Not g.Exists Then
            Try
                Directory.CreateDirectory(IO.Path.Combine(applicationPath, "settings\postercache\"))
            Catch ex As Exception
                MsgBox(ex.Message.ToString)
                End
            End Try
        End If

        CheckForIllegalCrossThreadCalls = False

        'These lines fixed the associated panel so that they don't automove when the Form1 is resized
        SplitContainer1.FixedPanel = System.Windows.Forms.FixedPanel.Panel1 'Left Panel on Movie tab - Movie Listing 
        SplitContainer5.FixedPanel = System.Windows.Forms.FixedPanel.Panel2 'Bottom Left Panel on Movie Tab - Filters
        SplitContainer3.FixedPanel = System.Windows.Forms.FixedPanel.Panel1 'Left Panel on TV Tab

        Try
            If IO.File.Exists(IO.Path.Combine(applicationPath, "\error.log")) Then IO.File.Delete(IO.Path.Combine(applicationPath, "\error.log"))
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try

        tempstring = applicationDatapath & "error.log"
        If IO.File.Exists(tempstring) = True Then
            IO.File.Delete(tempstring)
        End If


        'ToolStrip1.Enabled = False

        Call util_RegexLoad()

        Call util_PrefsLoad()

        'If applicationpath.IndexOf("/") <> -1 Then tempstring = applicationpath & "/" & "config.xml"
        'If applicationpath.IndexOf("\") <> -1 Then tempstring = applicationpath & "\" & "config.xml"

        Movies.SpinUpDrives

        If scrapeAndQuit = False Then
            Me.Visible = True


            Dim intX As Integer = Screen.PrimaryScreen.Bounds.Width
            Dim intY As Integer = Screen.PrimaryScreen.Bounds.Height
            SplitContainer1.IsSplitterFixed = True
            SplitContainer2.IsSplitterFixed = True
            SplitContainer3.IsSplitterFixed = True
            SplitContainer4.IsSplitterFixed = True
            SplitContainer5.IsSplitterFixed = True
            If Preferences.maximised = False Then
                If Preferences.locx < 0 Then Preferences.locx = 0
                If Preferences.locy < 0 Then Preferences.locy = 0
                If Preferences.formheight > intY Then Preferences.formheight = intY
                If Preferences.formwidth > intX Then Preferences.formwidth = intX
                If Preferences.locx >= intX Then Preferences.locx = intX - Preferences.formwidth
                If Preferences.locy >= intY Then Preferences.locy = intY - Preferences.formheight
                If Preferences.formheight <> 0 And Preferences.formwidth <> 0 Then
                    Me.Width = Preferences.formwidth
                    Me.Height = Preferences.formheight
                    Me.Location = New Point(Preferences.locx, Preferences.locy)
                End If
            Else
                Me.WindowState = FormWindowState.Maximized
            End If

            Dim dpi As Graphics = Me.CreateGraphics

            'MessageBox.Show(String.Format("X={0}, Y={1}", dpi.DpiX, dpi.DpiY),
            '"DPI Settings", MessageBoxButtons.OK, MessageBoxIcon.Information)

            DebugSytemDPITextBox.Text = dpi.DpiX

            'If Preferences.maximised = True Then
            '    Me.WindowState = FormWindowState.Maximized
            'Else
            '    If Preferences.locx <> 0 Then
            '        Me.Location = New Point(Preferences.locx, Preferences.locy)
            '    End If
            '    If Preferences.locy <> 0 Then
            '        Me.Location = New Point(Preferences.locx, Preferences.locy)
            '    End If
            '    If Preferences.formheight <> 0 And Preferences.formwidth <> 0 Then
            '        Me.Width = Preferences.formwidth
            '        Me.Height = Preferences.formheight
            '    End If
            'End If

            Me.Refresh()
            Application.DoEvents()

            Me.Refresh()
            Application.DoEvents()

            Application.DoEvents()

            screenshotTab = TabControl3.TabPages(1)

            TabControl3.TabPages.RemoveAt(1)

            If Preferences.splt5 = 0 Then
                Dim tempint As Integer = SplitContainer1.Height
                tempint = tempint / 4
                tempint = tempint * 3
                If tempint > 275 Then
                    Preferences.splt5 = tempint
                Else
                    Preferences.splt5 = 275
                End If
            End If

            If Preferences.startuptab = 0 Then
                SplitContainer1.SplitterDistance = Preferences.splt1
                SplitContainer2.SplitterDistance = Preferences.splt2
                SplitContainer5.SplitterDistance = Preferences.splt5
                TabLevel1.SelectedIndex = 1
                SplitContainer3.SplitterDistance = Preferences.splt3
                SplitContainer4.SplitterDistance = Preferences.splt4
                TabLevel1.SelectedIndex = 0
            ElseIf Preferences.startuptab = 1 Then
                SplitContainer1.SplitterDistance = Preferences.splt1
                SplitContainer2.SplitterDistance = Preferences.splt2
                SplitContainer5.SplitterDistance = Preferences.splt5
                TabLevel1.SelectedIndex = 1
                SplitContainer3.SplitterDistance = Preferences.splt3
                SplitContainer4.SplitterDistance = Preferences.splt4
            ElseIf Preferences.startuptab = 2 Then
                SplitContainer1.SplitterDistance = Preferences.splt1
                SplitContainer2.SplitterDistance = Preferences.splt2
                SplitContainer5.SplitterDistance = Preferences.splt5
                SplitContainer3.SplitterDistance = Preferences.splt3
                SplitContainer4.SplitterDistance = Preferences.splt4
                TabLevel1.SelectedIndex = 2
            End If


            SplitContainer1.IsSplitterFixed = False
            SplitContainer2.IsSplitterFixed = False
            SplitContainer3.IsSplitterFixed = False
            SplitContainer4.IsSplitterFixed = False
            SplitContainer5.IsSplitterFixed = False
        End If

        'Dim tempboolean As Boolean = UrlIsValid("http://thetvdb.com/")

        If scrapeAndQuit Then
            SearchForNew
        Else
            Try
                If cbMovieDisplay_MovieSet.Items.Count <> Preferences.moviesets.Count Then
                    cbMovieDisplay_MovieSet.Items.Clear()
                    For Each mset In Preferences.moviesets
                        cbMovieDisplay_MovieSet.Items.Add(mset)
                    Next
                End If
                If workingMovieDetails.fullmoviebody.movieset <> "-None-" Then
                    For Each mset In Preferences.moviesets
                        cbMovieDisplay_MovieSet.Items.Add(mset)
                    Next
                    For te = 0 To cbMovieDisplay_MovieSet.Items.Count - 1
                        If cbMovieDisplay_MovieSet.Items(te) = workingMovieDetails.fullmoviebody.movieset Then
                            cbMovieDisplay_MovieSet.SelectedIndex = te
                            Exit For
                        End If
                    Next
                End If
                'If Not IsNothing(workingMovieDetails) Then
                'setsTxt.Text = workingMovieDetails.fullmoviebody.movieset
                'End If

                'If setsTxt.Text = "" Then setsTxt.Text = "-None-"
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
            mov_VideoSourcePopulate()
            Call util_FontSetup()

            Dim mediaDropdown As New SortedList(Of String, String)
            mediaInfoExp.addTemplates(mediaDropdown)
            For Each item In mediaDropdown
                If item.Value = MediaInfoExport.mediaType.Movie Then
                    ExportMovieListInfoToolStripMenuItem.DropDownItems.Add(item.Key)
                ElseIf item.Value = MediaInfoExport.mediaType.TV Then
                    ExportTVShowInfoToolStripMenuItem.DropDownItems.Add(item.Key)
                End If
            Next

            Call util_CommandListLoad()
            startup = False
            frmSplash.Close()

            'hide debug xml view tabs - unhiden (i.e. added) via debug tab
            TabLevel1.TabPages.Remove(Me.TabConfigXML)
            TabLevel1.TabPages.Remove(Me.TabMovieCacheXML)
            TabLevel1.TabPages.Remove(Me.TabTVCacheXML)
            TabLevel1.TabPages.Remove(Me.TabProfile)
            TabLevel1.TabPages.Remove(Me.TabActorCache)
            TabLevel1.TabPages.Remove(Me.TabRegex)

            'the following code aligns the 3 groupboxes ontop of each other which cannot be done in the GUI
            GroupBox_IMDB_Scraper_Preferences.Location = GroupBox_MovieIMDBMirror.Location
            GroupBox_TMDB_Scraper_Preferences.Location = GroupBox_MovieIMDBMirror.Location

            'ToolStrip1.Enabled = True

            'Below shows the current screensize on initial start
            DebugScreenSizeLabel.Text = Me.Width & " x " & Me.Height
            mov_SplitContainerAutoPosition()
            tv_ShowSelectedCurrently()
            'Panel4.Location = New Point(SplitContainer4.Location.X, SplitContainer4.Location.Y + SplitContainer4.Height + 5)
            'Panel4.Width = SplitContainer4.Width.ToString
            'Panel4.Height = SplitContainer4.Height.ToString / 2.11
            tv_SplitContainerAutoPosition()
        End If

        '       PictureBoxFanArt.Image = Rating1.BitmapRating(PictureBoxFanArt.Image, PictureBoxFanArt.Width, PictureBoxFanArt.Height, ratingtxt.Text)
        Rating1.BitmapRating_V2(PictureBoxFanArt, ratingtxt.Text)

        'Parameters to display the movie grid at startup



        Select Case Preferences.moviedefaultlist
            Case 0
                RadioButtonTitleAndYear.Checked = True
            Case 1
                RadioButtonFileName.Checked = True
            Case 2
                RadioButtonFolder.Checked = True
        End Select

        Try
            cbSort.SelectedIndex = Preferences.moviesortorder
        Catch
             cbSort.SelectedIndex = 0
        End Try
        btnreverse.Checked = Preferences.movieinvertorder
        If btnreverse.Checked Then
            Mc.clsGridViewMovie.GridSort = "Desc"
        Else
            Mc.clsGridViewMovie.GridSort = "Asc"
        End If
        
        'Mc.clsGridViewMovie.GridFieldToDisplay1 = "TitleAndYear"
        'Mc.clsGridViewMovie.GridFieldToDisplay2 = "Movie Year"
        'Mc.clsGridViewMovie.GridSort = "Asc"
        'Mc.clsGridViewMovie.GridviewMovieDesign(Me)


        'Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)
        'TooltipGridViewMovies1.Initialisation()
        'DisplayMovie()


        MainFormLoadedStatus = True

        ResetFilters

        UpdateFilteredList

        Common.Tasks.StartTaskEngine()
        ForegroundWorkTimer.Start()
        'Catch ex As Exception
        '    ExceptionHandler.LogError(ex)
        'End Try


        Preferences.movie_filters.SetMovieFiltersVisibility(SplitContainer5.Panel2)
        UpdateMovieFiltersPanel

        If Preferences.CheckForNewVersion Then BckWrkCheckNewVersion.RunWorkerAsync(False)
    End Sub


    Private Sub util_BatchUpdate()
        messbox = New frmMessageBox("Please wait,", "", "refreshing Movie nfo files")
        Windows.Forms.Cursor.Current = Cursors.WaitCursor
        messbox.Show()
        Me.Refresh()
        messbox.Refresh()
        Dim tempint As Integer = oMovies.MovieCache.Count - 1
        For i = 0 To tempint
            Try
                Dim updatedmovie As New FullMovieDetails
                updatedmovie = nfoFunction.mov_NfoLoadFull(oMovies.MovieCache(i).fullpathandfilename)
                If Not IsNothing(updatedmovie) Then
                    nfoFunction.mov_NfoSave(oMovies.MovieCache(i).fullpathandfilename, updatedmovie, True)
                End If
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
        Next
        messbox.Close()
    End Sub

#If Not Refocus Then
    Private Sub Form1_Activated(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Activated
        Try
            If messbox.Visible = True Then
                messbox.Activate()
                messbox.BringToFront()
                messbox.Focus()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub
#End If



    Private Sub Form1_FormClosed(ByVal sender As Object, ByVal e As System.Windows.Forms.FormClosedEventArgs) Handles MyBase.FormClosed
        Try
            Me.Dispose()
            Me.Finalize()
            End
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Form1_FormClosing(ByVal sender As Object, ByVal e As System.Windows.Forms.FormClosingEventArgs) Handles MyBase.FormClosing

        BckWrkScnMovies_Cancel
        While BckWrkScnMovies.IsBusy 
            Application.DoEvents
        End While

        Try
            oMovies.SaveCaches

            If Tv_CacheSave() Then
                e.Cancel = True
                Exit Sub
            End If
            Call HomeMovieCacheSave()
            'if we say cancel to save nfo's & exit then we don't want to exit MC if e.cancel= true we abort the closing....

            'Todo: Code a better way to serialize the data

            'Me.LoadConfig()

            Preferences.splt1 = SplitContainer1.SplitterDistance
            Preferences.splt2 = SplitContainer2.SplitterDistance
            Preferences.splt3 = SplitContainer3.SplitterDistance
            Preferences.splt4 = SplitContainer4.SplitterDistance
            Preferences.splt5 = SplitContainer5.SplitterDistance


            If Me.WindowState = FormWindowState.Minimized Then
                Me.WindowState = FormWindowState.Normal
                Preferences.formwidth = Me.Width
                Preferences.formheight = Me.Height
                Preferences.locx = Me.Location.X
                Preferences.locy = Me.Location.Y
                Preferences.maximised = False
            End If

            If Me.WindowState = FormWindowState.Normal Then
                Preferences.formwidth = Me.Width
                Preferences.formheight = Me.Height
                Preferences.locx = Me.Location.X
                Preferences.locy = Me.Location.Y
                Preferences.maximised = False
            End If

            If Me.WindowState = FormWindowState.Maximized Then
                Me.WindowState = FormWindowState.Normal
                Preferences.maximised = True
            End If

            If DataGridView1.Columns.Count > 0 Then
                Preferences.tableview.Clear()
                For Each column In DataGridView1.Columns
                    Dim tempstring As String = String.Format("{0}|{1}|{2}|{3}", column.name, column.width, column.displayindex, column.visible)
                    Preferences.tableview.Add(tempstring)
                Next
            End If

            Preferences.startuptab = TabLevel1.SelectedIndex

            Preferences.SaveConfig()
            Dim errpath As String = IO.Path.Combine(applicationPath, "tvrefresh.log")
        Catch ex As Exception
            MessageBox.Show(ex.ToString, "Exception")
            Environment.Exit(1)
            'ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Form1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.GotFocus
        Try
            If messbox.Visible = True Then
                messbox.Activate()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub


    Private Sub Form1_Resize(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Resize
        Try
            If Me.WindowState = FormWindowState.Maximized Then
                mov_SplitContainerAutoPosition()
                tv_SplitContainerAutoPosition()
            End If
            If startup = False Then
                Preferences.locx = Me.Location.X
                Preferences.locy = Me.Location.Y
                'Preferences.SaveConfig()              'this is run when we close MC, no need to run it each time we resize MC
            End If

            If MainFormLoadedStatus = True Then
 '              PictureBoxFanArt.Image = Rating1.BitmapRating(PictureBoxFanArt.Image, PictureBoxFanArt.Width, PictureBoxFanArt.Height, ratingtxt.Text)
 '               Rating1.BitmapRating_V2(PictureBoxFanArt, ratingtxt.Text)
            End If
            'Panel4.Location = New Point(SplitContainer4.Location.X, SplitContainer4.Location.Y + SplitContainer4.Height + 5)
            'Panel4.Width = SplitContainer4.Width.ToString
            'Panel4.Height = SplitContainer4.Height.ToString / 2.11
        Catch ex As Exception
            Dim paramInfo As String = ""

            Try
                paramInfo = "PictureBoxFanArt.Width:" & PictureBoxFanArt.Width.ToString & " PictureBoxFanArt.Height: " & PictureBoxFanArt.Height.ToString & " Rating:" & ratingtxt.Text
            Catch ex2 As Exception
                ExceptionHandler.LogError(ex2)
            End Try

            ExceptionHandler.LogError(ex, paramInfo)
        End Try
    End Sub

    Sub util_MainFormTitleUpdate()
        'Update Main Form Window Title to show Currrent Version
        Dim sAssemblyVersion As String = Trim(System.Reflection.Assembly.GetExecutingAssembly.FullName.Split(",")(1))
        sAssemblyVersion = Microsoft.VisualBasic.Right(sAssemblyVersion, 7)       'Cuts Version=3.4.0.2 down to just 3.4.0.2
        If workingProfile.profilename.ToLower = "default" Then
            Me.Text = "Media Companion - V" & sAssemblyVersion
        Else
            Me.Text = "Media Companion - V" & sAssemblyVersion & " - " & workingProfile.profilename
        End If

    End Sub

    Sub mov_SplitContainerAutoPosition()
        'Set Movie Splitter Auto Position
        Dim pic1ratio As Decimal
        Dim pic2ratio As Decimal
        Try
            Dim pic1ImSzW = PictureBoxFanArt.Image.Size.Width        'original picture sizes
            Dim pic1ImszH = PictureBoxFanArt.Image.Size.Height
            Dim pic2ImSzW = moviethumb.Image.Size.Width
            Dim pic2ImszH = moviethumb.Image.Size.Height
            pic1ratio = pic1ImSzW / pic1ImszH
            pic2ratio = pic2ImSzW / pic2ImszH
            Dim width As Integer = SplitContainer2.Size.Width
            ' MsgBox(from & " = " & width & ":" & Int(SplitContainer2.Size.Width * (pic1ratio / (pic1ratio + pic2ratio))) - 5 & " - " & pic1ImSzW & "x" & pic1ImszH & " " & pic2ImszH & "x" & pic2ImSzW)
        Catch ex As Exception
            pic1ratio = 2
            pic2ratio = 1
            'MsgBox("Movie Splitter Exception")
        End Try
        SplitContainer2.SplitterDistance = (SplitContainer2.Size.Width - 8) * (pic1ratio / (pic1ratio + pic2ratio))
    End Sub

    Sub tv_SplitContainerAutoPosition()
        'Set TVShow Splitter Auto Position
        Dim pic3ratio As Decimal
        Dim pic4ratio As Decimal
        Try
            If (tv_PictureBoxLeft.Image IsNot Nothing AndAlso tv_PictureBoxRight.Image IsNot Nothing) Then
                Dim pic3ImSzW = tv_PictureBoxLeft.Image.Size.Width
                Dim pic3ImszH = tv_PictureBoxLeft.Image.Size.Height
                Dim pic4ImSzW = tv_PictureBoxRight.Image.Size.Width
                Dim pic4ImszH = tv_PictureBoxRight.Image.Size.Height
                pic3ratio = pic3ImSzW / pic3ImszH
                pic4ratio = pic4ImSzW / pic4ImszH
            Else
                pic3ratio = 2
                pic4ratio = 1

            End If
            'MsgBox(from & " = " & SplitContainer4.SplitterDistance & " - " & pic3ImSzW & "x" & pic3ImszH & " " & pic4ImszH & "x" & pic4ImSzW)
        Catch ex As Exception
            pic3ratio = 2
            pic4ratio = 1
            'MsgBox("TV Splitter Exception")
        End Try
        SplitContainer4.SplitterDistance = (SplitContainer4.Size.Width - 8) * (pic3ratio / (pic3ratio + pic4ratio))
    End Sub

    Private Sub Form1_ResizeEnd(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.ResizeEnd
        Try
            If Preferences.formwidth <> Me.Width Or Preferences.formheight <> Me.Height Then
                Preferences.formwidth = Me.Width
                Preferences.formheight = Me.Height
                DebugScreenSizeLabel.Text = Me.Width & " x " & Me.Height

                'Preferences.saveconfig()           'no need to save position, we do that when MC closes
                Dim maxcount2 As Integer = Convert.ToInt32((TabPage22.Width - 100) / 150)
                If maxcount2 <> maxcount Then
                    maxcount = maxcount2
                    Call mov_WallReset()
                End If

            End If
            mov_SplitContainerAutoPosition()
            tv_SplitContainerAutoPosition()

        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    

    Public Sub mov_CacheLoad()

        mov_PreferencesDisplay
        oMovies.LoadCaches

        If oMovies.MovieCache.Count = 0 Then
            mov_RebuildMovieCaches
            Return
        End If


        filteredList   .Clear
        'filteredListObj.Clear
        filteredList   .AddRange(oMovies.MovieCache             )
        'filteredListObj.AddRange(oMovies.Data_GridViewMovieCache)


'		DataGridViewBindingSource.DataSource = filteredListObj
'		DataGridViewBindingSource.DataSource = oMovies.Data_GridViewMovieCache
'		DataGridViewMovies.DataSource = DataGridViewBindingSource

'		DataGridViewMovies.DataSource = oMovies.Data_GridViewMovieCache


        Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)

        If DataGridViewMovies.Rows.Count > 0 then
            DataGridViewMovies.Rows(0).Selected = True
        End If

        mov_FormPopulate
    End Sub

    Private Sub util_RegexSetDefaultScraper()
        tv_RegexScraper.Clear()
        tv_RegexScraper.Add("[Ss]([\d]{1,4}).?[Ee]([\d]{1,4})")
        tv_RegexScraper.Add("([\d]{1,4}) ?[xX] ?([\d]{1,4})")
        tv_RegexScraper.Add("([0-9]+)([0-9][0-9])")
    End Sub

    Private Sub util_RegexSetDefaultRename()
        tv_RegexRename.Clear()
        tv_RegexRename.Add("Show Title - S01E01 - Episode Title.ext")
        tv_RegexRename.Add("S01E01 - Episode Title.ext")
        tv_RegexRename.Add("Show Title - 1x01 - Episode Title.ext")
        tv_RegexRename.Add("1x01 - Episode Title.ext")
        tv_RegexRename.Add("Show Title - 101 - Episode Title.ext")
        tv_RegexRename.Add("101 - Episode Title.ext")
    End Sub

    Private Sub util_RegexLoad()

        Dim tempstring As String
        tempstring = workingProfile.regexlist
        tv_RegexScraper.Clear()
        tv_RegexRename.Clear()
        Dim path As String = tempstring
        Dim createDefaultRegexScrape As Boolean = True
        Dim createDefaultRegexRename As Boolean = True

        If File.Exists(path) Then

            Try
                Dim regexList As New XmlDocument
                regexList.Load(path)

                If regexList.DocumentElement.Name = "regexlist" Then
                    For Each result As XmlElement In regexList("regexlist")
                        Select Case result.Name
                            Case "tvregex"                              'This is the old tag before custom renamer was introduced,
                                tv_RegexScraper.Add(result.InnerText)   'so add it to the scraper regex list in case there are custom regexs.
                                createDefaultRegexScrape = False        'The rename regex will not be flagged so regex.xml will be created as new format.
                            Case "tvregexscrape"
                                tv_RegexScraper.Add(result.InnerText)
                                createDefaultRegexScrape = False
                            Case "tvregexrename"
                                tv_RegexRename.Add(result.InnerText)
                                createDefaultRegexRename = False
                        End Select
                    Next
                End If

            Catch ex As Exception
                Call util_RegexSave(True, True)
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
        End If
        If createDefaultRegexScrape Or createDefaultRegexRename Then
            Call util_RegexSave(createDefaultRegexScrape, createDefaultRegexRename) 'Valid regex XML doc not available, so create default one.
        End If
    End Sub

    Private Sub util_RegexSave(Optional ByVal setScraperDefault As Boolean = False, Optional ByVal setRenameDefault As Boolean = False)

        Dim path As String = workingProfile.regexlist
        Dim doc As New XmlDocument
        Dim xmlProc As XmlDeclaration = doc.CreateXmlDeclaration("1.0", "UTF-8", "yes")
        Dim root As XmlElement
        Dim child As XmlElement

        If setScraperDefault = True Then util_RegexSetDefaultScraper()
        If setRenameDefault = True Then util_RegexSetDefaultRename()

        doc.AppendChild(xmlProc)
        root = doc.CreateElement("regexlist")

        For Each Regex In tv_RegexScraper
            child = doc.CreateElement("tvregexscrape")
            child.InnerText = Regex
            root.AppendChild(child)
        Next

        For Each Regex In tv_RegexRename
            child = doc.CreateElement("tvregexrename")
            child.InnerText = Regex
            root.AppendChild(child)
        Next

        doc.AppendChild(root)

        Try
            'TODO: Need to fix XmlTextWriter IO error.
            'Surrounded object in Try...Catch to temporarly fix the error.
            Using output As New XmlTextWriter(path, System.Text.Encoding.UTF8) With {.Formatting = Formatting.Indented}
                '"D:\Dados de Utilizador\Freddy Krueger\Ambiente de Trabalho\MediaCompanion-EVRSOEIRANAS\Settings\regex.xml"
                doc.WriteTo(output)
                output.Close()
            End Using
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try

    End Sub

    Private Sub util_GenreLoad()
        If File.Exists(workingProfile.filters) Or Preferences.startupCache = False Then

            Dim line As String = String.Empty
            CheckedListBox2.Items.Clear()

            Try
                Dim userConfig As StreamReader = File.OpenText(workingProfile.filters)

                Do
                    Try
                        line = userConfig.ReadLine

                        If line <> Nothing Then
                            Dim regexMatch As Match
                            regexMatch = Regex.Match(line, "<([\d]{2,3})>")

                            If regexMatch.Success = False Then
                                CheckedListBox2.Items.Add(line)
                            End If
                        End If

                    Catch ex As Exception
                        MessageBox.Show(ex.Message)
                    End Try
                Loop Until line = Nothing
            Catch ex As Exception
                MessageBox.Show(ex.Message)
            End Try
        End If
    End Sub

    Private Sub util_PrefsLoad()
        Dim tempstring As String
        For Each prof In profileStruct.ProfileList
            If prof.profilename = workingProfile.profilename Then
                tempstring = prof.Config
                If IO.File.Exists(tempstring) Then Preferences.configpath = tempstring
                Preferences.configpath = tempstring

                Me.util_ConfigLoad()
            End If
        Next
        For Each item In Preferences.moviesets
            cbMovieDisplay_MovieSet.Items.Add(item)
        Next
    End Sub

    Private Sub util_ProfilesLoad()
        profileStruct.ProfileList.Clear()
        Dim profilepath As String = IO.Path.Combine(applicationPath, "settings")
        profilepath = IO.Path.Combine(profilepath, "profile.xml")

        Dim path As String = profilepath
        If IO.File.Exists(path) Then
            Try
                Dim profilelist As New XmlDocument
                profilelist.Load(path)
                If profilelist.DocumentElement.Name = "profile" Then
                    For Each thisresult In profilelist("profile")
                        Select Case thisresult.Name
                            Case "default"
                                profileStruct.DefaultProfile = thisresult.innertext
                            Case "startup"
                                profileStruct.StartupProfile = thisresult.innertext
                            Case "profiledetails"
                                Dim currentprofile As New ListOfProfiles
                                For Each result In thisresult.childnodes
                                    Select Case result.name
                                        Case "actorcache"
                                            currentprofile.ActorCache = result.innertext
                                        Case "config"
                                            currentprofile.Config = result.innertext
                                        Case "moviecache"
                                            currentprofile.MovieCache = result.innertext
                                        Case "profilename"
                                            currentprofile.ProfileName = result.innertext
                                        Case "regex"
                                            currentprofile.RegExList = result.innertext
                                        Case "filters"
                                            currentprofile.Filters = result.innertext
                                        Case "tvcache"
                                            currentprofile.TvCache = result.innertext
                                    End Select
                                Next
                                profileStruct.ProfileList.Add(currentprofile)
                        End Select
                    Next
                End If
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If

            End Try
        Else

        End If
        If profileStruct.ProfileList.Count > 1 Then
            ProfilesToolStripMenuItem.Visible = True
            ProfilesToolStripMenuItem.Enabled = True
            ProfilesToolStripMenuItem.DropDownItems.Clear()

            For Each prof In profileStruct.ProfileList
                If prof.ProfileName <> Nothing Then
                    ProfilesToolStripMenuItem.DropDownItems.Add(prof.ProfileName)
                End If
            Next
            For Each item In ProfilesToolStripMenuItem.DropDownItems
                If item.text = workingProfile.profilename Then
                    With item
                        item.checked = True
                    End With
                Else
                    item.checked = False
                End If
            Next
        End If
    End Sub

    Private Sub util_ProfileSave()
        Dim profilepath As String = IO.Path.Combine(applicationPath, "settings")
        profilepath = IO.Path.Combine(profilepath, "profile.xml")

        Dim doc As New XmlDocument

        Dim thispref As XmlNode = Nothing
        Dim xmlproc As XmlDeclaration

        xmlproc = doc.CreateXmlDeclaration("1.0", "UTF-8", "yes")
        doc.AppendChild(xmlproc)
        Dim root As XmlElement
        Dim child As XmlElement
        Dim childchild As XmlElement
        root = doc.CreateElement("profile")
        child = doc.CreateElement("default")
        child.InnerText = profileStruct.DefaultProfile
        root.AppendChild(child)
        child = doc.CreateElement("startup")
        child.InnerText = profileStruct.StartupProfile
        root.AppendChild(child)
        doc.AppendChild(root)


        For Each prof In profileStruct.ProfileList
            child = doc.CreateElement("profiledetails")
            childchild = doc.CreateElement("actorcache")
            childchild.InnerText = prof.ActorCache
            child.AppendChild(childchild)

            childchild = doc.CreateElement("config")
            childchild.InnerText = prof.Config
            child.AppendChild(childchild)

            childchild = doc.CreateElement("moviecache")
            childchild.InnerText = prof.MovieCache
            child.AppendChild(childchild)

            childchild = doc.CreateElement("profilename")
            childchild.InnerText = prof.ProfileName
            child.AppendChild(childchild)

            childchild = doc.CreateElement("regex")
            childchild.InnerText = prof.RegExList
            child.AppendChild(childchild)

            childchild = doc.CreateElement("filters")
            childchild.InnerText = prof.Filters
            child.AppendChild(childchild)

            childchild = doc.CreateElement("tvcache")
            childchild.InnerText = prof.TvCache
            child.AppendChild(childchild)
            root.AppendChild(child)
        Next



        doc.AppendChild(root)
        Dim saveing As New XmlTextWriter(profilepath, System.Text.Encoding.UTF8)
        saveing.Formatting = Formatting.Indented
        doc.WriteTo(saveing)
        saveing.Close()

        If profileStruct.ProfileList.Count > 1 Then
            ProfilesToolStripMenuItem.Visible = True
            ProfilesToolStripMenuItem.Enabled = True
            ProfilesToolStripMenuItem.DropDownItems.Clear()
            For Each prof In profileStruct.ProfileList
                If prof.ProfileName <> Nothing Then
                    ProfilesToolStripMenuItem.DropDownItems.Add(prof.ProfileName)
                End If
            Next
            For Each item In ProfilesToolStripMenuItem.DropDownItems
                If item.text = workingProfile.profilename Then
                    With item
                        item.checked = True
                    End With
                Else
                    item.checked = False
                End If
            Next
        End If

    End Sub

    Private Sub util_CommandListLoad()
        For Each com In Preferences.commandlist
            ToolsToolStripMenuItem.DropDownItems.Add(com.title)
        Next
    End Sub

    Private Sub mov_ActorRebuild()
   '    mov_FixUpCorruptActors
        oMovies.RebuildActorCache
    End Sub

    'Private Sub mov_ActorCacheSave()
    '    Dim savepath As String = workingProfile.actorcache
    '    Dim doc As New XmlDocument

    '    Dim thispref As XmlNode = Nothing
    '    Dim xmlproc As XmlDeclaration

    '    xmlproc = doc.CreateXmlDeclaration("1.0", "UTF-8", "yes")
    '    doc.AppendChild(xmlproc)
    '    Dim root As XmlElement
    '    Dim child As XmlElement
    '    root = doc.CreateElement("actor_cache")

    '    Dim childchild As XmlElement
    '    For Each actor In actorDB
    '        child = doc.CreateElement("actor")
    '        childchild = doc.CreateElement("name")
    '        childchild.InnerText = actor.actorname
    '        child.AppendChild(childchild)
    '        childchild = doc.CreateElement("id")
    '        childchild.InnerText = actor.movieid
    '        child.AppendChild(childchild)
    '        root.AppendChild(child)
    '    Next
    '    doc.AppendChild(root)
    '    Dim output As New XmlTextWriter(savepath, System.Text.Encoding.UTF8)
    '    output.Formatting = Formatting.Indented
    '    doc.WriteTo(output)
    '    output.Close()
    'End Sub

    'Private Sub mov_ActorCacheLoad()
    '    actorDB.Clear()
    '    Dim loadpath As String = workingProfile.actorcache
    '    Dim actorlist As New XmlDocument
    '    actorlist.Load(loadpath)
    '    Dim thisresult As XmlNode = Nothing
    '    For Each thisresult In actorlist("actor_cache")
    '        Select Case thisresult.Name
    '            Case "actor"
    '                Dim newactor As New ActorDatabase
    '                newactor.actorname = ""
    '                newactor.movieid = ""
    '                Dim detail As XmlNode = Nothing
    '                For Each detail In thisresult.ChildNodes
    '                    Select Case detail.Name
    '                        Case "name"
    '                            newactor.actorname = detail.InnerText
    '                        Case "id"
    '                            newactor.movieid = detail.InnerText
    '                    End Select
    '                    If newactor.actorname <> "" And newactor.movieid <> "" Then
    '                        actorDB.Add(newactor)
    '                    End If
    '                Next
    '        End Select
    '    Next
    'End Sub

    

    'Private Sub mov_ListFiles(ByVal lst As String, ByVal pattern As String, ByVal dir_info As System.IO.DirectoryInfo)

    '    Dim exists As Boolean
    '    Dim propfile As Boolean = False
    '    Dim allok As Boolean = False
    '    Dim fs_infos() As System.IO.FileInfo = dir_info.GetFiles(pattern)
    '    Array.Sort(fs_infos, New clsCompareFileInfo)    'sorts found folder list

    '    Dim counter As Integer = 1
    '    Dim counter2 As Integer = 1
    '    Dim progcounter As Integer = 1
    '    If progressmode = True Then frmSplash2.ProgressBar1.Maximum = fs_infos.Length()

    '    For Each fs_info As System.IO.FileInfo In fs_infos
    '        Application.DoEvents()
    '        If progressmode = True Then frmSplash2.ProgressBar1.Value = progcounter
    '        progcounter += 1

    '        exists = (IO.File.Exists(fs_info.FullName))
    '        If exists = True Then
    '            frmSplash2.Label2.Text = fs_info.FullName
    '            frmSplash2.Label2.Refresh()
    '            Try
    '                workingMovie = nfoFunction.mov_NfoLoadBasic(fs_info.FullName, "movielist")
    '            Catch ex As Exception
    '                Continue For    ' if we call an exception due to an nfo issue, try the next one
    '            End Try
    '            If workingMovie.title <> "ERROR" Then

    '                If workingMovie.movieset <> Nothing Then
    '                    If workingMovie.movieset.IndexOf(" / ") = -1 Then
    '                        Dim add As Boolean = True
    '                        For Each item In Preferences.moviesets
    '                            If item = workingMovie.movieset Then
    '                                add = False
    '                                Exit For
    '                            End If
    '                        Next
    '                        If add = True Then
    '                            Preferences.moviesets.Add(workingMovie.movieset)
    '                            'ComboBox3.Items.Add(workingMovie.movieset)
    '                        End If
    '                    Else
    '                        Dim strArr() As String
    '                        strArr = workingMovie.movieset.Split("/")
    '                        For count = 0 To strArr.Length - 1
    '                            strArr(count) = strArr(count).Trim
    '                            Dim add As Boolean = True
    '                            For Each item In Preferences.moviesets
    '                                If item = strArr(count) Then
    '                                    add = False
    '                                    Exit For
    '                                End If
    '                            Next
    '                            If add = True Then
    '                                Preferences.moviesets.Add(strArr(count))
    '                            End If
    '                        Next
    '                    End If
    '                End If


    '                If workingMovie.title <> Nothing Then

    '                    workingMovie.foldername = Utilities.GetLastFolder(workingMovie.fullpathandfilename)
    '                    If workingMovie.genre.IndexOf("skipthisfile") = -1 Then
    '                        Dim skip As Boolean = False
    '                        For Each movie In oMovies.MovieCache
    '                            If movie.fullpathandfilename = workingMovie.fullpathandfilename Then
    '                                skip = True
    '                                Exit For
    '                            End If
    '                        Next
    '                        If skip = False Then
    '                            Dim completebyte1 As Byte = 0
    '                            Dim fanartexists As Boolean = IO.File.Exists(Preferences.GetFanartPath(workingMovie.fullpathandfilename))
    '                            Dim posterexists As Boolean = IO.File.Exists(Preferences.GetPosterPath(workingMovie.fullpathandfilename))
    '                            If fanartexists = False Then
    '                                completebyte1 += 1
    '                            End If
    '                            If posterexists = False Then
    '                                completebyte1 += 2
    '                            End If
    '                            workingMovie.missingdata1 = completebyte1
    '                            oMovies.MovieCache.Add(workingMovie)
    '                            'filteredlist.Add(workingmovie)
    '                        End If
    '                    End If
    '                End If
    '            End If
    '        End If
    '    Next fs_info

    '    fs_infos = Nothing


    'End Sub

    'Public Sub mov_NfoLoad(ByVal folderlist As List(Of String), Optional ByVal mode As Boolean = False)
    '    Dim tempint As Integer = 0
    '    Dim dirinfo As String = String.Empty
    '    Dim pattern As String = "*.nfo"

    '    realMoviePaths.Clear()
    '    For Each moviefolder In folderlist
    '        Dim hg As New IO.DirectoryInfo(moviefolder)
    '        If hg.Exists Then
    '            realMoviePaths.Add(moviefolder)
    '        End If

    '    Next

    '    tempint = realMoviePaths.Count
    '    If tempint > 0 Then
    '        Dim newlist As List(Of String) = Nothing
    '        For f = 0 To tempint - 1
    '            newlist = Utilities.EnumerateFolders(realMoviePaths(f), Long.MaxValue)

    '            For Each subfolder In newlist
    '                realMoviePaths.Add(subfolder)
    '            Next
    '        Next

    '        For f = 0 To realMoviePaths.Count - 1
    '            ProgressAndStatus1.ReportProgress((f / realMoviePaths.Count) * 1000, "Scanning Folder:" & Environment.NewLine & realMoviePaths(f).ToString())
    '            Application.DoEvents()

    '            If ProgressAndStatus1.cancel = True Then
    '                ProgressAndStatus1.Visible = False
    '                Return
    '            End If

    '            Dim subdirs As New System.IO.DirectoryInfo(realMoviePaths(f))

    '            mov_ListFiles(dirinfo, pattern, subdirs)
    '        Next

    '    End If
    'End Sub

    Public Sub mov_FormPopulate(Optional yieldIng As Boolean=False)

        If Not IsNothing(workingMovieDetails) Then
            If workingMovie.fullpathandfilename <> workingMovieDetails.fileinfo.fullpathandfilename Then
                Try
                    For i = panelAvailableMoviePosters.Controls.Count - 1 To 0 Step -1
                        panelAvailableMoviePosters.Controls.RemoveAt(i)
                    Next
                Catch
                End Try
                Try
                    For i = Panel2.Controls.Count - 1 To 0 Step -1
                        Panel2.Controls.RemoveAt(i)
                    Next
                Catch
                End Try
                Try
                    TextBox8.Text = ""
                Catch
                End Try
            End If
        End If

        If Yield(yieldIng) Then Return

        If workingMovie.fullpathandfilename <> Nothing And DataGridViewMovies.Rows.Count > 0 Then
            workingMovieDetails = nfoFunction.mov_NfoLoadFull(workingMovie.fullpathandfilename)

            If Yield(yieldIng) Then Return

            If IsNothing(workingMovieDetails) = False Then
                If workingMovieDetails.fullmoviebody.playcount = Nothing Then workingMovieDetails.fullmoviebody.playcount = "0"
                If workingMovieDetails.fullmoviebody.credits = Nothing Then workingMovieDetails.fullmoviebody.credits = ""
                If workingMovieDetails.fullmoviebody.director = Nothing Then workingMovieDetails.fullmoviebody.director = ""
                If workingMovieDetails.fullmoviebody.stars = Nothing Then workingMovieDetails.fullmoviebody.stars = ""
                If workingMovieDetails.fullmoviebody.filename = Nothing Then workingMovieDetails.fullmoviebody.filename = ""
                If workingMovieDetails.fullmoviebody.genre = Nothing Then workingMovieDetails.fullmoviebody.genre = ""
                If workingMovieDetails.fullmoviebody.imdbid = Nothing Then workingMovieDetails.fullmoviebody.imdbid = ""
                If workingMovieDetails.fullmoviebody.mpaa = Nothing Then workingMovieDetails.fullmoviebody.mpaa = ""
                If workingMovieDetails.fullmoviebody.outline = Nothing Then workingMovieDetails.fullmoviebody.outline = ""
                If workingMovieDetails.fullmoviebody.playcount = Nothing Then workingMovieDetails.fullmoviebody.playcount = ""
                If workingMovieDetails.fullmoviebody.plot = Nothing Then workingMovieDetails.fullmoviebody.plot = ""
                If workingMovieDetails.fullmoviebody.premiered = Nothing Then workingMovieDetails.fullmoviebody.premiered = ""
                If workingMovieDetails.fullmoviebody.rating = Nothing Then workingMovieDetails.fullmoviebody.rating = ""
                If workingMovieDetails.fullmoviebody.runtime = Nothing Then workingMovieDetails.fullmoviebody.runtime = ""
                If workingMovieDetails.fullmoviebody.studio = Nothing Then workingMovieDetails.fullmoviebody.studio = ""
                If workingMovieDetails.fullmoviebody.tagline = Nothing Then workingMovieDetails.fullmoviebody.tagline = ""
                If workingMovieDetails.fullmoviebody.title = Nothing Then workingMovieDetails.fullmoviebody.title = ""
                If workingMovieDetails.fullmoviebody.originaltitle = Nothing Then workingMovieDetails.fullmoviebody.originaltitle = ""
                If workingMovieDetails.fullmoviebody.top250 = Nothing Then workingMovieDetails.fullmoviebody.top250 = ""
                If workingMovieDetails.fullmoviebody.trailer = Nothing Then workingMovieDetails.fullmoviebody.trailer = ""
                If workingMovieDetails.fullmoviebody.votes = Nothing Then workingMovieDetails.fullmoviebody.votes = ""
                If workingMovieDetails.fullmoviebody.year = Nothing Then workingMovieDetails.fullmoviebody.year = ""
                If workingMovieDetails.fullmoviebody.source = Nothing Then workingMovieDetails.fullmoviebody.source = ""

                titletxt.Items.Clear()

                titletxt.Items.Add(workingMovieDetails.fullmoviebody.title)
                For Each title In workingMovieDetails.alternativetitles
                    titletxt.Items.Add(title)
                Next
                titletxt.Text = workingMovieDetails.fullmoviebody.title '& " (" & workingmoviedetails.fullmoviebody.year & ")"
                TextBox3.Text = workingMovieDetails.fullmoviebody.title & " (" & workingMovieDetails.fullmoviebody.year & ")"
                tbCurrentMoviePoster.Text = workingMovieDetails.fullmoviebody.title & " (" & workingMovieDetails.fullmoviebody.year & ")"
                Me.ToolTip1.SetToolTip(Me.titletxt, "Original Title: '" & workingMovieDetails.fullmoviebody.originaltitle & "'")
                If workingMovieDetails.fullmoviebody.sortorder = "" Then workingMovieDetails.fullmoviebody.sortorder = workingMovieDetails.fullmoviebody.title
                TextBox34.Text = workingMovieDetails.fullmoviebody.sortorder
                outlinetxt.Text = workingMovieDetails.fullmoviebody.outline
                plottxt.Text = workingMovieDetails.fullmoviebody.plot
                taglinetxt.Text = workingMovieDetails.fullmoviebody.tagline
                txtStars.Text = workingMovieDetails.fullmoviebody.stars
                genretxt.Text = workingMovieDetails.fullmoviebody.genre
                creditstxt.Text = workingMovieDetails.fullmoviebody.credits
                directortxt.Text = workingMovieDetails.fullmoviebody.director
                studiotxt.Text = workingMovieDetails.fullmoviebody.studio
                pathtxt.Text = workingMovie.fullpathandfilename
                ratingtxt.Text = workingMovieDetails.fullmoviebody.rating
                imdbtxt.Text = workingMovieDetails.fullmoviebody.imdbid

                'runtimetxt.Text = workingMovieDetails.fullmoviebody.runtime
                votestxt.Text = workingMovieDetails.fullmoviebody.votes
                certtxt.Text = workingMovieDetails.fullmoviebody.mpaa
                If Preferences.movieRuntimeDisplay = "file" Then
                    displayRuntimeScraper = False
                Else
                    displayRuntimeScraper = True
                End If
                Call mov_SwitchRuntime()

                workingMovieDetails.fileinfo.fullpathandfilename = workingMovie.fullpathandfilename
                workingMovieDetails.fileinfo.filename = IO.Path.GetFileName(workingMovie.fullpathandfilename)
                workingMovieDetails.fileinfo.path = IO.Path.GetFullPath(workingMovie.fullpathandfilename)
                workingMovieDetails.fileinfo.foldername = workingMovie.foldername
                workingMovieDetails.fileinfo.posterpath = Preferences.GetPosterPath(workingMovie.fullpathandfilename)
                workingMovieDetails.fileinfo.fanartpath = Preferences.GetFanartPath(workingMovie.fullpathandfilename)

                '*******Removed this section - trailer must be the same name as the movie file with '-trailer.xxx' appended
                'tempstring = Utilities.GetStackName(workingMovieDetails.fileinfo.filename, workingMovieDetails.fileinfo.fullpathandfilename)
                'If tempstring = "na" Then
                '    tempstring = Utilities.CleanFileName(workingMovieDetails.fileinfo.filename)
                'End If
                ' workingMovieDetails.fileinfo.trailerpath = IO.Path.Combine(workingMovieDetails.fileinfo.path.Replace(IO.Path.GetFileName(workingMovieDetails.fileinfo.path), ""), tempstring & "-trailer.flv")
                '*******

                '                workingMovieDetails.fileinfo.trailerpath = IO.Path.Combine(workingMovieDetails.fileinfo.path.Replace(IO.Path.GetFileName(workingMovieDetails.fileinfo.path), ""), System.IO.Path.GetFileNameWithoutExtension(workingMovieDetails.fileinfo.path) & "-trailer.flv")

                workingMovieDetails.fileinfo.trailerpath = GetTrailerPath(workingMovieDetails.fileinfo.path)
                If Yield(yieldIng) Then Return
                HandleTrailerBtn(workingMovieDetails)
                If Yield(yieldIng) Then Return
                If workingMovieDetails.fileinfo.posterpath <> Nothing Then

                    If IO.File.Exists(workingMovieDetails.fileinfo.posterpath) Then
                    Else
                        If IO.File.Exists(workingMovieDetails.fileinfo.posterpath.Replace(IO.Path.GetFileName(workingMovieDetails.fileinfo.fanartpath), "folder.jpg")) Then
                            workingMovieDetails.fileinfo.posterpath = workingMovieDetails.fileinfo.posterpath.Replace(IO.Path.GetFileName(workingMovieDetails.fileinfo.posterpath), "folder.jpg")
                        End If
                    End If

                End If
                If Yield(yieldIng) Then Return
                If workingMovieDetails.fileinfo.posterpath <> Nothing Then
                    Dim workingposter As String = workingMovieDetails.fileinfo.posterpath
                    Dim frodoPath As String
                    If Preferences.FrodoEnabled Then 
                        If workingMovieDetails.fileinfo.videotspath<>"" Then
                            frodoPath = workingMovieDetails.fileinfo.videotspath+"poster.jpg"
                        Else
                            frodoPath = workingposter.Replace(".tbn","-poster.jpg")
                        End If
                        If File.Exists(frodoPath) Then 
                            workingposter = frodoPath
                        End If
                    End If

                    'util_ImageLoad(moviethumb, workingMovieDetails.fileinfo.posterpath, Utilities.DefaultPosterPath)
                    util_ImageLoad(moviethumb, workingposter, Utilities.DefaultPosterPath)
                    If Yield(yieldIng) Then Return
                    'util_ImageLoad(PictureBox3, workingMovieDetails.fileinfo.posterpath, Utilities.DefaultPosterPath)
                    util_ImageLoad(PictureBoxAssignedMoviePoster, workingposter, Utilities.DefaultPosterPath)
                    If Yield(yieldIng) Then Return
                    lblCurrentLoadedPoster.Text = "Width: " & PictureBoxAssignedMoviePoster.Image.Width.ToString & "  Height: " & PictureBoxAssignedMoviePoster.Image.Height.ToString
                    Label18.Visible = False
                End If
                If workingMovieDetails.fileinfo.fanartpath <> Nothing Then
                    Dim workingfanart As String = workingMovieDetails.fileinfo.fanartpath
                    Dim frodoPath As String
                    If Preferences.FrodoEnabled Then 
                        If workingMovieDetails.fileinfo.videotspath<>"" Then
                            frodoPath = workingMovieDetails.fileinfo.videotspath+"fanart.jpg"
                        Else
                            frodoPath = workingfanart
                        End If
                        If File.Exists(frodoPath) Then 
                            workingfanart = frodoPath
                        End If
                    End If

                    util_ImageLoad(PictureBoxFanArt, workingfanart, Utilities.DefaultFanartPath)
                    'Rating1.PictureInit = PictureBoxFanArt.Image

                End If

                If Yield(yieldIng) Then Return

                If Convert.ToInt32(workingMovieDetails.fullmoviebody.playcount) > 0 Then
                    ButtonWatched.Text = "&Watched"
                    ButtonWatched.BackColor = Color.LawnGreen
                    ButtonWatched.Refresh()
                Else
                    ButtonWatched.Text = "Un&watched"
                    ButtonWatched.BackColor = Color.Red
                    ButtonWatched.Refresh()
                End If

                actorcb.Items.Clear()
                For Each actor In workingMovieDetails.listactors
                    If actor.actorname <> Nothing Then actorcb.Items.Add(actor.actorname)
                Next

                If actorcb.Items.Count > 0 Then
                    actorcb.SelectedIndex = 0
                Else
                    PictureBoxActor.ImageLocation = Utilities.DefaultActorPath
                    PictureBoxActor.Load()
                End If

                
                If ActorFilter<>"" Then
                    actorcb.SelectedItem = ActorFilter
                End If


                If Yield(yieldIng) Then Return

                'If workingMovieDetails.fullmoviebody.movieset <> Nothing Then
                '    If workingMovieDetails.fullmoviebody.movieset.IndexOf(" / ") = -1 Then
                '        Dim add As Boolean = True
                '        For Each item In Preferences.moviesets
                '            If item = workingMovieDetails.fullmoviebody.movieset Then
                '                add = False
                '                Exit For
                '            End If
                '        Next
                '        If add = True Then
                '            Preferences.moviesets.Add(workingMovieDetails.fullmoviebody.movieset)
                '            cbMovieDisplay_MovieSet.Items.Add(workingMovieDetails.fullmoviebody.movieset)
                '        End If
                '        For f = 0 To cbMovieDisplay_MovieSet.Items.Count - 1
                '            If cbMovieDisplay_MovieSet.Items(f) = workingMovieDetails.fullmoviebody.movieset Then
                '                cbMovieDisplay_MovieSet.SelectedIndex = f
                '                Exit For
                '            End If
                '        Next
                '    Else
                '        If cbMovieDisplay_MovieSet.Items.Count = 0 Then
                '            If Preferences.moviesets.Count > 0 Then
                '                For Each mset In Preferences.moviesets
                '                    cbMovieDisplay_MovieSet.Items.Add(mset)
                '                Next
                '            End If
                '        End If
                '        If cbMovieDisplay_MovieSet.Items.Count = 0 Then
                '            cbMovieDisplay_MovieSet.Items.Add("-None-")
                '        End If
                '        If cbMovieDisplay_MovieSet.Items(0) <> "-None-" Then
                '            cbMovieDisplay_MovieSet.Items.Insert(0, "-None-")
                '        End If
                '    End If
                'Else
                '    cbMovieDisplay_MovieSet.SelectedIndex = 0
                'End If


                'Load cbMovieDisplay_MovieSet from preferences
                '
                If workingMovieDetails.fullmoviebody.movieset<>"-None-" And workingMovieDetails.fullmoviebody.movieset<>"" Then
                    Dim add As Boolean = True
                    For Each item In Preferences.moviesets
                        If item = workingMovieDetails.fullmoviebody.movieset Then
                            add = False
                            Exit For
                        End If
                    Next
                    If add Then
                        Preferences.moviesets.Add(workingMovieDetails.fullmoviebody.movieset)
                    End If
                End If

                cbMovieDisplay_MovieSet.SelectedItem=Nothing

                pop_cbMovieDisplay_MovieSet

                For f = 0 To ComboBoxFormatSource.Items.Count - 1
                    If ComboBoxFormatSource.Items(f) = workingMovieDetails.fullmoviebody.source Then
                        ComboBoxFormatSource.SelectedIndex = f
                    End If
                Next

                btnPlayMovie.Enabled = True
                mov_SplitContainerAutoPosition

   '            PictureBoxFanArt.Image = Rating1.BitmapRating(PictureBoxFanArt.Image, PictureBoxFanArt.Width, PictureBoxFanArt.Height, ratingtxt.Text)
                Rating1.BitmapRating_V2(PictureBoxFanArt, ratingtxt.Text)
            End If
        Else
            actorcb.Items.Clear()
            PictureBoxActor.CancelAsync()
            PictureBoxActor.Image = Nothing
            PictureBoxActor.Refresh()
            ComboBox5.Text = ""

            btnMoviePosterSaveCroppedImage.Enabled = False
            btnMoviePosterResetImage.Enabled = False
            thumbedItsMade = False
            posterThumbedItsMade = False
            cbMoviePosterSaveLoRes.Enabled = False
            btnPosterTabs_SaveImage.Enabled = False
            Button9.Visible = False
            Button10.Visible = False
            Label18.Visible = False
            titletxt.Text = ""
            TextBox3.Text = ""
            outlinetxt.Text = ""
            plottxt.Text = ""
            taglinetxt.Text = ""
            txtStars.Text = ""
            genretxt.Text = ""
            creditstxt.Text = ""
            directortxt.Text = ""
            studiotxt.Text = ""
            pathtxt.Text = ""
            imdbtxt.Text = ""
            'actorarray.Clear()

            ratingtxt.Text = ""
            runtimetxt.Text = ""
            votestxt.Text = ""
            certtxt.Text = ""
            PictureBoxFanArt.Image = Nothing
            PictureBox2.Image = Nothing
            moviethumb.Image = Nothing
            Label16.Text = ""
            Label17.Text = ""
            PictureBoxAssignedMoviePoster.Image = Nothing
            lblCurrentLoadedPoster.Text = ""
            TextBox34.Text = ""
            titletxt.Text = ""

            roletxt.Text = ""
            PictureBoxActor.Image = Nothing

            btnPlayMovie.Enabled = False

            Me.Refresh()
            Application.DoEvents()
        End If
        If ratingtxt.Text.IndexOf("/10") <> -1 Then
            ratingtxt.Text = ratingtxt.Text.Replace("/10", "")
            workingMovieDetails.fullmoviebody.rating = ratingtxt.Text
        End If

        If ratingtxt.Text.Length > 3 Then
            ratingtxt.Text = ratingtxt.Text.Substring(0, 3).Trim
        End If

        If Yield(yieldIng) Then Return

        'mov_SplitContainerAutoPosition()
    End Sub


    Private Sub HandleTrailerBtn(ByVal fmd As FullMovieDetails)

        If IsNothing(fmd) Then
            Return
        End If

        DeleteZeroLengthFile(fmd.fileinfo.trailerpath)

        ButtonTrailer.Enabled = False

        If IO.File.Exists(fmd.fileinfo.trailerpath) Then
            ButtonTrailer.Text = "Play Trailer"
            ButtonTrailer.Enabled = True
        Else
            If Not Utilities.UrlIsValid(fmd.fullmoviebody.trailer) Then

                If fmd.fullmoviebody.trailer <> "" Then
                    fmd.fullmoviebody.trailer = ""
                    nfoFunction.mov_NfoSave(fmd.fileinfo.fullpathandfilename, fmd, True)
                End If

                ButtonTrailer.Text = "No trailer found"
            Else
                ButtonTrailer.Text = "Download Trailer"
                ButtonTrailer.Enabled = True
            End If
        End If
    End Sub

    Private Function FileCompare(ByVal file1 As String, ByVal file2 As String) As Boolean
        Dim file1byte As Integer
        Dim file2byte As Integer
        Dim fs1 As FileStream
        Dim fs2 As FileStream

        ' Determine if the same file was referenced two times.
        If (file1 = file2) Then
            ' Return 0 to indicate that the files are the same.
            Return True
        End If

        ' Open the two files.
        fs1 = New FileStream(file1, FileMode.Open)
        fs2 = New FileStream(file2, FileMode.Open)

        ' Check the file sizes. If they are not the same, the files
        ' are not equal.
        If (fs1.Length <> fs2.Length) Then
            ' Close the file
            fs1.Close()
            fs2.Close()

            ' Return a non-zero value to indicate that the files are different.
            Return False
        End If

        ' Read and compare a byte from each file until either a
        ' non-matching set of bytes is found or until the end of
        ' file1 is reached.
        Do
            ' Read one byte from each file.
            file1byte = fs1.ReadByte()
            file2byte = fs2.ReadByte()
        Loop While ((file1byte = file2byte) And (file1byte <> -1))

        ' Close the files.
        fs1.Close()
        fs2.Close()

        ' Return the success of the comparison. "file1byte" is
        ' equal to "file2byte" at this point only if the files are 
        ' the same.
        Return ((file1byte - file2byte) = 0)
    End Function


    Private Function mov_FileCheckValid(ByVal fullpathandfilename As String) As Boolean
        Dim validfile As Boolean = True
        Dim tempint2 As Integer = 0
        Dim tempstring As String

        'if the file is a .vob then check it is not part of a dvd folder (Stop dvdfolders vobs getting seperate nfos)
        If IO.Path.GetExtension(fullpathandfilename) = ".vob" Then
            If IO.File.Exists(fullpathandfilename.Replace(System.IO.Path.GetFileName(fullpathandfilename), "VIDEO_TS.IFO")) Then
                validfile = False
            End If
        End If

        Dim filename2 As String = System.IO.Path.GetFileName(fullpathandfilename).ToLower
        If filename2.IndexOf("cd2") <> -1 Then validfile = False
        If filename2.IndexOf("cd3") <> -1 Then validfile = False
        If filename2.IndexOf("cd4") <> -1 Then validfile = False
        If filename2.IndexOf("cd5") <> -1 Then validfile = False
        If filename2.IndexOf("cd.2") <> -1 Then validfile = False
        If filename2.IndexOf("cd.3") <> -1 Then validfile = False
        If filename2.IndexOf("cd.4") <> -1 Then validfile = False
        If filename2.IndexOf("cd.5") <> -1 Then validfile = False
        If filename2.IndexOf("cd_2") <> -1 Then validfile = False
        If filename2.IndexOf("cd_3") <> -1 Then validfile = False
        If filename2.IndexOf("cd_4") <> -1 Then validfile = False
        If filename2.IndexOf("cd_5") <> -1 Then validfile = False
        If filename2.IndexOf("dvd2") <> -1 Then validfile = False
        If filename2.IndexOf("dvd3") <> -1 Then validfile = False
        If filename2.IndexOf("dvd4") <> -1 Then validfile = False
        If filename2.IndexOf("dvd5") <> -1 Then validfile = False
        If filename2.IndexOf("dvd.2") <> -1 Then validfile = False
        If filename2.IndexOf("dvd.3") <> -1 Then validfile = False
        If filename2.IndexOf("dvd.4") <> -1 Then validfile = False
        If filename2.IndexOf("dvd.5") <> -1 Then validfile = False
        If filename2.IndexOf("dvd_2") <> -1 Then validfile = False
        If filename2.IndexOf("dvd_3") <> -1 Then validfile = False
        If filename2.IndexOf("dvd_4") <> -1 Then validfile = False
        If filename2.IndexOf("dvd_5") <> -1 Then validfile = False
        If filename2.IndexOf("part2") <> -1 Then validfile = False
        If filename2.IndexOf("part3") <> -1 Then validfile = False
        If filename2.IndexOf("part4") <> -1 Then validfile = False
        If filename2.IndexOf("part5") <> -1 Then validfile = False
        If filename2.IndexOf("part.2") <> -1 Then validfile = False
        If filename2.IndexOf("part.3") <> -1 Then validfile = False
        If filename2.IndexOf("part.4") <> -1 Then validfile = False
        If filename2.IndexOf("part.5") <> -1 Then validfile = False
        If filename2.IndexOf("part_2") <> -1 Then validfile = False
        If filename2.IndexOf("part_3") <> -1 Then validfile = False
        If filename2.IndexOf("part_4") <> -1 Then validfile = False
        If filename2.IndexOf("part_5") <> -1 Then validfile = False
        If filename2.IndexOf("disk2") <> -1 Then validfile = False
        If filename2.IndexOf("disk3") <> -1 Then validfile = False
        If filename2.IndexOf("disk4") <> -1 Then validfile = False
        If filename2.IndexOf("disk5") <> -1 Then validfile = False
        If filename2.IndexOf("disk.2") <> -1 Then validfile = False
        If filename2.IndexOf("disk.3") <> -1 Then validfile = False
        If filename2.IndexOf("disk.4") <> -1 Then validfile = False
        If filename2.IndexOf("disk.5") <> -1 Then validfile = False
        If filename2.IndexOf("disk_2") <> -1 Then validfile = False
        If filename2.IndexOf("disk_3") <> -1 Then validfile = False
        If filename2.IndexOf("disk_4") <> -1 Then validfile = False
        If filename2.IndexOf("disk_5") <> -1 Then validfile = False
        If filename2.IndexOf("cd 2") <> -1 Then validfile = False
        If filename2.IndexOf("cd 3") <> -1 Then validfile = False
        If filename2.IndexOf("cd 4") <> -1 Then validfile = False
        If filename2.IndexOf("cd 5") <> -1 Then validfile = False
        If filename2.IndexOf("cd-2") <> -1 Then validfile = False
        If filename2.IndexOf("cd-3") <> -1 Then validfile = False
        If filename2.IndexOf("cd-4") <> -1 Then validfile = False
        If filename2.IndexOf("cd-5") <> -1 Then validfile = False
        If filename2.IndexOf("dvd 2") <> -1 Then validfile = False
        If filename2.IndexOf("dvd 3") <> -1 Then validfile = False
        If filename2.IndexOf("dvd 4") <> -1 Then validfile = False
        If filename2.IndexOf("dvd 5") <> -1 Then validfile = False
        If filename2.IndexOf("dvd-2") <> -1 Then validfile = False
        If filename2.IndexOf("dvd-3") <> -1 Then validfile = False
        If filename2.IndexOf("dvd-4") <> -1 Then validfile = False
        If filename2.IndexOf("dvd-5") <> -1 Then validfile = False
        If filename2.IndexOf("part-2") <> -1 Then validfile = False
        If filename2.IndexOf("part-3") <> -1 Then validfile = False
        If filename2.IndexOf("part-4") <> -1 Then validfile = False
        If filename2.IndexOf("part-5") <> -1 Then validfile = False
        If filename2.IndexOf("part 2") <> -1 Then validfile = False
        If filename2.IndexOf("part 3") <> -1 Then validfile = False
        If filename2.IndexOf("part 4") <> -1 Then validfile = False
        If filename2.IndexOf("part 5") <> -1 Then validfile = False
        If filename2.IndexOf("disk 2") <> -1 Then validfile = False
        If filename2.IndexOf("disk 3") <> -1 Then validfile = False
        If filename2.IndexOf("disk 4") <> -1 Then validfile = False
        If filename2.IndexOf("disk 5") <> -1 Then validfile = False
        If filename2.IndexOf("disk-2") <> -1 Then validfile = False
        If filename2.IndexOf("disk-3") <> -1 Then validfile = False
        If filename2.IndexOf("disk-4") <> -1 Then validfile = False
        If filename2.IndexOf("disk-5") <> -1 Then validfile = False
        If filename2.IndexOf("pt 2") <> -1 Then validfile = False
        If filename2.IndexOf("pt 3") <> -1 Then validfile = False
        If filename2.IndexOf("pt 4") <> -1 Then validfile = False
        If filename2.IndexOf("pt 5") <> -1 Then validfile = False
        If filename2.IndexOf("pt-2") <> -1 Then validfile = False
        If filename2.IndexOf("pt-3") <> -1 Then validfile = False
        If filename2.IndexOf("pt-4") <> -1 Then validfile = False
        If filename2.IndexOf("pt-5") <> -1 Then validfile = False
        If filename2.IndexOf("pt2") <> -1 Then validfile = False
        If filename2.IndexOf("pt3") <> -1 Then validfile = False
        If filename2.IndexOf("pt4") <> -1 Then validfile = False
        If filename2.IndexOf("pt5") <> -1 Then validfile = False
        If filename2.IndexOf("pt_2") <> -1 Then validfile = False
        If filename2.IndexOf("pt_3") <> -1 Then validfile = False
        If filename2.IndexOf("pt_4") <> -1 Then validfile = False
        If filename2.IndexOf("pt_5") <> -1 Then validfile = False
        If filename2.IndexOf("pt.2") <> -1 Then validfile = False
        If filename2.IndexOf("pt.3") <> -1 Then validfile = False
        If filename2.IndexOf("pt.4") <> -1 Then validfile = False
        If filename2.IndexOf("pt.5") <> -1 Then validfile = False
        If filename2.IndexOf("-trailer") <> -1 Then validfile = False
        If filename2.IndexOf(".trailer") <> -1 Then validfile = False
        If filename2.IndexOf("_trailer") <> -1 Then validfile = False
        If filename2.IndexOf("sample") <> -1 And filename2.IndexOf("people") = -1 Then validfile = False


        'check for movies ending a,b,c, etc (moviea, movieb) for multipart. movieb is multipart if moviea exists
        Dim extension As String
        Dim tempname As String
        extension = System.IO.Path.GetExtension(fullpathandfilename)
        tempname = fullpathandfilename.Replace(extension, "")
        If tempname.Substring(tempname.Length - 1) = "b" Or tempname.Substring(tempname.Length - 1) = "c" Or tempname.Substring(tempname.Length - 1) = "d" Or tempname.Substring(tempname.Length - 1) = "e" Or tempname.Substring(tempname.Length - 1) = "B" Or tempname.Substring(tempname.Length - 1) = "C" Or tempname.Substring(tempname.Length - 1) = "D" Or tempname.Substring(tempname.Length - 1) = "E" Then
            tempname = fullpathandfilename.Substring(0, fullpathandfilename.Length - (1 + extension.Length)) & "a" & extension
            If System.IO.File.Exists(tempname) Then validfile = False
        End If

        'now need to deal with multipart rar files
        Dim tempmovie2 As String = fullpathandfilename.Replace(".nfo", ".rar")
        Dim tempmovie As String = String.Empty
        If IO.File.Exists(tempmovie2) = True Then
            If IO.File.Exists(fullpathandfilename) = False Then
                Dim rarname As String = tempmovie2
                Dim SizeOfFile As Integer = FileLen(rarname)
                tempint2 = Convert.ToInt32(Preferences.rarsize) * 1048576
                If SizeOfFile > tempint2 Then
                    Dim mat As Match
                    mat = Regex.Match(rarname, "\.part[0-9][0-9]?[0-9]?[0-9]?.rar")
                    If mat.Success = True Then
                        rarname = mat.Value
                        If rarname.ToLower.IndexOf(".part1.rar") <> -1 Or rarname.ToLower.IndexOf(".part01.rar") <> -1 Or rarname.ToLower.IndexOf(".part001.rar") <> -1 Or rarname.ToLower.IndexOf(".part0001.rar") <> -1 Then
                            Dim stackrarexists As Boolean = False
                            rarname = fullpathandfilename.Replace(".nfo", ".rar")
                            If rarname.ToLower.IndexOf(".part1.rar") <> -1 Then
                                rarname = rarname.Replace(".part1.rar", ".nfo")
                                If IO.File.Exists(rarname) Then
                                    stackrarexists = True
                                    tempmovie = rarname
                                Else
                                    stackrarexists = False
                                    tempmovie = rarname
                                End If
                            End If
                            If rarname.ToLower.IndexOf(".part01.rar") <> -1 Then
                                rarname = rarname.Replace(".part01.rar", ".nfo")
                                If IO.File.Exists(rarname) Then
                                    stackrarexists = True
                                    tempmovie = rarname
                                Else
                                    stackrarexists = False
                                    tempmovie = rarname
                                End If
                            End If
                            If rarname.ToLower.IndexOf(".part001.rar") <> -1 Then
                                rarname = rarname.Replace(".part001.rar", ".nfo")
                                If IO.File.Exists(rarname) Then
                                    tempmovie = rarname
                                    stackrarexists = True
                                Else
                                    stackrarexists = False
                                    tempmovie = rarname
                                End If
                            End If
                            If rarname.ToLower.IndexOf(".part0001.rar") <> -1 Then
                                rarname = rarname.Replace(".part0001.rar", ".nfo")
                                If IO.File.Exists(rarname) Then
                                    tempmovie = rarname
                                    stackrarexists = True
                                Else
                                    stackrarexists = False
                                    tempmovie = rarname
                                End If
                            End If
                            If stackrarexists = True Then
                                Dim allok As Boolean = False
                                Try
                                    Dim filechck As IO.StreamReader = IO.File.OpenText(tempmovie)
                                    Do

                                        tempstring = filechck.ReadLine
                                        If tempstring = Nothing Then Exit Do

                                        If tempstring.IndexOf("<movie>") <> -1 Then
                                            allok = True
                                            Exit Do
                                        End If
                                    Loop Until tempstring.IndexOf("</movie>") <> -1
                                    filechck.Close()
                                Catch ex As Exception
#If SilentErrorScream Then
                                    Throw ex
#End If
                                Finally
                                End Try
                                If allok = True Then
                                    validfile = False
                                End If
                            End If
                        Else
                            validfile = False
                        End If
                    End If
                Else
                    validfile = False
                End If
            End If
        End If

        'rename fullpathandfilename to that of the nfo file
        fullpathandfilename = fullpathandfilename.Replace(fullpathandfilename.Substring(fullpathandfilename.LastIndexOf("."), fullpathandfilename.Length - fullpathandfilename.LastIndexOf(".")), ".nfo")

        'check for both variations of the filename
        Dim nfopaths(1) As String
        nfopaths(0) = fullpathandfilename
        nfopaths(1) = fullpathandfilename.Replace(IO.Path.GetFileName(fullpathandfilename), "movie.nfo")
        'check if the file exists
        For f = 0 To 1
            If IO.File.Exists(nfopaths(f)) Then
                'if it does check if it is a valid xbmc nfo, if it is not then move it or delete it according to prefs
                Try
                    Dim filechck As IO.StreamReader = IO.File.OpenText(nfopaths(f))
                    tempstring = filechck.ReadToEnd
                    filechck.Close()
                    If tempstring.IndexOf("<movie>") = -1 And tempstring.IndexOf("</movie>") = -1 Then
                        If Preferences.renamenfofiles = True Then
                            Dim fi As New IO.FileInfo(nfopaths(f))
                            Dim newpath As String = nfopaths(f).Replace(nfopaths(f).Substring(nfopaths(f).LastIndexOf("."), nfopaths(f).Length - nfopaths(f).LastIndexOf(".")), ".info")
                            fi.MoveTo(newpath)
                        End If
                    Else
                        validfile = False
                    End If


                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If

                Finally
                End Try
            End If
        Next
        Return validfile
    End Function



#Region "Auxiliary Procedures for Multithreading of Rescraping Movies Procedure Below"

    Public Sub mov_XBMCScrapingInitialization()
        Dim NewMoviesFolders As List(Of String)
        'Dim Extensions(100) As String
        'Dim ExtensionCount As Integer = 0
        Dim Progress As Integer = 0
        Dim ProgressText As String = ""
        Dim MoviePattern As String = ""
        Dim DirPath As String = ""
        Dim DirInfo As String = ""
        Dim TempInt As Integer = 0
        Dim Extension As String = ""
        Dim Filename2 As String = ""
        Dim TempString As String = ""
        Dim TempLabel As String = ""
        Dim TempProgressBarValue As Integer = 0

        TempProgressBarValue = ToolStripProgressBar1.Maximum
        TempLabel = ToolStripStatusLabel6.Text

        '--------------------------Begin Search for New Media in Normal Folders
        NewMoviesFolders = Utilities.FindAllFolders(movieFolders)

        '--------------------------Begin Search for New Media in Offline Folders
        For Each moviefolder In Preferences.offlinefolders
            Dim hg As New IO.DirectoryInfo(moviefolder)
            If hg.Exists Then
                scraperLog = scraperLog & "found" & hg.FullName.ToString & vbCrLf
                scraperLog = scraperLog & "Checking for subfolders" & vbCrLf
                Dim newlist As List(Of String)
                Try
                    newlist = Utilities.EnumerateFolders(moviefolder, 0)
                    For Each subfolder In newlist
                        scraperLog = scraperLog & "Subfolder added :- " & subfolder.ToString & vbCrLf
                        Dim temge22 As String = Utilities.GetLastFolder(subfolder & "\whatever") & ".avi"
                        Dim sTempFileName22 As String = IO.Path.Combine(subfolder, temge22)
                        Dim newtemp1 As String = sTempFileName22.Replace(IO.Path.GetExtension(sTempFileName22), ".nfo")
                        If Not IO.File.Exists(newtemp1) Then
                            If Not IO.File.Exists(IO.Path.Combine(subfolder, "tempoffline.ttt")) Then
                                Dim sTempFileName As String = IO.Path.Combine(subfolder, "tempoffline.ttt")
                                Dim fsTemp As New System.IO.FileStream(sTempFileName, IO.FileMode.Create)
                                fsTemp.Close()
                            End If
                            If Not IO.File.Exists(sTempFileName22) Then
                                Dim temge As String = Utilities.GetLastFolder(subfolder & "\whatever") & ".avi"
                                Dim sTempFileName2 As String = IO.Path.Combine(subfolder, temge)
                                Dim fsTemp2 As New System.IO.FileStream(sTempFileName2, IO.FileMode.Create)
                                fsTemp2.Close()
                            End If
                            NewMoviesFolders.Add(subfolder)
                        End If
                    Next
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
            End If
        Next
        '--------------------------End Search for New Media in Offline Folders

        'newMovieList.Clear()
        'Dim mediacounter As Integer = newMovieList.Count

        'For g = 0 To NewMoviesFolders.Count - 1
        '    Progress = ((100 / NewMoviesFolders.Count) * g) * 10
        '    ProgressText = "Scanning folder " & g + 1 & " of " & NewMoviesFolders.Count & " " & NewMoviesFolders(g)
        '    ToolStripProgressBar1.Visible = True
        '    ToolStripProgressBar1.Value = Progress
        '    ToolStripProgressBar1.ProgressBar.Refresh()
        '    ToolStripProgressBar1.ProgressBar.PerformStep()
        '    ToolStripStatusLabel1.Visible = True
        '    ToolStripStatusLabel1.Text = ProgressText

        '    For Each ext In Utilities.VideoExtensions
        '        MoviePattern = If(ext.IndexOf(".IFO") <> -1, ext, "*" & ext)

        '        DirPath = NewMoviesFolders(g)
        '        Dim Dir_Info As New System.IO.DirectoryInfo(DirPath)
        'SORT        Movies.listMovieFiles(Dir_Info, MoviePattern, scraperLog)
        '        'mov_ListFiles2(DirInfo, MoviePattern, Dir_Info)
        '    Next

        '    TempInt = newMovieList.Count - mediacounter
        '    mediacounter = newMovieList.Count
        'Next



        Dim movieyear As String = ""
       ' Dim newmoviecount As Integer = 0

       ' newmoviecount =  newMovieList.Count.ToString

        oMovies.FindNewMovies(False)
        

        scraperLog &= vbCrLf & vbCrLf & "Starting Main XBMC Scraper Process" & vbCrLf & vbCrLf

        If oMovies.NewMovies.Count = 0 Then
            scraperLog &= "No New Movies Found..." & vbCrLf
        Else
            ToolStripProgressBar1.Maximum = oMovies.NewMovies.Count + 1
            For f = 0 To oMovies.NewMovies.Count - 1
                Try
                    While novaThread.IsAlive
                        Application.DoEvents()
                    End While
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
                newMovieFoundTitle = oMovies.NewMovies(f).title.ToString
                newMovieFoundFilename = oMovies.NewMovies(f).mediapathandfilename.ToString
                scraperLog &= newMovieFoundTitle
                novaThread = New Thread(New ThreadStart(AddressOf mov_ScrapingStartTemp))
                novaThread.SetApartmentState(ApartmentState.STA)
                novaThread.Start

                ToolStripProgressBar1.Value = f
                ToolStripProgressBar1.ProgressBar.Refresh()
                ToolStripProgressBar1.ProgressBar.PerformStep()
                ToolStripStatusLabel1.Text = Preferences.XBMC_Scraper & " XBMC Scraper - Scraping " & (f + 1).ToString & " of " & oMovies.NewMovies.Count.ToString
                ToolStripStatusLabel6.Visible = True
                ToolStripStatusLabel6.Text = "Movie Name : " & newMovieFoundTitle


            Next
            Try
                While novaThread.IsAlive
                    Application.DoEvents()
                End While
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try

        End If

 '       ToolStripProgressBar1.Visible = False
        ToolStripStatusLabel6.Visible = False
 '       ToolStripStatusLabel1.Visible = False
        ToolStripProgressBar1.Maximum = TempProgressBarValue
        ToolStripStatusLabel6.Text = TempLabel

    End Sub
    Private Sub mov_ScrapingStartTemp()
        Dim FullFileContent As String = ""
        Dim Scraper As String = Preferences.XBMC_Scraper
        FullFileContent = Start_XBMC_MoviesScraping(Scraper, newMovieFoundTitle, newMovieFoundFilename)
        If FullFileContent.ToLower <> "error" Then
            scraperLog &= " - OK!" & vbCrLf
            Dim Teste As Boolean = CreateMovieNfo(Utilities.GetFileName(newMovieFoundFilename), FullFileContent)
            If Teste = True Then mov_DBScrapedAdd(newMovieFoundFilename)
            'Call Mc.clsGridViewMovie.mov_FiltersAndSortApply()
            'UpdateFilteredList
            If messbox.Visible = True Then messbox.Close()
            If Me.Cursor = Cursors.WaitCursor Then Me.Cursor = Cursors.Default
        Else
            scraperLog &= " - Scrape ERROR!" & vbCrLf
        End If
    End Sub
    Private Sub mov_DBScrapedAdd(ByVal Filename As String)
        Dim ExtensionPosition As Integer = Filename.LastIndexOf(".")
        Dim nfoFilename As String = Filename.Remove(ExtensionPosition, (Filename.Length - ExtensionPosition))
        nfoFilename &= ".nfo"
'        Dim TempMovieToAdd As New FullMovieDetails
'        TempMovieToAdd = nfoFunction.mov_NfoLoadFull(nfoFilename)
'        If Not IsNothing(TempMovieToAdd) Then
'            Dim movietoadd As New ComboList

'            Dim filecreation As New IO.FileInfo(nfoFilename)
'            Dim myDate As Date = filecreation.LastWriteTime
'            Try
'                movietoadd.filedate = Format(myDate, datePattern).ToString
'            Catch ex As Exception
'#If SilentErrorScream Then
'                Throw ex
'#End If
'            End Try
'            movietoadd.createdate = TempMovieToAdd.fileinfo.createdate
'            movietoadd.filename = TempMovieToAdd.fileinfo.filename
'            movietoadd.foldername = TempMovieToAdd.fileinfo.foldername
'            movietoadd.fullpathandfilename = TempMovieToAdd.fileinfo.fullpathandfilename
'            movietoadd.genre = TempMovieToAdd.fullmoviebody.genre
'            movietoadd.id = TempMovieToAdd.fullmoviebody.imdbid
'            movietoadd.missingdata1 = "0"
'            If TempMovieToAdd.fullmoviebody.movieset Is Nothing Then
'                movietoadd.movieset = ""
'            Else
'                movietoadd.movieset = TempMovieToAdd.fullmoviebody.movieset
'            End If
'            movietoadd.source = If(TempMovieToAdd.fullmoviebody.source Is Nothing, "", TempMovieToAdd.fullmoviebody.source)
'            movietoadd.outline = TempMovieToAdd.fullmoviebody.outline
'            movietoadd.plot = TempMovieToAdd.fullmoviebody.plot
'            movietoadd.playcount = TempMovieToAdd.fullmoviebody.playcount
'            movietoadd.rating = TempMovieToAdd.fullmoviebody.rating
'            movietoadd.runtime = TempMovieToAdd.fullmoviebody.runtime
'            movietoadd.sortorder = TempMovieToAdd.fullmoviebody.sortorder
'            movietoadd.title = TempMovieToAdd.fullmoviebody.title
'            movietoadd.originaltitle = TempMovieToAdd.fullmoviebody.title
'            movietoadd.titleandyear = TempMovieToAdd.fullmoviebody.title & " (" & TempMovieToAdd.fullmoviebody.year & ")"
'            movietoadd.top250 = TempMovieToAdd.fullmoviebody.top250
'            movietoadd.year = TempMovieToAdd.fullmoviebody.year
'            oMovies.MovieCache.Add(movietoadd)
'        End If

        Dim movie = oMovies.LoadMovie(nfoFilename)
       
        movie.UpdateCaches
    End Sub

#End Region




'    Public Sub DownloadTrailer(ByVal trailerPath As String, ByVal trailerUrl As String)

'        'Check for and delete zero length trailer - created when Url is invalid
'        DeleteZeroLengthFile(trailerPath)

'        If Not IO.File.Exists(trailerPath) Then

'            If Utilities.UrlIsValid(trailerUrl) Then

'                Dim wc As New Net.WebClient()

'                Try
'                    'trailerdownloadpanel.Visible = True
' ''''                   ssFileDownload.Visible = True
'                    FileToBeDownloaded = New WebFileDownloader
'                    FileToBeDownloaded.DownloadFileWithProgress(trailerUrl, trailerPath)
'                Catch ex As Exception
'#If SilentErrorScream Then
'                    Throw ex
'#End If
'                End Try
'            End If
'        End If
'    End Sub


    Private Sub DeleteZeroLengthFile(ByVal fileName)

        If IO.File.Exists(fileName) Then
            If (New IO.FileInfo(fileName)).Length = 0 Then
                Utilities.SafeDeleteFile(fileName)
            End If
        End If

    End Sub

    Private Sub ReloadMovieCacheToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ReloadMovieCacheToolStripMenuItem.Click
        'TO DO - REBUILD JUST SELECTED MOVIES
        mov_CacheLoad
    End Sub



'    'OBSOLETE...
'    Private Sub mov_CacheRefresh
'        Me.Enabled = False

'        frmSplash2.Text = "Refresh Movies..."
'        frmSplash2.Label1.Text = "Searching for Movie Folders....."
'        frmSplash2.Label2.Visible = False
'        frmSplash2.Show
'        Application.DoEvents

'        oMovies.RebuildMovieCache

'        frmSplash2.Label1.Text = "Processing...."

'        filteredList.Clear
'        filteredList.AddRange(oMovies.MovieCache)

'        Try
'            For Each movie In oMovies.MovieCache
'                Try
'                    If Preferences.usefoldernames = False Then
'                        If movie.filename <> Nothing Then
'                            movie.filename = movie.filename.Replace(".nfo", "")
'                        End If
'                    End If
'                Catch
'                    Exit For
'                End Try
'            Next
'        Catch ex As Exception
'#If SilentErrorScream Then
'            Throw ex
'#End If
'        End Try
'        frmSplash2.Label2.Visible = True
'        frmSplash2.Label2.Text = "Apply Filters..."
'  '      Call mov_FiltersAndSortApply()
'        frmSplash2.Label2.Text = "Reload Main Page..."
'        Call mov_FormPopulate()



'        Me.Activate()
'        Me.Enabled = True
'        frmSplash2.Hide()
'    End Sub


    Private Sub util_VideoMode1(ByVal tempstring As String)
        Dim action As String
        Dim errors As String
        Try
            Dim myProc As Process = Process.Start(tempstring)
        Catch ex As Exception
            errors = ex.ToString
            action = "Dim myProc As Process = Process.Start(" & tempstring & ")"
            Call util_ErrorLog(action, errors)
        End Try
    End Sub

    Private Sub util_VideoMode2(ByVal tempstring As String)
        Dim action As String
        Dim errors As String
        Try
            Dim thePSI As New System.Diagnostics.ProcessStartInfo("wmplayer")
            thePSI.Arguments = """" & tempstring & """"
            System.Diagnostics.Process.Start(thePSI)
        Catch ex As Exception
            errors = ex.ToString
            action = "Dim thePSI As New System.Diagnostics.ProcessStartInfo(""wmplayer"")" & vbCrLf & "thePSI.Arguments = "" & tempstring & """ & vbCrLf & "System.Diagnostics.Process.Start(thePSI)"
            Call util_ErrorLog(action, errors)
        End Try
    End Sub

    Private Sub util_VideoMode4(ByVal tempstring As String)
        Dim action As String
        Dim errors As String
        Try
            Dim myProc As Process = Process.Start("""" & Preferences.selectedvideoplayer & """", """" & tempstring & """")
        Catch ex As Exception
            errors = ex.ToString
            action = "Dim myProc As Process = Process.Start(""" & Preferences.selectedvideoplayer & """," & """" & tempstring & """)"
            Call util_ErrorLog(action, errors)
        End Try
    End Sub

    Private Sub util_ErrorLog(ByVal action As String, Optional ByVal errors As String = "")
        Dim errpath As String = applicationPath & "\error.log"
        Try

            Dim objWriter As New System.IO.StreamWriter(errpath, True)
            objWriter.WriteLine(errors)
            objWriter.WriteLine(action)
            objWriter.WriteLine() '(Chr(13))
            objWriter.Close()
        Catch ex As Exception
            MsgBox("Error, cant write to " & errpath & vbCrLf & vbCrLf & ex.ToString)
        End Try

    End Sub

    Public Sub tv_RefreshLog(ByVal action As String, Optional ByVal errors As String = "", Optional ByVal clear As Boolean = False)
        If Preferences.tvshowrefreshlog = False Then
            Exit Sub
        End If

        Dim errpath As String = IO.Path.Combine(applicationPath, "tvrefresh.log")
        If clear = True Then
            If IO.File.Exists(errpath) Then
                Try
                    IO.File.Delete(errpath)
                Catch ex As Exception
                    MsgBox("Error deleting: " & errpath & vbCrLf & vbCrLf & ex.ToString)
                End Try
            End If
        End If
        Try

            Dim objWriter As New System.IO.StreamWriter(errpath, True)
            objWriter.WriteLine(action)
            If errors <> "" Then
                objWriter.WriteLine(errors)
            End If
            'objWriter.WriteLine() '(Chr(13))
            'objWriter.WriteLine()
            objWriter.Close()
        Catch ex As Exception
            MsgBox("Error, cant write to " & errpath & vbCrLf & vbCrLf & ex.ToString)
        End Try

    End Sub


    'Private Sub ToolStripButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    Call PreferencesRefactor()
    'End Sub

    Private Sub tv_PreferencesRefactor()                    'this is not called from anywhere.....
        'If formsize2 = False Then options.chk_rememberformsize.CheckState = CheckState.Unchecked
        Dim movielistcheck As New List(Of String)
        Dim tvlistcheck As New List(Of String)

        For Each folder In movieFolders
            movielistcheck.Add(folder)
        Next

        For Each folder In tvFolders
            tvlistcheck.Add(folder)
        Next

        Dim save As New Preferences
        'Call save.saveconfig()
        Dim MyFormObject As New frmOptions
        MyFormObject.ShowDialog()

        Call util_RegexSave()


        Preferences.moviesets.Clear()
        movieFolders.Clear()
        tvFolders.Clear()
        Me.util_ConfigLoad()
        Dim result As Boolean = True

        If movielistcheck.Count <> movieFolders.Count Then
            result = False
        End If

        If result = True Then
            For f = 0 To movielistcheck.Count - 1
                If movielistcheck(f) <> movieFolders(f) Then
                    result = False
                    Exit For
                End If
            Next
        End If

        If result = False Then
            Dim messbox As frmMessageBox = New frmMessageBox("Please wait, Movie Folders have Changed", "", "Refreshing Movie DB")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            Me.Refresh()
            messbox.Refresh()
            mov_RebuildMovieCaches
            messbox.Close()
        End If

        result = True
        If tvlistcheck.Count <> tvFolders.Count Then
            result = False
        End If
        If result = True Then
            For f = 0 To tvlistcheck.Count - 1
                If tvlistcheck(f) <> tvFolders(f) Then
                    result = False
                    Exit For
                End If
            Next
        End If
        If result = False Then
            Dim messbox As frmMessageBox = New frmMessageBox("Please wait, TV Folders have Changed", "", "Refreshing TV DB")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            Me.Refresh()
            messbox.Refresh()
            Call tv_CacheRefresh()
            messbox.Close()
        End If
    End Sub
    Sub mov_XBMCScrapeDroppedFiles

        oMovies.AddNewMovies(droppedItems)

        If oMovies.NewMovies.Count = 0 Then
            scraperLog &= "No New Movies Found..." & vbCrLf
            Exit Sub
        End If

        Dim TempProgressBarValue = ToolStripProgressBar1.Maximum
        Dim TempLabel            = ToolStripStatusLabel6.Text

        ToolStripProgressBar1.Maximum = oMovies.NewMovies.Count + 1

        For f = 0 To oMovies.NewMovies.Count - 1
            Try
                While novaThread.IsAlive
                    Application.DoEvents()
                End While
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try

            newMovieFoundTitle    = oMovies.NewMovies(f).Title
            newMovieFoundFilename = oMovies.NewMovies(f).mediapathandfilename

            scraperLog &= newMovieFoundTitle

            novaThread = New Thread(New ThreadStart(AddressOf mov_ScrapingStartTemp))
            novaThread.SetApartmentState(ApartmentState.STA)
            novaThread.Start()

            ToolStripProgressBar1.Value = f
            ToolStripProgressBar1.ProgressBar.Refresh()
            ToolStripProgressBar1.ProgressBar.PerformStep()
            ToolStripStatusLabel1.Text = Preferences.XBMC_Scraper & " XBMC Scraper - Scraping " & (f + 1).ToString & " of " & oMovies.NewMovies.Count.ToString
            ToolStripStatusLabel6.Visible = True
            ToolStripStatusLabel6.Text = "Movie Name : " & newMovieFoundTitle
        Next

        Try
            While novaThread.IsAlive
                Application.DoEvents()
            End While
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try

        UpdateFilteredList

    '    ToolStripProgressBar1.Visible = False
        ToolStripStatusLabel6.Visible = False
     '   ToolStripStatusLabel1.Visible = False
        ToolStripProgressBar1.Maximum = TempProgressBarValue
        ToolStripStatusLabel6.Text = TempLabel
    End Sub



    Private Sub util_ThreadsRunningCheck()
        'If globalthreadcounter = 0 Then
        '    ToolStripButton10.Visible = False
        'Else
        '    ToolStripButton10.Visible = True
        'End If
    End Sub

    'Private Sub btnmoviescrapercancel_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    BckWrkScnMovies.CancelAsync()
    'End Sub

    'Private Sub ToolStripButton2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    If outlinetxt.Text = "MC cannot find this file, either the file no longer exists, or MC cannot access the file path" Then
    '        MsgBox("MC cannot find this file, either the file no longer exists, or MC cannot access the file path")
    '        Exit Sub
    '    End If
    '    Dim t As New frmCoverArt
    '    t.ShowDialog()
    'End Sub

    '    Private Sub ToolStripButton9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '        If outlinetxt.Text = "MC cannot find this file, either the file no longer exists, or MC cannot access the file path" Then
    '            MsgBox("MC cannot find this file, either the file no longer exists, or MC cannot access the file path")
    '            Exit Sub
    '        End If
    '        Dim t As New frmMovieFanart
    '        t.ShowDialog()
    '        Try
    '            If IO.File.Exists(workingMovieDetails.fileinfo.fanartpath) Then
    '                PictureBox7.ImageLocation = workingMovieDetails.fileinfo.fanartpath
    '                PictureBox7.Load()
    '            Else
    '                PictureBox7.Image = Nothing
    '            End If

    '        Catch ex As Exception
    '#If SilentErrorScream Then
    '            Throw ex
    '#End If
    '        End Try
    '    End Sub

    'paypal
    'Private Sub ToolStripButton11_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    Dim webAddress As String = "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=4696771"
    '    Process.Start(webAddress)
    'End Sub

    Private Sub util_ThreadsAllExit()
        Dim busy As Boolean = False
        Try
            If bckgroundscanepisodes.IsBusy Then
                busy = True
                bckgroundscanepisodes.CancelAsync()
            End If
            'If bckrescrapewizard.IsBusy Then
            '    busy = True
            '    bckrescrapewizard.CancelAsync()
            'End If
            If BckWrkScnMovies.IsBusy Then
                busy = True
                BckWrkScnMovies.CancelAsync()
            End If
            If bckepisodethumb.IsBusy Then
                busy = True
                bckepisodethumb.CancelAsync()
            End If

            Dim exitnowok As Boolean = False
            If busy = True Then
                messbox.TextBox1.Text = "Please Wait"
                messbox.TextBox2.Text = ""
                messbox.TextBox3.Text = "Stopping threads when it is Safe to do so"
                messbox.Refresh()
                messbox.Visible = True
            End If
            Do Until busy = False
                'Not bckrescrapewizard.IsBusy And 
                If Not bckepisodethumb.IsBusy And Not bckgroundscanepisodes.IsBusy And Not BckWrkScnMovies.IsBusy Then
                    busy = False
                    Exit Do
                End If
                Threading.Thread.Sleep(100)
                Application.DoEvents()
            Loop
            messbox.Visible = False
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        Finally

        End Try
    End Sub




    Private Sub actorcb_MouseEnter(ByVal sender As Object, ByVal e As System.EventArgs) Handles actorcb.MouseEnter
        Try
            actorcb.Focus()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    'Browse Actors
    Private Sub actorcb_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles actorcb.SelectedIndexChanged
        Try
            For Each actor In workingMovieDetails.listactors
                If actor.actorname = actorcb.SelectedItem Then
                    If actor.actorrole <> "" Then
                        roletxt.Text = actor.actorrole
                    End If

                    Dim temppath = GetActorPath(workingMovieDetails.fileinfo.fullpathandfilename,actor.actorname)

                    If IO.File.Exists(temppath) Then
                        util_ImageLoad(PictureBoxActor, temppath, Utilities.DefaultActorPath)
                        Exit Sub
                    End If
                    If actor.actorthumb <> Nothing Then
                        Dim actorthumbpath As String = Preferences.GetActorThumbPath(actor.actorthumb)
                        If actorthumbpath <> "none" Then
                            If IO.File.Exists(actorthumbpath) Or actorthumbpath.ToLower.IndexOf("http") <> -1 Then
                                util_ImageLoad(PictureBoxActor, actorthumbpath, Utilities.DefaultActorPath)
                            End If
                        Else
                            util_ImageLoad(PictureBoxActor, Utilities.DefaultActorPath, Utilities.DefaultActorPath)
                        End If
                    Else
                        util_ImageLoad(PictureBoxActor, Utilities.DefaultActorPath, Utilities.DefaultActorPath)
                    End If
                    Exit For
                Else
                    util_ImageLoad(PictureBoxActor, Utilities.DefaultActorPath, Utilities.DefaultActorPath)
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub


    'View Title, Filename, or Foldername
    'Private Sub mov_MovieComboListSort()
    '    Monitor.Enter(Me)
    '    'Try
    '    Dim comboarray2 As New List(Of str_ComboList)
    '    If RadioButton3.Checked = True Then
    '        ListBox2.Items.Clear()
    '        For Each movie In filteredList
    '            If RadioButton1.Checked = True Then
    '                ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.titleandyear))
    '            ElseIf RadioButton2.Checked = True Then
    '                ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.filename))
    '            ElseIf RadioButton6.Checked = True Then
    '                ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.foldername))
    '            End If
    '        Next
    '        ListBox2.Sorted = True
    '        For Each movie In ListBox2.Items
    '            For Each film In filteredList
    '                If film.fullpathandfilename Is CType(movie, ValueDescriptionPair).Value Then
    '                    comboarray2.Add(film)
    '                    Exit For
    '                End If
    '            Next
    '        Next
    '    End If

    '    If RadioButton4.Checked = True Then
    '        MovieListComboBox.Sorted = False
    '        ListBox2.Items.Clear()
    '        For Each movie In filteredList
    '            ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.year))
    '        Next
    '        ListBox2.Sorted = True

    '        For Each movie In ListBox2.Items
    '            For Each film In filteredList
    '                If film.fullpathandfilename Is CType(movie, ValueDescriptionPair).Value Then
    '                    comboarray2.Add(film)
    '                    Exit For
    '                End If
    '            Next
    '        Next
    '    End If

    '    If RadioButton21.Checked = True Then
    '        MovieListComboBox.Sorted = False
    '        ListBox2.Items.Clear()
    '        For Each movie In filteredList
    '            Dim tempstring As String = movie.runtime
    '            If tempstring = "" Then tempstring = "00 mins"
    '            If IsNumeric(tempstring) Then tempstring &= " mins"
    '            Try
    '                tempstring = tempstring.Substring(0, tempstring.IndexOf("min"))
    '                tempstring = tempstring.Replace(" ", "")
    '                Do Until IsNumeric(tempstring.Substring(0, 1))
    '                    If Not IsNumeric(tempstring.Substring(0, 1)) Then
    '                        tempstring = tempstring.Substring(1, tempstring.Length - 1)
    '                    End If
    '                Loop
    '                tempstring = tempstring.Replace(" min", "")
    '                If IsNumeric(tempstring) Then
    '                    If tempstring.Length = 1 Then
    '                        tempstring = "00" & tempstring
    '                    End If
    '                    If tempstring.Length = 2 Then
    '                        tempstring = "0" & tempstring
    '                    End If
    '                Else
    '                    tempstring = "000"
    '                End If
    '            Catch
    '                tempstring = "- mins"
    '            End Try
    '            ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, tempstring))
    '        Next
    '        ListBox2.Sorted = True

    '        For Each movie In ListBox2.Items
    '            For Each film In filteredList
    '                If film.fullpathandfilename Is CType(movie, ValueDescriptionPair).Value Then
    '                    comboarray2.Add(film)
    '                    Exit For
    '                End If
    '            Next
    '        Next
    '    End If




    '    If RadioButtonSortCreate.Checked = True Then        'Date Added button
    '        MovieListComboBox.Sorted = False
    '        ListBox2.Items.Clear()
    '        For Each movie In filteredList
    '            If IsNumeric(movie.createdate) Then
    '                ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.createdate))
    '            Else
    '                ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.filedate))
    '            End If
    '        Next
    '        ListBox2.Sorted = True

    '        For Each movie In ListBox2.Items
    '            For Each film In filteredList
    '                If film.fullpathandfilename Is CType(movie, ValueDescriptionPair).Value Then
    '                    comboarray2.Add(film)
    '                    Exit For
    '                End If
    '            Next

    '        Next
    '    End If



    '    If RadioButton19.Checked = True Then
    '        MovieListComboBox.Sorted = False
    '        ListBox2.Items.Clear()
    '        For Each movie In filteredList
    '            If movie.sortorder <> Nothing Then
    '                If movie.sortorder <> "" Then
    '                    ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.sortorder))
    '                Else
    '                    ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.title))
    '                End If
    '            Else
    '                ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.title))
    '            End If
    '        Next
    '        ListBox2.Sorted = True

    '        For Each movie In ListBox2.Items
    '            For Each film In filteredList
    '                If film.fullpathandfilename Is CType(movie, ValueDescriptionPair).Value Then
    '                    comboarray2.Add(film)
    '                    Exit For
    '                End If
    '            Next
    '        Next
    '    End If




    '    If RadioButtonSortModified.Checked = True Then   'in nfo as createdate'
    '        MovieListComboBox.Sorted = False
    '        ListBox2.Items.Clear()
    '        For Each movie In filteredList
    '            ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.createdate)) '.ToString))
    '        Next
    '        ListBox2.Sorted = True


    '        For Each movie In ListBox2.Items
    '            For Each film In filteredList
    '                If film.fullpathandfilename Is CType(movie, ValueDescriptionPair).Value Then
    '                    comboarray2.Add(film)
    '                    Exit For
    '                End If
    '            Next
    '        Next

    '    End If
    '    If RadioButton7.Checked = True Then
    '        MovieListComboBox.Sorted = False
    '        ListBox2.Items.Clear()
    '        ListBox2.Sorted = False
    '        For Each movie In filteredList
    '            If RadioButton1.Checked = True Then
    '                ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.rating & " - " & movie.title))
    '            ElseIf RadioButton2.Checked = True Then
    '                ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.rating & " - " & movie.filename))
    '            ElseIf RadioButton6.Checked = True Then
    '                ListBox2.Items.Add(New ValueDescriptionPair(movie.fullpathandfilename, movie.rating & " - " & movie.foldername))
    '            End If
    '        Next
    '        ListBox2.Sorted = True
    '        MovieListComboBox.Sorted = False

    '        For Each movie In ListBox2.Items
    '            For Each film In filteredList
    '                If film.fullpathandfilename Is CType(movie, ValueDescriptionPair).Value Then
    '                    comboarray2.Add(film)
    '                    Exit For
    '                End If
    '            Next
    '        Next

    '    End If
    '    'filteredlist.Clear()

    '    If RadioButtonSortModified.Checked = False And RadioButton4.Checked = False And RadioButton7.Checked = False And RadioButtonSortCreate.Checked = False Then
    '        If btnreverse.CheckState = CheckState.Unchecked Then
    '            filteredList = comboarray2
    '        Else
    '            filteredList.Clear()
    '            For f = comboarray2.Count - 1 To 0 Step -1
    '                Dim movietoadd As New str_ComboList
    '                movietoadd.plot = comboarray2(f).plot
    '                movietoadd.fullpathandfilename = comboarray2(f).fullpathandfilename
    '                movietoadd.titleandyear = comboarray2(f).titleandyear
    '                movietoadd.filename = comboarray2(f).filename
    '                movietoadd.year = comboarray2(f).year
    '                movietoadd.filedate = comboarray2(f).filedate
    '                movietoadd.foldername = comboarray2(f).foldername
    '                movietoadd.runtime = comboarray2(f).runtime
    '                movietoadd.outline = comboarray2(f).outline
    '                movietoadd.rating = comboarray2(f).rating
    '                If comboarray2(f).sortorder = Nothing Then
    '                    movietoadd.sortorder = comboarray2(f).sortorder
    '                ElseIf comboarray2(f).sortorder = "" Then
    '                    movietoadd.sortorder = comboarray2(f).sortorder
    '                Else
    '                    movietoadd.sortorder = comboarray2(f).sortorder
    '                End If
    '                movietoadd.createdate = comboarray2(f).createdate
    '                movietoadd.id = comboarray2(f).id
    '                movietoadd.genre = comboarray2(f).genre
    '                movietoadd.sortorder = comboarray2(f).sortorder
    '                movietoadd.title = comboarray2(f).title
    '                movietoadd.originaltitle = comboarray2(f).originaltitle
    '                movietoadd.movieset = comboarray2(f).movieset
    '                movietoadd.source = comboarray2(f).source
    '                movietoadd.filedate = comboarray2(f).filedate

    '                filteredList.Add(movietoadd)
    '            Next
    '        End If
    '    Else
    '        If btnreverse.CheckState = CheckState.Checked Then
    '            filteredList = comboarray2
    '        Else
    '            filteredList.Clear()
    '            For f = comboarray2.Count - 1 To 0 Step -1
    '                Dim movietoadd As New str_ComboList
    '                movietoadd.plot = comboarray2(f).plot
    '                movietoadd.fullpathandfilename = comboarray2(f).fullpathandfilename
    '                movietoadd.titleandyear = comboarray2(f).titleandyear
    '                movietoadd.filename = comboarray2(f).filename
    '                movietoadd.year = comboarray2(f).year
    '                movietoadd.filedate = comboarray2(f).filedate
    '                movietoadd.foldername = comboarray2(f).foldername
    '                movietoadd.rating = comboarray2(f).rating
    '                movietoadd.top250 = comboarray2(f).top250
    '                movietoadd.createdate = comboarray2(f).createdate
    '                movietoadd.id = comboarray2(f).id
    '                movietoadd.outline = comboarray2(f).outline
    '                movietoadd.rating = comboarray2(f).rating
    '                movietoadd.genre = comboarray2(f).genre
    '                movietoadd.runtime = comboarray2(f).runtime
    '                movietoadd.title = comboarray2(f).title
    '                movietoadd.originaltitle = comboarray2(f).originaltitle
    '                If comboarray2(f).sortorder = Nothing Then
    '                    movietoadd.sortorder = comboarray2(f).sortorder
    '                ElseIf comboarray2(f).sortorder = "" Then
    '                    movietoadd.sortorder = comboarray2(f).sortorder
    '                Else
    '                    movietoadd.sortorder = comboarray2(f).sortorder
    '                End If
    '                movietoadd.source = comboarray2(f).source
    '                movietoadd.movieset = comboarray2(f).movieset
    '                movietoadd.filedate = comboarray2(f).filedate
    '                filteredList.Add(movietoadd)
    '            Next
    '        End If
    '    End If
    '    mov_MovieComboLoad()
    '    'Catch
    '    'Finally
    '    Monitor.Exit(Me)
    '    'End Try

    'End Sub

    'zoom images
    Private Sub moviethumb_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles moviethumb.DoubleClick
        Try
            Try
                If workingMovieDetails.fileinfo.posterpath <> Nothing Then
                    If IO.File.Exists(workingMovieDetails.fileinfo.posterpath) Then
                        Me.ControlBox = False
                        MenuStrip1.Enabled = False
                        Using newimage As New Bitmap(workingMovieDetails.fileinfo.posterpath)
                            util_ZoomImage(newimage)
                        End Using
                    End If
                End If
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub PictureBoxFanArt_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles PictureBoxFanArt.DoubleClick

        Try
            Try
                If workingMovieDetails.fileinfo.fanartpath <> Nothing Then
                    If IO.File.Exists(workingMovieDetails.fileinfo.fanartpath) Then
                        Me.ControlBox = False
                        MenuStrip1.Enabled = False
                        Using newimage As New Bitmap(workingMovieDetails.fileinfo.fanartpath)
                            util_ZoomImage(newimage)
                        End Using
                    End If
                End If
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub util_ZoomImage(ByVal file As Bitmap)
        bigPanel = New Panel
        With bigPanel
            .Width = Me.Width
            .Height = Me.Height
            .BringToFront()
            .Dock = DockStyle.Fill
        End With

        bigPictureBox = New PictureBox()

        With bigPictureBox
            .Location = New Point(0, 0)
            .Width = bigPanel.Width
            .Height = bigPanel.Height
            .SizeMode = PictureBoxSizeMode.Zoom
            '.Image = sender.image
            .Image = file
            .Visible = True
            .BorderStyle = BorderStyle.Fixed3D
            AddHandler bigPictureBox.DoubleClick, AddressOf util_PicBoxClose
            .Dock = DockStyle.Fill
        End With

        'Dim sizex As Integer = bigpicbox.Width
        'Dim sizey As Integer = bigpicbox.Height

        Dim bigpanellabel As Label
        bigpanellabel = New Label
        With bigpanellabel
            .Location = New Point(20, 200)
            .Width = 150
            .Height = 50
            .Visible = True
            .Text = "Double Click Image To" & vbCrLf & "Return To Browser"
            '   .BringToFront()
        End With

        Me.bigPanel.Controls.Add(bigpanellabel)
        bigpanellabel.BringToFront()
        Application.DoEvents()



        If Not bigPictureBox.Image Is Nothing And bigPictureBox.Image.Width > 20 Then

            Dim sizey As Integer = bigPictureBox.Image.Height
            Dim sizex As Integer = bigPictureBox.Image.Width
            Dim tempstring As String
            tempstring = "Full Image Resolution :- " & sizex.ToString & " x " & sizey.ToString
            Dim resolutionlbl As New Label
            With resolutionlbl
                .Location = New Point(20, 450)
                .Width = 300
                .Text = tempstring
                .BackColor = Color.Transparent
            End With

            Me.bigPanel.Controls.Add(resolutionlbl)
            resolutionlbl.BringToFront()
            Me.Refresh()
            Application.DoEvents()
            Dim tempstring2 As String = resolutionlbl.Text
        Else
            'bigpicbox.ImageLocation = posterurls(rememberint + 1, 1)
        End If


        Me.Controls.Add(bigPanel)
        bigPanel.BringToFront()
        Me.bigPanel.Controls.Add(bigPictureBox)
        Me.Refresh()
    End Sub

    Private Sub bigpicbox_LoadCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs) Handles bigPictureBox.LoadCompleted
        Try
            Dim bigpanellabel As Label
            bigpanellabel = New Label
            Dim resolutionlbl As Label
            With bigpanellabel
                .Location = New Point(20, 200)
                .Width = 150
                .Height = 50
                .Visible = True
                .Text = "Double Click Image To" & vbCrLf & "Return To Browser"
                '   .BringToFront()
            End With

            Me.bigPanel.Controls.Add(bigpanellabel)
            bigpanellabel.BringToFront()
            Application.DoEvents()



            If Not bigPictureBox.Image Is Nothing And bigPictureBox.Image.Width > 20 Then

                Dim sizey As Integer = bigPictureBox.Image.Height
                Dim sizex As Integer = bigPictureBox.Image.Width
                Dim tempstring As String
                tempstring = "Full Image Resolution :- " & sizex.ToString & " x " & sizey.ToString
                resolutionlbl = New Label
                With resolutionlbl
                    .Location = New Point(20, 450)
                    .Width = 180
                    .Text = tempstring
                    .BackColor = Color.Transparent
                End With

                Me.bigPanel.Controls.Add(resolutionlbl)
                resolutionlbl.BringToFront()
                Me.Refresh()
                Application.DoEvents()
                Dim tempstring2 As String = resolutionlbl.Text
            Else
                'bigpicbox.ImageLocation = posterurls(rememberint + 1, 1)
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub util_PicBoxClose()
        Me.Controls.Remove(bigPanel)
        bigPanel = Nothing
        Me.Controls.Remove(bigPictureBox)
        bigPictureBox = Nothing
        Me.ControlBox = True
        MenuStrip1.Enabled = True
        'ToolStrip1.Enabled = True
    End Sub

    'reset all filters
    Private Sub Button2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ButtonResetFilters.Click
        Try
            ResetFilters
            Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)

            Try
                If DataGridViewMovies.SelectedRows.Count = 1 Then
                    If workingMovieDetails.fileinfo.fullpathandfilename = DataGridViewMovies.SelectedCells(NFO_INDEX).Value.ToString Then Return
                End If
            Catch
            End Try

            DisplayMovie()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub


    Sub ResetFilters
        State=ProgramState.ResettingFilters
        ActorFilter=""
        SetFilter=""
        ResolutionFilter=""
        AudioCodecsFilter=""
        AudioLanguagesFilter=""
        AudioChannelsFilter =""
        AudioBitratesFilter =""
        filterOverride = False
        TextBox1.Text = ""
        txt_titlesearch.Text = ""
        txt_titlesearch.BackColor = Color.White
        TextBox1.BackColor = Color.White
'       cbSort.SelectedIndex = 0
        RadioButtonTitleAndYear.Checked = True
          
        cbFilterGeneral       .SelectedIndex = 0
        cbFilterGenre         .SelectedIndex = 0
        cbFilterSet           .SelectedIndex = 0
        cbFilterActor         .SelectedIndex = 0
        cbFilterSource        .SelectedIndex = 0
        cbFilterResolution    .SelectedIndex = 0
        cbFilterAudioCodecs   .SelectedIndex = 0
        cbFilterAudioLanguages.SelectedIndex = 0
        cbFilterAudioBitrates .SelectedIndex = 0
        cbFilterAudioChannels .SelectedIndex = 0
        cbFilterNumAudioTracks.SelectedIndex = 0

        UpdateMinMaxMovieFilters

        cbFilterVotes         .Reset
        cbFilterRating        .Reset
        cbFilterYear          .Reset


        State=ProgramState.Other
    End Sub

    Sub UpdateMinMaxMovieFilters
        cbFilterVotes         .Min = oMovies.MinVotes
        cbFilterVotes         .Max = oMovies.MaxVotes
        cbFilterYear          .Min = oMovies.MinYear
        cbFilterYear          .Max = oMovies.MaxYear
    End Sub

    'Medianfo.dll to outputlog
    Private Sub util_FileDetailsGet()
        Try
            Dim tempstring As String = String.Empty
            Dim exists As Boolean
            Dim movieinfo As String = String.Empty
            Dim medianfoexists As Boolean = False
            If applicationPath.IndexOf("/") <> -1 Then tempstring = applicationPath & "/" & "MediaInfo.dll"
            If applicationPath.IndexOf("\") <> -1 Then tempstring = applicationPath & "\" & "MediaInfo.dll"
            exists = IO.File.Exists(tempstring)
            If exists = True Then
                medianfoexists = True
            End If
            If medianfoexists = False Then
                MsgBox("Unable to find th file ""MediaInfo.dll""" & vbCrLf & vbCrLf & "Please make sure this file is available in the programs root directory")
                Exit Sub
            End If
            Dim To_Display As String = ""
            Dim tempstring5 As String
            Dim MI As mediainfo
            MI = New mediainfo
            tempstring5 = MI.Option_("Info_Version", "0.7.0.0;MediaInfoDLL_Example_MSVB;0.7.0.0")
            If (tempstring5.Length() = 0) Then
                TextBox1.Text = "MediaInfo.Dll: this version of the DLL is not compatible"
                Exit Sub
            End If
            tempstring = Utilities.GetFileName(pathtxt.Text)
            If IO.Path.GetFileName(tempstring).ToLower = "video_ts.ifo" Then
                Dim temppath As String = tempstring.Replace(IO.Path.GetFileName(tempstring), "VTS_01_0.IFO")
                If IO.File.Exists(temppath) Then
                    tempstring = temppath
                End If
            End If
            If IO.File.Exists(tempstring) Then
                MI.Open(tempstring)
                To_Display = MI.Inform
                movieinfo = To_Display
                MI.Close()
            End If

            TextBox8.Text = movieinfo
        Catch
        End Try
    End Sub

#Region "Auxiliary Procedures for Multithreading of Rescraping Movies Procedure Below"

    Private Sub mov_ReScrapingStartTemp()
        Dim FullFileContent As String = ""

        'Dim i As Integer = DataGridViewMovies.CurrentRow.Index

        Dim movie As Movie = oMovies.LoadMovie(workingMovieDetails.fileinfo.fullpathandfilename)

        Dim Scraper As String = Preferences.XBMC_Scraper

        'FullFileContent = Start_XBMC_MoviesReScraping(Scraper, workingMovieDetails.fullmoviebody.imdbid, Utilities.GetFileName(DataGridViewMovies.Item(0, i).Value.ToString))
        FullFileContent = Start_XBMC_MoviesReScraping(Scraper, movie.ScrapedMovie.fullmoviebody.imdbid, movie.mediapathandfilename)

        If FullFileContent.ToLower <> "error" Then

            Dim Teste As Boolean = CreateMovieNfo(movie.mediapathandfilename, FullFileContent)
            'mov_ListRefresh()
        End If
        If messbox.Visible = True Then messbox.Close()
        If Me.Cursor = Cursors.WaitCursor Then Me.Cursor = Cursors.Default
    End Sub
    Private Sub mov_ListRefresh()
        Call mov_FormPopulate()

        For f = 0 To oMovies.MovieCache.Count - 1
            If oMovies.MovieCache(f).fullpathandfilename = workingMovieDetails.fileinfo.fullpathandfilename Then

                Dim newfullmovie As New ComboList
                newfullmovie = oMovies.MovieCache(f)
                ''-------------- Aqui
                'If Preferences.ignorearticle = True Then
                '    If workingMovieDetails.fullmoviebody.title.ToLower.IndexOf("the ") = 0 Then
                '        newfullmovie.titleandyear = workingMovieDetails.fullmoviebody.title.Substring(4, workingMovieDetails.fullmoviebody.title.Length - 4) & ", The" & " (" & workingMovieDetails.fullmoviebody.year & ")"
                '    Else
                '        newfullmovie.titleandyear = workingMovieDetails.fullmoviebody.title & " (" & workingMovieDetails.fullmoviebody.year & ")"
                '    End If
                'Else
                '    newfullmovie.titleandyear = workingMovieDetails.fullmoviebody.title & " (" & workingMovieDetails.fullmoviebody.year & ")"
                'End If
                newfullmovie.genre = workingMovieDetails.fullmoviebody.genre
                Dim filecreation2 As New IO.FileInfo(workingMovieDetails.fileinfo.fullpathandfilename)
                Dim myDate2 As Date = filecreation2.LastWriteTime
                Try
                    newfullmovie.filedate = Format(myDate2, datePattern).ToString
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
                If String.IsNullOrEmpty(workingMovieDetails.fileinfo.createdate) Then
                    newfullmovie.createdate = newfullmovie.filedate
                Else
                    newfullmovie.createdate = workingMovieDetails.fileinfo.createdate
                End If
                newfullmovie.originaltitle = workingMovieDetails.fullmoviebody.originaltitle
                newfullmovie.outline = workingMovieDetails.fullmoviebody.outline
                newfullmovie.playcount = workingMovieDetails.fullmoviebody.playcount
                newfullmovie.rating = workingMovieDetails.fullmoviebody.rating
                newfullmovie.top250 = workingMovieDetails.fullmoviebody.top250
                newfullmovie.runtime = workingMovieDetails.fullmoviebody.runtime
                If workingMovieDetails.fullmoviebody.runtime.IndexOf(":") <> -1 Then
                    Try
                        workingMovieDetails.fullmoviebody.runtime = workingMovieDetails.fullmoviebody.runtime.Substring(workingMovieDetails.fullmoviebody.runtime.IndexOf(":") + 1, workingMovieDetails.fullmoviebody.runtime.Length - workingMovieDetails.fullmoviebody.runtime.IndexOf(":") - 1)
                    Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                    End Try
                End If
                oMovies.MovieCache.RemoveAt(f)
                oMovies.MovieCache.Add(newfullmovie)
                Exit For
            End If
        Next

        Call Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)
        If messbox.Visible = True Then messbox.Close()

        If Me.Cursor = Cursors.WaitCursor Then Me.Cursor = Cursors.Default

    End Sub
#End Region


    Private Sub mov_Rescrape

        If outlinetxt.Text = "MC cannot find this file, either the file no longer exists, or MC cannot access the file path" Then
            MsgBox("MC cannot find this file, either the file no longer exists, or MC cannot access the file path")
            Exit Sub
        End If

        If workingMovieDetails Is Nothing Then Exit Sub

        If workingMovieDetails.fullmoviebody.title = Nothing And workingMovieDetails.fullmoviebody.imdbid = Nothing Then
            MsgBox("Can't rescrape this movie because it doesn't have any NFO File" & vbCrLf & "refresh movie database, and search for new movies", MsgBoxStyle.OkOnly, "Error")
            Exit Sub
        End If

        Dim tempint = MessageBox.Show("Rescraping the movie will Overwrite all the current details" & vbCrLf & "Do you wish to continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
        If tempint = DialogResult.No Then
            Exit Sub
        End If

        If Not Preferences.movies_useXBMC_Scraper Then
            RunBackgroundMovieScrape("RescrapeDisplayedMovie")
            Exit Sub
        End If
        
        messbox = New frmMessageBox("", "", "The Selected Movie is being Rescraped....")
        System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
        messbox.Show()
        messbox.Refresh()
        Application.DoEvents()

        novaThread = New Thread(New ThreadStart(AddressOf mov_ReScrapingStartTemp))
        novaThread.SetApartmentState(ApartmentState.STA)
        novaThread.Start()

        UpdateFilteredList
    End Sub


    Private Sub mov_SaveQuick()

        If DataGridViewMovies.SelectedRows.Count = 0 Then Return

        If DataGridViewMovies.SelectedRows.Count = 1 Then 

            Dim movie As Movie = oMovies.LoadMovie(workingMovieDetails.fileinfo.fullpathandfilename)

            movie.ScrapedMovie.fullmoviebody.title = titletxt.Text.Replace(" (" & workingMovieDetails.fullmoviebody.year & ")", "")

            If movie.ScrapedMovie.fullmoviebody.originaltitle = Nothing Or movie.ScrapedMovie.fullmoviebody.originaltitle = "" Then 
                movie.ScrapedMovie.fullmoviebody.originaltitle = movie.ScrapedMovie.fullmoviebody.title
            End If

            movie.ScrapedMovie.fullmoviebody.director  = directortxt.Text
            movie.ScrapedMovie.fullmoviebody.playcount = workingMovieDetails.fullmoviebody.playcount
            movie.ScrapedMovie.fullmoviebody.credits   = creditstxt.Text
            movie.ScrapedMovie.fullmoviebody.studio    = studiotxt.Text
            movie.ScrapedMovie.fullmoviebody.genre     = genretxt.Text
            movie.ScrapedMovie.fullmoviebody.votes     = votestxt.Text
            movie.ScrapedMovie.fullmoviebody.rating    = ratingtxt.Text
            movie.ScrapedMovie.fullmoviebody.runtime   = runtimetxt.Text
            movie.ScrapedMovie.fullmoviebody.outline   = outlinetxt.Text
            movie.ScrapedMovie.fullmoviebody.plot      = plottxt.Text
            movie.ScrapedMovie.fullmoviebody.tagline   = taglinetxt.Text
            movie.ScrapedMovie.fullmoviebody.stars     = txtStars.Text.ToString.Replace(", See full cast and crew", "")
            movie.ScrapedMovie.fullmoviebody.mpaa      = certtxt.Text
            movie.ScrapedMovie.fullmoviebody.sortorder = TextBox34.Text
            movie.ScrapedMovie.fullmoviebody.movieset = cbMovieDisplay_MovieSet.Items(cbMovieDisplay_MovieSet.SelectedIndex)
            movie.ScrapedMovie.fullmoviebody.source   = If(ComboBoxFormatSource.SelectedIndex=0, Nothing, ComboBoxFormatSource.Items(ComboBoxFormatSource.SelectedIndex))

            movie.AssignMovieToCache
            movie.UpdateMovieCache
            movie.SaveNFO

            UpdateFilteredList
        Else
            Dim mess As New frmMessageBox("Saving Selected Movies", , "     Please Wait.     ")  'Multiple movies selected
            mess.Show()
            mess.Refresh()
            Application.DoEvents()

            Dim i As Integer = DataGridViewMovies.CurrentRow.Index
            Dim Startfullpathandfilename As String = DataGridViewMovies.Item(0, i).Value.ToString

            For Each item As DataGridViewRow In DataGridViewMovies.SelectedRows

                Dim filepath As String = item.Cells("fullpathandfilename").Value.ToString
                Dim movie    As Movie  = oMovies.LoadMovie(filepath)

                If IsNothing(movie) Then Continue For

                If directortxt.Text <> "" Then
                    movie.ScrapedMovie.fullmoviebody.director = directortxt.Text
                End If
                If creditstxt.Text <> "" Then
                    movie.ScrapedMovie.fullmoviebody.credits = creditstxt.Text
                End If
                If genretxt.Text <> "" Then
                    movie.ScrapedMovie.fullmoviebody.genre = genretxt.Text
                End If
                If certtxt.Text <> "" Then
                    movie.ScrapedMovie.fullmoviebody.mpaa = certtxt.Text
                End If
                If outlinetxt.Text <> "" Then
                    movie.ScrapedMovie.fullmoviebody.outline = outlinetxt.Text
                End If
                If runtimetxt.Text <> "" Then
                    movie.ScrapedMovie.fullmoviebody.runtime = runtimetxt.Text
                End If
                If studiotxt.Text <> "" Then
                    movie.ScrapedMovie.fullmoviebody.studio = studiotxt.Text
                End If
                If plottxt.Text <> "" Then
                    movie.ScrapedMovie.fullmoviebody.plot = plottxt.Text
                End If
                If taglinetxt.Text <> "" Then
                    movie.ScrapedMovie.fullmoviebody.tagline = taglinetxt.Text
                End If
                If txtStars.Text <> "" Then
                    movie.ScrapedMovie.fullmoviebody.stars = txtStars.Text.ToString.Replace(", See full cast and crew", "")
                End If
                If ratingtxt.Text <> "" Then
                    movie.ScrapedMovie.fullmoviebody.rating = ratingtxt.Text
                End If
                If votestxt.Text <> "" Then
                    movie.ScrapedMovie.fullmoviebody.votes = votestxt.Text
                End If

                If cbMovieDisplay_MovieSet.SelectedItem = Nothing Then cbMovieDisplay_MovieSet.SelectedItem = "-None-"
                If cbMovieDisplay_MovieSet.SelectedItem <> "-None-" Then
                    movie.ScrapedMovie.fullmoviebody.movieset = cbMovieDisplay_MovieSet.Items(cbMovieDisplay_MovieSet.SelectedIndex)
                Else
                    movie.ScrapedMovie.fullmoviebody.movieset = Nothing
                End If
                'If setsTxt.Text = "" Then setsTxt.Text = "-None-"
                'If setsTxt.Text <> "-None-" Then
                'movie.ScrapedMovie.fullmoviebody.movieset = setsTxt.Text
                'Else
                'movie.ScrapedMovie.fullmoviebody.movieset = Nothing
                'End If
                movie.ScrapedMovie.fullmoviebody.source = If(ComboBoxFormatSource.SelectedIndex = 0, Nothing, ComboBoxFormatSource.Items(ComboBoxFormatSource.SelectedIndex))

                movie.AssignMovieToCache
                movie.UpdateMovieCache
                movie.SaveNFO
            Next

'            oMovies.SaveMovieCache
'            oMovies.LoadMovieCache

            workingMovie.fullpathandfilename = Startfullpathandfilename
            mov_FormPopulate
            mess.Close
        End If
    End Sub


    'quicksavenfo
'	Private Sub mov_SaveQuick()

'		If DataGridViewMovies.SelectedRows.Count = 0 Then Return


'		If DataGridViewMovies.SelectedRows.Count = 1 Then   'Only one movie selected from movie list 
'			Dim tempstring As String = ""
'			Dim oldmovietitle As String = workingMovieDetails.fullmoviebody.title
'			'-------------- Aqui       'SK This should be applied only when loading data into MC for Display, not when saving to cache or NFO
'			'If Preferences.ignorearticle = True Then
'			'    If oldmovietitle.ToLower.IndexOf("the") = 0 Then
'			'        oldmovietitle = oldmovietitle.Substring(4, oldmovietitle.Length - 4) & ", The"
'			'    End If
'			'Else
'			'    oldmovietitle = oldmovietitle & " (" & workingMovieDetails.fullmoviebody.year & ")"
'			'End If
'			tempstring = " (" & workingMovieDetails.fullmoviebody.year & ")"
'			workingMovieDetails.fullmoviebody.title = titletxt.Text.Replace(tempstring, "")
'			If workingMovieDetails.fullmoviebody.originaltitle = Nothing Or workingMovieDetails.fullmoviebody.originaltitle = "" Then workingMovieDetails.fullmoviebody.originaltitle = workingMovieDetails.fullmoviebody.title
'			workingMovieDetails.fullmoviebody.director = directortxt.Text
'			'workingMovieDetails.fullmoviebody.stars = starstxt.Text            'starstxt.Text textbox not implemented yet
'			workingMovieDetails.fullmoviebody.credits = creditstxt.Text
'			workingMovieDetails.fullmoviebody.studio = studiotxt.Text
'			workingMovieDetails.fullmoviebody.genre = genretxt.Text
'			workingMovieDetails.fullmoviebody.votes = votestxt.Text
'			workingMovieDetails.fullmoviebody.rating = ratingtxt.Text
'			workingMovieDetails.fullmoviebody.runtime = runtimetxt.Text
'			workingMovieDetails.fullmoviebody.outline = outlinetxt.Text
'			workingMovieDetails.fullmoviebody.plot = plottxt.Text
'			workingMovieDetails.fullmoviebody.tagline = taglinetxt.Text
'			workingMovieDetails.fullmoviebody.stars = txtStars.Text.ToString.Replace(", See full cast and crew", "")
'			workingMovieDetails.fullmoviebody.mpaa = certtxt.Text
'			workingMovieDetails.fullmoviebody.sortorder = TextBox34.Text
'			If setsTxt.Text = "" Then setsTxt.Text = "-None-"
'			If setsTxt.Text <> "-None-" Then
'				workingMovieDetails.fullmoviebody.movieset = setsTxt.Text
'			Else
'				workingMovieDetails.fullmoviebody.movieset = Nothing
'			End If
'			workingMovieDetails.fullmoviebody.source = If(ComboBoxFormatSource.SelectedIndex = 0, Nothing, ComboBoxFormatSource.Items(ComboBoxFormatSource.SelectedIndex))

'			'nfoFunction.mov_NfoSave(workingMovieDetails.fileinfo.fullpathandfilename, workingMovieDetails, True)

'			movie.AssignMovieToCache
'			movie.UpdateMovieCache
'			movie.SaveNFO

'			'Dim newmovietitle As String = workingmoviedetails.fullmoviebody.title & " (" & workingmoviedetails.fullmoviebody.year & ")"
'			'change 
'			'title
'			'title & year
'			Dim newmovietitle As String = ""
'			Dim newmovietitleandyear As String = ""
'			newmovietitle = workingMovieDetails.fullmoviebody.title
'			'-------------- Aqui
'			'If Preferences.ignorearticle = True Then
'			'    If newmovietitle.ToLower.IndexOf("the") = 0 Then
'			'        newmovietitleandyear = newmovietitle.Substring(4, newmovietitle.Length - 4) & ", The (" & workingMovieDetails.fullmoviebody.year & ")"
'			'        newmovietitle = newmovietitle.Substring(4, newmovietitle.Length - 4) & ", The"
'			'    Else
'			'        newmovietitleandyear = newmovietitle & " (" & workingMovieDetails.fullmoviebody.year & ")"
'			'    End If
'			'Else
'			'    newmovietitleandyear = newmovietitle & " (" & workingMovieDetails.fullmoviebody.year & ")"
'			'End If

'			Dim oldmovietitletest As String = oldmovietitle                     'added this because the if test after the for below tests this way.
'			If oldmovietitletest.ToLower.IndexOf("the ") = 0 Then
'				oldmovietitletest = oldmovietitletest.Substring(4, tempstring.Length - 4)
'				oldmovietitletest = oldmovietitletest & ", The"
'			End If

'			For f = 0 To oMovies.MovieCache.Count - 1
''                If oMovies.MovieCache(f).title = oldmovietitle Then
'				If oMovies.MovieCache(f).fullpathandfilename = workingMovieDetails.fileinfo.fullpathandfilename Then

'					Dim newfullmovie As New ComboList
'					newfullmovie = oMovies.MovieCache(f)
'					Dim filecreation2 As New IO.FileInfo(workingMovieDetails.fileinfo.fullpathandfilename)
'					Dim myDate2 As Date = filecreation2.LastWriteTime
'					Try
'						newfullmovie.filedate = Format(myDate2, datePattern).ToString
'					Catch ex As Exception
'#If SilentErrorScream Then
'						Throw ex
'#End If
'					End Try

'					newfullmovie.title = newmovietitle
'					newfullmovie.titleandyear = newmovietitle & " (" & workingMovieDetails.fullmoviebody.year & ")"
'					newfullmovie.genre = workingMovieDetails.fullmoviebody.genre
'					newfullmovie.playcount = workingMovieDetails.fullmoviebody.playcount
'					newfullmovie.rating = workingMovieDetails.fullmoviebody.rating
'					newfullmovie.top250 = workingMovieDetails.fullmoviebody.top250
'					newfullmovie.sortorder = workingMovieDetails.fullmoviebody.sortorder
'					newfullmovie.createdate = workingMovieDetails.fileinfo.createdate
'					newfullmovie.runtime = workingMovieDetails.fullmoviebody.runtime
'					newfullmovie.id = workingMovieDetails.fullmoviebody.imdbid
'					newfullmovie.outline = workingMovieDetails.fullmoviebody.outline
'					newfullmovie.plot = workingMovieDetails.fullmoviebody.plot
'					newfullmovie.MovieSet = workingMovieDetails.fullmoviebody.movieset
'					newfullmovie.source = workingMovieDetails.fullmoviebody.source
'					newfullmovie.year = workingMovieDetails.fullmoviebody.year
'					If newfullmovie.source = Nothing Then newfullmovie.source = ""
'					If newfullmovie.MovieSet = Nothing Then
'						newfullmovie.MovieSet = "-None-"
'					End If
'					If newfullmovie.MovieSet = "" Then
'						newfullmovie.MovieSet = "-None-"
'					End If

'					'oMovies.MovieCache.RemoveAt(f)
'					'oMovies.MovieCache.Add(newfullmovie)

'					Dim movie = oMovies.LoadMovie(workingMovieDetails.fileinfo.fullpathandfilename)
       
'					movie.UpdateCaches

'					Exit For
'				End If
'			Next

'			oMovies.SaveMovieCache
'			UpdateFilteredList

'			If LabelCountFilter.Text.ToLower.IndexOf(" of ") <> -1 Then

'				Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)
'				mov_FormPopulate
'			End If
'		Else
'			Dim mess As New frmMessageBox("Saving Selected Movies", , "     Please Wait.     ")  'Multiple movies selected
'			mess.Show()
'			mess.Refresh()
'			Application.DoEvents()

'			Dim i As Integer = DataGridViewMovies.CurrentRow.Index
'			Dim Startfullpathandfilename As String = DataGridViewMovies.Item(0, i).Value.ToString

'			For Each item As DataGridViewRow In DataGridViewMovies.SelectedRows

'				Dim filepath As String = item.Cells(NFO_INDEX).Value.ToString

'				'Dim movie As New FullMovieDetails
'				'movie = nfoFunction.mov_NfoLoadFull(filepath)

'				Dim movie As Movie = oMovies.LoadMovie(filepath)


'				If IsNothing(movie) Then Continue For
'				If directortxt.Text <> "" Then
'					movie.ScrapedMovie.fullmoviebody.director = directortxt.Text
'				End If
'				If creditstxt.Text <> "" Then
'					movie.ScrapedMovie.fullmoviebody.credits = creditstxt.Text
'				End If
'				If genretxt.Text <> "" Then
'					movie.ScrapedMovie.fullmoviebody.genre = genretxt.Text
'				End If
'				If certtxt.Text <> "" Then
'					movie.ScrapedMovie.fullmoviebody.mpaa = certtxt.Text
'				End If
'				If outlinetxt.Text <> "" Then
'					movie.ScrapedMovie.fullmoviebody.outline = outlinetxt.Text
'				End If
'				If runtimetxt.Text <> "" Then
'					movie.ScrapedMovie.fullmoviebody.runtime = runtimetxt.Text
'				End If
'				If studiotxt.Text <> "" Then
'					movie.ScrapedMovie.fullmoviebody.studio = studiotxt.Text
'				End If
'				If plottxt.Text <> "" Then
'					movie.ScrapedMovie.fullmoviebody.plot = plottxt.Text
'				End If
'				If taglinetxt.Text <> "" Then
'					movie.ScrapedMovie.fullmoviebody.tagline = taglinetxt.Text
'				End If
'				If txtStars.Text <> "" Then
'					movie.ScrapedMovie.fullmoviebody.stars = txtStars.Text.ToString.Replace(", See full cast and crew", "")
'				End If
'				If ratingtxt.Text <> "" Then
'					movie.ScrapedMovie.fullmoviebody.rating = ratingtxt.Text
'				End If
'				If votestxt.Text <> "" Then
'					movie.ScrapedMovie.fullmoviebody.votes = votestxt.Text
'				End If

'				If setsTxt.Text = "" Then setsTxt.Text = "-None-"
'				If setsTxt.Text <> "-None-" Then
'					movie.ScrapedMovie.fullmoviebody.movieset = setsTxt.Text
'				Else
'					movie.ScrapedMovie.fullmoviebody.movieset = Nothing
'				End If
'				movie.ScrapedMovie.fullmoviebody.source = If(ComboBoxFormatSource.SelectedIndex = 0, Nothing, ComboBoxFormatSource.Items(ComboBoxFormatSource.SelectedIndex))
                
'				'nfoFunction.mov_NfoSave(filepath, movie, True)

'				movie.AssignMovieToCache
'				movie.UpdateMovieCache
'				movie.SaveNFO


''				For f = 0 To oMovies.MovieCache.Count - 1
''					If oMovies.MovieCache(f).fullpathandfilename = movie.fileinfo.fullpathandfilename Then
''						Dim newfullmovie As New ComboList
''						newfullmovie = oMovies.MovieCache(f)
''						Dim filecreation2 As New IO.FileInfo(workingMovieDetails.fileinfo.fullpathandfilename)
''						Dim myDate2 As Date = filecreation2.LastWriteTime
''						Try
''							newfullmovie.filedate = Format(myDate2, datePattern).ToString
''						Catch ex As Exception
''#If SilentErrorScream Then
''							Throw ex
''#End If
''						End Try

''						'Commented out items are not saved when multiple movies are selected
''						'              newfullmovie.title = movie.fullmoviebody.title
''						'              newfullmovie.titleandyear = newfullmovie.title & " (" & movie.fullmoviebody.year & ")"
''						newfullmovie.genre = movie.fullmoviebody.genre
''						newfullmovie.playcount = movie.fullmoviebody.playcount
''						newfullmovie.rating = movie.fullmoviebody.rating
''						newfullmovie.top250 = movie.fullmoviebody.top250
''						newfullmovie.sortorder = movie.fullmoviebody.sortorder
''						'              newfullmovie.createdate = movie.fileinfo.createdate
''						newfullmovie.runtime = movie.fullmoviebody.runtime
''						'              newfullmovie.id = movie.fullmoviebody.imdbid
''						newfullmovie.outline = movie.fullmoviebody.outline
''						newfullmovie.MovieSet = movie.fullmoviebody.movieset
''						If newfullmovie.MovieSet = Nothing Then
''							newfullmovie.MovieSet = "-None-"
''						End If
''						If newfullmovie.MovieSet = "" Then
''							newfullmovie.MovieSet = "-None-"
''						End If
''						newfullmovie.source = movie.fullmoviebody.source
''						If newfullmovie.source = Nothing Then
''							newfullmovie.source = ""
''						End If
''						'              newfullmovie.year = movie.fullmoviebody.year
''						'oMovies.MovieCache.RemoveAt(f)
''						'oMovies.MovieCache.Add(newfullmovie)

''						Dim m = oMovies.LoadMovie(movie.fileinfo.fullpathandfilename)
       
''						m.UpdateCaches

''						Exit For
''					End If
''				Next
'			Next

'			'oMovies.SaveMovieCache

'			workingMovie.fullpathandfilename = Startfullpathandfilename

'			'Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)
'			mov_FormPopulate
'			'UpdateFilteredList
'			mess.Close
'		End If
'	End Sub

    'change watched status
    Private Sub ButtonWatched_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ButtonWatched.Click
        Try
            If DataGridViewMovies.SelectedRows.Count = 1 Then
                If ButtonWatched.Text = "&Watched" Then
                    ButtonWatched.Text = "Un&watched"
                    ButtonWatched.BackColor = Color.Red
                    ButtonWatched.Refresh()
                    workingMovieDetails.fullmoviebody.playcount = "0"
                Else
                    ButtonWatched.Text = "&Watched"
                    ButtonWatched.BackColor = Color.LawnGreen
                    ButtonWatched.Refresh()
                    workingMovieDetails.fullmoviebody.playcount = "1"
                End If
                Call mov_SaveQuick()
            ElseIf DataGridViewMovies.SelectedRows.Count > 1 Then
                Dim mess As New frmMessageBox("Saving Selected Movies", , "     Please Wait.     ")
                mess.Show()
                mess.Refresh()
                Dim watched As String = ""
                If ButtonWatched.Text = "&Watched" Then
                    ButtonWatched.Text = "Un&watched"
                    ButtonWatched.BackColor = Color.Red
                    ButtonWatched.Refresh()
                    watched = "0"
                ElseIf ButtonWatched.Text = "Un&watched" Then
                    ButtonWatched.Text = "&Watched"
                    ButtonWatched.BackColor = Color.LawnGreen
                    ButtonWatched.Refresh()
                    watched = "1"
                ElseIf ButtonWatched.Text = "" Then
                    ButtonWatched.Text = "&Watched"
                    ButtonWatched.BackColor = Color.LawnGreen
                    ButtonWatched.Refresh()
                    watched = "1"
                End If
                For Each sRow As DataGridViewRow In DataGridViewMovies.SelectedRows
                    Dim filepath As String = sRow.Cells("fullpathandfilename").Value.ToString
                    If (IO.File.Exists(filepath)) Then
                        Dim movie As New FullMovieDetails
                        movie = nfoFunction.mov_NfoLoadFull(filepath)
                        If IsNothing(movie) Then Continue For
                        movie.fullmoviebody.playcount = watched
                        nfoFunction.mov_NfoSave(filepath, movie, True)
                        For f = 0 To oMovies.MovieCache.Count - 1
                            If oMovies.MovieCache(f).fullpathandfilename = filepath Then
                                Dim newfullmovie As New ComboList
                                newfullmovie = oMovies.MovieCache(f)
                                newfullmovie.playcount = watched
                                oMovies.MovieCache.RemoveAt(f)
                                oMovies.MovieCache.Add(newfullmovie)
                                Exit For
                            End If
                        Next
                    End If
                Next
                mess.Close()
            End If

            Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)

        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Mov_OpenMovieFolderToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mov_ToolStripOpenFolder.Click
        Try
            'Try
            If Not workingMovieDetails.fileinfo.fullpathandfilename Is Nothing Then
                Call util_OpenFolder(workingMovieDetails.fileinfo.fullpathandfilename)
            Else
                MsgBox("There is no Movie selected to open")
            End If
            'Catch
            'End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Mov_OpenFileToolStripMenuItem2(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mov_ToolStripViewNfo.Click
        Try
            Utilities.NfoNotepadDisplay(workingMovieDetails.fileinfo.fullpathandfilename)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub PosterBrowserToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mov_ToolStripPosterBrowserAlt.Click
        Try
            Dim t As New frmCoverArt
            t.ShowDialog()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub BrowseFanartToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mov_ToolStripFanartBrowserAlt.Click
        Try
            Dim t As New frmMovieFanart
            t.ShowDialog()
            Try
                If IO.File.Exists(workingMovieDetails.fileinfo.fanartpath) Then
                    
                    'PictureBoxFanArt.ImageLocation = workingMovieDetails.fileinfo.fanartpath
                    'PictureBoxFanArt.Load()

                    util_ImageLoad(PictureBoxFanArt, workingMovieDetails.fileinfo.fanartpath, Utilities.DefaultFanartPath)

                    'Rating1.PictureInit = PictureBoxFanArt.Image


                Else
                    PictureBoxFanArt.Image = Nothing
                End If

            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    'Private Sub ToolStripButton3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    Call movieedit()
    'End Sub

    Private Sub EditMovieToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mov_ToolStripEditMovieAlt.Click
        Try
            Call mov_Edit()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_Edit()
        If outlinetxt.Text = "MC cannot find this file, either the file no longer exists, or MC cannot access the file path" Then
            MsgBox("MC cannot find this file, either the file no longer exists, or MC cannot access the file path")
            Exit Sub
        End If
        Dim oldmovietitle As String = workingMovieDetails.fileinfo.fullpathandfilename
        Dim newmovietitle As String = ""
        Dim MyFormObject As New Form2()
        MyFormObject.ShowDialog()
        newmovietitle = workingMovieDetails.fileinfo.fullpathandfilename


        For f = 0 To oMovies.MovieCache.Count - 1
            If oMovies.MovieCache(f).fullpathandfilename = newmovietitle Then
                Dim newfullmovie As New ComboList

                oMovies.MovieCache.RemoveAt(f)

                newfullmovie = nfoFunction.mov_NfoLoadBasic(workingMovieDetails.fileinfo.fullpathandfilename, "movielist")
                If workingMovie.title <> "ERROR" Then   'if there is a problem with the nfo being invalid we need to skip
                    oMovies.MovieCache.Add(newfullmovie)
                End If
                Exit For
            End If
        Next


        'Todo: need to update all details after edit.


        For f = 0 To filteredList.Count - 1
            Dim newfullmovie As New ComboList
            newfullmovie = filteredList(f)
            If filteredList(f).fullpathandfilename = oldmovietitle Then
                Dim newfullmovie2 As New ComboList
                newfullmovie2 = filteredList(f)
           '     newfullmovie2.titleandyear = newmovietitle
                filteredList.RemoveAt(f)
                Dim filecreation2 As New IO.FileInfo(workingMovieDetails.fileinfo.fullpathandfilename)
                Dim myDate2 As Date = filecreation2.LastWriteTime
                Try
                    newfullmovie2.filedate = Format(myDate2, datePattern).ToString
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
                newfullmovie2.filename = workingMovieDetails.fileinfo.filename
                newfullmovie2.foldername = workingMovieDetails.fileinfo.foldername
                newfullmovie2.fullpathandfilename = workingMovieDetails.fileinfo.fullpathandfilename
                newfullmovie2.genre = workingMovieDetails.fullmoviebody.genre
                newfullmovie2.id = workingMovieDetails.fullmoviebody.imdbid
                newfullmovie2.playcount = workingMovieDetails.fullmoviebody.playcount
                newfullmovie2.rating = workingMovieDetails.fullmoviebody.rating
            '    newfullmovie2.titleandyear = workingMovieDetails.fullmoviebody.title & " (" & workingMovieDetails.fullmoviebody.year & ")"
                newfullmovie2.year = workingMovieDetails.fullmoviebody.year

                filteredList.Add(newfullmovie2)
                Exit For
            End If
        Next
        Call mov_FormPopulate()
        Call Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)
    End Sub

    Private Sub MediaCompanionForumToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MediaCompanionForumToolStripMenuItem.Click
        Try
            Dim webAddress As String = "http://billyad2000.darkbb.com/forum.htm"
            'Process.Start(webAddress)
            OpenUrl(webAddress)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub XBMCMCThreadToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles XBMCMCThreadToolStripMenuItem.Click
        Try
            Dim webAddress As String = "http://forum.xbmc.org/showthread.php?t=129134"
            'Process.Start(webAddress)
            OpenUrl(webAddress)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ButtonTrailer_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ButtonTrailer.Click


        If Not IO.File.Exists(workingMovieDetails.fileinfo.trailerpath) Then

            _rescrapeList.Field = "Download_Trailer"
            _rescrapeList.FullPathAndFilenames.Clear
            _rescrapeList.FullPathAndFilenames.Add(workingMovieDetails.fileinfo.fullpathandfilename)

            RunBackgroundMovieScrape("RescrapeSpecific")
        Else
                Dim tempstring = applicationPath & "\settings\temp.m3u"
                Dim file       = IO.File.CreateText(tempstring)

                file.WriteLine(workingMovieDetails.fileinfo.trailerpath)
                file.Close

            If Preferences.videomode = 1 Then Call util_VideoMode1(tempstring)
            If Preferences.videomode = 2 Then Call util_VideoMode2(tempstring)
            If Preferences.videomode = 3 Then
                Preferences.videomode = 2
                Call util_VideoMode2(tempstring)
            End If
            If Preferences.videomode >= 4 Then
                If Preferences.selectedvideoplayer <> Nothing Then
                    Call util_VideoMode4(tempstring)
                Else
                    Call util_VideoMode1(tempstring)
                End If
            End If
        End If
    End Sub

    Private Sub ToolStripMenuItemRebuildMovieCaches_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItemRebuildMovieCaches.Click, Button3.Click
        mov_RebuildMovieCaches
    End Sub

    Private Sub ListMoviesWithoutFanartToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) 
        Try
            filterOverride = True
            Dim newlist As New List(Of ComboList)
            newlist.Clear()
            For Each movie In oMovies.MovieCache
                If Not IO.File.Exists(Preferences.GetFanartPath(movie.fullpathandfilename)) Then
                    Dim movietoadd As New ComboList
                    movietoadd.fullpathandfilename = movie.fullpathandfilename
             '       movietoadd.titleandyear = movie.titleandyear
                    movietoadd.filename = movie.filename
                    movietoadd.year = movie.year
                    movietoadd.filedate = movie.filedate
                    movietoadd.foldername = movie.foldername
                    movietoadd.rating = movie.rating
                    movietoadd.top250 = movie.top250
                    newlist.Add(movietoadd)
                End If
            Next

            filteredList = newlist
            'Call mov_MovieComboLoad()
            mov_CacheLoad()
            filterOverride = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ListMoviesWithoutPostersToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) 
        Try
            filterOverride = True
            Dim newlist As New List(Of ComboList)
            newlist.Clear()
            For Each movie In oMovies.MovieCache
                If Not IO.File.Exists(Preferences.GetPosterPath(movie.fullpathandfilename)) Then
                    Dim movietoadd As New ComboList
                    movietoadd.fullpathandfilename = movie.fullpathandfilename
                 '   movietoadd.titleandyear = movie.titleandyear
                    movietoadd.filename = movie.filename
                    movietoadd.year = movie.year
                    movietoadd.filedate = movie.filedate
                    movietoadd.foldername = movie.foldername
                    movietoadd.rating = movie.rating
                    movietoadd.top250 = movie.top250
                    newlist.Add(movietoadd)
                End If
            Next

            filteredList = newlist
            'Call mov_MovieComboLoad()
            mov_CacheLoad()
            filterOverride = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub BatchRescraperToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BatchRescraperToolStripMenuItem.Click
        'Try
        '    If Not bckrescrapewizard.IsBusy Then

                'rescrapeList.credits = False
                'rescrapeList.director = False
                'rescrapeList.stars = False
                'rescrapeList.genre = False
                'rescrapeList.mediatags = False

                'rescrapeList.mpaa = False
                'rescrapeList.outline = False
                'rescrapeList.plot = False

                'rescrapeList.premiered = False
                'rescrapeList.rating = False
                'rescrapeList.runtime = False
                'rescrapeList.studio = False
                'rescrapeList.tagline = False
                'rescrapeList.title = False
                'rescrapeList.top250 = False
                'rescrapeList.trailer = False
                'rescrapeList.votes = False
                'rescrapeList.year = False
                'rescrapeList.posterurls = False
                'rescrapeList.missingposters = False
                'rescrapeList.actors = False
                'rescrapeList.missingfanart = False

                'rescrapeList.activate = False

                rescrapeList.ResetFields

                Dim displaywizard As New frmBatchScraper
                displaywizard.ShowDialog

                If rescrapeList.AnyEnabled Then

                    _rescrapeList.FullPathAndFilenames.Clear

                    For Each row As DataGridViewRow In DataGridViewMovies.Rows

                        Dim m As Data_GridViewMovie = row.DataBoundItem

                        _rescrapeList.FullPathAndFilenames.Add(m.fullpathandfilename)
                    Next

                    RunBackgroundMovieScrape("BatchRescrape")
                End If

        '    Else
        '        MsgBox("The update Wizard is Already Running")
        '    End If
        'Catch ex As Exception
        '    ExceptionHandler.LogError(ex)
        'End Try

    End Sub



    Public Function GetTrailerPath(ByVal s As String)
        Dim FileName As String = ""
        
        For Each extension In "mp4,flv,webm".Split(",")
            FileName = IO.Path.Combine(s.Replace(IO.Path.GetFileName(s), ""), System.IO.Path.GetFileNameWithoutExtension(s) & "-trailer." & extension)

            If File.Exists(FileName) Then Return FileName
        Next

        Return IO.Path.Combine(s.Replace(IO.Path.GetFileName(s), ""), System.IO.Path.GetFileNameWithoutExtension(s) & "-trailer.flv")
    End Function

    ''Not called
    'Private Sub mov_FilteredTooFullMoviesList 'Movies.MovieCache
    '    Dim FullCount As Integer = oMovies.MovieCache.Count - 1
    '    Dim FilterCount As Integer = filteredList.Count - 1
    '    For FullPass = 0 To FullCount
    '        For FilterPass = 0 To FilterCount
    '            If oMovies.MovieCache(FullPass).fullpathandfilename = filteredList(FilterPass).fullpathandfilename Then
    '                oMovies.MovieCache(FullPass) = filteredList(FilterPass) 'replace entry in FullMovie List with entry from Filtered List
    '                Exit For
    '            End If
    '        Next
    '    Next
    'End Sub


    Private Sub mov_Play(ByVal type As String)
        If DataGridViewMovies.SelectedRows.Count < 1 Then Return
        Dim tempstring As String
        tempstring = DataGridViewMovies.SelectedCells(NFO_INDEX).Value.ToString
        Dim playlist As New List(Of String)
        Select Case type
            Case "Movie"
                tempstring = Utilities.GetFileName(tempstring)
                playlist = Utilities.GetMediaList(tempstring)
            Case "Trailer"
                'Dim TrailerPath As String = Utilities.GetTrailerName(tempstring)
                Dim movie = oMovies.LoadMovie(tempstring)
                If movie.TrailerExists Then playlist.Add(movie.ActualTrailerPath)
            Case "HomeMovie"
                tempstring = CType(ListBox18.SelectedItem, ValueDescriptionPair).Value
                tempstring = Utilities.GetFileName(tempstring)
                playlist = Utilities.GetMediaList(tempstring)
        End Select
        frmSplash2.Text = "Playing Movie..."
        frmSplash2.Label1.Text = "Creating m3u file....." & vbCrLf & tempstring
        frmSplash2.Label1.Visible = True
        frmSplash2.Label2.Visible = False
        frmSplash2.ProgressBar1.Visible = False
        frmSplash2.Show()
        Application.DoEvents()

        If playlist.Count <= 0 Then
            MsgBox("No Media File Found For This nfo")
            Exit Sub
        End If

        tempstring = applicationPath & "\settings\temp.m3u"

        Dim file As IO.StreamWriter = IO.File.CreateText(tempstring)

        For Each part In playlist
            If part <> Nothing Then file.WriteLine(part)
        Next
        file.Close()

        frmSplash2.Label1.Text = "Launching Player....."

        If Preferences.videomode = 1 Then Call util_VideoMode1(tempstring)
        If Preferences.videomode = 2 Then Call util_VideoMode2(tempstring)
        If Preferences.videomode = 3 Then
            Preferences.videomode = 2
            Call util_VideoMode2(tempstring)
        End If
        If Preferences.videomode >= 4 Then
            If Preferences.selectedvideoplayer <> Nothing Then
                Call util_VideoMode4(tempstring)
            Else
                Call util_VideoMode1(tempstring)
            End If
        End If

        frmSplash2.Hide()
    End Sub

    Private Sub DataGridViewMovies_DoubleClick(ByVal sender As System.Object, ByVal e As MouseEventArgs) Handles DataGridViewMovies.DoubleClick
        Try
            Dim info = DataGridViewMovies.HitTest(e.X, e.Y)

            If info.Type <> DataGridViewHitTestType.ColumnHeader Then
                mov_Play("Movie")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub


    Private Sub DataGridViewMovies_DragDrop(ByVal sender As System.Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles DataGridViewMovies.DragDrop

        Dim files() As String

        files = e.Data.GetData(DataFormats.FileDrop)
        For f = 0 To UBound(files)
            If IO.File.Exists(files(f)) Then
                ' This path is a file.
                Dim skip As Boolean = False
                For Each item In oMovies.MovieCache
                    If item.fullpathandfilename = files(f) Then
                        skip = True
                        Exit For
                    End If
                Next
                For Each item In droppedItems
                    If item = files(f) Then
                        skip = True
                        Exit For
                    End If
                Next
                If mov_FileCheckValid(files(f)) = True Then
                    If skip = False Then droppedItems.Add(files(f))
                End If
            Else
                If IO.Directory.Exists(files(f)) Then
                    ' This path is a directory.
                    Dim di As New IO.DirectoryInfo(files(f))
                    Dim diar1 As IO.FileInfo() = di.GetFiles()
                    Dim dra As IO.FileInfo

                    'list the names of all files in the specified directory
                    For Each dra In diar1
                        Dim skip As Boolean = False
                        For Each item In oMovies.MovieCache
                            If item.fullpathandfilename = dra.FullName Then
                                skip = True
                                Exit For
                            End If
                        Next
                        For Each item In droppedItems
                            If item = dra.FullName Then
                                skip = True
                                Exit For
                            End If
                        Next
                        If mov_FileCheckValid(dra.FullName) = True Then
                            If skip = False Then droppedItems.Add(dra.FullName)
                        End If
                    Next
                End If
            End If
        Next

        If droppedItems.Count > 0 Then
            DoScrapeDroppedFiles()
        End If

    End Sub

    Private Sub DataGridViewMovies_DragEnter(ByVal sender As System.Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles DataGridViewMovies.DragEnter
        Try
            e.Effect = DragDropEffects.Copy
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub


    Private Sub MovieFormInit()
        workingMovie.filedate = Nothing
        workingMovie.filename = Nothing
        workingMovie.foldername = Nothing
        workingMovie.fullpathandfilename = Nothing
        workingMovie.genre = Nothing
        workingMovie.id = Nothing
        workingMovie.playcount = Nothing
        workingMovie.rating = Nothing
        workingMovie.title = Nothing
    '    workingMovie.titleandyear = Nothing
        workingMovie.top250 = Nothing
        workingMovie.year = Nothing
        workingMovie.MovieSet = Nothing
        'setsTxt.Text = ""
        titletxt.Text = ""
        TextBox3.Text = ""
        'outlinetxt.Text = "MC cannot find this file, either the file no longer exists, or MC cannot access the file path"
        outlinetxt.Text = ""
        plottxt.Text = ""
        taglinetxt.Text = ""
        txtStars.Text = ""
        genretxt.Text = ""
        creditstxt.Text = ""
        directortxt.Text = ""
        studiotxt.Text = ""
        pathtxt.Text = ""
        actorcb.Items.Clear()
        ratingtxt.Text = ""
        runtimetxt.Text = ""
        votestxt.Text = ""
        certtxt.Text = ""
        PictureBoxFanArt.Image = Nothing
        moviethumb.Image = Nothing
        roletxt.Text = ""
        PictureBoxActor.Image = Nothing
        btnPlayMovie.Enabled = False
    End Sub

    
    Public Sub DisplayMovie(Optional yielding As Boolean=False)
        Try
            DisplayMovie(DataGridViewMovies.SelectedCells,DataGridViewMovies.SelectedRows,yielding)
        Catch
            Return
        End Try
    End Sub
    
    Public Sub DisplayMovie(ByVal selectedCells As DataGridViewSelectedCellCollection, ByVal selectedRows As DataGridViewSelectedRowCollection, yielding As Boolean)
        
        Try
            If selectedRows.Count = 1 Then
                If LastMovieDisplayed = selectedCells(NFO_INDEX).Value.ToString Then Return
            Else
                LastMovieDisplayed = ""
            End If
            LastMovieDisplayed = selectedCells(NFO_INDEX).Value.ToString
        Catch
            Return
        End Try

        If yielding Then
            _yield = True
            Application.DoEvents
            _yield = False
        End If

        'Clear all fields of the movie
        MovieFormInit()


        If selectedRows.Count = 0 Then Exit Sub


        Dim needtoload As Boolean = False
        Dim done As Boolean = False


        If selectedRows.Count > 1 Then
            mov_ToolStripPlayMovie.Visible = False
            mov_ToolStripOpenFolder.Visible = False
            mov_ToolStripViewNfo.Visible = False
            ToolStripSeparator17.Visible = False
            ToolStripSeparator5.Visible = False
            ToolStripSeparator4.Visible = False
            mov_ToolStripFanartBrowserAlt.Visible = False
            mov_ToolStripPosterBrowserAlt.Visible = False
            mov_ToolStripEditMovieAlt.Visible = False
            mov_ToolStripReloadFromCache.Visible = False
        End If

        If Yield(yielding) Then Return

        If selectedRows.Count = 1 Then

            mov_ToolStripPlayMovie.Visible = True
            mov_ToolStripOpenFolder.Visible = True
            mov_ToolStripViewNfo.Visible = True
            ToolStripSeparator17.Visible = True
            ToolStripSeparator5.Visible = True
            ToolStripSeparator4.Visible = True
            mov_ToolStripFanartBrowserAlt.Visible = True
            mov_ToolStripPosterBrowserAlt.Visible = True
            mov_ToolStripEditMovieAlt.Visible = True
            mov_ToolStripReloadFromCache.Visible = True

            If titletxt.Visible = False Then
                needtoload = True
            End If
            titletxt.Visible = True
            TextBoxMutisave.Visible = False
            SplitContainer2.Visible = True
            Label128.Visible = False
            Label75.Visible = True
            TextBox34.Visible = True

            If Yield(yielding) Then Return

            'Check if the file trailer exist
'            mov_ToolStripPlayTrailer.Visible = IO.File.Exists(selectedCells(NFO_INDEX).Value.ToString)

            If Yield(yielding) Then Return

'			Dim query = From f In filteredListObj Where f.fullpathandfilename = selectedCells(NFO_INDEX).Value.ToString
            Dim query = From f In oMovies.Data_GridViewMovieCache Where f.fullpathandfilename = selectedCells(NFO_INDEX).Value.ToString

            Dim queryList As List(Of Data_GridViewMovie) = query.ToList()

            If Yield(yielding) Then Return

            If queryList.Count > 0 Then
                workingMovie.filedate = queryList(0).filedate
                workingMovie.filename = queryList(0).filename
                workingMovie.foldername = queryList(0).foldername
                workingMovie.fullpathandfilename = queryList(0).fullpathandfilename
                workingMovie.genre = queryList(0).genre
                workingMovie.id = queryList(0).id
                workingMovie.playcount = queryList(0).playcount
                workingMovie.rating = queryList(0).Rating
                workingMovie.title = queryList(0).title
         '       workingMovie.titleandyear = queryList(0).titleandyear
                workingMovie.top250 = queryList(0).top250
                workingMovie.year = queryList(0).year

                mov_ToolStripPlayTrailer.Visible = Not queryList(0).MissingTrailer

                Call mov_FormPopulate(yielding)
            Else
                If needtoload = True Then Call mov_FormPopulate(yielding)
            End If
            done = True
        Else
            outlinetxt.Text = ""
            'setsTxt.Text = ""
            PictureBoxFanArt.Image = Nothing
            moviethumb.Image = Nothing
            roletxt.Text = ""
            PictureBoxActor.Image = Nothing
            SplitContainer2.Visible = False
            titletxt.Visible = False
            Label75.Visible = False
            TextBox34.Visible = False
            TextBoxMutisave.Visible = True
            Label128.Visible = True
            'ComboBox3.SelectedIndex = -1
            Dim add As Boolean = True
            Dim watched As String = ""
            For Each sRow As DataGridViewRow In selectedRows
                Dim old As String = watched
                For Each item In oMovies.MovieCache
                    If item.fullpathandfilename = sRow.Cells(NFO_INDEX).Value.ToString Then

                        If watched = "" Then
                            watched = item.playcount
                            old = watched
                        Else
                            watched = item.playcount
                        End If
                        If watched <> old Then
                            add = False
                        End If
                        Exit For
                    End If

                    If Yield(yielding) Then Return

                Next
            Next
            If add = False Then
                ButtonWatched.Text = ""
                ButtonWatched.BackColor = Color.Gray
            Else
                If watched = "1" Then
                    ButtonWatched.Text = "&Watched"
                    ButtonWatched.BackColor = Color.LawnGreen
                    ButtonWatched.Refresh()
                Else
                    ButtonWatched.Text = "Un&watched"
                    ButtonWatched.BackColor = Color.Red
                    ButtonWatched.Refresh()
                End If
            End If
        End If


    End Sub

    Private Sub DataGridViewMovies_CellClick(ByVal sender As System.Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles DataGridViewMovies.CellClick
        _yield = True
        Application.DoEvents
        _yield = False
        DisplayMovie()
    End Sub



    Private Sub TextBox1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles TextBox1.KeyUp
        Try
            If filterOverride = False Then
                If TextBox1.Text.Length > 0 Then
                    TextBox1.BackColor = Color.Pink
                Else
                    TextBox1.BackColor = Color.White
                End If
                TextBox1.Refresh()
                Call Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub


    Private Sub TextBox_GenreFilter_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs)
        Try
            If lockedList = False Then
                lockedList = True
            Else
                lockedList = False
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub



    ''Obsolete
    'Private Sub RadioButton6_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton6.CheckedChanged
    '    Try
    '        If RadioButtonFolder.Checked = True Then
    '            Preferences.moviedefaultlist = 2

    '            'Preferences.SaveConfig()'we don't need to save this till MC Closes
    '            Call Mc.clsGridViewMovie.mov_FiltersAndSortApply()
    '        End If
    '    Catch ex As Exception
    '        ExceptionHandler.LogError(ex)
    '    End Try
    'End Sub

    'Sort by A-Z, Movie Date, File Date, rating, top250
    'Private Sub RadioButton3_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) 
    '    Try
    '        If RadioButton3.Checked = True Then
    '            Preferences.moviesortorder = 0

    '            'Preferences.SaveConfig()'we don't need to save this till MC Closes
    '            mov_MovieComboListSort()
    '        End If
    '    Catch ex As Exception
    '        ExceptionHandler.LogError(ex)
    '    End Try
    'End Sub

    'Private Sub RadioButton4_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) 
    '    Try
    '        If RadioButton4.Checked = True Then
    '            Preferences.moviesortorder = 1

    '            'Preferences.SaveConfig()'we don't need to save this till MC Closes
    '            Call mov_MovieComboListSort()
    '        End If
    '    Catch ex As Exception
    '        ExceptionHandler.LogError(ex)
    '    End Try
    'End Sub

    'Private Sub RadioButton5_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) 
    '    Try
    '        If RadioButtonSortModified.Checked = True Then
    '            Preferences.moviesortorder = 2

    '            ' Preferences.SaveConfig()'we don't need to save this till MC Closes
    '            Call mov_MovieComboListSort()
    '        End If
    '    Catch ex As Exception
    '        ExceptionHandler.LogError(ex)
    '    End Try
    'End Sub

    'Private Sub RadioButton7_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) 
    '    Try
    '        If RadioButton7.Checked = True Then
    '            Preferences.moviesortorder = 4

    '            'Preferences.SaveConfig()'we don't need to save this till MC Closes
    '            Call mov_MovieComboListSort()
    '        End If
    '    Catch ex As Exception
    '        ExceptionHandler.LogError(ex)
    '    End Try
    'End Sub

    'reverse order
    Private Sub btnreverse_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnreverse.CheckedChanged 
        If btnreverse.Checked Then
            Mc.clsGridViewMovie.GridSort = "Desc"
        Else
            Mc.clsGridViewMovie.GridSort = "Asc"
        End If
        Preferences.movieinvertorder = btnreverse.Checked

        Call Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)
        DisplayMovie()
    End Sub

    

    Private Sub TabControl2_MouseWheel(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles TabControl2.MouseWheel
        Try
            If TabControl2.SelectedIndex = 1 Then
                mouseDelta = e.Delta / 120
                Try
                    TabPage22.AutoScrollPosition = New Point(0, TabPage22.VerticalScroll.Value - (mouseDelta * 30))
                Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
                End Try
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TabControl2_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles TabControl2.SelectedIndexChanged

        mov_PreferencesDisplay
        Dim tempstring As String = ""
        Dim tab As String = TabControl2.SelectedTab.Text

        If tab <> "Main Browser" And tab <> "Folders" And tab <> "Movie Preferences" Then
            If workingMovieDetails Is Nothing And movieFolders.Count = 0 And Preferences.offlinefolders.Count = 0 Then
                Me.TabControl2.SelectedIndex = currentTabIndex
                MsgBox("There are no movies in your list to work on" & vbCrLf & "Add movie folders in the Folders Tab" & vbCrLf & "Then select the ""Search For New Movies"" Tab")
                Exit Sub
            ElseIf workingMovieDetails Is Nothing And movieFolders.Count > 0 And tab <> "Search for new movies" Then
                Me.TabControl2.SelectedIndex = currentTabIndex
                If oMovies.MovieCache.Count > 0 Then
                    MsgBox("No Movie is selected")
                    Exit Sub
                Else
                    MsgBox("There are no movies in your list to work on" & vbCrLf & "If The Folders You Have Added In The" & vbCrLf & "Preferences Menu Contain Movie Files" & vbCrLf & "Then select the ""Search For New Movies"" Tab")
                    Exit Sub
                End If
            End If
        Else
            currentTabIndex = Me.TabControl2.SelectedIndex
        End If

        If tab = "" Then
            If workingMovieDetails.fullmoviebody.imdbid <> Nothing Then
                If Preferences.externalbrowser = True Then
                    Me.TabControl2.SelectedIndex = currentTabIndex
                    tempstring = "http://www.imdb.com/title/" & workingMovieDetails.fullmoviebody.imdbid & "/"

                    'AnotherPhil bug fix - If the default browser is <goz> IE <goz/> then not stating the exe throws an exception
                    OpenUrl(tempstring)
                Else

                    Dim url As String = "http://www.imdb.com/title/" & workingMovieDetails.fullmoviebody.imdbid & "/"

                    Try
                        If WebBrowser2.Url.AbsoluteUri.ToLower.ToString <> url Then
                            WebBrowser2.Stop()
                            WebBrowser2.ScriptErrorsSuppressed = True

                            WebBrowser2.Navigate(url)
                            WebBrowser2.Refresh()
                            currentTabIndex = TabControl2.SelectedIndex
                        End If
                    Catch
                        WebBrowser2.Stop()
                        WebBrowser2.ScriptErrorsSuppressed = True

                        WebBrowser2.Navigate(url)
                        WebBrowser2.Refresh()
                        currentTabIndex = TabControl2.SelectedIndex
                    End Try
                End If
            Else
                MsgBox("No IMDB ID is available for this movie")
            End If

        ElseIf tab = "Main Browser" Then

            'Need to update displayed movies list as user may have invalidated it by have a 'missing...' filter selected and assigning one or more missing items
            currentTabIndex = TabControl2.SelectedIndex
            UpdateFilteredList

        ElseIf tab.ToLower = "file details" Then
            'Me.TabControl2.SelectedIndex = m_CurrentTabIndex
            currentTabIndex = TabControl2.SelectedIndex
            If TextBox8.Text = "" Then Call util_FileDetailsGet()

        ElseIf tab.ToLower = "fanart" Then
            GroupBoxFanartExtrathumbs.Visible = usefoldernames Or allfolders 'hide or show fanart/extrathumbs depending of if we are using foldenames or not (extrathumbs needs foldernames to be used)
            If Panel2.Controls.Count = 0 Then
                Call mov_FanartLoad()
            End If
            currentTabIndex = TabControl2.SelectedIndex
            UpdateMissingFanartNav
            EnableFanartScrolling

        ElseIf tab.ToLower = "open folder" Then
            Me.TabControl2.SelectedIndex = currentTabIndex
            Call util_OpenFolder(workingMovieDetails.fileinfo.fullpathandfilename)

        ElseIf tab.ToLower = "posters" Then
            currentTabIndex = TabControl2.SelectedIndex
            gbMoviePostersAvailable.Refresh
            UpdateMissingPosterNav

        ElseIf tab.ToLower = "rescrape movie" Then
                Me.TabControl2.SelectedIndex = currentTabIndex
                Call mov_Rescrape()
            ElseIf tab.ToLower = "change movie" Then
                Call mov_ChangeMovieSetup()
                currentTabIndex = TabControl2.SelectedIndex
            ElseIf tab.ToLower = "search for new movies" Then
                Me.TabControl2.SelectedIndex = currentTabIndex
                If Not BckWrkScnMovies.IsBusy Then
                '    TabPage14.Text = "Cancel Movie Search"
                    'TabPage14.ToolTipText = "This cancels the movie search" & vbCrLf & "and Movie scraper thread"
                    'BckWrkScnMovies.RunWorkerAsync("SearchForNewMovies")
                    SearchForNew
                Else
                    MsgBox("This task is already running")
                End If
            ElseIf (tab.ToLower = "cancel movie search" Or tab.ToLower = "...cancelling...") Then   'remember the to.lower - added OR incase user clicks cancelling button   use ... to pad button as it sizes to text size
               ' TabPage14.Text = "...Cancelling..."
                Me.TabControl2.SelectedIndex = currentTabIndex
                BckWrkScnMovies.CancelAsync()

        ElseIf tab.ToLower = "wall" Then
            Call mov_WallSetup()

        ElseIf tab.ToLower = "movie sets" Then
            ListofMovieSets.Items.Clear()
            For Each mset In Preferences.moviesets
                If mset <> "-None-" Then ListofMovieSets.Items.Add(mset)
            Next

        ElseIf tab.ToLower = "movie preferences" Then
            Call mov_PreferencesSetup()

        ElseIf tab.ToLower = "table" Then
            currentTabIndex = TabControl2.SelectedIndex
            Call mov_TableSetup()
        Else
            currentTabIndex = TabControl2.SelectedIndex
        End If

    End Sub

    Private Sub mov_ChangeMovieSetup()
        Dim tempstring As String = ""
        If Preferences.usefoldernames = False Then
            tempstring = Utilities.CleanFileName(Utilities.RemoveFilenameExtension(IO.Path.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename)))
        Else
            tempstring = Utilities.GetLastFolder(workingMovieDetails.fileinfo.fullpathandfilename)
        End If
        If workingMovieDetails.fileinfo.fullpathandfilename.ToLower.IndexOf("\video_ts\") <> -1 Then
            tempstring = Utilities.GetLastFolder(workingMovieDetails.fileinfo.fullpathandfilename)
        End If
        Dim url As String
        url = Preferences.imdbmirror & "find?s=tt&q=" & tempstring
        WebBrowser1.Stop()
        WebBrowser1.ScriptErrorsSuppressed = True
        WebBrowser1.Navigate(url)
        WebBrowser1.Refresh()
        Panel2.Visible = True
    End Sub

    Private Sub util_OpenFolder(ByVal path As String)
        Dim tempstring As String = ""
        Dim action As String = String.Empty
        Dim errors As String = String.Empty
        Try
            If path <> "" Then
                tempstring = path
                Try
                    Call Shell("explorer /select," & """" & tempstring & """", AppWinStyle.NormalFocus) 'this shows the item as selected provided as tempstring i.e. a folder or a file (.nfo)
                    'Process.Start(pathtxt.Text)
                    errors = "Trying to open Folder :- " & tempstring
                    action = "Command - ""Call Shell(""explorer /select,""" & tempstring & ", AppWinStyle.NormalFocus)"""
                Catch ex As Exception
                    MsgBox("Can't open folder :- " & path)
                    Call util_ErrorLog(action, errors)
                End Try
            Else
                MsgBox("No Folder To Open")
            End If


        Catch
            MsgBox("No Folder To Open")
        End Try
    End Sub

    Private Sub PictureBox2_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles PictureBox2.DoubleClick
        Try
            If Not PictureBox2.Image Is Nothing Then
                Me.ControlBox = False
                MenuStrip1.Enabled = False
                'ToolStrip1.Enabled = False
                Dim newimage As New Bitmap(PictureBox2.Image)
                Call util_ZoomImage(newimage)
            Else
                MsgBox("No Image Available To Zoom")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_FanartLoad()
        RadioButtonFanart.Checked = True
        Dim isfanartpath As String = workingMovieDetails.fileinfo.fanartpath
        Dim isvideotspath As String = If(workingMovieDetails.fileinfo.videotspath="","",workingMovieDetails.fileinfo.videotspath+"fanart.jpg")
        
        If isfanartpath <> Nothing or isvideotspath <> "" Then
            Try
                If IO.File.Exists(isvideotspath) Then
                    Dim OriginalImage As New Bitmap(isvideotspath)
                    Dim Image2 As New Bitmap(OriginalImage)
                    OriginalImage.Dispose()
                    PictureBox2.Image = Image2 'moviethumb - 3
                    Label16.Text = PictureBox2.Image.Width
                    Label17.Text = PictureBox2.Image.Height
                ElseIf IO.File.Exists(isfanartpath) Then
                    Dim OriginalImage As New Bitmap(isfanartpath)
                    Dim Image2 As New Bitmap(OriginalImage)
                    OriginalImage.Dispose()
                    PictureBox2.Image = Image2 'moviethumb - 3
                    Label16.Text = PictureBox2.Image.Width
                    Label17.Text = PictureBox2.Image.Height
                Else
                    Dim OriginalImage As New Bitmap(Utilities.DefaultBannerPath)
                    Dim Image2 As New Bitmap(OriginalImage)
                    OriginalImage.Dispose()
                    PictureBox2.Image = Image2 'moviethumb - 3
                    Label16.Text = PictureBox2.Image.Width
                    Label17.Text = PictureBox2.Image.Height
                End If

                If Not IO.File.Exists(isfanartpath) and Not IO.File.Exists(isvideotspath) Then
                    PictureBox2.ImageLocation = Utilities.DefaultFanartPath 'moviethumb - 3
                    Label16.Text = ""
                    Label17.Text = ""
                End If
            Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
            End Try
        End If

        Me.Refresh()
        Application.DoEvents()
        fanartArray.Clear()
        noFanart = False


        Dim tmdb As New TMDb(workingmoviedetails.fullmoviebody.imdbid)

        fanartArray.AddRange(tmdb.Fanart)

        Try
            If fanartArray.Count > 0 Then


                Dim location As Integer = 0
                Dim itemcounter As Integer = 0
                For Each item In fanartArray
                    fanartBoxes() = New PictureBox()

                    With fanartBoxes
                        .Location = New Point(0, location)
                        If fanartArray.Count > 2 Then
                            .Width = 410
                            .Height = 233
                        Else
                            .Width = 424
                            .Height = 243
                        End If
                        .SizeMode = PictureBoxSizeMode.Zoom
                        .ImageLocation = item.ldUrl
                        .Visible = True
                        .BorderStyle = BorderStyle.Fixed3D
                        .Name = "moviefanart" & itemcounter.ToString
                        AddHandler fanartBoxes.DoubleClick, AddressOf util_ZoomImage2
                    End With
                    If fanartArray.Count > 2 Then
                        fanartCheckBoxes() = New RadioButton()
                        With fanartCheckBoxes
                            .BringToFront()
                            .Location = New Point(199, location + 229)
                            .Name = "moviefanartcheckbox" & itemcounter.ToString
                        End With


                        resLabels = New Label()
                        With resLabels
                            .BringToFront()
                            .Location = New Point(0, location + 235)
                            .Name = "label" & itemcounter.ToString
                            .Text = "(" & item.hdwidth & " x " & item.hdheight & ") (" & item.ldwidth & " x " & item.ldheight & ")"
                            .Width = 200
                        End With

                        itemcounter += 1
                        location += 260
                    Else
                        fanartCheckBoxes() = New RadioButton()
                        With fanartCheckBoxes
                            .BringToFront()
                            .Location = New Point(199, location + 243)
                            .Name = "moviefanartcheckbox" & itemcounter.ToString
                        End With


                        resLabels = New Label()
                        With resLabels
                            .BringToFront()
                            .Location = New Point(0, location + 249)
                            .Name = "label" & itemcounter.ToString
                            .Text = "(" & item.hdwidth & " x " & item.hdheight & ") (" & item.ldwidth & " x " & item.ldheight & ")"
                            .Width = 200
                        End With

                        itemcounter += 1
                        location += 275
                    End If
                    Me.Panel2.Controls.Add(fanartBoxes())
                    Me.Panel2.Controls.Add(fanartCheckBoxes())
                    Me.Panel2.Controls.Add(resLabels)
                    Me.Refresh()
                    Application.DoEvents()
                Next

                EnableFanartScrolling
            Else
                Dim mainlabel2 As Label
                mainlabel2 = New Label
                With mainlabel2
                    .Location = New Point(0, 100)
                    .AutoSize = False
                    .TextAlign = ContentAlignment.MiddleCenter
                    .Width = 500
                    .Height = 400
                    .Font = New System.Drawing.Font("Arial", 15, FontStyle.Bold)
                    .Text = "No Fanart Was Found At" & Environment.NewLine & "www.themoviedb.org For This Movie"
                End With

                Me.Panel2.Controls.Add(mainlabel2)
            End If
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
    End Sub


    'Set focus on the first checkbox to enable mouse wheel scrolling 
    Sub EnableFanartScrolling
        Try
            Dim rb As RadioButton = Panel2.Controls("moviefanartcheckbox0")
                
            rb.Select                       'Causes RadioButtons checked state to toggle
            rb.Checked = Not rb.Checked     'Undo unwanted checked state toggling
        Catch
        End Try
    End Sub


    Private Sub util_ZoomImage2(ByVal sender As Object, ByVal e As EventArgs)

        Dim tempstring As String = sender.name
        Dim tempstring2 As String = String.Empty
        Dim tempint As Integer = 0
        If tempstring.IndexOf("poster") <> -1 Then
            tempstring = tempstring.Replace("poster", "")
            tempint = Convert.ToDecimal(tempstring)
            'tempstring2 = posterarray(tempint + 1).hdposter
            If tempstring2 = Nothing Then
                tempint = Convert.ToDecimal(tempstring)
                tempint = tempint + ((currentPage - 1) * 10)
                tempstring2 = posterArray(tempint).hdUrl
            End If
        End If
        If tempstring.IndexOf("picture") <> -1 Then
            tempstring = tempstring.Replace("picture", "")
            tempint = Convert.ToDecimal(tempstring)
            tempstring2 = fanartUrls(tempint + 1, 0)
        End If
        If tempstring.IndexOf("moviefanart") <> -1 Then
            tempstring = tempstring.Replace("moviefanart", "")
            tempint = Convert.ToDecimal(tempstring)
            tempstring2 = fanartArray(tempint).hdUrl
        End If
        If tempstring.IndexOf("tvfanart") <> -1 Then
            tempstring = tempstring.Replace("tvfanart", "")
            tempint = Convert.ToDecimal(tempstring)
            tempstring2 = listOfTvFanarts(tempint).bigUrl
        End If
        Dim buffer(4000000) As Byte
        Dim size As Integer = 0
        Dim bytesRead As Integer = 0

        bigPanel = New Panel
        With bigPanel
            .Width = Me.Width
            .Height = Me.Height
            .BringToFront()
            .Dock = DockStyle.Fill
        End With
        Me.Controls.Add(bigPanel)
        bigPanel.BringToFront()
        bigPictureBox = New PictureBox()

        With bigPictureBox
            .Location = New Point(0, 0)
            .Width = bigPanel.Width
            .Height = bigPanel.Height
            .SizeMode = PictureBoxSizeMode.Zoom
            '.Image = sender.image
            .WaitOnLoad = True

            .Visible = False
            .BorderStyle = BorderStyle.Fixed3D
            AddHandler bigPictureBox.DoubleClick, AddressOf util_PicBoxClose
            .Dock = DockStyle.Fill
        End With
        Try
            bigPictureBox.ImageLocation = tempstring2
            bigPictureBox.Load()
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try



        Me.bigPanel.Controls.Add(bigPictureBox)
        Dim bigpanellabel As Label
        bigpanellabel = New Label
        With bigpanellabel
            .Location = New Point(20, 200)
            .Width = 150
            .Height = 50
            .Visible = True
            .Text = "Double Click Image To" & vbCrLf & "Return To Browser"
            '   .BringToFront()
        End With

        Me.bigPanel.Controls.Add(bigpanellabel)
        bigpanellabel.BringToFront()
        Application.DoEvents()


        Me.Refresh()
        Try
            If bigPictureBox.Image Is Nothing Then
                tempstring2 = posterArray(tempint).ldUrl
                bigPictureBox.ImageLocation = tempstring2
                bigPictureBox.Load()
            End If
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
        Try
            If bigPictureBox.Image.Width < 20 Then
                tempstring2 = posterArray(tempint).ldUrl
                bigPictureBox.ImageLocation = tempstring2
                bigPictureBox.Load()
            End If
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
        Dim sizex As Integer = bigPictureBox.Image.Width
        Dim sizey As Integer = bigPictureBox.Image.Height
        tempstring = "Full Image Resolution :- " & sizex.ToString & " x " & sizey.ToString
        Dim resolutionlbl As New Label
        With resolutionlbl
            .Location = New Point(20, 450)
            .Width = 180
            .Text = tempstring
            .BackColor = Color.Transparent
        End With

        Me.bigPanel.Controls.Add(resolutionlbl)
        resolutionlbl.BringToFront()
        bigPictureBox.Visible = True
        bigPictureBox.Refresh()

    End Sub



    Private Sub ButtonFanartSaveLoRes_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ButtonFanartSaveLoRes.Click
        SaveFanart(False)
    End Sub


    Private Sub ButtonFanartSaveHiRes_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ButtonFanartSaveHiRes.Click
        SaveFanart(True)
    End Sub


    Private Sub SaveFanart(hd As Boolean)
        Try
            messbox = New frmMessageBox("Downloading Fanart...")
            messbox.Show

            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            
            'Me.Refresh
            'messbox.Refresh
            'Me.Refresh
            'Application.DoEvents

            Dim tempstring  As String = String.Empty
            Dim tempint     As Integer = 0
            Dim tempstring2 As String = String.Empty
            Dim allok       As Boolean = False

            'Find selected fanart, if any
            For Each button As Control In Me.Panel2.Controls

                If button.Name.IndexOf("checkbox") <> -1 Then
                    Dim b1 As RadioButton = CType(button, RadioButton)
                    If b1.Checked = True Then
                        tempstring = b1.Name
                        tempstring = tempstring.Replace("moviefanartcheckbox", "")
                        tempint = Convert.ToDecimal(tempstring)

                        If hd then                         
                            tempstring2 = fanartArray(tempint).hdUrl
                        Else
                            tempstring2 = fanartArray(tempint).ldUrl
                        End If

                        allok = True
                        Exit For
                    End If
                End If
            Next

            If Not allok Then
                MsgBox("No Fanart Is Selected")
            Else
                Try
                    Panel1.Controls.Remove(Label1)

                    Dim issavefanart As Boolean = Preferences.savefanart
                    Dim FanartOrExtraPath As String = mov_FanartORExtrathumbPath

                    Preferences.savefanart = True

                    If Movie.SaveFanartImageToCacheAndPath(tempstring2, FanartOrExtraPath) Then
                        If Preferences.FrodoEnabled and workingMovieDetails.fileinfo.videotspath<>"" Then
                            Dim OldFanartPath As String = FanartOrExtraPath
                            FanartOrExtraPath=workingMovieDetails.fileinfo.videotspath+"fanart.jpg"
                            If IO.File.Exists(FanartOrExtraPath) Then
                                Utilities.SafeDeleteFile(FanartOrExtraPath)
                            End If
                            IO.File.Copy(OldFanartPath,FanartOrExtraPath)
                            GC.Collect
                            If Not Preferences.EdenEnabled Then
                                Utilities.SafeDeleteFile(OldFanartPath)
                            End If
                        ElseIf Preferences.fanartjpg Then
                            Dim fanartjpgpath As String = workingMovieDetails.fileinfo.fullpathandfilename.Replace(workingMovieDetails.fileinfo.filename,"fanart.jpg")
                                If IO.File.Exists(fanartjpgpath) Then
                                    Utilities.SafeDeleteFile(fanartjpgpath)
                                End If
                            IO.File.Copy(FanartOrExtraPath,fanartjpgpath)
                        End If
                        Preferences.savefanart = issavefanart

                        util_ImageLoad(PictureBox2, FanartOrExtraPath, Utilities.DefaultFanartPath)
                        If FanartOrExtraPath<>workingMovieDetails.fileinfo.fanartpath Then
                            util_ImageLoad(PictureBoxFanArt, FanartOrExtraPath, Utilities.DefaultFanartPath)
                        Else
                            util_ImageLoad(PictureBoxFanArt, workingMovieDetails.fileinfo.fanartpath, Utilities.DefaultFanartPath)
                        End If
                        Rating1.BitmapRating_V2(PictureBoxFanArt, ratingtxt.Text)

                        For Each paths In Preferences.offlinefolders
                            Dim offlinepath As String = paths & "\"
                            If workingMovieDetails.fileinfo.fanartpath.IndexOf(offlinepath) <> -1 Then
                                Dim mediapath As String
                                mediapath = Utilities.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename)
                                messbox.TextBox1.Text = "Creating Offline Movie..."
                                Call mov_OfflineDvdProcess(workingMovieDetails.fileinfo.fullpathandfilename, workingMovieDetails.fullmoviebody.title, mediapath)
                            End If
                        Next
                    Else
                        util_ImageLoad(PictureBox2, Utilities.DefaultFanartPath, Utilities.DefaultFanartPath)
                        Preferences.savefanart = issavefanart
                    End If

                    Label16.Text = PictureBox2.Image.Width
                    Label17.Text = PictureBox2.Image.Height

                    UpdateMissingFanart

                Catch ex As WebException
                    MsgBox(ex.Message)
                End Try
            End If

        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        Finally
            messbox.Close
        End Try
    End Sub


    Sub UpdateMissingFanart
        oMovies.LoadMovie(workingMovieDetails.fileinfo.fullpathandfilename)

        State = ProgramState.ResettingFilters
        Assign_FilterGeneral
        State = ProgramState.Other

'       Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)
        UpdateMissingFanartNav
    End Sub


    Sub UpdateMissingFanartNav

        'Default to selecting first row if non selected
        If DataGridViewMovies.SelectedRows.Count=0 And DataGridViewMovies.Rows.Count>1 Then
            DataGridViewMovies.Rows(0).Selected=True
        End If

        UpdateMissingFanartNextBtn
        UpdateMissingFanartPrevBtn
        UpdatelblFanartMissingCount
    End Sub

    Sub UpdatelblFanartMissingCount
        Dim i As Integer = 0
        Dim x As Integer = 0

        While i<DataGridViewMovies.Rows.Count
            Dim row As Data_GridViewMovie = DataGridViewMovies.DataSource(i)

            If row.MissingFanart Then x = x + 1

            i = i + 1
        End While

        lblFanartMissingCount.Text = x & " Missing" 
    End Sub

    Sub UpdateMissingFanartNextBtn 
        btnNextMissingFanart.Enabled = False

        If DataGridViewMovies.SelectedRows.Count=0 Then Return

        Dim i As Integer = DataGridViewMovies.SelectedRows(0).Index + 1
        While i<DataGridViewMovies.Rows.Count
            Dim row As Data_GridViewMovie = DataGridViewMovies.DataSource(i)

            If row.MissingFanart Then 
                btnNextMissingFanart.Enabled = True
                btnNextMissingFanart.Tag = i
                Return
            End If

            i = i + 1
        End While
    End Sub


    Sub UpdateMissingFanartPrevBtn
        btnPrevMissingFanart.Enabled = False

        If DataGridViewMovies.SelectedRows.Count=0 Then Return

        Dim i As Integer = DataGridViewMovies.SelectedRows(0).Index - 1
        While i>=0
            Dim row As Data_GridViewMovie = DataGridViewMovies.DataSource(i)

            If row.MissingFanart Then 
                btnPrevMissingFanart.Enabled = True
                btnPrevMissingFanart.Tag = i
                Return
            End If

            i = i - 1
        End While
    End Sub


    Sub UpdateMissingPoster
        oMovies.LoadMovie(workingMovieDetails.fileinfo.fullpathandfilename)

        State = ProgramState.ResettingFilters
        Assign_FilterGeneral
        State = ProgramState.Other

'       Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)
        UpdateMissingPosterNav             
    End Sub


    
    Sub UpdateMissingPosterNav

        'Default to selecting first row if non selected
        If DataGridViewMovies.SelectedRows.Count=0 And DataGridViewMovies.Rows.Count>1 Then
            DataGridViewMovies.Rows(0).Selected=True
        End If

        UpdateMissingPosterNextBtn
        UpdateMissingPosterPrevBtn
        UpdatelblPosterMissingCount
    End Sub


    Sub UpdatelblPosterMissingCount
        Dim i As Integer = 0
        Dim x As Integer = 0

        While i<DataGridViewMovies.Rows.Count
            Dim row As Data_GridViewMovie = DataGridViewMovies.DataSource(i)

            If row.MissingPoster Then x = x + 1

            i = i + 1
        End While

        lblPosterMissingCount.Text = x & " Missing" 
    End Sub

    Sub UpdateMissingPosterNextBtn 
        btnNextMissingPoster.Enabled = False

        If DataGridViewMovies.SelectedRows.Count=0 Then Return

        Dim i As Integer = DataGridViewMovies.SelectedRows(0).Index + 1
        While i<DataGridViewMovies.Rows.Count
            Dim row As Data_GridViewMovie = DataGridViewMovies.DataSource(i)

            If row.MissingPoster Then 
                btnNextMissingPoster.Enabled = True
                btnNextMissingPoster.Tag = i
                Return
            End If

            i = i + 1
        End While
    End Sub


    Sub UpdateMissingPosterPrevBtn
        btnPrevMissingPoster.Enabled = False

        If DataGridViewMovies.SelectedRows.Count=0 Then Return

        Dim i As Integer = DataGridViewMovies.SelectedRows(0).Index - 1
        While i>=0
            Dim row As Data_GridViewMovie = DataGridViewMovies.DataSource(i)

            If row.MissingPoster Then 
                btnPrevMissingPoster.Enabled = True
                btnPrevMissingPoster.Tag = i
                Return
            End If

            i = i - 1
        End While
    End Sub


    Private Function mov_FanartSaved_old()
        Dim replace As Boolean = False
        For f = 0 To oMovies.MovieCache.Count - 1
            Dim newmovie As New ComboList
            newmovie = oMovies.MovieCache(f)
            If newmovie.fullpathandfilename = workingMovieDetails.fileinfo.fullpathandfilename Then
                If newmovie.missingdata1 = 3 Then
                    newmovie.missingdata1 = 2
                    replace = True
                ElseIf newmovie.missingdata1 = 1 Then
                    newmovie.missingdata1 = 0
                    replace = True
                End If
                oMovies.MovieCache.RemoveAt(f)
                oMovies.MovieCache.Add(newmovie)
                Exit For
            End If
        Next

        'If replace = true
        '    Call ApplyFilters()
        '    'Call loadinfofile() 'reloads main page information     'not required is not moving back to main page
        '    'TabControl2.SelectedIndex = 0                        'Commented Out so that MC doesn't switch back to Movie/Main Tab after changing Fanart 
        '   currentTabIndex = TabControl2.SelectedIndex
        'end if
        Return replace
    End Function

    'Private Sub mov_PosterSaved()
    '    UpdateMovieCache
    'End Sub

    'Private Sub mov_PosterSaved_old
    '    Dim replace As Boolean = False
    '    For f = 0 To oMovies.MovieCache.Count - 1
    '        Dim newmovie As New ComboList
    '        newmovie = oMovies.MovieCache(f)
    '        If newmovie.fullpathandfilename = workingMovieDetails.fileinfo.fullpathandfilename Then
    '            If newmovie.missingdata1 = 3 Then
    '                newmovie.missingdata1 = 1
    '                replace = True
    '            ElseIf newmovie.missingdata1 = 2 Then
    '                newmovie.missingdata1 = 0
    '                replace = True
    '            End If
    '            oMovies.MovieCache.RemoveAt(f)
    '            oMovies.MovieCache.Add(newmovie)
    '            Exit For
    '        End If
    '    Next

    '    If replace = True Then
    '        Call Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)
    '        Call mov_FormPopulate()
    '        'TabControl2.SelectedIndex = 0                      'Commented Out so that MC doesn't switch back to Movie/Main Tab after changing Poster
    '        'currentTabIndex = TabControl2.SelectedIndex
    '    End If
    'End Sub

    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Try
            Panel3.Visible = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btnthumbbrowse_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnthumbbrowse.Click
        Try
            openFD.InitialDirectory = workingMovieDetails.fileinfo.fullpathandfilename.Replace(IO.Path.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename), "")
            openFD.Title = "Select a jpeg image file"
            openFD.FileName = ""
            openFD.Filter = "Media Companion Image Files|*.jpg;*.tbn|All Files|*.*"
            openFD.FilterIndex = 0
            openFD.ShowDialog()
            TextBox5.Text = openFD.FileName
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btngetthumb_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btngetthumb.Click
        Try
            Movie.SaveFanartImageToCacheAndPath(TextBox5.Text,mov_FanartORExtrathumbPath)

            Dim exists As Boolean = IO.File.Exists(workingMovieDetails.fileinfo.fanartpath)

            If exists Then
                For Each paths In Preferences.offlinefolders
                    If workingMovieDetails.fileinfo.fanartpath.IndexOf(paths) <> -1 Then
                        Dim mediapath As String
                        mediapath = Utilities.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename)
                        Call mov_OfflineDvdProcess(workingMovieDetails.fileinfo.fullpathandfilename, workingMovieDetails.fullmoviebody.title, mediapath)
                    End If
                Next

                util_ImageLoad(PictureBox2, mov_FanartORExtrathumbPath(), Utilities.DefaultFanartPath)

                util_ImageLoad(PictureBoxFanArt, workingMovieDetails.fileinfo.fanartpath, Utilities.DefaultFanartPath)

                mov_SplitContainerAutoPosition()
            End If

            UpdateMissingFanart
        Catch ex As Exception
            MsgBox("Unable To Download Image")
        End Try
        Panel3.Visible = False
    End Sub

    Private Sub btncancelgetthumburl_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btncancelgetthumburl.Click
        Try
            TextBox5.Text = ""
            Panel3.Visible = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Function util_ImageCrop(ByVal SrcBmp As Bitmap, ByVal NewSize As Size, ByVal StartPoint As Point) As Bitmap
        If NewSize.Width < 1 Or NewSize.Height < 1 Then
            'MsgBox("Cant resize < 1")
            Return SrcBmp
            Exit Function
        End If
        Dim SrcRect As New Rectangle(StartPoint.X, StartPoint.Y, NewSize.Width, NewSize.Height)
        Dim DestRect As New Rectangle(0, 0, NewSize.Width, NewSize.Height)
        Dim DestBmp As New Bitmap(NewSize.Width, NewSize.Height, Imaging.PixelFormat.Format32bppArgb)
        Dim g As Graphics = Graphics.FromImage(DestBmp)
        g.DrawImage(SrcBmp, DestRect, SrcRect, GraphicsUnit.Pixel)
        Return DestBmp
    End Function ' Crop Image Function

    Private Sub util_ImageCropTop()
        If PictureBox2.Image Is Nothing Then Exit Sub
        Dim imagewidth As Integer
        Dim imageheight As Integer
        imagewidth = PictureBox2.Image.Width
        imageheight = PictureBox2.Image.Height
        'PictureBox2.Image = moviethumb.Image
        PictureBox2.Image = util_ImageCrop(PictureBox2.Image, New Size(imagewidth, imageheight - 1), New Point(0, 1)).Clone
        PictureBox2.SizeMode = PictureBoxSizeMode.Zoom
    End Sub

    Private Sub util_ImageCropBottom()
        If PictureBox2.Image Is Nothing Then Exit Sub
        Dim imagewidth As Integer
        Dim imageheight As Integer
        imagewidth = PictureBox2.Image.Width
        imageheight = PictureBox2.Image.Height
        'PictureBox2.Image = moviethumb.Image
        PictureBox2.Image = util_ImageCrop(PictureBox2.Image, New Size(imagewidth, imageheight - 1), New Point(0, 0)).Clone
        PictureBox2.SizeMode = PictureBoxSizeMode.Zoom
    End Sub

    Private Sub util_ImageCropLeft()
        If PictureBox2.Image Is Nothing Then Exit Sub
        Dim imagewidth As Integer
        Dim imageheight As Integer
        imagewidth = PictureBox2.Image.Width
        imageheight = PictureBox2.Image.Height
        'PictureBox2.Image = moviethumb.Image
        PictureBox2.Image = util_ImageCrop(PictureBox2.Image, New Size(imagewidth - 1, imageheight), New Point(1, 0)).Clone
        PictureBox2.SizeMode = PictureBoxSizeMode.Zoom
    End Sub

    Private Sub util_ImageCropRight()
        If PictureBox2.Image Is Nothing Then Exit Sub
        Dim imagewidth As Integer
        Dim imageheight As Integer
        thumbedItsMade = True
        imagewidth = PictureBox2.Image.Width
        imageheight = PictureBox2.Image.Height
        'PictureBox2.Image = moviethumb.Image
        PictureBox2.Image = util_ImageCrop(PictureBox2.Image, New Size(imagewidth - 1, imageheight), New Point(0, 0)).Clone
        PictureBox2.SizeMode = PictureBoxSizeMode.Zoom
    End Sub

    Private Sub btncroptop_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles btncroptop.MouseDown
        Try
            If PictureBox2.Image Is Nothing Then Exit Sub
            thumbedItsMade = True
            btnresetimage.Enabled = True
            btnSaveCropped.Enabled = True
            cropString = "top"
            Timer2.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btncropbottom_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles btncropbottom.MouseDown
        Try
            If PictureBox2.Image Is Nothing Then Exit Sub
            thumbedItsMade = True
            btnresetimage.Enabled = True
            btnSaveCropped.Enabled = True
            Call util_ImageCropTop()
            cropString = "bottom"
            Timer2.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btncropleft_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles btncropleft.MouseDown
        Try
            If PictureBox2.Image Is Nothing Then Exit Sub
            thumbedItsMade = True
            btnresetimage.Enabled = True
            btnSaveCropped.Enabled = True
            Call util_ImageCropTop()
            cropString = "left"
            Timer2.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btncropright_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles btncropright.MouseDown
        Try
            If PictureBox2.Image Is Nothing Then Exit Sub
            thumbedItsMade = True
            btnresetimage.Enabled = True
            btnSaveCropped.Enabled = True
            Call util_ImageCropTop()
            cropString = "right"
            Timer2.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btncropbottom_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles btncropbottom.MouseUp
        Try
            Timer2.Enabled = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btncropleft_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles btncropleft.MouseUp
        Timer2.Enabled = False
    End Sub

    Private Sub btncropright_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles btncropright.MouseUp
        Try
            Timer2.Enabled = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btncroptop_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles btncroptop.MouseUp
        Try
            Timer2.Enabled = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Timer2_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles Timer2.Tick
        Try
            If cropString = "top" Then Call util_ImageCropTop()
            If cropString = "bottom" Then Call util_ImageCropBottom()
            If cropString = "left" Then Call util_ImageCropLeft()
            If cropString = "right" Then Call util_ImageCropRight()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btnresetimage_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnresetimage.Click
        Try
            thumbedItsMade = False
            util_ImageLoad(PictureBox2, mov_FanartORExtrathumbPath(), Utilities.DefaultFanartPath)
            btnresetimage.Enabled = False
            btnSaveCropped.Enabled = False
            Label16.Text = PictureBox2.Image.Width
            Label17.Text = PictureBox2.Image.Height
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btnsavecropped_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSaveCropped.Click
        Try
            thumbedItsMade = False
            Try
                Dim stream As New System.IO.MemoryStream
                Utilities.SaveImage(PictureBox2.Image, mov_FanartORExtrathumbPath)
                Label16.Text = PictureBox2.Image.Width
                Label17.Text = PictureBox2.Image.Height
                If RadioButtonFanart.Checked Then ' i.e. this is a fanart task rather than an extrathumb task
                    PictureBoxFanArt.Image = PictureBox2.Image 'if we are saving the main fanart then update the art on the main form view
    '                Rating1.PictureInit = PictureBoxFanArt.Image
                    For Each paths In Preferences.offlinefolders
                        If workingMovieDetails.fileinfo.fanartpath.IndexOf(paths) <> -1 Then
                            Dim mediapath As String
                            mediapath = Utilities.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename)
                            Call mov_OfflineDvdProcess(workingMovieDetails.fileinfo.fullpathandfilename, workingMovieDetails.fullmoviebody.title, mediapath)
                        End If
                    Next
                End If
                btnresetimage.Enabled = False
                btnSaveCropped.Enabled = False
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    'Never set visble -> Comment out
    'Private Sub Button6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button6.Click
    '    Try

    '        If Preferences.resizefanart = 1 Then
    '            'Try
    '            '    Dim tempbitmap As Bitmap = PictureBox2.Image
    '            '    tempbitmap.Save(workingmoviedetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
    '            'Catch ex As Exception
    '            '    tempstring = ex.Message.ToString
    '            'End Try
    '        ElseIf Preferences.resizefanart = 2 Then
    '            'If PictureBox2.Image.Width > 1280 Or PictureBox2.Image.Height > 720 Then
    '            Dim bm_source As New Bitmap(PictureBox2.Image)
    '            Dim bm_dest As New Bitmap(1280, 720)
    '            Dim gr As Graphics = Graphics.FromImage(bm_dest)
    '            gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
    '            gr.DrawImage(bm_source, 0, 0, 1280 - 1, 720 - 1)
    '            Dim tempbitmap As Bitmap = bm_dest
    '            PictureBox2.Image = tempbitmap
    '            'Else
    '            '    'Threading.Thread.CurrentThread.Sleep(30)
    '            '    'bmp.Save(workingmoviedetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
    '            'End If
    '        ElseIf Preferences.resizefanart = 3 Then
    '            'If PictureBox2.Image.Width > 960 Or PictureBox2.Image.Height > 540 Then
    '            Dim bm_source As New Bitmap(PictureBox2.Image)
    '            Dim bm_dest As New Bitmap(960, 540)
    '            Dim gr As Graphics = Graphics.FromImage(bm_dest)
    '            gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
    '            gr.DrawImage(bm_source, 0, 0, 960 - 1, 540 - 1)
    '            Dim tempbitmap As Bitmap = bm_dest
    '            PictureBox2.Image = tempbitmap
    '            'Else
    '            '    Threading.Thread.CurrentThread.Sleep(30)
    '            '    'bmp.Save(workingmoviedetails.fileinfo.fanartpath, Imaging.ImageFormat.Jpeg)
    '            'End If
    '        End If
    '    Catch ex As Exception
    '        ExceptionHandler.LogError(ex)
    '    End Try

    'End Sub

    Private Sub mov_PosterInitialise()
        pageCount = 0
        currentPage = 1
        cbMoviePosterSaveLoRes.Enabled = False
        btnPosterTabs_SaveImage.Enabled = False
        For i = panelAvailableMoviePosters.Controls.Count - 1 To 0 Step -1
            panelAvailableMoviePosters.Controls.RemoveAt(i)
        Next
        If Preferences.maximumthumbs < 1 Then
        Else
            Preferences.maximumthumbs = 10
        End If
        btnPosterTabs_SaveImage.Enabled = False
        cbMoviePosterSaveLoRes.Enabled = False

        posterPicBoxes = Nothing
        posterCheckBoxes = Nothing
        resLabel = Nothing

        Application.DoEvents()

        posterArray.Clear()
    End Sub


    Private Sub btn_TMDb_posters_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_TMDb_posters.Click
        Try
            messbox = New frmMessageBox("Please wait,", "", "Scraping Movie Poster List")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            Me.Refresh()
            messbox.Refresh()
            Call mov_PosterInitialise()
            Try
                Dim tmdb As New TMDb(workingMovieDetails.fullmoviebody.imdbid)

                posterArray.AddRange( tmdb.MC_Posters )

            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            Finally
                messbox.Close()
                Call mov_PosterSelectionDisplay()
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub


    Private Sub mov_PosterSelectionDisplay()
        Dim names As New List(Of String)()
        messbox = New frmMessageBox("Please wait,", "", "Downloading Preview Images")
        System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
        messbox.Show()
        Me.Refresh()
        messbox.Refresh()
        Dim itemcounter As Integer = 0
        If posterArray.Count > 0 Then

            If posterArray.Count > Preferences.maximumthumbs Then
                Dim tempmaxthumbs As Integer = posterArray.Count

                Do Until tempmaxthumbs < 1
                    pageCount += 1
                    tempmaxthumbs -= Preferences.maximumthumbs
                Loop
            End If


            If posterArray.Count > 10 Then
                For f = 0 To Preferences.maximumthumbs - 1
                    names.Add(posterArray(f).ldUrl)
                Next
            Else
                For f = 0 To posterArray.Count - 1
                    names.Add(posterArray(f).ldUrl)
                Next
            End If

            'Label7.Visible = True
            If pageCount > 1 Then
                Button9.Visible = True
                Button10.Visible = True
                If posterArray.Count >= 10 Then
                    Label18.Text = "Displaying 1 to 10 of " & posterArray.Count.ToString & " Images"
                Else
                    Label18.Text = "Displaying 1 to " & posterArray.Count.ToString & " of " & posterArray.Count.ToString & " Images"
                End If
                Label18.Visible = True
                Me.Refresh()
                Application.DoEvents()
                currentPage = 1
                Button10.Enabled = False
                Button9.Enabled = True
            Else
                Button10.Visible = False
                Button9.Visible = False
                If posterArray.Count >= 10 Then
                    Label18.Text = "Displaying 1 to " & 10 & " of " & posterArray.Count.ToString & " Images"
                Else
                    Label18.Text = "Displaying 1 to " & posterArray.Count.ToString & " of " & posterArray.Count.ToString & " Images"
                End If
                Label18.Visible = True
                Me.Refresh()
                Application.DoEvents()
            End If
            Dim tempboolean As Boolean = True
            Dim location As Integer = 0

            For Each item As String In names
                Try
                    If tempboolean = True Then
                        posterPicBoxes() = New PictureBox()
                        With posterPicBoxes
                            'Try
                            .WaitOnLoad = True
                            .Location = New Point(location, 0)
                            .Width = 123
                            .Height = 168
                            .SizeMode = PictureBoxSizeMode.Zoom
                            .ImageLocation = item
                            .Visible = True
                            .BorderStyle = BorderStyle.Fixed3D
                            .Name = "poster" & itemcounter.ToString
                            AddHandler posterPicBoxes.DoubleClick, AddressOf util_ZoomImage2
                            AddHandler posterPicBoxes.LoadCompleted, AddressOf util_ImageRes
                            '            Catch
                            'End Try
                        End With

                        posterCheckBoxes() = New RadioButton()
                        With posterCheckBoxes
                            .Location = New Point(location + 50, 166) '179
                            .Name = "postercheckbox" & itemcounter.ToString
                            .SendToBack()
                            .Text = " "
                            AddHandler posterCheckBoxes.CheckedChanged, AddressOf mov_PosterRadioChanged
                        End With

                        itemcounter += 1


                        Me.panelAvailableMoviePosters.Controls.Add(posterPicBoxes())
                        Me.panelAvailableMoviePosters.Controls.Add(posterCheckBoxes())
                    End If
                    If tempboolean = False Then
                        posterPicBoxes() = New PictureBox()
                        With posterPicBoxes
                            .WaitOnLoad = True
                            .Location = New Point(location, 192) '210
                            .Width = 123
                            .Height = 168
                            .SizeMode = PictureBoxSizeMode.Zoom
                            .ImageLocation = item
                            .Visible = True
                            .BorderStyle = BorderStyle.Fixed3D
                            .Name = "poster" & itemcounter.ToString
                            AddHandler posterPicBoxes.DoubleClick, AddressOf util_ZoomImage2
                            AddHandler posterPicBoxes.LoadCompleted, AddressOf util_ImageRes
                        End With

                        posterCheckBoxes() = New RadioButton()
                        With posterCheckBoxes
                            .Location = New Point(location + 50, 358) '389
                            .Name = "postercheckbox" & itemcounter.ToString
                            .SendToBack()
                            .Text = " "
                            AddHandler posterCheckBoxes.CheckedChanged, AddressOf mov_PosterRadioChanged
                        End With

                        itemcounter += 1


                        Me.panelAvailableMoviePosters.Controls.Add(posterPicBoxes())
                        Me.panelAvailableMoviePosters.Controls.Add(posterCheckBoxes())
                    End If
                    Me.Refresh()
                    Application.DoEvents()
                    If tempboolean = False Then location += 120
                    tempboolean = Not tempboolean
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
            Next
        Else
            Dim mainlabel2 As Label
            mainlabel2 = New Label
            With mainlabel2
                .Location = New Point(0, 100)
                .Width = 700
                .Height = 100
                .Font = New System.Drawing.Font("Arial", 15, FontStyle.Bold)
                .Text = "No Posters Were Found For This Movie"

            End With
            Me.panelAvailableMoviePosters.Controls.Add(mainlabel2)
        End If
        If itemcounter = 0 Then
            Button9.Visible = False
            Button10.Visible = False
            Dim mainlabel2 As Label
            mainlabel2 = New Label
            With mainlabel2
                .Location = New Point(0, 100)
                .Width = 700
                .Height = 100
                .Font = New System.Drawing.Font("Arial", 15, FontStyle.Bold)
                .Text = "No Posters Were Found For This Movie"

            End With
            Label18.Text = "0 of 0 Images"
            Me.panelAvailableMoviePosters.Controls.Add(mainlabel2)
        End If
        messbox.Close()
    End Sub

    Private Sub mov_PosterRadioChanged(ByVal sender As Object, ByVal e As EventArgs)
        Dim tempstring As String = sender.name
        Dim tempint As Integer = 0
        Dim tempstring2 As String = tempstring
        Dim allok As Boolean = False
        tempstring = tempstring.Replace("postercheckbox", "")
        tempint = Convert.ToDecimal(tempstring)
        For Each button As Control In Me.panelAvailableMoviePosters.Controls
            If button.Name.IndexOf("postercheckbox") <> -1 Then
                Dim b1 As RadioButton = CType(button, RadioButton)
                If b1.Checked = True Then
                    allok = True
                    Exit For
                End If
            End If
        Next
        If allok = True Then
            btnPosterTabs_SaveImage.Enabled = True
            cbMoviePosterSaveLoRes.Enabled =  (  posterArray(0).ldUrl.ToLower.IndexOf("impawards")<>-1  Or  posterArray(0).ldUrl.ToLower.IndexOf("themoviedb")<>-1  ) 
        Else
            cbMoviePosterSaveLoRes.Enabled = False
            btnPosterTabs_SaveImage.Enabled = False
        End If

    End Sub

    Private Sub util_ImageRes(ByVal sender As Object, ByVal e As EventArgs)
        resLabel = New Label
        Dim tempstring As String
        tempstring = sender.image.width.ToString
        tempstring = tempstring & " x "
        tempstring = tempstring & sender.image.height.ToString
        Dim locx As Integer = sender.location.x
        Dim locy As Integer = sender.location.y
        locy = locy + sender.height
        With resLabel
            .Location = New Point(locx + 30, locy)
            .Text = tempstring
            .BringToFront()
        End With
        Me.panelAvailableMoviePosters.Controls.Add(resLabel)
        Me.Refresh()
        Application.DoEvents()
    End Sub

    Private Sub Button17_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button17.Click
        Try
            messbox = New frmMessageBox("Please wait,", "", "Scraping Movie Poster List")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            Me.Refresh()
            messbox.Refresh()
            Call mov_PosterInitialise()
            Dim newobject2 As New imdb_thumbs.Class1
            Dim posters(,) As String = newobject2.getimdbposters(workingMovieDetails.fullmoviebody.imdbid)
            For f = 0 To UBound(posters)
                If posters(f, 0) <> Nothing Then
                    If posters(f, 1) = Nothing Then posters(f, 1) = posters(f, 0)
                    Dim newposters As New str_ListOfPosters(SetDefaults)
                    newposters.hdUrl = posters(f, 1)
                    newposters.ldUrl = posters(f, 0)
                    posterArray.Add(newposters)
                    newposters.ldUrl = Nothing
                    newposters.hdUrl = Nothing
                End If
            Next


            messbox.Close()
            Call mov_PosterSelectionDisplay()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button9.Click
        Try
            For i = panelAvailableMoviePosters.Controls.Count - 1 To 0 Step -1
                panelAvailableMoviePosters.Controls.RemoveAt(i)
            Next
            messbox = New frmMessageBox("Please wait,", "", "Downloading Preview Images")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            Me.Refresh()
            messbox.Refresh()
            currentPage += 1
            If currentPage = pageCount Then
                Button9.Enabled = False
            End If
            Button10.Enabled = True

            Dim tempint As Integer = (currentPage * (10) + 1) - 10
            Dim tempint2 As Integer = currentPage * 10

            If tempint2 > posterArray.Count Then
                tempint2 = posterArray.Count
            End If

            Dim names As New List(Of String)()

            For f = tempint - 1 To tempint2 - 1
                names.Add(posterArray(f).ldUrl)
            Next
            Label18.Text = "Displaying " & tempint.ToString & " to " & tempint2 & " of " & posterArray.Count.ToString & " Images"

            Dim location As Integer = 0
            Dim itemcounter As Integer = 0
            Dim tempboolean As Boolean = True
            For Each item As String In names
                Try
                    If tempboolean = True Then
                        posterPicBoxes() = New PictureBox()
                        With posterPicBoxes
                            .WaitOnLoad = True
                            .Location = New Point(location, 0)
                            .Width = 123
                            .Height = 168
                            .SizeMode = PictureBoxSizeMode.Zoom
                            .ImageLocation = item
                            .Visible = True
                            .BorderStyle = BorderStyle.Fixed3D
                            .Name = "poster" & itemcounter.ToString
                            AddHandler posterPicBoxes.DoubleClick, AddressOf util_ZoomImage2
                            AddHandler posterPicBoxes.LoadCompleted, AddressOf util_ImageRes
                        End With

                        posterCheckBoxes() = New RadioButton()
                        With posterCheckBoxes
                            .Location = New Point(location + 50, 166)
                            .Name = "postercheckbox" & itemcounter.ToString
                            .SendToBack()
                            .Text = " "
                            AddHandler posterCheckBoxes.CheckedChanged, AddressOf mov_PosterRadioChanged
                        End With

                        itemcounter += 1


                        Me.panelAvailableMoviePosters.Controls.Add(posterPicBoxes())
                        Me.panelAvailableMoviePosters.Controls.Add(posterCheckBoxes())
                    End If
                    If tempboolean = False Then

                        posterPicBoxes() = New PictureBox()
                        With posterPicBoxes
                            .WaitOnLoad = True
                            .Location = New Point(location, 192)
                            .Width = 123
                            .Height = 168
                            .SizeMode = PictureBoxSizeMode.Zoom
                            .ImageLocation = item
                            .Visible = True
                            .BorderStyle = BorderStyle.Fixed3D
                            .Name = "poster" & itemcounter.ToString
                            AddHandler posterPicBoxes.DoubleClick, AddressOf util_ZoomImage2
                            AddHandler posterPicBoxes.LoadCompleted, AddressOf util_ImageRes
                        End With

                        posterCheckBoxes() = New RadioButton()
                        With posterCheckBoxes
                            .Location = New Point(location + 50, 358)
                            .Name = "postercheckbox" & itemcounter.ToString
                            .SendToBack()
                            .Text = " "
                            AddHandler posterCheckBoxes.CheckedChanged, AddressOf mov_PosterRadioChanged
                        End With

                        itemcounter += 1


                        Me.panelAvailableMoviePosters.Controls.Add(posterPicBoxes())
                        Me.panelAvailableMoviePosters.Controls.Add(posterCheckBoxes())
                    End If
                    Me.Refresh()
                    Application.DoEvents()
                    If tempboolean = False Then location += 120
                    tempboolean = Not tempboolean
                Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
                End Try
            Next
            messbox.Close()
            Me.Refresh()
            Application.DoEvents()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button10_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button10.Click
        Try
            For i = panelAvailableMoviePosters.Controls.Count - 1 To 0 Step -1
                panelAvailableMoviePosters.Controls.RemoveAt(i)
            Next
            messbox = New frmMessageBox("Please wait,", "", "Downloading Preview Images")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            Me.Refresh()
            messbox.Refresh()
            currentPage -= 1
            If currentPage = 1 Then
                Button10.Enabled = False
            End If
            Button9.Enabled = True

            Dim tempint As Integer = (currentPage * (10) + 1) - 10
            Dim tempint2 As Integer = currentPage * 10

            If tempint2 > posterArray.Count Then
                tempint2 = posterArray.Count
            End If

            Dim names As New List(Of String)()

            For f = tempint - 1 To tempint2 - 1
                names.Add(posterArray(f).ldUrl)
            Next
            Label18.Text = "Displaying " & tempint.ToString & " to " & tempint2 & " of " & posterArray.Count.ToString & " Images"

            Dim location As Integer = 0
            Dim itemcounter As Integer = 0
            Dim tempboolean As Boolean = True
            For Each item As String In names
                If tempboolean = True Then
                    posterPicBoxes() = New PictureBox()
                    With posterPicBoxes
                        .WaitOnLoad = True
                        .Location = New Point(location, 0)
                        .Width = 123
                        .Height = 168
                        .SizeMode = PictureBoxSizeMode.Zoom
                        .ImageLocation = item
                        .Visible = True
                        .BorderStyle = BorderStyle.Fixed3D
                        .Name = "poster" & itemcounter.ToString
                        AddHandler posterPicBoxes.DoubleClick, AddressOf util_ZoomImage2
                        AddHandler posterPicBoxes.LoadCompleted, AddressOf util_ImageRes
                    End With

                    posterCheckBoxes() = New RadioButton()
                    With posterCheckBoxes
                        .Location = New Point(location + 50, 166)
                        .Name = "postercheckbox" & itemcounter.ToString
                        .SendToBack()
                        .Text = " "
                        AddHandler posterCheckBoxes.CheckedChanged, AddressOf mov_PosterRadioChanged
                    End With

                    itemcounter += 1


                    Me.panelAvailableMoviePosters.Controls.Add(posterPicBoxes())
                    Me.panelAvailableMoviePosters.Controls.Add(posterCheckBoxes())
                End If
                If tempboolean = False Then
                    posterPicBoxes() = New PictureBox()
                    With posterPicBoxes
                        .WaitOnLoad = True
                        .Location = New Point(location, 192)
                        .Width = 123
                        .Height = 168
                        .SizeMode = PictureBoxSizeMode.Zoom
                        .ImageLocation = item
                        .Visible = True
                        .BorderStyle = BorderStyle.Fixed3D
                        .Name = "poster" & itemcounter.ToString
                        AddHandler posterPicBoxes.DoubleClick, AddressOf util_ZoomImage2
                        AddHandler posterPicBoxes.LoadCompleted, AddressOf util_ImageRes
                    End With

                    posterCheckBoxes() = New RadioButton()
                    With posterCheckBoxes
                        .Location = New Point(location + 50, 358)
                        .Name = "postercheckbox" & itemcounter.ToString
                        .SendToBack()
                        .Text = " "
                        AddHandler posterCheckBoxes.CheckedChanged, AddressOf mov_PosterRadioChanged
                    End With

                    itemcounter += 1


                    Me.panelAvailableMoviePosters.Controls.Add(posterPicBoxes())
                    Me.panelAvailableMoviePosters.Controls.Add(posterCheckBoxes())
                End If
                Me.Refresh()
                Application.DoEvents()
                If tempboolean = False Then location += 120
                tempboolean = Not tempboolean
            Next
            messbox.Close()
            Me.Refresh()
            Application.DoEvents()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub btn_MPDB_posters_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_MPDB_posters.Click
        Try
            messbox = New frmMessageBox("Please wait,", "", "Scraping Movie Poster List")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            Me.Refresh()
            messbox.Refresh()
            Call mov_PosterInitialise()
            Dim newobject As New class_mpdb_thumbs.Class1
            Dim teststring As New XmlDocument
            Dim testthumbs As String = String.Empty
            Try
                testthumbs = newobject.get_mpdb_thumbs(workingMovieDetails.fullmoviebody.imdbid)
                testthumbs = "<totalthumbs>" & testthumbs & "</totalthumbs>"
                teststring.LoadXml(testthumbs)

            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
                Thread.Sleep(1)
            End Try

            Dim thumbstring As New XmlDocument
            Try
                thumbstring.LoadXml(testthumbs)



                For Each thisresult In thumbstring("totalthumbs")
                    Select Case thisresult.Name
                        Case "thumb"
                            Dim newposters As New str_ListOfPosters(SetDefaults)
                            newposters.hdUrl = thisresult.InnerText
                            newposters.ldUrl = thisresult.InnerText
                            posterArray.Add(newposters)
                            newposters.ldUrl = Nothing
                            newposters.hdUrl = Nothing
                    End Select
                Next
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
            messbox.Close()
            Call mov_PosterSelectionDisplay()

        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub btn_IMPA_posters_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_IMPA_posters.Click
        Try
            messbox = New frmMessageBox("Please wait,", "", "Scraping Movie Poster List")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            Me.Refresh()
            messbox.Refresh()
            Call mov_PosterInitialise()
            Dim newobject2 As New IMPA.getimpaposters
            Try
                Dim posters(,) As String = newobject2.getimpaafulllist(workingMovieDetails.fullmoviebody.title, workingMovieDetails.fullmoviebody.year)
                For f = 0 To UBound(posters)
                    If posters(f, 0) <> Nothing Then
                        If posters(f, 1) = Nothing Then posters(f, 1) = posters(f, 0)
                        Dim newposters As New str_ListOfPosters(SetDefaults)
                        newposters.hdUrl = posters(f, 0)
                        newposters.ldUrl = posters(f, 1)
                        posterArray.Add(newposters)
                        newposters.ldUrl = Nothing
                        newposters.hdUrl = Nothing
                    End If
                Next
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If

            End Try
            messbox.Close()
            Call mov_PosterSelectionDisplay()

        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub btnPosterTabs_SaveImage_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPosterTabs_SaveImage.Click
        Try
            Dim tempstring As String =""
            Dim tempint As Integer = 0
            Dim realnumber As Integer = 0
            Dim tempstring2 As String = ""
            Dim allok As Boolean = False
            Dim backup As String = ""

            messbox = New frmMessageBox("Downloading Poster...")
            messbox.Show

            For Each button As Control In Me.panelAvailableMoviePosters.Controls
                If button.Name.IndexOf("postercheckbox") <> -1 Then
                    Dim b1 As RadioButton = CType(button, RadioButton)
                    If b1.Checked = True Then
                        tempstring = b1.Name
                        If tempstring.IndexOf("postercheckbox") <> -1 Then
                            tempstring = tempstring.Replace("postercheckbox", "")
                            tempint = Convert.ToDecimal(tempstring)
                            'tempstring2 = posterarray(tempint + 1).hdposter
                            If tempstring2 = Nothing Then
                                tempint = Convert.ToDecimal(tempstring)
                                tempint = tempint + ((currentPage - 1) * 10)
                                If cbMoviePosterSaveLoRes.Enabled = True Then
                                    If cbMoviePosterSaveLoRes.CheckState = CheckState.Checked Then
                                        tempstring2 = posterArray(tempint).ldUrl
                                    Else
                                        tempstring2 = posterArray(tempint).hdUrl
                                        backup = posterArray(tempint).ldUrl
                                    End If
                                Else
                                    '                                    tempstring2 = posterArray(tempint).ldposter
                                    tempstring2 = posterArray(tempint).hdUrl
                                End If
                                allok = True
                                Exit For
                            End If
                        End If
                    End If
                End If
            Next


            If allok = False Then
                MsgBox("No Poster Is Selected")
                Return
            End If


            Try
                Dim i1 As New PictureBox

                With i1
                    .WaitOnLoad = True
                    Try
                        .ImageLocation = tempstring2
                    Catch
                        .ImageLocation = backup
                    End Try
                End With

                If Not i1.Image Is Nothing Then
                    If i1.Image.Width < 20 Then
                        i1.ImageLocation = backup
                    End If
                End If

                util_ImageLoad(PictureBoxAssignedMoviePoster, Utilities.DefaultPosterPath, Utilities.DefaultPosterPath)

                'i1.Image.Save(workingMovieDetails.fileinfo.posterpath, Imaging.ImageFormat.Jpeg)

                Dim Paths As List(Of String) = Preferences.GetPosterPaths(workingMovieDetails.fileinfo.fullpathandfilename,workingMovieDetails.fileinfo.videotspath)

                For Each pth As String In Paths
                    i1.Image.Save(pth, Imaging.ImageFormat.Jpeg)
                Next


                If Preferences.createfolderjpg = True Then
                    tempstring = workingMovieDetails.fileinfo.posterpath
                    tempstring = tempstring.Replace(IO.Path.GetFileName(tempstring), "folder.jpg")
                    i1.Image.Save(tempstring, Imaging.ImageFormat.Jpeg)
                End If


                Dim bm_source As New Bitmap(Paths(0))
                Dim bm_dest As New Bitmap(150, 200)
                Dim gr As Graphics = Graphics.FromImage(bm_dest)
                gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                gr.DrawImage(bm_source, 0, 0, 150 - 1, 200 - 1)
                bm_source.Dispose()
                Dim filename As String = Utilities.GetCRC32(workingMovieDetails.fileinfo.fullpathandfilename)
                Dim path As String = IO.Path.Combine(applicationPath, "settings\postercache\" & filename & ".jpg")

                Try
                    File.Delete(path)
                Catch ex As Exception
                    ExceptionHandler.LogError(ex)
                End Try

                bm_dest.Save(path, Imaging.ImageFormat.Jpeg)
                bm_dest.Dispose()

                For Each poster As PictureBox In TabPage22.Controls
                    If poster.Tag = workingMovieDetails.fileinfo.fullpathandfilename Then
                        'poster.ImageLocation = path
                        'poster.Load()
                        util_ImageLoad(poster, path, Utilities.DefaultPosterPath)
                        Exit For
                    End If
                Next

                util_ImageLoad(PictureBoxAssignedMoviePoster, Paths(0), Utilities.DefaultPosterPath)

                util_ImageLoad(moviethumb, Paths(0), Utilities.DefaultPosterPath)

                lblCurrentLoadedPoster.Text = "Width: " & PictureBoxAssignedMoviePoster.Image.Width.ToString & "  Height: " & PictureBoxAssignedMoviePoster.Image.Height.ToString
                lblCurrentLoadedPoster.Refresh()
            Catch ex As Exception
                ExceptionHandler.LogError(ex)
#If SilentErrorScream Then
                Throw ex
#End If
            End Try

            UpdateMissingPoster

        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
        messbox.Close()
    End Sub

    Private Sub PictureBox3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PictureBoxAssignedMoviePoster.Click
        Try
            If Not PictureBoxAssignedMoviePoster.Image Is Nothing Then
                Me.ControlBox = False
                MenuStrip1.Enabled = False
                'ToolStrip1.Enabled = False
                Call util_ZoomImage(PictureBoxAssignedMoviePoster.Image)
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button5.Click
        Try
            openFD.InitialDirectory = workingMovieDetails.fileinfo.fullpathandfilename.Replace(IO.Path.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename), "")
            openFD.Title = "Select a jpeg image File"
            openFD.FileName = ""
            openFD.Filter = "Media Companion Image Files|*.jpg;*.tbn|All Files|*.*"
            openFD.FilterIndex = 0
            openFD.ShowDialog()
            TextBox4.Text = openFD.FileName
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btnSetThumb_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSetThumb.Click
        Try
            Dim tempstring As String = ""
            Dim MyWebClient As New System.Net.WebClient

            Try
                Dim ImageInBytes() As Byte = MyWebClient.DownloadData(TextBox4.Text)
                Dim ImageStream As New IO.MemoryStream(ImageInBytes)

                PictureBoxAssignedMoviePoster.Image = New System.Drawing.Bitmap(ImageStream)
                
                Dim Paths As List(Of String) = Preferences.GetPosterPaths(workingMovieDetails.fileinfo.fullpathandfilename)

                For Each pth As String In Paths
                    PictureBoxAssignedMoviePoster.Image.Save(pth, Imaging.ImageFormat.Jpeg)
                Next

                If Preferences.createfolderjpg = True Then
                    tempstring = Paths(0).Replace(IO.Path.GetFileName(Paths(0)), "folder.jpg")
                    PictureBoxAssignedMoviePoster.Image.Save(tempstring, Imaging.ImageFormat.Jpeg)
                End If

                util_ImageLoad(moviethumb, Paths(0), Utilities.DefaultPosterPath)

                Dim bitmap3 As New Bitmap(Paths(0))
                Dim bitmap2 As New Bitmap(bitmap3)
                bitmap3.Dispose()
                Dim bm_source As New Bitmap(bitmap2)
                Dim bm_dest As New Bitmap(150, 200)
                Dim gr As Graphics = Graphics.FromImage(bm_dest)
                gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                gr.DrawImage(bm_source, 0, 0, 150 - 1, 200 - 1)
                Dim tempbitmap As Bitmap = bm_dest
                Dim filename As String = Utilities.GetCRC32(workingMovieDetails.fileinfo.fullpathandfilename)
                Dim path As String = IO.Path.Combine(applicationPath, "settings\postercache\" & filename & ".jpg")
                tempbitmap.Save(path, Imaging.ImageFormat.Jpeg)
                tempbitmap.Dispose()

                For Each poster As PictureBox In TabPage22.Controls
                    If poster.Tag = workingMovieDetails.fileinfo.fullpathandfilename Then

                        'poster.ImageLocation = path
                        'poster.Load()
                        util_ImageLoad(poster, path, Utilities.DefaultPosterPath)
                        Exit For
                    End If
                Next
            Catch ex As Exception
                MsgBox("Unable To Download Image")
            End Try
    
            UpdateMissingPoster

            Panel6.Visible = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button7.Click
        Try
            Panel6.Visible = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button20_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button20.Click
        Try
            Panel6.Visible = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    'Commented out as nothing to do with btnPosterTabs_ResizeImage and not called - nb Button12.Click implements this code
    'Private Sub Button22_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPosterTabs_ResizeImage.Click
    '    Try
    '        WebBrowser1.GoBack()
    '    Catch ex As Exception
    '        ExceptionHandler.LogError(ex)
    '    End Try
    'End Sub

    Private Sub btnChangeMovie_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnChangeMovie.Click

        
        Dim mat = Regex.Match(WebBrowser1.Url.ToString, "(tt\d{7})")

        If mat.Success Then
            ChangeMovieImdb = mat.Value
        Else
            MsgBox("Please Browse to a Movie page")
            Exit Sub
        End If

        If MessageBox.Show("Changing the movie will Overwrite all the current details" & vbCrLf & "Do you wish to continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) = DialogResult.No Then
            Exit Sub
        End If

        'Dim messbox As frmMessageBox = New frmMessageBox("The Selected Movie is being scraped", "", "Please Wait")

        'System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
        'messbox.Show()
        'messbox.Refresh()
        'Application.DoEvents()

        RunBackgroundMovieScrape("ChangeMovie")

        'messbox.Close()
        'Me.Cursor = Cursors.Default
        TabControl2.SelectedIndex = 0
    End Sub

    Private Sub Button12_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button12.Click
        Try
            WebBrowser1.GoBack()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub mov_PosterTimerSet(ByVal direction As String)
        posterThumbedItsMade = True
        btnMoviePosterSaveCroppedImage.Enabled = True
        btnMoviePosterResetImage.Enabled = True
        posterCropString = direction
        Timer3.Interval = 1000 ' timer is set initially to 1000ms, user clicks & holds for over 1sec, then timer fires for repeat action, timer sets itself to 150ms when activated
        mov_PosterCrop() ' we do a crop immediately that the button is pushed down, repeat will happen if button is not MouseUp which disables the timer
        Timer3.Enabled = True   'start timer, repeat will happen after 1000ms unless mouse up
    End Sub
    Private Sub Button23_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button23.MouseDown
        Try
            'crop top
            If PictureBoxAssignedMoviePoster.Image Is Nothing Then Exit Sub
            mov_PosterTimerSet("top")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button24_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button24.MouseDown
        Try
            'crop bottom
            If PictureBoxAssignedMoviePoster.Image Is Nothing Then Exit Sub
            mov_PosterTimerSet("bottom")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button26_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button26.MouseDown
        Try
            'crop left
            If PictureBoxAssignedMoviePoster.Image Is Nothing Then Exit Sub
            mov_PosterTimerSet("left")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button25_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button25.MouseDown
        Try
            'crop right
            If PictureBoxAssignedMoviePoster.Image Is Nothing Then Exit Sub
            mov_PosterTimerSet("right")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btnMoviePosterResetImage_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnMoviePosterResetImage.Click
        Try
            'reset
            posterThumbedItsMade = False
            PictureBoxAssignedMoviePoster.Image = moviethumb.Image
            btnMoviePosterResetImage.Enabled = False
            btnMoviePosterSaveCroppedImage.Enabled = False
            lblCurrentLoadedPoster.Text = "Width: " & PictureBoxAssignedMoviePoster.Image.Width.ToString & "  Height: " & PictureBoxAssignedMoviePoster.Image.Height.ToString
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btnMoviePosterSaveCroppedImage_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnMoviePosterSaveCroppedImage.Click
        Try
            'save cropped
            posterThumbedItsMade = False
            Try
                Dim stream As New System.IO.MemoryStream
                PictureBoxAssignedMoviePoster.Image.Save(workingMovieDetails.fileinfo.posterpath, System.Drawing.Imaging.ImageFormat.Jpeg)
                moviethumb.Image = PictureBoxAssignedMoviePoster.Image
                btnMoviePosterResetImage.Enabled = False
                btnMoviePosterSaveCroppedImage.Enabled = False

                Dim bitmap3 As New Bitmap(workingMovieDetails.fileinfo.posterpath)
                Dim bitmap2 As New Bitmap(bitmap3)
                bitmap3.Dispose()
                Dim bm_source As New Bitmap(bitmap2)
                Dim bm_dest As New Bitmap(150, 200)
                Dim gr As Graphics = Graphics.FromImage(bm_dest)
                gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                gr.DrawImage(bm_source, 0, 0, 150 - 1, 200 - 1)
                Dim tempbitmap As Bitmap = bm_dest
                Dim filename As String = Utilities.GetCRC32(workingMovieDetails.fileinfo.fullpathandfilename)
                Dim path As String = IO.Path.Combine(applicationPath, "settings\postercache\" & filename & ".jpg")
                tempbitmap.Save(path, Imaging.ImageFormat.Jpeg)
                tempbitmap.Dispose()


                For Each poster As PictureBox In TabPage22.Controls
                    If poster.Tag = workingMovieDetails.fileinfo.fullpathandfilename Then
                        'poster.ImageLocation = path
                        'poster.Load()
                        util_ImageLoad(poster, path, Utilities.DefaultPosterPath)
                        Exit For
                    End If
                Next
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Timer3_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles Timer3.Tick    'timer from movie poster crop - used for repeat crop if buttom held down
        Try
            Timer3.Interval = 75 'if this timer fires, then from now on we want it to fire quicker for repeat function
            mov_PosterCrop()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub mov_PosterCrop()
        Dim imagewidth As Integer = PictureBoxAssignedMoviePoster.Image.Width
        Dim imageheight As Integer = PictureBoxAssignedMoviePoster.Image.Height
        thumbedItsMade = True

        Select Case posterCropString
            Case "top"
                PictureBoxAssignedMoviePoster.Image = util_ImageCrop(PictureBoxAssignedMoviePoster.Image, New Size(imagewidth, imageheight - 1), New Point(0, 1)).Clone()
            Case "bottom"
                PictureBoxAssignedMoviePoster.Image = util_ImageCrop(PictureBoxAssignedMoviePoster.Image, New Size(imagewidth, imageheight - 1), New Point(0, 0)).Clone()
            Case "left"
                PictureBoxAssignedMoviePoster.Image = util_ImageCrop(PictureBoxAssignedMoviePoster.Image, New Size(imagewidth - 1, imageheight), New Point(1, 0)).Clone()
            Case "right"
                PictureBoxAssignedMoviePoster.Image = util_ImageCrop(PictureBoxAssignedMoviePoster.Image, New Size(imagewidth - 1, imageheight), New Point(0, 0)).Clone()
        End Select
        PictureBoxAssignedMoviePoster.SizeMode = PictureBoxSizeMode.Zoom
        lblCurrentLoadedPoster.Text = "Width: " & PictureBoxAssignedMoviePoster.Image.Width.ToString & "  Height: " & PictureBoxAssignedMoviePoster.Image.Height.ToString
    End Sub

    Private Sub Button23_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button23.MouseUp
        Try
            Timer3.Enabled = False
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
    End Sub

    Private Sub Button24_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button24.MouseUp
        Try
            Timer3.Enabled = False
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
    End Sub

    Private Sub Button25_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button25.MouseUp
        Try
            Timer3.Enabled = False
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
    End Sub

    Private Sub Button26_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button26.MouseUp
        Try
            Timer3.Enabled = False
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
    End Sub

    'Private Sub ToolStripButton2_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    If Not BckWrkScnMovies.IsBusy Then
    '        'ToolStripButton10.Visible = True
    '        'ToolStripProgressBar4.Visible = True
    '        ToolStripStatusLabel1.Visible = True
    '        ToolStripProgressBar1.Visible = True
    '        BckWrkScnMovies.RunWorkerAsync()
    '    End If
    'End Sub

    Private Sub WebBrowser1_NewWindow(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles WebBrowser1.NewWindow
        Try
            e.Cancel = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    'Private Sub TabControl1_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles TabLevel1.SelectedIndexChanged
    '    Try
    '        Dim tab As String = TabLevel1.SelectedTab.Text.ToLower
    '        If tab = "movies" Then
    '            tab1 = 0
    '            Preferences.startuptab = 0
    '        ElseIf tab = "tv shows" Then
    '            TvTreeview.Focus()
    '            tab1 = 1
    '            Preferences.startuptab = 1
    '        ElseIf tab = "home movies" Then
    '            tab1 = TabLevel1.SelectedIndex
    '            Call SetupHomeMovies()
    '        ElseIf tab = "" Then
    '            TabLevel1.SelectedIndex = tab1
    '            Dim webAddress As String = "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=4696771"
    '            'Process.Start(webAddress)
    '            OpenUrl(webAddress)
    '        ElseIf tab = "general preferences" Then
    '            tab1 = TabLevel1.SelectedIndex
    '            Call util_GeneralPreferencesSetup()
    '        ElseIf tab = "export" Then
    '            Call frm_ExportTabSetup()
    '        ElseIf tab = "config.xml" Then
    '            RichTextBoxTabConfigXML.Text = Utilities.LoadFullText(workingProfile.config) '   applicationPath & "\settings\config.xml")
    '        ElseIf tab = "moviecache" Then
    '            RichTextBoxTabMovieCache.Text = Utilities.LoadFullText(workingProfile.moviecache) ' applicationPath & "\settings\moviecache.xml")
    '        ElseIf tab = "tvcache" Then
    '            RichTextBoxTabTVCache.Text = Utilities.LoadFullText(workingProfile.tvcache) ' applicationPath & "\settings\tvcache.xml")
    '        ElseIf tab = "actorcache" Then
    '            RichTextBoxTabActorCache.Text = Utilities.LoadFullText(workingProfile.actorcache) '  applicationPath & "\settings\actorcache.xml")
    '        ElseIf tab = "profile" Then
    '            RichTextBoxTabProfile.Text = Utilities.LoadFullText(applicationPath & "\settings\profile.xml")
    '        ElseIf tab = "regex" Then
    '            RichTextBoxTabRegex.Text = Utilities.LoadFullText(workingProfile.regexlist) '   applicationPath & "\settings\regex.xml")
    '        End If
    '    Catch ex As Exception
    '        ExceptionHandler.LogError(ex)
    '    End Try

    'End Sub

    
    Private Sub ComboBox5_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles ComboBox5.SelectedIndexChanged
        Try
            Dim Episode As Media_Companion.TvEpisode
            If TvTreeview.SelectedNode IsNot Nothing Then
                If TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvEpisode Then
                    Episode = TvTreeview.SelectedNode.Tag
                Else
                    Exit Sub
                End If
            Else
                Exit Sub
            End If
            'tv_SplitContainerAutoPosition("loadtvepisode") 'loadtvepisode()

            PictureBox8.Image = Nothing
            PictureBox8.Visible = True
            For Each actor In Episode.ListActors
                If actor.actorname = ComboBox5.Text Then
                    TextBox25.Text = actor.actorrole
                    PictureBox8.ImageLocation = Utilities.DefaultActorPath

                    Dim temppath As String = Episode.NfoFilePath.Replace(IO.Path.GetFileName(Episode.NfoFilePath), "")
                    Dim tempname As String = actor.actorname.Replace(" ", "_") & ".tbn"
                    temppath = temppath & ".actors\" & tempname
                    If IO.File.Exists(temppath) Then

                        'PictureBox8.ImageLocation = temppath
                        'PictureBox8.Load()

                        util_ImageLoad(PictureBox8, temppath, Utilities.DefaultActorPath)
                        Exit Sub
                    End If
                    If actor.actorthumb <> Nothing Then
                        If actor.actorthumb.IndexOf("http") <> -1 Or IO.File.Exists(actor.actorthumb) Then
                            'PictureBox8.ImageLocation = actor.actorthumb
                            'PictureBox8.Load()
                            util_ImageLoad(PictureBox8, actor.actorthumb, Utilities.DefaultActorPath)
                        Else
                            'PictureBox8.ImageLocation = Utilities.DefaultActorPath
                            'PictureBox8.Load()
                            util_ImageLoad(PictureBox8, Utilities.DefaultActorPath, Utilities.DefaultActorPath)
                        End If
                    Else
                        'PictureBox8.ImageLocation = Utilities.DefaultActorPath
                        'PictureBox8.Load()
                        util_ImageLoad(PictureBox8, Utilities.DefaultActorPath, Utilities.DefaultActorPath)
                    End If
                    PictureBox8.SizeMode = PictureBoxSizeMode.Zoom
                    PictureBox8.Load()
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub ComboBox4_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles ComboBox4.SelectedIndexChanged
        Try
            Call tv_ActorDisplay()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ExpandAllToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExpandAllToolStripMenuItem.Click
        Try
            Dim node As TreeNode
            For Each node In TvTreeview.Nodes
                node.ExpandAll()
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CollapseAllToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CollapseAllToolStripMenuItem.Click
        Try
            Dim node As TreeNode
            For Each node In TvTreeview.Nodes
                node.Collapse()
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ExpandSelectedShowToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExpandSelectedShowToolStripMenuItem.Click
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()

            WorkingTvShow.ShowNode.ExpandAll()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CollapseSelectedShowToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CollapseSelectedShowToolStripMenuItem.Click
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()

            WorkingTvShow.ShowNode.Collapse()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TvTreeview_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles TvTreeview.DoubleClick
        Try
            If TvTreeview.SelectedNode Is Nothing Then Exit Sub
            Dim tempstring2 As String
            Dim tempstring As String = ""
            Dim pathandfilename As String = TvTreeview.SelectedNode.Name
            If pathandfilename.IndexOf("tvshow.nfo") <> -1 Then Exit Sub
            If pathandfilename = "" Then Exit Sub
            If pathandfilename <> Nothing Then
                If pathandfilename.ToLower.Substring(pathandfilename.Length - 4, 4) = ".nfo" Then
                    pathandfilename = pathandfilename.Substring(0, pathandfilename.Length - 4)

                    Dim exists As Boolean = False
                    For Each ext In Utilities.VideoExtensions
                        If ext = "VIDEO_TS.IFO" Then Continue For
                        tempstring2 = pathandfilename & ext

                        If IO.File.Exists(tempstring2) Then
                            exists = True
                            tempstring = applicationPath & "\settings\temp.m3u"
                            Dim file As IO.StreamWriter = IO.File.CreateText(tempstring)
                            file.WriteLine(tempstring2)
                            file.Close()



                            If Preferences.videomode = 1 Then Call util_VideoMode1(tempstring)
                            If Preferences.videomode = 2 Then Call util_VideoMode2(tempstring)

                            If Preferences.videomode = 3 Then
                                Preferences.videomode = 2
                                Call util_VideoMode2(tempstring)
                            End If

                            If Preferences.videomode >= 4 Then
                                If Preferences.selectedvideoplayer <> Nothing Then
                                    Call util_VideoMode4(tempstring)
                                Else
                                    Call util_VideoMode1(tempstring)
                                End If
                            End If
                            Exit For
                        End If
                    Next
                    If exists = False Then
                        MsgBox("Could not find file: """ & pathandfilename & """ with any supported extension")
                    End If
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub ReloadItemToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_ReloadFromCache.Click
        Try
            Call tv_ShowReload(True)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub tv_ShowReload(Optional ByVal force As Boolean = False)
        Dim Show As Media_Companion.TvShow = tv_ShowSelectedCurrently()
        Dim Season As Media_Companion.TvSeason = tv_SeasonSelectedCurrently()
        Dim Episode As Media_Companion.TvEpisode = ep_SelectedCurrently()
        'tv_PictureBoxRight.Load()
        'tv_PictureBoxLeft.Load()

        'This isn't required anymore


    End Sub

    Private Sub TabControl3_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles TabControl3.SelectedIndexChanged
        
        Try
            Dim Show As Media_Companion.TvShow = tv_ShowSelectedCurrently()
            Dim tab As String = TabControl3.SelectedTab.Text

            Dim WorkingEpisode As TvEpisode = ep_SelectedCurrently()
            If (tab <> "Main Browser" And tab <> "Folders" And tab <> "TV Preferences") AndAlso Show Is Nothing Then
                MsgBox("No TV Show is selected")
                Exit Sub
            End If

            Dim tempstring As String = ""
            If tab <> "Main Browser" And tab <> "Folders" And tab <> "TV Preferences" Then

                If Show.NfoFilePath = "" And tvFolders.Count = 0 Then
                    Me.TabControl3.SelectedIndex = tvCurrentTabIndex
                    MsgBox("There are no TV Shows in your list to work on" & vbCrLf & "Set the Preferences as you want them" & vbCrLf & "Using the Preferences Tab, then" & vbCrLf & "add your TV Folders using the Folders Tab" & vbCrLf & "Once the tvshow has been scraped then" & vbCrLf & "Use the tab, ""Search for new episodes""")
                    If tab <> "TV Preferences" Then Exit Sub
                ElseIf Show.NfoFilePath = "" And tvFolders.Count > 0 And tab <> "Search for new Episodes" And tab <> "TV Preferences" Then
                    Me.TabControl3.SelectedIndex = tvCurrentTabIndex
                    If Cache.TvCache.Shows.Count > 0 Then
                        MsgBox("No TV Show is selected")
                        Exit Sub
                    Else
                        MsgBox("There are no TV Shows in your list to work on")
                        Exit Sub
                    End If
                End If
            ElseIf tab = "TV Preferences" Then
                Call tv_PreferencesSetup()
                Exit Sub
            ElseIf tab = "Folders" Then
                tvCurrentTabIndex = TabControl3.SelectedIndex
                TabControl3.SelectedIndex = tvCurrentTabIndex
                Call tv_FoldersSetup()
            Else
                tvCurrentTabIndex = 0
                Exit Sub
            End If
            If tab = "TV Show Selector" Then
                If ListBox3.Items.Count = 0 Then
                    tvCurrentTabIndex = TabControl3.SelectedIndex
                    Call tv_ShowChangedRePopulate()
                End If
            ElseIf tab = "Search for new Episodes" Then
                TabControl3.SelectedIndex = tvCurrentTabIndex
                Call ep_Search()
            ElseIf tab = "Cancel Episode Search" Then
                TabControl3.SelectedIndex = tvCurrentTabIndex
                bckgroundscanepisodes.CancelAsync()
            ElseIf tab = "Main Browser" Then
                If TvTreeview.Nodes.Count = 0 Then TvTreeview.SelectedNode = TvTreeview.TopNode
                TvTreeview.Focus()

                tvCurrentTabIndex = 0
            ElseIf tab = "Posters" Then
                tvCurrentTabIndex = TabControl3.SelectedIndex
                Call tv_PosterSetup()
            ElseIf tab = "" Then

                If Not String.IsNullOrEmpty(Show.ImdbId.Value) Then
                    If Show.ImdbId.Value.IndexOf("tt") <> 0 Then
                        MsgBox("This shows IMDB ID cannot be recognised")
                    Else

                        If Preferences.externalbrowser = True Then
                            Me.TabControl3.SelectedIndex = tvCurrentTabIndex
                            tempstring = "http://www.imdb.com/title/" & Show.ImdbId.Value & "/"
                            'Process.Start(tempstring)
                            OpenUrl(tempstring)
                        Else
                            tvCurrentTabIndex = TabControl3.SelectedIndex
                            Dim url As String
                            url = "http://www.imdb.com/title/" & Show.ImdbId.Value & "/"
                            Try

                                WebBrowser3.Stop()
                                WebBrowser3.ScriptErrorsSuppressed = True

                                WebBrowser3.Navigate(url)
                                'WebBrowser3.Refresh()

                            Catch
                                WebBrowser3.Stop()
                                WebBrowser3.ScriptErrorsSuppressed = True

                                WebBrowser3.Navigate(url)
                                'WebBrowser3.Refresh()

                            End Try
                        End If
                    End If
                Else
                    MsgBox("No IMDB ID is available for this TV Show")
                    TabControl3.SelectedIndex = tvCurrentTabIndex
                End If

            ElseIf tab = "TVDB" Then
                Dim TvdbId As Integer = 0
                If Not String.IsNullOrEmpty(Show.TvdbId.Value) AndAlso Integer.TryParse(Show.TvdbId.Value, TvdbId) Then
                    If Preferences.externalbrowser = True Then
                        Me.TabControl3.SelectedIndex = tvCurrentTabIndex
                        tempstring = "http://thetvdb.com/?tab=series&id=" & TvdbId & "&lid=7"
                        'Process.Start(tempstring)
                        OpenUrl(tempstring)
                    Else
                        tvCurrentTabIndex = TabControl3.SelectedIndex
                        Dim url As String
                        url = "http://thetvdb.com/?tab=series&id=" & TvdbId & "&lid=7"
                        Try
                            'If WebBrowser4.Url.AbsoluteUri.ToLower.ToString <> url And WebBrowser4.Url.AbsoluteUri.ToLower.ToString.IndexOf("seriesid=" & TvdbId) = -1 Then
                            WebBrowser4.Stop()
                            WebBrowser4.ScriptErrorsSuppressed = True

                            WebBrowser4.Navigate(url)
                            'WebBrowser4.Refresh()
                            'End If
                        Catch
                            WebBrowser4.Stop()
                            WebBrowser4.ScriptErrorsSuppressed = True

                            WebBrowser4.Navigate(url)
                            'WebBrowser4.Refresh()

                        End Try
                    End If
                End If

            ElseIf tab.ToLower = "fanart" Then
                Call tv_Fanart_Load()

                tvCurrentTabIndex = TabControl3.SelectedIndex
            ElseIf tab.ToLower = "screenshot" Then
                tvCurrentTabIndex = TabControl3.SelectedIndex
                If Preferences.EdenEnabled Then
                    'If IO.File.Exists(WorkingEpisode.VideoFilePath.Replace(IO.Path.GetExtension(WorkingEpisode.VideoFilePath), ".tbn")) Then
                        util_ImageLoad(PictureBox14, WorkingEpisode.VideoFilePath.Replace(IO.Path.GetExtension(WorkingEpisode.VideoFilePath), ".tbn"), Utilities.DefaultScreenShotPath)
                    'End If
                End If
                If Preferences.FrodoEnabled Then
                    'If IO.File.Exists(WorkingEpisode.VideoFilePath.Replace(IO.Path.GetExtension(WorkingEpisode.VideoFilePath), "-thumb.jpg")) Then
                        util_ImageLoad(PictureBox14, WorkingEpisode.VideoFilePath.Replace(IO.Path.GetExtension(WorkingEpisode.VideoFilePath), "-thumb.jpg"), Utilities.DefaultScreenShotPath)
                    'End If
                End If
                'If Not IO.File.Exists(WorkingEpisode.VideoFilePath.Replace(IO.Path.GetExtension(WorkingEpisode.VideoFilePath), ".tbn")) and Not IO.File.Exists(WorkingEpisode.VideoFilePath.Replace(IO.Path.GetExtension(WorkingEpisode.VideoFilePath), "-thumb.jpg")) Then
                '    PictureBox14.Image = Nothing 
                '    PictureBox14.Image.Dispose()
                'End If
                If TextBox35.Text = "" Then
                    TextBox35.Text = Preferences.ScrShtDelay
                End If
            ElseIf tab.ToLower = "folders" Then
                tvCurrentTabIndex = TabControl3.SelectedIndex
                Call tv_FoldersSetup()

            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try


    End Sub

    Public Sub util_LanguageListLoad()
        ListBox12.Items.Add("Working...")
        ListBox12.Invalidate()
        'Me.Refresh()
        Application.DoEvents()

        System.Threading.Thread.Sleep(4000)
        Dim XmlFile As String

        XmlFile = Utilities.DownloadTextFiles("http://thetvdb.com/api/6E82FED600783400/languages.xml")
        Dim LangList As New Tvdb.Languages()
        LangList.LoadXml(XmlFile)

        For Each Lang As Tvdb.Language In LangList.Languages
            languageList.Add(Lang)
        Next

        ListBox12.Items.Clear()
        ListBox1.Items.Clear()

        For Each lan In languageList
            ListBox12.Items.Add(lan.Language.Value)
            ListBox1.Items.Add(lan.Language.Value)
        Next
    End Sub

    Private Sub tv_ShowChangedRePopulate()
        Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
        'messbox = New message_box("Please wait,", "", "Getting possible TV Shows from TVDB")
        'System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
        'messbox.Show()
        'Me.Refresh()
        'messbox.Refresh()
        Try
            If languageList.Count = 0 Then
                util_LanguageListLoad()
            End If
            TextBox26.Text = Utilities.GetLastFolder(WorkingTvShow.NfoFilePath)
            PictureBox9.Image = Nothing
            If workingTvShow.language <> Nothing Then
                For Each language In languageList
                    If language.Abbreviation.Value = WorkingTvShow.Language.Value Then
                        ListBox1.SelectedItem = language.Language.Value
                        Exit For
                    End If
                Next
            Else
                ListBox1.SelectedItem = Preferences.TvdbLanguage
            End If
            Label55.Text = "Default Language for TV Shows is :- " & Preferences.TvdbLanguage
            Call tv_ShowListLoad()
            Try
                If Preferences.sortorder <> Nothing Then
                    If Preferences.sortorder = "dvd" Then
                        RadioButton14.Checked = True
                    Else
                        RadioButton15.Checked = True
                    End If
                Else
                    RadioButton15.Checked = True
                End If
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
                RadioButton15.Checked = True
            End Try

            Select Case Preferences.seasonall
                Case "none"
                    RadioButton18.Checked = True
                Case "poster"
                    RadioButton17.Checked = True
                Case "wide"
                    RadioButton16.Checked = True
            End Select
            'everything from TVDB
            'Everything from IMDB
            'TV show Nfo From IMDB, Episode nfo from TVDB
            'TV show Nfo From TVDB, Episode nfo from IMDB
            If Preferences.tvdbactorscrape = 0 Then
                RadioButton13.Checked = True
                RadioButton11.Checked = True
            End If
            If Preferences.tvdbactorscrape = 1 Then
                RadioButton12.Checked = True
                RadioButton10.Checked = True
            End If
            If Preferences.tvdbactorscrape = 2 Then
                RadioButton12.Checked = True
                RadioButton11.Checked = True
            End If
            If Preferences.tvdbactorscrape = 3 Then
                RadioButton13.Checked = True
                RadioButton10.Checked = True
            End If
            If Preferences.postertype = "poster" Then
                RadioButton9.Checked = True
            Else
                RadioButton8.Checked = True
            End If
            If Preferences.tvfanart = True Then
                CheckBox4.CheckState = CheckState.Checked
            Else
                CheckBox4.CheckState = CheckState.Unchecked
            End If

            If Preferences.tvposter = True Then
                CheckBox5.CheckState = CheckState.Checked
            Else
                CheckBox5.CheckState = CheckState.Unchecked
            End If

            If Preferences.downloadtvseasonthumbs = True Then
                CheckBox3.CheckState = CheckState.Checked
            Else
                CheckBox3.CheckState = CheckState.Unchecked
            End If
            If Preferences.tvshow_useXBMC_Scraper = True Then
                GroupBox2.Enabled = False
                GroupBox3.Enabled = False
                GroupBox5.Enabled = False
            Else
                GroupBox2.Enabled = True
                GroupBox3.Enabled = True
                GroupBox5.Enabled = True
            End If
        Catch ex As WebException
            MsgBox("There seems to be a problem with the tvdb website, please try again later")
            tvCurrentTabIndex = 0
            TabControl3.SelectedIndex = 0
        End Try

        'messbox.Close()
    End Sub

    Private Sub Button30_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button30.Click
        Try
            Call tv_ShowListLoad()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ListBox3_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles ListBox3.SelectedIndexChanged
        util_ImageLoad(PictureBox9, listOfShows(ListBox3.SelectedIndex).showbanner, Utilities.DefaultBannerPath)
    End Sub

    Private Sub util_LanguageCheck()
        Try
            If ListBox1.SelectedIndex < 0 Then ListBox1.SelectedIndex = languageList.FindIndex(Function(index As Tvdb.Language) index.Abbreviation.Value = Preferences.TvdbLanguageCode)
            Dim languagecode As String = languageList(ListBox1.SelectedIndex).Abbreviation.Value
            Dim url As String = "http://thetvdb.com/api/6E82FED600783400/series/" & listOfShows(ListBox3.SelectedIndex).showid & "/" & languagecode & ".xml"
            Dim websource(10000)


            Dim urllinecount As Integer = 0
            Try
                Dim wrGETURL As WebRequest
                wrGETURL = WebRequest.Create(url)
                Dim myProxy As New WebProxy("myproxy", 80)
                myProxy.BypassProxyOnLocal = True
                Dim objStream As Stream
                objStream = wrGETURL.GetResponse.GetResponseStream()
                Dim objReader As New StreamReader(objStream)
                Dim sLine As String = ""
                urllinecount = 0

                Do While Not sLine Is Nothing
                    urllinecount += 1
                    sLine = objReader.ReadLine
                    If Not sLine Is Nothing Then
                        websource(urllinecount) = sLine
                    End If
                Loop
                objReader.Close()
                objStream.Close()
                urllinecount -= 1

            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
                'MsgBox(ex.ToString)
            End Try
            For f = 1 To urllinecount
                If websource(f).IndexOf("<Language>") <> -1 Then
                    websource(f) = websource(f).Replace("<Language>", "")
                    websource(f) = websource(f).Replace("</Language>", "")
                    websource(f) = websource(f).Replace("  ", "")
                    If websource(f).ToLower <> languagecode Then
                        Label55.BackColor = Color.Red
                        Label55.Text = ListBox3.SelectedItem.ToString & " is not available in " & ListBox1.SelectedItem.ToString & ", Please try another language"
                    Else
                        Label55.BackColor = Color.Transparent
                        Label55.Text = ListBox3.SelectedItem.ToString & " is available in " & ListBox1.SelectedItem.ToString
                    End If
                End If
            Next
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
    End Sub

    Private Sub ListBox1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ListBox1.SelectedIndexChanged
        Try
            Call util_LanguageCheck()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RefreshShowsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RefreshShowsToolStripMenuItem.Click
        'Try
        'Dim messbox As frmMessageBox = New frmMessageBox("Please wait,", "", "Rebuilding TV DB")
        'System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
        'messbox.Show()
        'Me.Refresh()
        'messbox.Refresh()

        Call tv_CacheRefresh()
        'messbox.Close()
        'Catch ex As Exception
        '    ExceptionHandler.LogError(ex)
        'End Try
    End Sub

    Private Sub ReloadShowCacheToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ReloadShowCacheToolStripMenuItem.Click
        Try
            If IO.File.Exists(workingProfile.tvcache) Then
                Call tv_CacheLoad()
            Else
                MsgBox("No Cache exists to load")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btnTvShowSelectorScrape_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnTvShowSelectorScrape.Click
        
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
            If listOfShows.Count = 1 And listOfShows(0).showtitle = "TVDB Search Returned Zero Results" Then
                MsgBox("No show is selected")
                Exit Sub
            End If
            Dim tempstring As String = ""
            If Label55.Text.IndexOf("is not available in") <> -1 Then
                MsgBox("Please select a language that is available for this show")
                Exit Sub
            End If
            Dim messbox As frmMessageBox = New frmMessageBox("The Selected TV Show is being Scraped", "", "Please Wait")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            messbox.Refresh()
            Application.DoEvents()

            Dim LanCode As String
            If ListBox1.SelectedIndex = -1 Then
                LanCode = Preferences.TvdbLanguageCode
            Else
                LanCode = languageList(ListBox1.SelectedIndex).Abbreviation.Value
            End If
            If Preferences.tvshow_useXBMC_Scraper = True Then

                Dim TVShowNFOContent As String = XBMCScrape_TVShow_General_Info("metadata.tvdb.com", listOfShows(ListBox3.SelectedIndex).showid, LanCode, WorkingTvShow.NfoFilePath)
                If TVShowNFOContent <> "error" Then CreateMovieNfo(WorkingTvShow.NfoFilePath, TVShowNFOContent)
                Call tv_ShowLoad(WorkingTvShow)
                TvTreeview.Refresh()
                messbox.Close()
                TabControl3.SelectedIndex = 0

            Else
                'Dim tvdbstuff As New TVDB.tvdbscraper 'commented because of removed TVDB.dll
                Dim tvdbstuff As New TVDBScraper
                Dim tvshowxmlstring As String = tvdbstuff.GetShow(listOfShows(ListBox3.SelectedIndex).showid, LanCode)
                If tvshowxmlstring = "!!!Error!!!" Then
                    MsgBox("Error scraping show")
                    Exit Sub
                End If

                Dim posterurl As String
                Dim bannerurl As String
                Dim fanarturl As String

                WorkingTvShow.clearActors()

                WorkingTvShow.State = Media_Companion.ShowState.Open

                WorkingTvShow.Title.Value = listOfShows(ListBox3.SelectedIndex).showtitle
                WorkingTvShow.TvdbId.Value = listOfShows(ListBox3.SelectedIndex).showid
                WorkingTvShow.Language.Value = LanCode


                If RadioButton11.Checked = True Then
                    WorkingTvShow.EpisodeActorSource.Value = "tvdb"
                Else
                    WorkingTvShow.EpisodeActorSource.Value = "imdb"
                End If

                If RadioButton15.Checked = True Then
                    WorkingTvShow.SortOrder.Value = "default"
                Else
                    WorkingTvShow.SortOrder.Value = "dvd"
                End If

                Dim showlist As New XmlDocument
                showlist.LoadXml(tvshowxmlstring)
                Dim thisresult As XmlNode = Nothing
                For Each thisresult In showlist("fulltvshow")
                    Select Case thisresult.Name
                        Case "mpaa"
                            WorkingTvShow.Mpaa.Value = thisresult.InnerText
                        Case "premiered"
                            If thisresult.InnerText <> "" Then
                                WorkingTvShow.Premiered.Value = thisresult.InnerText
                                WorkingTvShow.Year.Value = thisresult.InnerText.Substring(0, 4)
                            Else
                                WorkingTvShow.Premiered.Value = "N/A"
                                WorkingTvShow.Year.Value = "N/A"
                            End If
                        Case "genre"
                            Dim newstring As String
                            newstring = thisresult.InnerText
                            newstring = newstring.TrimEnd("|")
                            newstring = newstring.TrimStart("|")
                            newstring = newstring.Replace("|", " / ")
                            WorkingTvShow.Genre.Value = newstring
                        Case "imdbid"
                            WorkingTvShow.ImdbId.Value = thisresult.InnerText
                        Case "studio"
                            WorkingTvShow.Studio.Value = thisresult.InnerText
                        Case "plot"
                            WorkingTvShow.Plot.Value = thisresult.InnerText
                        Case "rating"
                            WorkingTvShow.Rating.Value = thisresult.InnerText
                        Case "runtime"
                            WorkingTvShow.Runtime.Value = thisresult.InnerText
                        Case "banner"
                            bannerurl = thisresult.InnerText
                        Case "fanart"
                            fanarturl = thisresult.InnerText
                        Case "poster"
                            posterurl = thisresult.InnerText
                        Case "episodeguideurl"
                            WorkingTvShow.EpisodeGuideUrl.Value = ""
                            WorkingTvShow.Url.Value = thisresult.InnerText
                            WorkingTvShow.Url.Node.SetAttributeValue("cache", WorkingTvShow.TvdbId.Value)
                            WorkingTvShow.Url.AttachToParentNode(WorkingTvShow.EpisodeGuideUrl.Node)
                        Case "actor"
                            If RadioButton13.Checked = True Or WorkingTvShow.ImdbId = Nothing Then
                                Dim id As String = ""
                                Dim acts As New str_MovieActors(SetDefaults)
                                Dim results As XmlNode = Nothing
                                Dim lan As New str_PossibleShowList(SetDefaults)
                                For Each results In thisresult.ChildNodes
                                    Select Case results.Name
                                        Case "name"
                                            acts.actorname = results.InnerText
                                        Case "role"
                                            acts.actorrole = results.InnerText
                                        Case "thumb"
                                            acts.actorthumb = results.InnerText
                                        Case "actorid"
                                            id = results.InnerText
                                    End Select
                                Next

                                If acts.actorthumb <> Nothing Then
                                    If Preferences.actorsave = True And id <> "" Then
                                        Dim workingpath As String = ""
                                        Dim networkpath As String = Preferences.actorsavepath
                                        Try
                                            tempstring = networkpath & "\" & id.Substring(id.Length - 2, 2)
                                            Dim hg As New IO.DirectoryInfo(tempstring)
                                            If Not hg.Exists Then
                                                IO.Directory.CreateDirectory(tempstring)
                                            End If
                                            workingpath = networkpath & "\" & id.Substring(id.Length - 2, 2) & "\tv" & id & ".jpg"
                                            If Not IO.File.Exists(workingpath) Then
                                                Utilities.DownloadFile(acts.actorthumb, workingpath)
                                            End If
                                            acts.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, id.Substring(id.Length - 2, 2))
                                            If Preferences.actornetworkpath.IndexOf("/") <> -1 Then
                                                acts.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, id.Substring(id.Length - 2, 2) & "/tv" & id & ".jpg")
                                            Else
                                                acts.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, id.Substring(id.Length - 2, 2) & "\tv" & id & ".jpg")
                                            End If

                                        Catch ex As Exception
#If SilentErrorScream Then
                                            Throw ex
#End If
                                        End Try
                                    End If
                                End If
                                Dim exists As Boolean = False
                                For Each actors In WorkingTvShow.ListActors
                                    If actors.actorname = acts.actorname And actors.actorrole = acts.actorrole Then
                                        exists = True
                                    End If
                                Next
                                If exists = False Then
                                    WorkingTvShow.ListActors.Add(acts)
                                End If
                            End If
                    End Select
                Next

                If RadioButton12.Checked = True And WorkingTvShow.ImdbId <> Nothing Then
                    '                    Dim imdbscraper As New imdb.Classimdbscraper
                    Dim imdbscraper As New Classimdb
                    Dim actorlist As String
                    Dim actorstring As New XmlDocument
                    actorlist = imdbscraper.getimdbactors(Preferences.imdbmirror, WorkingTvShow.ImdbId.Value)
                    Try
                        actorstring.LoadXml(actorlist)
                        thisresult = Nothing
                        For Each thisresult In actorstring("actorlist")
                            Select Case thisresult.Name
                                Case "actor"
                                    Dim newactor As New str_MovieActors(SetDefaults)
                                    Dim detail As XmlNode = Nothing
                                    For Each detail In thisresult.ChildNodes
                                        Select Case detail.Name
                                            Case "name"
                                                newactor.actorname = detail.InnerText
                                            Case "role"
                                                newactor.actorrole = detail.InnerText
                                            Case "thumb"
                                                newactor.actorthumb = GetActorThumb(detail.InnerText)
                                            Case "actorid"
                                                If newactor.actorthumb <> Nothing Then
                                                    If Preferences.actorsave = True And detail.InnerText <> "" Then
                                                        Dim workingpath As String = ""
                                                        Dim networkpath As String = Preferences.actorsavepath
                                                        Try
                                                            tempstring = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2)
                                                            Dim hg As New IO.DirectoryInfo(tempstring)
                                                            If Not hg.Exists Then
                                                                IO.Directory.CreateDirectory(tempstring)
                                                            End If
                                                            workingpath = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                            If Not IO.File.Exists(workingpath) Then
                                                                Utilities.DownloadFile(newactor.actorthumb, workingpath)
                                                            End If
                                                            newactor.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, detail.InnerText.Substring(detail.InnerText.Length - 2, 2))
                                                            If Preferences.actornetworkpath.IndexOf("/") <> -1 Then
                                                                newactor.actorthumb = Preferences.actornetworkpath & "/" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "/" & detail.InnerText & ".jpg"
                                                            Else
                                                                newactor.actorthumb = Preferences.actornetworkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                            End If
                                                        Catch ex As Exception
#If SilentErrorScream Then
                                                            Throw ex
#End If
                                                        End Try
                                                    End If
                                                End If
                                        End Select
                                    Next
                                    WorkingTvShow.ListActors.Add(newactor)
                            End Select
                        Next
                        scraperLog = scraperLog & "Actors scraped OK"
                        While WorkingTvShow.ListActors.Count > Preferences.maxactors
                            WorkingTvShow.ListActors.RemoveAt(WorkingTvShow.ListActors.Count - 1)
                        End While
                    Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If

                    End Try
                End If

                Dim artlist As New List(Of TvBanners)
                Dim artdone As Boolean = False
                If CheckBox3.CheckState = CheckState.Checked Or CheckBox4.CheckState = CheckState.Checked Or CheckBox5.CheckState = CheckState.Checked Then
                    Dim thumblist As String = tvdbstuff.GetPosterList(listOfShows(ListBox3.SelectedIndex).showid)
                    showlist.LoadXml(thumblist)
                    artdone = True
                    thisresult = Nothing
                    'CheckBox3 = seasons
                    'CheckBox4 = fanart
                    'CheckBox5 = poster
                    For Each thisresult In showlist("banners")
                        Select Case thisresult.Name
                            Case "banner"
                                Dim individualposter As New TvBanners
                                For Each results In thisresult.ChildNodes
                                    Select Case results.Name
                                        Case "url"
                                            individualposter.Url = results.InnerText
                                        Case "bannertype"
                                            individualposter.BannerType = results.InnerText
                                        Case "resolution"
                                            individualposter.Resolution = results.InnerText
                                        Case "language"
                                            individualposter.Language = results.InnerText
                                        Case "season"
                                            individualposter.Season = results.InnerText
                                    End Select
                                Next
                                artlist.Add(individualposter)
                        End Select
                    Next
                End If

                If CheckBox3.CheckState = CheckState.Checked Then
                    For f = 0 To 1000
                        Dim seasonposter As String = ""
                        If CheckBox7.CheckState = CheckState.Checked Then
                            For Each Image In artlist
                                If Image.Season = f.ToString And Image.Language = languageList(ListBox1.SelectedIndex).Abbreviation.Value Then
                                    seasonposter = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If seasonposter = "" Then
                            For Each Image In artlist
                                If Image.Season = f.ToString And Image.Language = "en" Then
                                    seasonposter = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If seasonposter = "" Then
                            For Each Image In artlist
                                If Image.Season = f.ToString Then
                                    seasonposter = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If seasonposter <> "" Then
                            If f < 10 Then
                                tempstring = "0" & f.ToString
                            Else
                                tempstring = f.ToString
                            End If

                            Dim seasonpath As String = WorkingTvShow.NfoFilePath.Replace(IO.Path.GetFileName(WorkingTvShow.NfoFilePath), "season" & tempstring & ".tbn")
                            If tempstring = "00" Then
                                seasonpath = WorkingTvShow.NfoFilePath.Replace(IO.Path.GetFileName(WorkingTvShow.NfoFilePath), "season-specials.tbn")
                            End If
                            If Not IO.File.Exists(seasonpath) Or CheckBox6.CheckState = CheckState.Checked Then
                                Utilities.DownloadFile(seasonposter, seasonpath)
                            End If
                        End If
                    Next
                End If



                If CheckBox4.CheckState = CheckState.Checked Then
                    Dim fanartposter As String = String.Empty
                    If CheckBox7.CheckState = CheckState.Checked Then
                        For Each Image In artlist
                            If Image.Language = languageList(ListBox1.SelectedIndex).Abbreviation.Value And Image.BannerType = "fanart" Then
                                fanartposter = Image.Url
                                Exit For
                            End If
                        Next
                    End If
                    If fanartposter = "" Then
                        For Each Image In artlist
                            If Image.Language = "en" And Image.BannerType = "fanart" Then
                                fanartposter = Image.Url
                                Exit For
                            End If
                        Next
                    End If
                    If fanartposter = "" Then
                        For Each Image In artlist
                            If Image.BannerType = "fanart" Then
                                fanartposter = Image.Url
                                Exit For
                            End If
                        Next
                    End If
                    If fanartposter <> "" Then

                        Dim seasonpath As String = WorkingTvShow.NfoFilePath.Replace(IO.Path.GetFileName(WorkingTvShow.NfoFilePath), "fanart.jpg")
                        If Not IO.File.Exists(seasonpath) Or CheckBox6.CheckState = CheckState.Checked Then

                            'Utilities.DownloadImage(fanartposter, seasonpath, True, Preferences.resizefanart)
                            Movie.SaveFanartImageToCacheAndPath(fanartposter, seasonpath)


                            '                            Try
                            '                                Dim buffer(4000000) As Byte
                            '                                Dim size As Integer = 0
                            '                                Dim bytesRead As Integer = 0

                            '                                Dim thumburl As String = fanartposter
                            '                                Dim req As HttpWebRequest = WebRequest.Create(thumburl)
                            '                                Dim res As HttpWebResponse = req.GetResponse()
                            '                                Dim contents As Stream = res.GetResponseStream()
                            '                                Dim bytesToRead As Integer = CInt(buffer.Length)
                            '                                Dim bmp As New Bitmap(contents)



                            '                                While bytesToRead > 0
                            '                                    size = contents.Read(buffer, bytesRead, bytesToRead)
                            '                                    If size = 0 Then Exit While
                            '                                    bytesToRead -= size
                            '                                    bytesRead += size
                            '                                End While


                            '                                Try
                            '                                    If Preferences.resizefanart = 1 Then
                            '                                        bmp.Save(seasonpath, Imaging.ImageFormat.Jpeg)
                            '                                        scraperLog = scraperLog & "Fanart not resized" & vbCrLf
                            '                                    ElseIf Preferences.resizefanart = 2 Then
                            '                                        If bmp.Width > 1280 Or bmp.Height > 720 Then
                            '                                            Dim bm_source As New Bitmap(bmp)
                            '                                            Dim bm_dest As New Bitmap(1280, 720)
                            '                                            Dim gr As Graphics = Graphics.FromImage(bm_dest)
                            '                                            gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                            '                                            gr.DrawImage(bm_source, 0, 0, 1280 - 1, 720 - 1)
                            '                                            bm_dest.Save(seasonpath, Imaging.ImageFormat.Jpeg)
                            '                                            scraperLog = scraperLog & "Farart Resized to 1280x720" & vbCrLf
                            '                                        Else
                            '                                            scraperLog = scraperLog & "Fanart not resized, already =< required size" & vbCrLf
                            '                                            bmp.Save(seasonpath, Imaging.ImageFormat.Jpeg)
                            '                                        End If
                            '                                    ElseIf Preferences.resizefanart = 3 Then
                            '                                        If bmp.Width > 960 Or bmp.Height > 540 Then
                            '                                            Dim bm_source As New Bitmap(bmp)
                            '                                            Dim bm_dest As New Bitmap(960, 540)
                            '                                            Dim gr As Graphics = Graphics.FromImage(bm_dest)
                            '                                            gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                            '                                            gr.DrawImage(bm_source, 0, 0, 960 - 1, 540 - 1)
                            '                                            bm_dest.Save(seasonpath, Imaging.ImageFormat.Jpeg)
                            '                                            scraperLog = scraperLog & "Farart Resized to 960x540" & vbCrLf
                            '                                        Else
                            '                                            scraperLog = scraperLog & "Fanart not resized, already =< required size" & vbCrLf
                            '                                            bmp.Save(seasonpath, Imaging.ImageFormat.Jpeg)
                            '                                        End If

                            '                                    End If
                            '                                Catch
                            '                                End Try
                            '                            Catch ex As Exception
                            '#If SilentErrorScream Then
                            '                            Throw ex
                            '#End If
                            '                                'MsgBox("Error Downloading season poster from TVDB")
                            '                            End Try
                        End If
                    End If
                End If

                Dim seasonallpath As String = ""
                If CheckBox5.CheckState = CheckState.Checked Then
                    Dim posterurlpath As String = ""
                    If RadioButton9.Checked = True Then 'poster
                        If CheckBox7.CheckState = CheckState.Checked Then
                            For Each Image In artlist
                                If Image.Language = languageList(ListBox1.SelectedIndex).Abbreviation.Value And Image.BannerType = "poster" Then
                                    posterurl = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If posterurlpath = "" Then
                            For Each Image In artlist
                                If Image.Language = "en" And Image.BannerType = "poster" Then
                                    posterurlpath = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If posterurlpath = "" Then
                            For Each Image In artlist
                                If Image.BannerType = "poster" Then
                                    posterurlpath = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If posterurlpath <> "" And RadioButton17.Checked = True Then
                            seasonallpath = posterurlpath
                        End If
                    ElseIf RadioButton9.Checked = False Then 'banner
                        If CheckBox7.CheckState = CheckState.Checked Then
                            For Each Image In artlist
                                If Image.Language = languageList(ListBox1.SelectedIndex).Abbreviation.Value And Image.BannerType = "series" And Image.Season = Nothing Then
                                    posterurl = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If posterurlpath = "" Then
                            For Each Image In artlist
                                If Image.Language = "en" And Image.BannerType = "series" And Image.Season = Nothing Then
                                    posterurlpath = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If posterurlpath = "" Then
                            For Each Image In artlist
                                If Image.BannerType = "series" And Image.Season = Nothing Then
                                    posterurlpath = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If posterurlpath <> "" And RadioButton16.Checked = True Then
                            seasonallpath = posterurlpath
                        End If
                    End If

                    If posterurlpath <> "" Then

                        Dim seasonpath As String = WorkingTvShow.NfoFilePath.Replace(IO.Path.GetFileName(WorkingTvShow.NfoFilePath), "folder.jpg")
                        If Not IO.File.Exists(seasonpath) Or CheckBox6.CheckState = CheckState.Checked Then
                            Utilities.DownloadFile(posterurlpath, seasonpath)
                        End If
                    End If
                End If



                If RadioButton18.Checked = False And seasonallpath = "" Then

                    If RadioButton17.Checked = True Then 'poster
                        If CheckBox7.CheckState = CheckState.Checked Then
                            For Each Image In artlist
                                If Image.Language = languageList(ListBox1.SelectedIndex).Abbreviation.Value And Image.BannerType = "poster" Then
                                    seasonallpath = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If seasonallpath = "" Then
                            For Each Image In artlist
                                If Image.Language = "en" And Image.BannerType = "poster" Then
                                    seasonallpath = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If seasonallpath = "" Then
                            For Each Image In artlist
                                If Image.BannerType = "poster" Then
                                    seasonallpath = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                    ElseIf RadioButton16.Checked = True Then 'banner
                        If CheckBox7.CheckState = CheckState.Checked Then
                            For Each Image In artlist
                                If Image.Language = languageList(ListBox1.SelectedIndex).Abbreviation.Value And Image.BannerType = "series" And Image.Season = Nothing Then
                                    seasonallpath = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If seasonallpath = "" Then
                            For Each Image In artlist
                                If Image.Language = "en" And Image.BannerType = "series" And Image.Season = Nothing Then
                                    seasonallpath = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                        If seasonallpath = "" Then
                            For Each Image In artlist
                                If Image.BannerType = "series" And Image.Season = Nothing Then
                                    seasonallpath = Image.Url
                                    Exit For
                                End If
                            Next
                        End If
                    End If

                    If seasonallpath <> "" Then

                        Dim seasonpath As String = WorkingTvShow.NfoFilePath.Replace(IO.Path.GetFileName(WorkingTvShow.NfoFilePath), "season-all.tbn")
                        If Not IO.File.Exists(seasonpath) Or CheckBox6.CheckState = CheckState.Checked Then
                            Utilities.DownloadFile(seasonallpath, seasonpath)
                        End If
                    End If
                ElseIf RadioButton18.Checked = False And seasonallpath <> "" Then
                    Dim seasonpath As String = WorkingTvShow.NfoFilePath.Replace(IO.Path.GetFileName(WorkingTvShow.NfoFilePath), "season-all.tbn")
                    If Not IO.File.Exists(seasonpath) Or CheckBox6.CheckState = CheckState.Checked Then
                        Utilities.DownloadFile(seasonallpath, seasonpath)
                    End If
                End If


                If artdone = False Then
                    Dim thumblist As String = tvdbstuff.GetPosterList(listOfShows(ListBox3.SelectedIndex).showid)
                    showlist.LoadXml(thumblist)
                    artdone = True
                    thisresult = Nothing
                    'CheckBox3 = seasons
                    'CheckBox4 = fanart
                    'CheckBox5 = poster
                    For Each thisresult In showlist("banners")
                        Select Case thisresult.Name
                            Case "banner"
                                Dim individualposter As New TvBanners
                                For Each results In thisresult.ChildNodes
                                    Select Case results.Name
                                        Case "url"
                                            individualposter.Url = results.InnerText
                                        Case "bannertype"
                                            individualposter.BannerType = results.InnerText
                                        Case "resolution"
                                            individualposter.Resolution = results.InnerText
                                        Case "language"
                                            individualposter.Language = results.InnerText
                                        Case "season"
                                            individualposter.Season = results.InnerText
                                    End Select
                                Next
                                artlist.Add(individualposter)
                        End Select
                    Next
                End If
                For Each url In artlist
                    If url.BannerType <> "fanart" Then
                        WorkingTvShow.posters.Add(url.Url)
                    Else
                        WorkingTvShow.fanart.Add(url.Url)
                    End If
                Next

                nfoFunction.tv_NfoSave(WorkingTvShow.NfoFilePath, WorkingTvShow, True, "unlocked")
                Call tv_ShowLoad(WorkingTvShow)
                messbox.Close()
                TabControl3.SelectedIndex = 0
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Function util_ReplaceXMLChrs(ByVal Text As String)                  'Convert textcodes to real characters
        If Text.IndexOf("â€˜") <> -1 Then Text = Text.Replace("â€˜", "'")
        If Text.IndexOf("â€™") <> -1 Then Text = Text.Replace("â€™", "'")
        If Text.IndexOf("â€™") <> -1 Then Text = Text.Replace("â€™", "'")
        If Text.IndexOf("â€" & Chr(147)) <> -1 Then Text = Text.Replace("â€" & Chr(147), "-")

        Return Text

    End Function

    Private Sub ep_ScreenShotDo(ByVal filenameandpath As String)
        Dim thumbpathandfilename As String = filenameandpath
        Dim pathandfilename As String = filenameandpath.Replace(IO.Path.GetExtension(filenameandpath), "")
        Dim exists As Boolean = False
        For Each ext In Utilities.VideoExtensions
            Dim tempstring2 As String
            tempstring2 = pathandfilename & ext
            If IO.File.Exists(tempstring2) Then
                Dim seconds As Integer = Preferences.ScrShtDelay 
                Dim myProcess As Process = New Process
                myProcess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden
                myProcess.StartInfo.CreateNoWindow = False
                myProcess.StartInfo.FileName = applicationPath & "\Assets\ffmpeg.exe"
                If Preferences.EdenEnabled = True Then
                    Dim proc_arguments As String = "-y -i """ & tempstring2 & """ -f mjpeg -ss " & seconds.ToString & " -vframes 1 -an " & """" & thumbpathandfilename & """"
                    myProcess.StartInfo.Arguments = proc_arguments
                    myProcess.Start()
                    myProcess.WaitForExit()
                End If
                If Preferences.FrodoEnabled = True Then
                    thumbpathandfilename = thumbpathandfilename.Replace(".tbn", "-thumb.jpg")
                    Dim proc_arguments As String = "-y -i """ & tempstring2 & """ -f mjpeg -ss " & seconds.ToString & " -vframes 1 -an " & """" & thumbpathandfilename & """"
                    myProcess.StartInfo.Arguments = proc_arguments
                    myProcess.Start()
                    myProcess.WaitForExit()
                End If
            End If
        Next
        messbox.Close()
    End Sub

    'Private Function ep_Rename(ByVal path As String, ByVal seasonno As String, ByVal episodeno As List(Of String), ByVal showtitle As String, ByVal episodetitle As String)

    '    If Preferences.ignorearticle = True Then
    '        If showtitle.ToLower.IndexOf("the ") = 0 Then
    '            showtitle = showtitle.Substring(4, showtitle.Length - 4) & ", The"
    '        End If
    '    End If

    '    Dim returnpath As String = "false"

    '    Dim medianame As String = path.Replace(IO.Path.GetExtension(path), "")
    '    For Each ext In Utilities.VideoExtensions
    '        If ext = "VIDEO_TS.IFO" Then Continue For
    '        Dim actualname As String = medianame & ext
    '        If IO.File.Exists(actualname) Then
    '            Dim newfilename As String
    '            newfilename = ""
    '            If seasonno.Length = 1 Then
    '                seasonno = "0" & seasonno
    '            End If
    '            For g = 0 To episodeno.Count - 1
    '                If episodeno(g).Length = 1 Then
    '                    episodeno(g) = "0" & episodeno(g)
    '                End If
    '            Next
    '            newfilename = Renamer.setTVFilename(showtitle, episodetitle, episodeno, seasonno)

    '            newfilename = newfilename.Replace("?", "")
    '            newfilename = newfilename.Replace("/", "")
    '            newfilename = newfilename.Replace("\", "")
    '            newfilename = newfilename.Replace("<", "")
    '            newfilename = newfilename.Replace(">", "")
    '            newfilename = newfilename.Replace(":", "")
    '            newfilename = newfilename.Replace("""", "")
    '            newfilename = newfilename.Replace("*", "")
    '            Dim listtorename As New List(Of String)
    '            listtorename.Clear()
    '            Dim done As String = ""
    '            Dim temppath As String = path

    '            listtorename.Add(actualname)

    '            Dim di As DirectoryInfo = New DirectoryInfo(path.Replace(IO.Path.GetFileName(path), ""))
    '            Dim filenama As String = IO.Path.GetFileNameWithoutExtension(path)
    '            Dim fils As IO.FileInfo() = di.GetFiles(filenama & ".*")
    '            For Each fiNext In fils
    '                If Not listtorename.Contains(fiNext.FullName) Then
    '                    listtorename.Add(fiNext.FullName)
    '                End If
    '            Next

    '            temppath = temppath.Replace(IO.Path.GetExtension(temppath), ".nfo")
    '            If IO.File.Exists(temppath) Then
    '                If Not listtorename.Contains(temppath) Then
    '                    listtorename.Add(temppath)
    '                End If
    '            End If
    '            temppath = temppath.Replace(IO.Path.GetExtension(temppath), ".tbn")
    '            If IO.File.Exists(temppath) Then
    '                If Not listtorename.Contains(temppath) Then
    '                    listtorename.Add(temppath)
    '                End If
    '            End If
    '            temppath = temppath.Replace(IO.Path.GetExtension(temppath), ".rar")
    '            If IO.File.Exists(temppath) Then
    '                If Not listtorename.Contains(temppath) Then
    '                    listtorename.Add(temppath)
    '                End If
    '            End If

    '            Dim StillOk As Boolean = True   'first we test every file we are going to rename, if they all can be renamed we then rename
    '            Dim RenameFailedFile As String = ""
    '            For Each ITEMS In listtorename
    '                Dim newname As String = ITEMS.Replace(IO.Path.GetFileName(ITEMS), newfilename) & IO.Path.GetExtension(ITEMS)
    '                newname = newname.Replace("..", ".")
    '                Dim fi As New IO.FileInfo(ITEMS)
    '                If IO.File.Exists(newname) Then
    '                    RenameFailedFile = newname
    '                    StillOk = False
    '                End If
    '            Next

    '            If StillOk = True Then
    '                Dim FirstCount As Boolean = True
    '                For Each ITEMS In listtorename
    '                    Dim newname As String = ITEMS.Replace(IO.Path.GetFileName(ITEMS), newfilename) & IO.Path.GetExtension(ITEMS)
    '                    newname = newname.Replace("..", ".")
    '                    done = newname.Replace(IO.Path.GetExtension(newname), ".nfo")
    '                    Try
    '                        Dim fi As New IO.FileInfo(ITEMS)
    '                        fi.MoveTo(newname)
    '                        If FirstCount = True Then  'we only want to show the renamed mediafile in the brief view
    '                            Preferences.tvScraperLog &= "!!! Renamed to: " & newname & vbCrLf
    '                            FirstCount = False
    '                        Else
    '                            Preferences.tvScraperLog &= "                " & newname & vbCrLf
    '                        End If

    '                    Catch ex As Exception
    '                        done = path
    '                        Preferences.tvScraperLog &= "!!! *** Rename FAILED for : " & newname & vbCrLf
    '                        Preferences.tvScraperLog &= "!!! *** Reported Message  : " & ex.Message & vbCrLf
    '                        Preferences.tvScraperLog &= "!!! *** Resolve the indicated issue, & then try to rename the files again." & vbCrLf
    '                        Exit For 'we need to stop renaming the rest of the files if we get here. We usually get here if the episode
    '                        '        ' cannot be renamed because another process has locked the file. i.e. another app has the file open.  
    '                    End Try

    '                Next
    '                returnpath = done
    '            Else
    '                Preferences.tvScraperLog &= "!!! RENAME ATTEMPT FAILED. File already exists : " & RenameFailedFile & vbCrLf
    '            End If
    '            Preferences.tvScraperLog &= "!!! " & vbCrLf
    '        End If
    '    Next
    '    Return returnpath
    'End Function

    Private Function ep_add(ByVal alleps As List(Of TvEpisode), ByVal path As String, ByVal show As String)

        tvScraperLog = tvScraperLog & "Saving episode" & vbCrLf
        'For Each Episode As Nfo.TvEpisode In alleps
        '    Episode.Save()
        'Next
        Call nfoFunction.saveepisodenfo(alleps, path)
        Dim ext As String = path.Replace(IO.Path.GetExtension(path), ".tbn")
        Dim ext1 As String = path.Replace(IO.Path.GetExtension(path), ".tbn")
        Dim ext2 As String = path.Replace(IO.Path.GetExtension(path), "-thumb.jpg")
        Dim eden As Boolean = Preferences.EdenEnabled
        Dim frodo As Boolean = Preferences.FrodoEnabled
        Dim edenart As Boolean = IO.File.Exists(ext1)
        Dim frodoart As Boolean = IO.File.Exists(ext2)

        If Not alleps(0).Thumbnail.FileName = Nothing And alleps(0).Thumbnail.FileName <> "http://www.thetvdb.com/banners/" And Not edenart And Not frodoart Then
            Dim url As String = alleps(0).Thumbnail.FileName
            If url.IndexOf("http") = 0 And url.IndexOf(".jpg") <> -1 Then
                If Utilities.DownloadFile(url, ext) then
                    If Not eden And frodo Then
                        IO.File.Copy(ext, ext2)
                        IO.File.Delete(ext)
                    ElseIf eden And frodo Then
                        IO.File.Copy(ext, ext2)
                    End If
                ElseIf (Not edenart And Not frodoart) And Preferences.autoepisodescreenshot = True Then
                        tvScraperLog = tvScraperLog & "No Episode Thumb, AutoCreating ScreenShot from Episode" & vbCrLf
                        Call ep_ScreenShotDo(ext)
                Else
                    tvScraperLog = tvScraperLog & "   ****   Unable to Download Episode Thumb  ****" & vbCrLf
                End If 
            End If
        ElseIf (Not edenart And Not frodoart) And Preferences.autoepisodescreenshot = True Then
            tvScraperLog = tvScraperLog & "No Episode Thumb, AutoCreating ScreenShot from Episode" & vbCrLf
            Call ep_ScreenShotDo(ext)
        ElseIf edenart Or frodoart Then
            If edenart And Not eden And Not frodoart Then
                IO.File.Copy(ext, ext2)
                IO.File.Delete(ext)
            ElseIf edenart And frodo And Not frodoart Then
                IO.File.Copy(ext, ext2)
            ElseIf frodoart And Not frodo And Not edenart Then
                IO.File.Copy(ext2, ext)
                IO.File.Delete(ext2)
            ElseIf frodoart And eden And Not edenart Then
                IO.File.Copy(ext2, ext)
            End If
        End If
        'End If
        'End If
        'Else
        'If IO.File.Exists(ext1) Or IO.File.Exists(ext2) Then
        'If eden And Not IO.File.Exists(ext1) And IO.File.Exists(2) Then
        'Dim newname As String
        'If Not FrodoEnabled Then

        'End If
        'End If
        'If (IO.File.Exists(ext1) Or IO.File.Exists(ext2) Or alleps(0).Thumbnail.FileName = Nothing) And Preferences.autoepisodescreenshot = True Then
        'If Not IO.File.Exists(ext1) And Not IO.File.Exists(ext2) Then
        'tvScraperLog = tvScraperLog & "No Episode Thumb, AutoCreating ScreenShot from Movie" & vbCrLf
        'Call ep_ScreenShotDo(ext)
        'End If

        '    Else


        'Dim url As String = alleps(0).Thumbnail.FileName
        'If url = Nothing Then
        'Else
        'If url.IndexOf("http") = 0 And url.IndexOf(".jpg") <> -1 Then
        'Utilities.DownloadFile(url, ext)
        'Else
        'If (Not IO.File.Exists(ext1) Or Not IO.File.Exists(ext2)) And Preferences.autoepisodescreenshot = True Then
        'tvScraperLog = tvScraperLog & "No Episode Thumb, AutoCreating ScreenShot from Movie" & vbCrLf
        'Call ep_ScreenShotDo(ext)
        'End If
        'End If
        'End If
        'End If
        'If Preferences.EdenEnabled And Preferences.FrodoEnabled Then        '...What if just Frodo enabled?
        '           IO.File.Copy(ext, ext.Replace(".tbn", "-thumb.jpg"))

        'Dim newName = ext.Replace(".tbn", "-thumb.jpg")

        'If newName <> ext Then
        'If Utilities.SafeDeleteFile(newName) Then File.Copy(ext, newName)
        'End If
        'End If
        If Preferences.autorenameepisodes = True Then
            Dim eps As New List(Of String)
            eps.Clear()
            For Each ep In alleps
                eps.Add(ep.Episode.Value)
            Next
            Dim tempspath As String = TVShows.episodeRename(path, alleps(0).Season.Value, eps, show, alleps(0).Title.Value)

            If tempspath <> "false" Then
                path = tempspath
            End If
        End If

        Return path
    End Function

    Private Function ep_NfoValidate(ByVal nfopath As String)
        Dim validated As Boolean = True
        If IO.File.Exists(nfopath) Then
            Dim tvshow As New XmlDocument
            Try
                tvshow.Load(nfopath)
            Catch ex As Exception
                validated = False
            End Try
            If validated = True Then
                Try
                    Dim tempstring As String
                    Dim filechck As IO.StreamReader = IO.File.OpenText(nfopath)
                    tempstring = filechck.ReadToEnd.ToLower
                    filechck.Close()
                    If tempstring = Nothing Then
                        validated = False
                    End If
                    Try
                        Dim seasonno As String = tempstring.Substring(tempstring.IndexOf("<season>") + 8, tempstring.IndexOf("</season>") - tempstring.IndexOf("<season>") - 8)
                        If Not IsNumeric(seasonno) Then
                            validated = False
                        End If
                    Catch ex As Exception
                        validated = False
                    End Try
                    Try
                        Dim episodeno As String = tempstring.Substring(tempstring.IndexOf("<episode>") + 9, tempstring.IndexOf("</episode>") - tempstring.IndexOf("<episode>") - 9)
                        If Not IsNumeric(episodeno) Then
                            validated = False
                        End If
                    Catch ex As Exception
                        validated = False
                    End Try
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
            End If
            Return validated
        End If
        Return False
    End Function

    Private Sub tv_NewFind(ByVal path As String, ByVal pattern As String)
        Dim episode As New List(Of TvEpisode)
        Dim propfile As Boolean = False
        Dim allok As Boolean = False
        Dim dir_info As New System.IO.DirectoryInfo(path)

        Dim fs_infos() As String = IO.Directory.GetFiles(path, "*" & pattern, SearchOption.TopDirectoryOnly) 'dir_info.GetFiles(pattern, SearchOption.TopDirectoryOnly)
        Dim counter As Integer = 1
        Dim counter2 As Integer = 1
        For Each FilePath As String In fs_infos

            Dim filename_video As String = FilePath
            Dim filename_nfo As String = filename_video.Replace(IO.Path.GetExtension(filename_video), ".nfo")
            If IO.File.Exists(filename_nfo) Then
                If ep_NfoValidate(filename_nfo) = False And Preferences.renamenfofiles = True Then
                    Dim movefilename As String = filename_nfo.Replace(IO.Path.GetExtension(filename_nfo), ".info")
                    Try
                        IO.File.Move(filename_nfo, movefilename)
                    Catch ex As Exception

                    End Try
                End If
            End If
            If Not IO.File.Exists(filename_nfo) Then
                Dim add As Boolean = True
                If pattern = "*.vob" Then 'If a vob file is detected, check that it is not part of a dvd file structure
                    Dim name As String = filename_nfo
                    name = name.Replace(IO.Path.GetFileName(name), "VIDEO_TS.IFO")
                    If IO.File.Exists(name) Then
                        add = False
                    End If
                End If
                If pattern = "*.rar" Then
                    Dim tempmovie As String = String.Empty
                    Dim tempint2 As Integer = 0
                    Dim tempmovie2 As String = FilePath
                    If IO.Path.GetExtension(tempmovie2).ToLower = ".rar" Then
                        If IO.File.Exists(tempmovie2) = True Then
                            If IO.File.Exists(tempmovie) = False Then
                                Dim rarname As String = tempmovie2
                                Dim SizeOfFile As Integer = FileLen(rarname)
                                tempint2 = Convert.ToInt32(Preferences.rarsize) * 1048576
                                If SizeOfFile > tempint2 Then
                                    Dim mat As Match
                                    mat = Regex.Match(rarname, "\.part[0-9][0-9]?[0-9]?[0-9]?.rar")
                                    If mat.Success = True Then
                                        rarname = mat.Value
                                        If rarname.ToLower.IndexOf(".part1.rar") <> -1 Or rarname.ToLower.IndexOf(".part01.rar") <> -1 Or rarname.ToLower.IndexOf(".part001.rar") <> -1 Or rarname.ToLower.IndexOf(".part0001.rar") <> -1 Then
                                            Dim stackrarexists As Boolean = False
                                            rarname = tempmovie.Replace(".nfo", ".rar")
                                            If rarname.ToLower.IndexOf(".part1.rar") <> -1 Then
                                                rarname = rarname.Replace(".part1.rar", ".nfo")
                                                If IO.File.Exists(rarname) Then
                                                    stackrarexists = True
                                                    tempmovie = rarname
                                                Else
                                                    stackrarexists = False
                                                    tempmovie = rarname
                                                End If
                                            End If
                                            If rarname.ToLower.IndexOf(".part01.rar") <> -1 Then
                                                rarname = rarname.Replace(".part01.rar", ".nfo")
                                                If IO.File.Exists(rarname) Then
                                                    stackrarexists = True
                                                    tempmovie = rarname
                                                Else
                                                    stackrarexists = False
                                                    tempmovie = rarname
                                                End If
                                            End If
                                            If rarname.ToLower.IndexOf(".part001.rar") <> -1 Then
                                                rarname = rarname.Replace(".part001.rar", ".nfo")
                                                If IO.File.Exists(rarname) Then
                                                    tempmovie = rarname
                                                    stackrarexists = True
                                                Else
                                                    stackrarexists = False
                                                    tempmovie = rarname
                                                End If
                                            End If
                                            If rarname.ToLower.IndexOf(".part0001.rar") <> -1 Then
                                                rarname = rarname.Replace(".part0001.rar", ".nfo")
                                                If IO.File.Exists(rarname) Then
                                                    tempmovie = rarname
                                                    stackrarexists = True
                                                Else
                                                    stackrarexists = False
                                                    tempmovie = rarname
                                                End If
                                            End If
                                        Else
                                            add = False
                                        End If
                                    Else
                                        'remove = True
                                    End If
                                Else
                                    add = False
                                End If
                            End If
                        End If
                    End If
                End If
                If add = True Then
                    Dim newep As New TvEpisode
                    newep.NfoFilePath = filename_nfo
                    newep.VideoFilePath = filename_video
                    newep.MediaExtension = IO.Path.GetExtension(filename_video)
                    newEpisodeList.Add(newep)
                End If
            End If


        Next

        fs_infos = Nothing
    End Sub

    Private Sub bckgroundscanepisodes_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bckgroundscanepisodes.RunWorkerCompleted
        Try

            If scrapeAndQuit = True Then
                Me.Close()
            End If


            If Not (e.Error Is Nothing) Then
                tvScraperLog = tvScraperLog & vbCrLf
                tvScraperLog = tvScraperLog & "!!! Error, exiting TV episode scraper" & vbCrLf
                tvScraperLog = tvScraperLog & "Error:-" & vbCrLf
                tvScraperLog = tvScraperLog & e.Error.ToString & vbCrLf
            Else
                tvScraperLog = tvScraperLog & vbCrLf & "!!! Operation Completed" & vbCrLf
            End If


            ToolStripProgressBar5.Value = 0
            ToolStripProgressBar5.ProgressBar.Refresh()
            ToolStripProgressBar5.Visible = False
            ToolStripStatusLabel6.Text = "TV Show Scraper"
            ToolStripStatusLabel6.Visible = False
            TabPage15.Text = "Search for new Episodes"
            TabPage15.ToolTipText = "Searches folders for new episodes"

            If Preferences.disabletvlogs = False Then
                Dim MyFormObject As New frmoutputlog(tvScraperLog, True)
                Try
                    MyFormObject.ShowDialog()
                Catch ex As ObjectDisposedException
#If SilentErrorScream Then
                Throw ex
#End If
                End Try
            End If
            'Call populatetvtree()
            globalThreadCounter -= 1
            Call util_ThreadsRunningCheck()

            'For Each Show As Nfo.TvShow In TvShows
            '    Show.SearchForEpisodesInFolder()
            'Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub OpenFolderToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_OpenFolder.Click
        Try
            If Not TvTreeview.SelectedNode Is Nothing Then
                Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()  'set WORKINGTVSHOW to show obj irrelavent if we have selected show/season/episode
                If Not WorkingTvShow.NfoFilePath Is Nothing And Not WorkingTvShow.NfoFilePath = "" Then
                    Call util_OpenFolder(WorkingTvShow.NfoFilePath) 'we send the path of the tvshow.nfo, that way in explorer it will be highlighted in the folder
                Else
                    MsgBox("There is no show selected to open")
                End If
            Else
                MsgBox("There is no show selected to open")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub WebBrowser2_NewWindow(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles WebBrowser2.NewWindow
        Try
            e.Cancel = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub WebBrowser3_NewWindow(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles WebBrowser3.NewWindow
        Try
            e.Cancel = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub WebBrowser4_NewWindow(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles WebBrowser4.NewWindow
        Try
            e.Cancel = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    'Private Sub PictureBox4_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles tv_PictureBoxLeft.DoubleClick
    '    Try
    '        If tv_PictureBoxLeft.ImageLocation <> Nothing Then
    '            If IO.File.Exists(tv_PictureBoxLeft.ImageLocation) Then
    '                Me.ControlBox = False
    '                MenuStrip1.Enabled = False
    '                'ToolStrip1.Enabled = False
    '                Dim newimage As New Bitmap(tv_PictureBoxLeft.ImageLocation)
    '                Call util_ZoomImage(newimage)
    '            End If
    '        End If
    '    Catch ex As Exception
    '        ExceptionHandler.LogError(ex)
    '    End Try
    'End Sub

    'Private Sub PictureBox5_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles tv_PictureBoxRight.DoubleClick
    '    Try
    '        If tv_PictureBoxRight.ImageLocation <> Nothing Then
    '            If IO.File.Exists(tv_PictureBoxRight.ImageLocation) Then
    '                Me.ControlBox = False
    '                MenuStrip1.Enabled = False
    '                'ToolStrip1.Enabled = False
    '                Dim newimage As New Bitmap(tv_PictureBoxRight.ImageLocation)
    '                Call util_ZoomImage(newimage)
    '            End If
    '        End If
    '    Catch ex As Exception
    '        ExceptionHandler.LogError(ex)
    '    End Try
    'End Sub

    Private Sub PictureBox_Zoom(ByVal sender As Object, ByVal e As System.EventArgs) Handles tv_PictureBoxBottom.DoubleClick, tv_PictureBoxRight.DoubleClick, tv_PictureBoxLeft.DoubleClick
        Try
            Dim picBox As PictureBox = sender

            Dim imageLocation As String = picBox.tag

            If imageLocation <> Nothing Then
                If IO.File.Exists(imageLocation) Then
                    Me.ControlBox = False
                    MenuStrip1.Enabled = False
                    'ToolStrip1.Enabled = False
                    Dim newimage As New Bitmap(imageLocation)
                    Call util_ZoomImage(newimage)
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub tv_Fanart_Load()
        Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
        Me.Panel13.Controls.Clear()
        listOfTvFanarts.Clear()
        Button40.Visible = False
        Button39.Visible = False
        If TvTreeview.SelectedNode.Name.ToLower.IndexOf("tvshow.nfo") <> -1 Or TvTreeview.SelectedNode.Name = "" Then
            If Not tv_PictureBoxLeft.Image Is Nothing Then
                PictureBox10.Image = tv_PictureBoxLeft.Image
                PictureBox11.Image = tv_PictureBoxLeft.Image
            Else
                PictureBox10.Image = Nothing
                PictureBox11.Image = Nothing
            End If
        Else
            util_ImageLoad(PictureBox10, WorkingTvShow.NfoFilePath.ToLower.Replace("tvshow.nfo", "fanart.jpg"), Utilities.DefaultFanartPath)
            util_ImageLoad(PictureBox11, WorkingTvShow.NfoFilePath.ToLower.Replace("tvshow.nfo", "fanart.jpg"), Utilities.DefaultFanartPath)

        End If
        Try
            Label58.Text = PictureBox10.Image.Height.ToString
            Label59.Text = PictureBox10.Image.Width.ToString
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
        TextBox28.Text = WorkingTvShow.Title.Value
        messbox = New frmMessageBox("Please wait,", "", "Querying TVDB for fanart list")
        System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
        messbox.Show()
        Me.Refresh()
        messbox.Refresh()
        Dim fanarturl As String = "http://www.thetvdb.com/api/6E82FED600783400/series/" & WorkingTvShow.TvdbId.Value & "/banners.xml"
        Dim apple2(4000) As String
        Dim fanartlinecount As Integer = 0
        Try
            Dim wrGETURL As WebRequest
            wrGETURL = WebRequest.Create(fanarturl)
            Dim myProxy As New WebProxy("myproxy", 80)
            myProxy.BypassProxyOnLocal = True
            Dim objStream As Stream
            objStream = wrGETURL.GetResponse.GetResponseStream()
            Dim objReader As New StreamReader(objStream)
            Dim sLine As String = ""
            fanartlinecount = 0

            sLine = objReader.ReadToEnd


            Dim bannerslist As New XmlDocument
            'Try
            Dim bannerlist As String = "<banners>"
            bannerslist.LoadXml(sLine)
            Dim thisresult As XmlNode = Nothing
            objReader.Close()
            objStream.Close()
            For Each thisresult In bannerslist("Banners")

                Select Case thisresult.Name
                    Case "Banner"
                        Dim fanart As New str_FanartList(SetDefaults)
                        Dim bannerselection As XmlNode = Nothing
                        For Each bannerselection In thisresult.ChildNodes
                            Select Case bannerselection.Name
                                Case "BannerPath"
                                    fanart.bigUrl = "http://thetvdb.com/banners/" & bannerselection.InnerXml
                                    fanart.smallUrl = "http://thetvdb.com/banners/_cache/" & bannerselection.InnerXml
                                Case "BannerType"
                                    fanart.type = bannerselection.InnerXml
                                Case "BannerType2"
                                    fanart.resolution = bannerselection.InnerXml
                            End Select
                        Next
                        If fanart.type = "fanart" Then
                            listOfTvFanarts.Add(fanart)
                        End If
                End Select
            Next





        Catch ex As WebException
            MsgBox("TVDB appears to be down at the moment, please try again later")
        End Try



        If listOfTvFanarts.Count > 0 Then





            Dim location As Integer = 0
            Dim itemcounter As Integer = 0
            For f = 0 To listOfTvFanarts.Count - 1
                tvFanartBoxes() = New PictureBox()

                With tvFanartBoxes
                    .Location = New Point(0, location)
                    If listOfTvFanarts.Count > 2 Then
                        .Width = 405
                        .Height = 245
                    Else
                        .Width = 415
                        .Height = 250
                    End If
                    .SizeMode = PictureBoxSizeMode.Zoom
                    .ImageLocation = listOfTvFanarts(f).smallUrl
                    .Visible = True
                    .BorderStyle = BorderStyle.Fixed3D
                    .Name = "tvfanart" & f.ToString
                    AddHandler tvFanartBoxes.DoubleClick, AddressOf util_ZoomImage2
                End With

                tvFanartCheckBoxes() = New RadioButton()
                With tvFanartCheckBoxes
                    .BringToFront()
                    .Location = New Point(199, location + 245)
                    .Name = "checkbox" & itemcounter.ToString
                End With

                resolutionLabels() = New Label
                With resolutionLabels
                    .BringToFront()
                    .Location = New Point(10, location + 245)
                    .Name = listOfTvFanarts(f).resolution
                    .Text = listOfTvFanarts(f).resolution
                End With

                itemcounter += 1
                location += 270

                Me.Panel13.Controls.Add(tvFanartBoxes())
                Me.Panel13.Controls.Add(tvFanartCheckBoxes())
                Me.Panel13.Controls.Add(resolutionLabels())
                Me.Refresh()
                Application.DoEvents()
            Next
            EnableTvFanartScrolling
        Else
            Dim mainlabel2 As Label
            mainlabel2 = New Label
            With mainlabel2
                .Location = New Point(0, 100)
                .Width = 700
                .Height = 100
                .Font = New System.Drawing.Font("Arial", 15, FontStyle.Bold)
                .Text = "No Fanart Was Found At TVDB For This Movie"
            End With
            Me.Panel13.Controls.Add(mainlabel2)
        End If

        System.Windows.Forms.Cursor.Current = Cursors.Default
        messbox.Close()
        'Catch ex As Exception

        'End Try

    End Sub

        'Set focus on the first checkbox to enable mouse wheel scrolling 
    Sub EnableTvFanartScrolling
        Try
            Dim rb As RadioButton = Panel13.Controls("checkbox0")
                
            rb.Select                       'Causes RadioButtons checked state to toggle
            rb.Checked = Not rb.Checked     'Undo unwanted checked state toggling
        Catch
        End Try
    End Sub

    Private Sub Button42_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button42.Click
        Dim issavefanart As Boolean = Preferences.savefanart
        Preferences.savefanart =true
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
            Label2.Text = "Please Wait, Trying to Download Fanart"
            Me.Refresh()
            Application.DoEvents()

            Dim miscvar As String = String.Empty
            Dim miscint As Integer = 0
            Dim miscvar2 As String = String.Empty
            Dim allok As Boolean = False
            For Each button As Control In Me.Panel13.Controls
                If button.Name.IndexOf("checkbox") <> -1 Then
                    Dim b1 As RadioButton = CType(button, RadioButton)
                    If b1.Checked = True Then
                        miscvar = b1.Name
                        miscvar = miscvar.Replace("checkbox", "")
                        miscint = Convert.ToDecimal(miscvar)
                        miscvar2 = listOfTvFanarts(miscint).bigUrl
                        allok = True
                        Exit For
                    End If
                End If
            Next
            If allok = False Then
                MsgBox("No Fanart Is Selected")
            Else
                Try
                    'Panel1.Controls.Remove(Label1)
                    'Dim buffer(4000000) As Byte
                    'Dim size As Integer = 0
                    'Dim bytesRead As Integer = 0

                    'Dim fanartthumburl As String = miscvar2
                    'Dim req As HttpWebRequest = WebRequest.Create(fanartthumburl)
                    'Dim res As HttpWebResponse = req.GetResponse()
                    'Dim contents As Stream = res.GetResponseStream()
                    'Dim bmp As New Bitmap(contents)
                    Dim savepath As String = WorkingTvShow.NfoFilePath.ToLower.Replace("tvshow.nfo", "fanart.jpg")

                    'Dim bytesToRead As Integer = CInt(buffer.Length)

                    'While bytesToRead > 0
                    '    size = contents.Read(buffer, bytesRead, bytesToRead)
                    '    If size = 0 Then Exit While
                    '    bytesToRead -= size
                    '    bytesRead += size
                    'End While
                    'If Preferences.resizefanart = 1 Then
                    '    Try
                    '        Dim tempbitmap As Bitmap = bmp
                    '        tempbitmap.Save(savepath, Imaging.ImageFormat.Jpeg)
                    '    Catch ex As Exception
                    '        miscvar = ex.Message.ToString
                    '    End Try
                    'ElseIf Preferences.resizefanart = 2 Then
                    '    If bmp.Width > 1280 Or bmp.Height > 720 Then
                    '        Dim bm_source As New Bitmap(bmp)
                    '        Dim bm_dest As New Bitmap(1280, 720)
                    '        Dim gr As Graphics = Graphics.FromImage(bm_dest)
                    '        gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                    '        gr.DrawImage(bm_source, 0, 0, 1280 - 1, 720 - 1)
                    '        Dim tempbitmap As Bitmap = bm_dest
                    '        tempbitmap.Save(savepath, Imaging.ImageFormat.Jpeg)
                    '    Else
                    '        Thread.Sleep(30)
                    '        bmp.Save(savepath, Imaging.ImageFormat.Jpeg)
                    '    End If
                    'ElseIf Preferences.resizefanart = 3 Then
                    '    If bmp.Width > 960 Or bmp.Height > 540 Then
                    '        Dim bm_source As New Bitmap(bmp)
                    '        Dim bm_dest As New Bitmap(960, 540)
                    '        Dim gr As Graphics = Graphics.FromImage(bm_dest)
                    '        gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                    '        gr.DrawImage(bm_source, 0, 0, 960 - 1, 540 - 1)
                    '        Dim tempbitmap As Bitmap = bm_dest
                    '        tempbitmap.Save(savepath, Imaging.ImageFormat.Jpeg)
                    '    Else
                    '        Thread.Sleep(30)
                    '        bmp.Save(savepath, Imaging.ImageFormat.Jpeg)
                    '    End If
                    'End If
                    'Dim exists As Boolean = System.IO.File.Exists(savepath)


                    'If Utilities.DownloadImage(miscvar2, savepath, True, Preferences.resizefanart) Then
                    If Movie.SaveFanartImageToCacheAndPath(miscvar2, savepath) Then
                        Try
                            util_ImageLoad(PictureBox10, savepath, Utilities.DefaultFanartPath)
                            PictureBox11.Image = PictureBox10.Image
                            If TvTreeview.SelectedNode.Name.ToLower.IndexOf("tvshow.nfo") <> -1 Or TvTreeview.SelectedNode.Name = "" Then
                                tv_PictureBoxLeft.ImageLocation = savepath
                                tv_PictureBoxLeft.Load()
                            End If
                        Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                        End Try
                    Else
                        PictureBox10.Image = Nothing
                        PictureBox11.Image = Nothing
                    End If
                    If Preferences.FrodoEnabled Then 
                        Utilities.SafeCopyFile(savepath,savepath.Replace("fanart.jpg","season-all-fanart.jpg"),True)
                    End If
                Catch ex As WebException
                    MsgBox(ex.Message)
                End Try

            End If
            Preferences.savefanart = issavefanart
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
            Preferences.savefanart=issavefanart
        End Try

    End Sub

    Private Sub tv_FanartCropTop()
        Dim imagewidth As Integer = PictureBox10.Image.Width
        Dim imageheight As Integer = PictureBox10.Image.Height
        PictureBox10.Image = util_ImageCrop(PictureBox10.Image, New Size(imagewidth, imageheight - 1), New Point(0, 1)).Clone
        PictureBox10.SizeMode = PictureBoxSizeMode.Zoom
    End Sub

    Private Sub tv_FanartCropBottom()
        Dim imagewidth As Integer = PictureBox10.Image.Width
        Dim imageheight As Integer = PictureBox10.Image.Height
        PictureBox10.Image = util_ImageCrop(PictureBox10.Image, New Size(imagewidth, imageheight - 1), New Point(0, 0)).Clone
        PictureBox10.SizeMode = PictureBoxSizeMode.Zoom
    End Sub

    Private Sub tv_FanartCropLeft()
        Dim imagewidth As Integer = PictureBox10.Image.Width
        Dim imageheight As Integer = PictureBox10.Image.Height
        PictureBox10.Image = util_ImageCrop(PictureBox10.Image, New Size(imagewidth - 1, imageheight), New Point(1, 0)).Clone
        PictureBox10.SizeMode = PictureBoxSizeMode.Zoom
    End Sub

    Private Sub tv_FanartCropRight()
        Dim imagewidth As Integer = PictureBox10.Image.Width
        Dim imageheight As Integer = PictureBox10.Image.Height
        PictureBox10.Image = util_ImageCrop(PictureBox10.Image, New Size(imagewidth - 1, imageheight), New Point(0, 0)).Clone
        PictureBox10.SizeMode = PictureBoxSizeMode.Zoom
    End Sub

    Private Sub Button35_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button35.MouseDown
        Try
            'up
            If PictureBox10.Image Is Nothing Then Exit Sub
            thumbedItsMade = True
            Button40.Visible = True
            Button39.Visible = True
            cropString = "top"
            Timer4.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button36_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button36.MouseDown
        Try
            'down
            If PictureBox10.Image Is Nothing Then Exit Sub
            thumbedItsMade = True
            Button40.Visible = True
            Button39.Visible = True
            cropString = "bottom"
            Timer4.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button38_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button38.MouseDown
        Try
            If PictureBox10.Image Is Nothing Then Exit Sub
            thumbedItsMade = True
            Button40.Visible = True
            Button39.Visible = True
            cropString = "left"
            Timer4.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try 'left
    End Sub

    Private Sub Button37_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button37.MouseDown
        Try
            'right
            If PictureBox10.Image Is Nothing Then Exit Sub
            thumbedItsMade = True
            Button40.Visible = True
            Button39.Visible = True
            cropString = "right"
            Timer4.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Timer4_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles Timer4.Tick
        Try
            If cropString = "top" Then Call tv_FanartCropTop()
            If cropString = "bottom" Then Call tv_FanartCropBottom()
            If cropString = "left" Then Call tv_FanartCropLeft()
            If cropString = "right" Then Call tv_FanartCropRight()
            Label58.Text = PictureBox10.Image.Height.ToString
            Label59.Text = PictureBox10.Image.Width.ToString
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button35_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button35.MouseUp
        Try
            Timer4.Enabled = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button36_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button36.MouseUp
        Try
            Timer4.Enabled = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button38_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button38.MouseUp
        Try
            Timer4.Enabled = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button37_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Button37.MouseUp
        Try
            Timer4.Enabled = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button40_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button40.Click
        Try
            PictureBox10.Image = PictureBox11.Image
            Label58.Text = PictureBox10.Image.Height.ToString
            Label59.Text = PictureBox10.Image.Width.ToString
            Button40.Visible = False
            Button39.Visible = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button39_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button39.Click
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
            Try
                Dim stream As New System.IO.MemoryStream
                PictureBox10.Image.Save(WorkingTvShow.NfoFilePath.ToLower.Replace("tvshow.nfo", "fanart.jpg"), System.Drawing.Imaging.ImageFormat.Jpeg)
                PictureBox11.Image = PictureBox10.Image
                If TvTreeview.SelectedNode.Name.ToLower.IndexOf("tvshow.nfo") <> -1 Or TvTreeview.SelectedNode.Name = "" Then
                    tv_PictureBoxLeft.Image = PictureBox11.Image
                End If
                Label58.Text = PictureBox10.Image.Height.ToString
                Label59.Text = PictureBox10.Image.Width.ToString
                Button40.Visible = False
                Button39.Visible = False
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button41_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button41.Click
        Try
            Panel11.Visible = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button32_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button32.Click
        Try
            Panel11.Visible = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button31_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button31.Click
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
            'browser
            openFD.InitialDirectory = WorkingTvShow.NfoFilePath.Replace(IO.Path.GetFileName(WorkingTvShow.NfoFilePath), "")
            openFD.Title = "Select a jpeg image file"
            openFD.FileName = ""
            openFD.Filter = "Media Companion Image Files|*.jpg;*.tbn|All Files|*.*"
            openFD.FilterIndex = 0
            openFD.ShowDialog()
            TextBox27.Text = openFD.FileName
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button33_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button33.Click
        Try
            'set thumb
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
            Dim savepath As String = WorkingTvShow.NfoFilePath.ToLower.Replace("tvshow.nfo", "fanart.jpg")

            Movie.SaveFanartImageToCacheAndPath(TextBox27.Text,savepath)


            'Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
            'Dim MyWebClient As New System.Net.WebClient
            'Try
            '    Dim ImageInBytes() As Byte = MyWebClient.DownloadData(TextBox27.Text)
            '    Dim ImageStream As New IO.MemoryStream(ImageInBytes)
            '    Dim tempstring As String

            '    Dim bmp As New Bitmap(ImageStream)
            '    Dim savepath As String = WorkingTvShow.NfoFilePath.ToLower.Replace("tvshow.nfo", "fanart.jpg")

            '    If Preferences.resizefanart = 1 Then
            '        Try
            '            Dim tempbitmap As Bitmap = bmp
            '            tempbitmap.Save(savepath, Imaging.ImageFormat.Jpeg)
            '        Catch ex As Exception
            '            tempstring = ex.Message.ToString
            '        End Try
            '    ElseIf Preferences.resizefanart = 2 Then
            '        If bmp.Width > 1280 Or bmp.Height > 720 Then
            '            Dim bm_source As New Bitmap(bmp)
            '            Dim bm_dest As New Bitmap(1280, 720)
            '            Dim gr As Graphics = Graphics.FromImage(bm_dest)
            '            gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
            '            gr.DrawImage(bm_source, 0, 0, 1280 - 1, 720 - 1)
            '            Dim tempbitmap As Bitmap = bm_dest
            '            tempbitmap.Save(savepath, Imaging.ImageFormat.Jpeg)
            '        Else
            '            Thread.Sleep(30)
            '            bmp.Save(savepath, Imaging.ImageFormat.Jpeg)
            '        End If
            '    ElseIf Preferences.resizefanart = 3 Then
            '        If bmp.Width > 960 Or bmp.Height > 540 Then
            '            Dim bm_source As New Bitmap(bmp)
            '            Dim bm_dest As New Bitmap(960, 540)
            '            Dim gr As Graphics = Graphics.FromImage(bm_dest)
            '            gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
            '            gr.DrawImage(bm_source, 0, 0, 960 - 1, 540 - 1)
            '            Dim tempbitmap As Bitmap = bm_dest
            '            tempbitmap.Save(savepath, Imaging.ImageFormat.Jpeg)
            '        Else
            '            Thread.Sleep(30)
            '            bmp.Save(savepath, Imaging.ImageFormat.Jpeg)
            '        End If
            '    End If

                Dim exists As Boolean = System.IO.File.Exists(savepath)
                If exists = True Then

                    util_ImageLoad(PictureBox10, savepath, Utilities.DefaultFanartPath)

                    If TvTreeview.SelectedNode.Name.ToLower.IndexOf("tvshow.nfo") <> -1 Or TvTreeview.SelectedNode.Name = "" Then
                        util_ImageLoad(tv_PictureBoxLeft, savepath, Utilities.DefaultFanartPath)

                    End If

                End If
                Label59.Text = PictureBox10.Image.Width
                Label58.Text = PictureBox10.Image.Height


            Catch ex As Exception
                MsgBox("Unable To Download Image")
            End Try
            Panel11.Visible = False
        'Catch ex As Exception
        '    ExceptionHandler.LogError(ex)
        'End Try

    End Sub

    Private Sub TextBox_Title_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles TextBox_Title.Enter
        Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
        Dim WorkingEpisode As TvEpisode = ep_SelectedCurrently()
        If Panel9.Visible = False Then
            TextBox_Title.Text = WorkingTvShow.Title.Value
            If TextBox_Title.Text.ToLower.IndexOf(", the") = TextBox_Title.Text.Length - 5 Then
                TextBox_Title.Text = "The " & TextBox_Title.Text.Substring(0, TextBox_Title.Text.Length - 5)
            End If
        Else
            TextBox_Title.Text = WorkingEpisode.Title.Value
        End If
    End Sub

    Private Sub TextBox_Title_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles TextBox_Title.Leave
        Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()

        Dim WorkingEpisode As TvEpisode = ep_SelectedCurrently()
        On Error Resume Next
        If Panel9.Visible = False Then
            '-------------- Aqui
            If Preferences.ignorearticle = True Then
                If TextBox_Title.Text.ToLower.IndexOf("the ") = 0 Then
                    TextBox_Title.Text = TextBox_Title.Text.Substring(4, TextBox_Title.Text.Length - 4) & ", The"
                End If
            End If
            WorkingTvShow.Title.Value = TextBox_Title.Text
        Else
            WorkingEpisode.Title.Value = TextBox_Title.Text
            Dim trueseason As String = WorkingEpisode.Season.Value
            Dim trueepisode As String = WorkingEpisode.Episode.Value
            If trueseason.Length = 1 Then trueseason = "0" & trueseason
            If trueepisode.Length = 1 Then trueepisode = "0" & trueepisode
            TextBox_Title.Text = "S" & trueseason & "E" & trueepisode & " - " & WorkingEpisode.Title.Value
        End If
    End Sub

    Private Sub Button_Save_TvShow_Episode_From_Form(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button_Save_TvShow_Episode.Click  'save button
        Try
            Dim Show As Media_Companion.TvShow = Nothing
            Dim Season As Media_Companion.TvSeason = Nothing
            Dim Episode As Media_Companion.TvEpisode = Nothing
            If TvTreeview.SelectedNode IsNot Nothing Then
                If TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvShow Then
                    Show = TvTreeview.SelectedNode.Tag
                ElseIf TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvEpisode Then
                    Episode = TvTreeview.SelectedNode.Tag
                ElseIf TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvSeason Then
                    Exit Sub
                    'Season = TvTreeview.SelectedNode.Tag
                    'Show = Season.GetParentShow
                Else
                    Exit Sub
                End If
            Else
                Exit Sub
            End If

            Dim tempint As Integer = 0
            Dim tempstring As String = ""
            If Show IsNot Nothing Then
                Dim changed As Integer = 0
                If Utilities.ReplaceNothing(Show.TvdbId.Value) <> TextBox9.Text Then
                    changed += 1
                End If
                If Utilities.ReplaceNothing(Show.ImdbId.Value).ToLower <> TextBox12.Text.ToLower Then
                    changed += 2
                End If
                If changed > 0 Then
                    If changed = 1 Then
                        tempint = MessageBox.Show("It appears that you have changed the TVDB ID" & vbCrLf & "Media Companion depends on this ID for scraping episodes and art" & vbCrLf & vbCrLf & "Are you sure you wish to continue and save this?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
                        If tempint = DialogResult.No Then
                            Exit Sub
                        End If
                    ElseIf changed = 2 Then
                        tempint = MessageBox.Show("It appears that you have changed the IMDB ID" & vbCrLf & "Media Companion depends on this ID for scraping actors from IMDB" & vbCrLf & vbCrLf & "Are you sure you wish to continue and save this?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
                        If tempint = DialogResult.No Then
                            Exit Sub
                        End If
                    ElseIf changed = 3 Then
                        tempint = MessageBox.Show("It appears that you have changed the IMDB ID & TVDB ID" & vbCrLf & "Media Companion depends on these IDs being correct for a number of scraping operations" & vbCrLf & vbCrLf & "Are you sure you wish to continue and save this?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
                        If tempint = DialogResult.No Then
                            Exit Sub
                        End If
                    End If
                End If
                'its a tvshow
                If TextBox_Title.Text.ToLower.IndexOf(", the") = TextBox_Title.Text.Length - 5 And TextBox_Title.Text.Length > 5 Then
                    Show.Title.Value = "The " & TextBox_Title.Text.Substring(0, TextBox_Title.Text.Length - 5)
                Else
                    Show.Title.Value = TextBox_Title.Text
                End If
                Show.Plot.Value = TextBox19.Text
                Show.Runtime.Value = TextBox15.Text
                Show.Premiered.Value = TextBox10.Text
                Show.Studio.Value = TextBox16.Text
                Show.Rating.Value = TextBox13.Text
                Show.ImdbId.Value = TextBox12.Text
                Show.TvdbId.Value = TextBox9.Text
                Show.Mpaa.Value = TextBox14.Text

                Show.Save()
                Show.UpdateTreenode()

            Else
                'its an episode
                Dim trueseason As String = Utilities.PadNumber(Episode.Season.Value, 2)
                Dim trueepisode As String = Utilities.PadNumber(Episode.Episode.Value, 2)
                tempstring = "S" & trueseason & "E" & trueepisode & " - "
                'Episode.Title.Value = TextBox_Title.Text.Replace(tempstring, "")           'title is the only thing we don't change - on Form1 the textbox cannot be edited anyway
                Episode.Plot.Value = TextBox_Plot.Text
                Episode.Aired.Value = TextBox_Aired.Text
                Episode.Rating.Value = TextBox_Rating.Text

                Episode.Save()
                Episode.UpdateTreenode()
            End If

        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Sub tv_Rescrape() 'Panel9 visibility indicates which is selected - a tvshow or an episode
       
        Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
        Dim WorkingEpisode As TvEpisode = ep_SelectedCurrently()

        Dim tempint As Integer = 0
        Dim tempstring As String = ""

        If IsNothing(WorkingTvShow.TvdbId.Value) = True Then
            WorkingTvShow.TvdbId.Value = ""
        End If

        If WorkingTvShow.TvdbId.Value.IndexOf("tt").Equals(0) Then tv_IMDbID_detected = True
        If Panel9.Visible = False Then 'i.e. rescrape selected TVSHOW else rescrape selected EPISODE
            'its a tv show
            tempint = MessageBox.Show("Rescraping the TV Show will Overwrite all the current details" & vbCrLf & "Do you wish to continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
            If tempint = DialogResult.No Then
                Exit Sub
            End If
            Dim messbox As frmMessageBox = New frmMessageBox("The Selected TV Show is being Rescraped", "", "Please Wait")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            messbox.Refresh()
            Application.DoEvents()
            Dim langu As String = WorkingTvShow.Language.Value
            If langu = "" Then langu = "en"


            If Preferences.tvshow_useXBMC_Scraper = True Then

                Dim TVShowNFOContent As String = XBMCScrape_TVShow_General_Info("metadata.tvdb.com", WorkingTvShow.TvdbId.Value, langu, WorkingTvShow.NfoFilePath)
                If TVShowNFOContent <> "error" Then CreateMovieNfo(WorkingTvShow.NfoFilePath, TVShowNFOContent)
                Call tv_ShowLoad(WorkingTvShow)
                For Each item As TvShow In Cache.TvCache.Shows
                    If item.NfoFilePath = WorkingTvShow.NfoFilePath Then
                        Dim newitem As New TvShow
                        For Each episode In item.Episodes
                            newitem.AddEpisode(episode)
                        Next
                        newitem.NfoFilePath = item.NfoFilePath
                        newitem.Status.Value = "ok"
                        newitem.EpisodeActorSource = item.EpisodeActorSource
                        newitem.Genre = WorkingTvShow.Genre
                        newitem.ImdbId = WorkingTvShow.ImdbId
                        newitem.Language = WorkingTvShow.Language
                        newitem.Rating = WorkingTvShow.Rating
                        newitem.SortOrder = WorkingTvShow.SortOrder
                        newitem.Title = WorkingTvShow.Title
                        'newitem.titleandyear = item.titleandyear
                        newitem.TvdbId = WorkingTvShow.TvdbId
                        newitem.Year = WorkingTvShow.Year
                        'TvShows.Remove(item)
                        'TvShows.Add(newitem)
                        'Call populatetvtree()
                        Exit For
                    End If
                Next
                messbox.Close()
                TabControl3.SelectedIndex = 0
                Exit Sub
            Else

                'Dim tvdbstuff As New TVDB.tvdbscraper 'commented because of removed TVDB.dll
                Dim tvdbstuff As New TVDBScraper
                Dim tvshowxmlstring As String = tvdbstuff.GetShow(WorkingTvShow.TvdbId.Value, langu)
                If tvshowxmlstring = "!!!Error!!!" Then
                    MsgBox("Error scraping show")
                    messbox.Hide()
                    Return
                End If
                Dim showlist As New XmlDocument
                showlist.LoadXml(tvshowxmlstring)
                WorkingTvShow.clearActors()
                Dim thisresult As XmlNode = Nothing
                Dim maxcount As Integer = 0
                For Each thisresult In showlist("fulltvshow")
                    Select Case thisresult.Name
                        Case "title"
                            WorkingTvShow.Title.Value = thisresult.InnerText
                        Case "mpaa"
                            WorkingTvShow.Mpaa.Value = thisresult.InnerText
                        Case "premiered"
                            WorkingTvShow.Premiered.Value = thisresult.InnerText
                        Case "genre"
                            Dim newstring As String
                            newstring = thisresult.InnerText
                            newstring = newstring.TrimEnd("|")
                            newstring = newstring.TrimStart("|")
                            newstring = newstring.Replace("|", " / ")
                            WorkingTvShow.Genre.Value = newstring
                        Case "imdbid"
                            WorkingTvShow.ImdbId.Value = thisresult.InnerText
                        Case "studio"
                            WorkingTvShow.Studio.Value = thisresult.InnerText
                        Case "plot"
                            WorkingTvShow.Plot.Value = thisresult.InnerText
                        Case "rating"
                            WorkingTvShow.Rating.Value = thisresult.InnerText
                        Case "runtime"
                            WorkingTvShow.Runtime.Value = thisresult.InnerText
                        Case "episodeguideurl"
                            WorkingTvShow.EpisodeGuideUrl.Value = ""
                            WorkingTvShow.Url.Value = thisresult.InnerText
                            WorkingTvShow.Url.Node.SetAttributeValue("cache", WorkingTvShow.TvdbId.Value)
                            WorkingTvShow.Url.AttachToParentNode(WorkingTvShow.EpisodeGuideUrl.Node)
                        Case "actor"
                            If maxcount >= Preferences.maxactors Then
                                Exit For
                            End If
                            maxcount += 1
                            Dim id As String = ""
                            Dim acts As New str_MovieActors(SetDefaults)
                            Dim results As XmlNode = Nothing
                            Dim lan As New str_PossibleShowList(SetDefaults)

                            For Each results In thisresult.ChildNodes
                                Select Case results.Name
                                    Case "name"
                                        acts.actorname = results.InnerText
                                    Case "role"
                                        Dim newstring As String
                                        newstring = results.InnerText
                                        newstring = newstring.TrimEnd("|")
                                        newstring = newstring.TrimStart("|")
                                        newstring = newstring.Replace("|", ", ")
                                        acts.actorrole = newstring
                                    Case "thumb"
                                        acts.actorthumb = results.InnerText
                                    Case "actorid"
                                        id = results.InnerText
                                End Select
                            Next

                            If acts.actorthumb <> Nothing Then
                                If acts.actorthumb <> "" And Preferences.actorseasy = True Then
                                    If WorkingTvShow.TvShowActorSource.Value <> "imdb" Or WorkingTvShow.ImdbId = Nothing Then
                                        Dim workingpath As String = WorkingTvShow.NfoFilePath.Replace(IO.Path.GetFileName(WorkingTvShow.NfoFilePath), "")
                                        workingpath = workingpath & ".actors\"
                                        Dim hg As New IO.DirectoryInfo(workingpath)
                                        Dim destsorted As Boolean = False
                                        If Not hg.Exists Then
                                            Try
                                                IO.Directory.CreateDirectory(workingpath)
                                                destsorted = True
                                            Catch ex As Exception
#If SilentErrorScream Then
                                                Throw ex
#End If
                                            End Try
                                        Else
                                            destsorted = True
                                        End If
                                        If destsorted = True Then
                                            Dim filename As String = acts.actorname.Replace(" ", "_")
                                            filename = filename & ".tbn"
                                            filename = IO.Path.Combine(workingpath, filename)
                                            Utilities.DownloadFile(acts.actorthumb, filename)
                                            If Preferences.EdenEnabled And Preferences.FrodoEnabled Then
                                                Utilities.SafeCopyFile(filename, filename.Replace(".tbn", ".jpg"), Preferences.overwritethumbs)
                                            ElseIf Preferences.FrodoEnabled And Not Preferences.EdenEnabled Then
                                                Utilities.SafeCopyFile(filename, filename.Replace(".tbn", ".jpg"), Preferences.overwritethumbs)
                                                Utilities.SafeDeleteFile(filename)
                                            End If
                                        End If
                                    End If
                                End If
                                If Preferences.actorsave = True And id <> "" And Preferences.actorseasy = False Then
                                    Dim workingpath As String = ""
                                    Dim networkpath As String = Preferences.actorsavepath
                                    Try
                                        tempstring = networkpath & "\" & id.Substring(id.Length - 2, 2)
                                        Dim hg As New IO.DirectoryInfo(tempstring)
                                        If Not hg.Exists Then
                                            IO.Directory.CreateDirectory(tempstring)
                                        End If
                                        workingpath = networkpath & "\" & id.Substring(id.Length - 2, 2) & "\tv" & id & ".jpg"
                                        If Not IO.File.Exists(workingpath) Then
                                            Utilities.DownloadFile(acts.actorthumb, workingpath)
                                            If Preferences.EdenEnabled And Preferences.FrodoEnabled Then
                                                Utilities.SafeCopyFile(workingpath, workingpath.Replace(".tbn", ".jpg"), Preferences.overwritethumbs)
                                            ElseIf Preferences.FrodoEnabled And Not Preferences.EdenEnabled Then
                                                Utilities.SafeCopyFile(workingpath, workingpath.Replace(".tbn", ".jpg"), Preferences.overwritethumbs)
                                                Utilities.SafeDeleteFile(workingpath)
                                            End If
                                        End If
                                        acts.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, id.Substring(id.Length - 2, 2))
                                        If Preferences.actornetworkpath.IndexOf("/") <> -1 Then
                                            acts.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, id.Substring(id.Length - 2, 2) & "/tv" & id & ".jpg")
                                        Else
                                            acts.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, id.Substring(id.Length - 2, 2) & "\tv" & id & ".jpg")
                                        End If

                                    Catch ex As Exception
#If SilentErrorScream Then
                                        Throw ex
#End If
                                    End Try
                                End If
                            End If
                            Dim exists As Boolean = False
                            For Each actors In WorkingTvShow.ListActors
                                If actors.actorname = acts.actorname And actors.actorrole = acts.actorrole Then
                                    exists = True
                                End If
                            Next
                            If exists = False Then
                                WorkingTvShow.ListActors.Add(acts)
                            End If
                    End Select
                Next
                If WorkingTvShow.TvShowActorSource.Value = "imdb" And WorkingTvShow.ImdbId <> Nothing Then
                    WorkingTvShow.clearActors()
                    '                    Dim imdbscraper As New imdb.Classimdbscraper
                    Dim imdbscraper As New Classimdb
                    Dim actorlist As String
                    Dim actorstring As New XmlDocument
                    actorlist = imdbscraper.getimdbactors(Preferences.imdbmirror, WorkingTvShow.ImdbId.Value)
                    Try
                        actorstring.LoadXml(actorlist)
                        thisresult = Nothing
                        Dim actorcount As Integer = 0
                        For Each thisresult In actorstring("actorlist")
                            Select Case thisresult.Name
                                Case "actor"
                                    If actorcount > Preferences.maxactors Then
                                        Exit For
                                    End If
                                    actorcount += 1
                                    Dim newactor As New str_MovieActors(SetDefaults)
                                    Dim detail As XmlNode = Nothing
                                    For Each detail In thisresult.ChildNodes
                                        Select Case detail.Name
                                            Case "name"
                                                newactor.actorname = detail.InnerText
                                            Case "role"
                                                newactor.actorrole = detail.InnerText
                                            Case "thumb"
                                                newactor.actorthumb = GetActorThumb(detail.InnerText)
                                            Case "actorid"
                                                If newactor.actorthumb <> Nothing Then
                                                    If detail.InnerText <> "" And Preferences.actorseasy = True Then
                                                        Dim workingpath As String = WorkingTvShow.NfoFilePath.Replace(IO.Path.GetFileName(WorkingTvShow.NfoFilePath), "")
                                                        workingpath = workingpath & ".actors\"
                                                        Dim hg As New IO.DirectoryInfo(workingpath)
                                                        Dim destsorted As Boolean = False
                                                        If Not hg.Exists Then
                                                            Try
                                                                IO.Directory.CreateDirectory(workingpath)
                                                                destsorted = True
                                                            Catch ex As Exception
#If SilentErrorScream Then
                                                                Throw ex
#End If
                                                            End Try
                                                        Else
                                                            destsorted = True
                                                        End If
                                                        If destsorted = True Then
                                                            Dim filename As String = newactor.actorname.Replace(" ", "_")
                                                            filename = filename & ".tbn"
                                                            filename = IO.Path.Combine(workingpath, filename)
                                                            Utilities.DownloadFile(newactor.actorthumb, filename)
                                                        End If
                                                    End If
                                                    If Preferences.actorsave = True And detail.InnerText <> "" And Preferences.actorseasy = False Then
                                                        Dim workingpath As String = ""
                                                        Dim networkpath As String = Preferences.actorsavepath
                                                        Try
                                                            tempstring = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2)
                                                            Dim hg As New IO.DirectoryInfo(tempstring)
                                                            If Not hg.Exists Then
                                                                IO.Directory.CreateDirectory(tempstring)
                                                            End If
                                                            workingpath = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                            If Not IO.File.Exists(workingpath) Then
                                                                Utilities.DownloadFile(newactor.actorthumb, workingpath)
                                                            End If
                                                            newactor.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, detail.InnerText.Substring(detail.InnerText.Length - 2, 2))
                                                            If Preferences.actornetworkpath.IndexOf("/") <> -1 Then
                                                                newactor.actorthumb = Preferences.actornetworkpath & "/" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "/" & detail.InnerText & ".jpg"
                                                            Else
                                                                newactor.actorthumb = Preferences.actornetworkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                            End If
                                                        Catch ex As Exception
#If SilentErrorScream Then
                                                            Throw ex
#End If
                                                        End Try
                                                    End If
                                                End If
                                        End Select
                                    Next
                                    WorkingTvShow.ListActors.Add(newactor)
                            End Select
                        Next
                        scraperLog = scraperLog & "Actors scraped OK"
                        While WorkingTvShow.ListActors.Count > Preferences.maxactors
                            WorkingTvShow.ListActors.RemoveAt(WorkingTvShow.ListActors.Count - 1)
                        End While
                    Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                    End Try

                End If
                Call nfoFunction.tv_NfoSave(WorkingTvShow.NfoFilePath, WorkingTvShow, True)
                Call tv_ShowLoad(WorkingTvShow)
                For Each item In Cache.TvCache.Shows
                    If item.NfoFilePath = WorkingTvShow.NfoFilePath Then
                        Dim newitem As New TvShow
                        For Each episode In item.Episodes
                            newitem.AddEpisode(episode)
                        Next
                        newitem.NfoFilePath = item.NfoFilePath
                        newitem.Status.Value = "ok"
                        newitem.EpisodeActorSource = item.EpisodeActorSource
                        newitem.Genre = WorkingTvShow.Genre
                        newitem.ImdbId = WorkingTvShow.ImdbId
                        newitem.Language = WorkingTvShow.Language
                        newitem.Rating = WorkingTvShow.Rating
                        newitem.SortOrder = WorkingTvShow.SortOrder
                        newitem.Title = WorkingTvShow.Title
                        'newitem.titleandyear = item.titleandyear
                        newitem.TvdbId = WorkingTvShow.TvdbId
                        newitem.Year = WorkingTvShow.Year
                        'TvShows.Remove(item)
                        'TvShows.Add(newitem)
                        'Call populatetvtree()
                        Exit For
                    End If
                Next
                messbox.Close()
            End If
        Else
            'its an episode
            tempint = MessageBox.Show("Rescraping the Episode will Overwrite all the current details" & vbCrLf & "Do you wish to continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
            If tempint = DialogResult.No Then
                Exit Sub
            End If
            Dim messbox As frmMessageBox = New frmMessageBox("The Selected Episode is being Rescraped", "", "Please Wait")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            messbox.Refresh()
            Application.DoEvents()
            Dim newepisode As New TvEpisode
            Dim sortorder As String = WorkingTvShow.SortOrder.Value
            Dim language As String = WorkingTvShow.Language.Value
            Dim actorsource As String = WorkingTvShow.EpisodeActorSource.Value
            Dim tvdbid As String = WorkingTvShow.TvdbId.Value
            Dim imdbid As String = WorkingTvShow.ImdbId.Value
            Dim seasonno As String = WorkingEpisode.Season.Value
            Dim episodeno As String = WorkingEpisode.Episode.Value

            newepisode.NfoFilePath = WorkingEpisode.NfoFilePath
            newepisode.Season.Value = WorkingEpisode.Season.Value
            newepisode.Episode.Value = WorkingEpisode.Episode.Value

            'its an episode
            'Dim episodescraper As New TVDB.tvdbscraper 'commented because of removed TVDB.dll
            Dim episodescraper As New TVDBScraper
            If sortorder = "" Then sortorder = "default"
            If language = "" Then language = "en"
            If actorsource = "" Then actorsource = "tvdb"
            If tvdbid.IndexOf("tt").Equals(0) Then tv_IMDbID_detected = True
            Dim tempepisode As String = episodescraper.getepisode(tvdbid, sortorder, seasonno, episodeno, language)

            If tempepisode.Contains("ERROR") Then


                Dim chunkSize As Integer = 40
                Dim chunkSize2 As Integer = 1
                Dim loops As Integer = Math.Round(tempepisode.Length / chunkSize)
                Dim finalString As String = ""

                For i = 0 To loops
                    If i * chunkSize + chunkSize > tempepisode.Length Then
                        chunkSize2 = tempepisode.Length - i * chunkSize
                    Else
                        chunkSize2 = chunkSize
                    End If
                    finalString += tempepisode.Substring(i * chunkSize, chunkSize2) & vbCrLf
                Next




                MsgBox("TVDB reported the following error" & vbCrLf & finalString, MsgBoxStyle.OkOnly, "ERROR!")
                messbox.Close()
                Exit Sub
            End If
            Dim scrapedepisode As New XmlDocument
            Try
                scrapedepisode.LoadXml(tempepisode)
                Dim thisresult As XmlNode = Nothing
                For Each thisresult In scrapedepisode("episodedetails")
                    Select Case thisresult.Name
                        Case "title"
                            newepisode.Title.Value = thisresult.InnerText
                        Case "premiered"
                            newepisode.Aired.Value = thisresult.InnerText
                        Case "plot"
                            newepisode.Plot.Value = thisresult.InnerText
                        Case "director"
                            newepisode.Director.Value = thisresult.InnerText
                            newepisode.Director.Value = newepisode.Director.Value.TrimStart("|")
                            newepisode.Director.Value = newepisode.Director.Value.TrimEnd("|")
                            newepisode.Director.Value = newepisode.Director.Value.Replace("|", " / ")
                        Case "credits"
                            newepisode.Credits.Value = thisresult.InnerText
                            newepisode.Credits.Value = newepisode.Credits.Value.TrimStart("|")
                            newepisode.Credits.Value = newepisode.Credits.Value.TrimEnd("|")
                            newepisode.Credits.Value = newepisode.Credits.Value.Replace("|", " / ")
                        Case "rating"
                            newepisode.Rating.Value = thisresult.InnerText
                        Case "thumb"
                            newepisode.Thumbnail.FileName = thisresult.InnerText
                        Case "genre"
                            newepisode.Genre.Value = thisresult.InnerText
                        Case "actor"
                            Dim actors As XmlNode = Nothing
                            For Each actorl In thisresult.ChildNodes
                                Select Case actorl.name
                                    Case "name"
                                        Dim newactor As New str_MovieActors(SetDefaults)
                                        newactor.actorname = actorl.innertext
                                        newepisode.ListActors.Add(newactor)
                                End Select
                            Next
                    End Select
                Next
                newepisode.PlayCount.Value = "0"
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try

            If actorsource = "tvdb" Then
                If newepisode.ListActors.Count > 0 Then
                    WorkingTvShow.ListActors.Clear() 'Possibly doesn't need to use WorkingTvShow.clearActor() as the NFO is created "manually"
                    For Each act In newepisode.ListActors
                        WorkingTvShow.ListActors.Add(act)
                    Next
                End If
            ElseIf imdbid <> "" Then
                tvScraperLog = tvScraperLog & "Scraping actors from IMDB" & vbCrLf
                Dim url As String
                url = "http://www.imdb.com/title/" & imdbid & "/episodes"
                Dim tvfblinecount As Integer = 0
                Dim tvdbwebsource(10000)
                tvfblinecount = 0
                If bckgroundscanepisodes.CancellationPending Then
                    tvScraperLog = tvScraperLog & vbCrLf & "Operation Cancelled by user" & vbCrLf
                    Exit Sub
                End If
                Try
                    Dim wrGETURL As WebRequest
                    wrGETURL = WebRequest.Create(url)
                    Dim myProxy As New WebProxy("myproxy", 80)
                    myProxy.BypassProxyOnLocal = True
                    Dim objStream As Stream
                    objStream = wrGETURL.GetResponse.GetResponseStream()
                    Dim objReader As New StreamReader(objStream)
                    Dim tvdbsLine As String = ""
                    tvfblinecount = 0

                    Do While Not tvdbsLine Is Nothing
                        tvfblinecount += 1
                        tvdbsLine = objReader.ReadLine
                        If Not tvdbsLine Is Nothing Then
                            tvdbwebsource(tvfblinecount) = tvdbsLine
                        End If
                        If bckgroundscanepisodes.CancellationPending Then
                            tvScraperLog = tvScraperLog & vbCrLf & "Operation Cancelled by user" & vbCrLf
                            Exit Sub
                        End If
                    Loop
                    objReader.Close()
                    tvfblinecount -= 1
                Catch ex As WebException
                    tvdbwebsource(0) = "404"
                End Try
                If tvfblinecount <> 0 Then
                    Dim tvtempstring As String
                    tvtempstring = "Season " & seasonno & ", Episode " & episodeno & ":"
                    For g = 1 To tvfblinecount
                        If tvdbwebsource(g).indexof(tvtempstring) <> -1 Then
                            Dim tvtempint As Integer = 0
                            tvtempint = tvdbwebsource(g).indexof("<a href=""/title/")
                            If tvtempint <> -1 Then
                                tvtempstring = tvdbwebsource(g).substring(tvtempint + 16, 9)
                                '            Dim scraperfunction As New imdb.Classimdbscraper ' add to comment this one because of changes i made to the Class "Scraper" (ClassimdbScraper)
                                Dim scraperfunction As New Classimdb
                                Dim actorlist As String = ""
                                actorlist = scraperfunction.getimdbactors(Preferences.imdbmirror, tvtempstring, , Preferences.maxactors)
                                Dim tempactorlist As New List(Of str_MovieActors)
                                Dim thumbstring As New XmlDocument
                                Dim thisresult As XmlNode = Nothing
                                Try
                                    thumbstring.LoadXml(actorlist)
                                    thisresult = Nothing
                                    Dim actorcount As Integer = 0
                                    For Each thisresult In thumbstring("actorlist")
                                        If bckgroundscanepisodes.CancellationPending Then
                                            tvScraperLog = tvScraperLog & vbCrLf & "Operation Cancelled by user" & vbCrLf
                                            Exit Sub
                                        End If
                                        Select Case thisresult.Name
                                            Case "actor"
                                                If actorcount > Preferences.maxactors Then
                                                    Exit For
                                                End If
                                                actorcount += 1

                                                Dim newactor As New str_MovieActors(SetDefaults)
                                                Dim detail As XmlNode = Nothing
                                                For Each detail In thisresult.ChildNodes
                                                    Select Case detail.Name
                                                        Case "name"
                                                            newactor.actorname = detail.InnerText
                                                        Case "role"
                                                            newactor.actorrole = detail.InnerText
                                                        Case "thumb"
                                                            newactor.actorthumb = GetActorThumb(detail.InnerText)
                                                        Case "actorid"
                                                            If newactor.actorthumb <> Nothing Then
                                                                If detail.InnerText <> "" And Preferences.actorseasy = True Then
                                                                    Dim workingpath As String = WorkingEpisode.NfoFilePath.Replace(IO.Path.GetFileName(WorkingEpisode.NfoFilePath), "")
                                                                    workingpath = workingpath & ".actors\"
                                                                    Dim hg As New IO.DirectoryInfo(workingpath)
                                                                    Dim destsorted As Boolean = False
                                                                    If Not hg.Exists Then
                                                                        Try
                                                                            IO.Directory.CreateDirectory(workingpath)
                                                                            destsorted = True
                                                                        Catch ex As Exception
#If SilentErrorScream Then
                                                                            Throw ex
#End If
                                                                        End Try
                                                                    Else
                                                                        destsorted = True
                                                                    End If
                                                                    If destsorted = True Then
                                                                        Dim filename As String = newactor.actorname.Replace(" ", "_")
                                                                        filename = filename & ".tbn"
                                                                        Dim tvshowactorpath As String = WorkingTvShow.NfoFilePath
                                                                        tvshowactorpath = tvshowactorpath.Replace(IO.Path.GetFileName(tvshowactorpath), "")
                                                                        tvshowactorpath = IO.Path.Combine(tvshowactorpath, ".actors\")
                                                                        tvshowactorpath = IO.Path.Combine(tvshowactorpath, filename)

                                                                        filename = IO.Path.Combine(workingpath, filename)
                                                                        If Preferences.copytvactorthumbs = True Then
                                                                            If IO.File.Exists(tvshowactorpath) Then
                                                                                Try
                                                                                    IO.File.Copy(tvshowactorpath, filename, True)
                                                                                Catch ex As Exception
#If SilentErrorScream Then
                                                                                    Throw ex
#End If
                                                                                End Try
                                                                            End If
                                                                        End If
                                                                        If Not IO.File.Exists(filename) Then
                                                                            Utilities.DownloadFile(newactor.actorthumb, filename)
                                                                        End If
                                                                    End If
                                                                End If
                                                                If Preferences.actorsave = True And detail.InnerText <> "" And Preferences.actorseasy = False Then
                                                                    Dim workingpath As String = ""
                                                                    Dim networkpath As String = Preferences.actorsavepath
                                                                    Try
                                                                        tempstring = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2)
                                                                        Dim hg As New IO.DirectoryInfo(tempstring)
                                                                        If Not hg.Exists Then
                                                                            IO.Directory.CreateDirectory(tempstring)
                                                                        End If
                                                                        workingpath = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                                        If Not IO.File.Exists(workingpath) Then
                                                                            Utilities.DownloadFile(newactor.actorthumb, workingpath)
                                                                        End If
                                                                        newactor.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, detail.InnerText.Substring(detail.InnerText.Length - 2, 2))
                                                                        If Preferences.actornetworkpath.IndexOf("/") <> -1 Then
                                                                            newactor.actorthumb = Preferences.actornetworkpath & "/" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "/" & detail.InnerText & ".jpg"
                                                                        Else
                                                                            newactor.actorthumb = Preferences.actornetworkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                                        End If
                                                                    Catch ex As Exception
#If SilentErrorScream Then
                                                                        Throw ex
#End If
                                                                    End Try
                                                                End If
                                                            End If
                                                    End Select
                                                Next
                                                tempactorlist.Add(newactor)
                                        End Select
                                    Next
                                Catch ex As Exception
                                    tvScraperLog = tvScraperLog & "Error scraping episode actors from IMDB, " & vbCrLf & ex.Message.ToString & vbCrLf & vbCrLf
                                End Try




                                If tempactorlist.Count > 0 Then
                                    While tempactorlist.Count > Preferences.maxactors
                                        tempactorlist.RemoveAt(tempactorlist.Count - 1)
                                    End While
                                    newepisode.ListActors.Clear()
                                    For Each actor In tempactorlist
                                        newepisode.ListActors.Add(actor)
                                    Next
                                    tempactorlist.Clear()
                                End If
                                Exit For
                            End If
                        End If
                    Next
                End If
            End If
            'If newepisode.Title.Value <> "" Then
            '    WorkingEpisode.Aired.Value = newepisode.Aired.Value
            '    WorkingEpisode.Credits.Value = newepisode.Credits.Value
            '    WorkingEpisode.Director.Value = newepisode.Director.Value
            '    WorkingEpisode.Genre.Value = newepisode.Genre.Value
            '    WorkingEpisode.Plot.Value = newepisode.Plot.Value
            '    WorkingEpisode.Rating.Value = newepisode.Rating.Value
            '    WorkingEpisode.Title.Value = newepisode.Title.Value
            '    WorkingEpisode.ListActors.Clear()
            '    For Each actor In newepisode.ListActors
            '        WorkingEpisode.ListActors.Add(actor)
            '    Next

            If Preferences.enablehdtags = True Then
                'newepisode.Details.  = Preferences.Get_HdTags(Utilities.GetFileName(WorkingEpisode.VideoFilePath)).filedetails_video
                Dim fileStreamDetails As FullFileDetails = Preferences.Get_HdTags(Utilities.GetFileName(WorkingEpisode.VideoFilePath))
                newepisode.Details.StreamDetails.Video = fileStreamDetails.filedetails_video
                For Each audioStream In fileStreamDetails.filedetails_audio
                    newepisode.Details.StreamDetails.Audio.Add(audioStream)
                Next
                If newepisode.Details.StreamDetails.Video.DurationInSeconds.Value <> Nothing Then
                    Try
                        '1h 24mn 48s 546ms
                        'Dim hours As Integer = 0
                        'Dim minutes As Integer = 0
                        tempstring = newepisode.Details.StreamDetails.Video.DurationInSeconds.Value
                        'tempint = tempstring.IndexOf("h")
                        'If tempint <> -1 Then
                            'hours = Convert.ToInt32(tempstring.Substring(0, tempint))
                            'tempstring = tempstring.Substring(tempint + 1, tempstring.Length - (tempint + 1))
                            'tempstring = Trim(tempstring)
                        'End If
                        'tempint = tempstring.IndexOf("mn")
                        'If tempint <> -1 Then
                            'minutes = Convert.ToInt32(tempstring.Substring(0, tempint))
                        'End If
                        'If hours <> 0 Then
                            'hours = hours * 60
                            'minutes = minutes + hours
                        'End If
                        If Preferences.intruntime Then
                            newepisode.Runtime.Value = Math.Round(tempstring/60).ToString
                        Else
                            newepisode.Runtime.Value = Math.Round(tempstring/60).ToString & " min"
                        End If
                        
                    Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                    End Try
                End If
            End If
            'Call nfoFunction.saveepisodenfo(workingEpisode, workingEpisode(0).VideoFilePath)
            'Call loadtvepisode(workingEpisode(workingEpisodeIndex).VideoFilePath, workingEpisode(workingEpisodeIndex).Season.value, workingEpisode(workingEpisodeIndex).episodeno)
            'newepisode.Save()  'this function doesn't save the video/audio stream details, have to revert to the old method.
            Dim eps As New List(Of Media_Companion.TvEpisode)
            eps.Add(newepisode)
            Call nfoFunction.saveepisodenfo(eps, newepisode.NfoFilePath)
            Dim fpath As String = newepisode.NfoFilePath
            Dim ext As String = fpath.Replace(IO.Path.GetExtension(fpath), ".tbn")
            Dim ext1 As String = fpath.Replace(IO.Path.GetExtension(fpath), ".tbn")
            Dim ext2 As String = fpath.Replace(IO.Path.GetExtension(fpath), "-thumb.jpg")
            Dim eden As Boolean = Preferences.EdenEnabled
            Dim frodo As Boolean = Preferences.FrodoEnabled
            Dim edenart As Boolean = IO.File.Exists(ext1)
            Dim frodoart As Boolean = IO.File.Exists(ext2)

            'eden = Preferences.EdenEnabled
            'frodo = Preferences.FrodoEnabled
            'ext = fpath.Replace(IO.Path.GetExtension(fpath), ".tbn")
            'ext1 = fpath.Replace(IO.Path.GetExtension(fpath), ".tbn")
            'ext2 = fpath.Replace(IO.Path.GetExtension(fpath), "-thumb.jpg")
            'edenart = IO.File.Exists(ext1)
            'frodoart = IO.File.Exists(ext2)

            If Not newepisode.Thumbnail.FileName = Nothing And newepisode.Thumbnail.FileName <> "http://www.thetvdb.com/banners/" And Not edenart And Not frodoart Then
                Dim url As String = newepisode.Thumbnail.FileName
                If url.IndexOf("http") = 0 And url.IndexOf(".jpg") <> -1 Then
                    If Utilities.DownloadFile(url, ext) Then
                        If Not eden And frodo Then
                            IO.File.Copy(ext, ext2)
                            IO.File.Delete(ext)
                        ElseIf eden And frodo Then
                            IO.File.Copy(ext, ext2)
                        End If
                    ElseIf (Not edenart And Not frodoart) And Preferences.autoepisodescreenshot = True Then
                        tvScraperLog = tvScraperLog & "No Episode Thumb, AutoCreating ScreenShot from Episodee" & vbCrLf
                        Call ep_ScreenShotDo(ext)
                    Else
                        tvScraperLog = tvScraperLog & "   ****   Unable to Download Episode Thumb  ****" & vbCrLf
                    End If
                End If
            ElseIf (Not edenart And Not frodoart) And Preferences.autoepisodescreenshot = True Then
                tvScraperLog = tvScraperLog & "No Episode Thumb, AutoCreating ScreenShot from Episode" & vbCrLf
                Call ep_ScreenShotDo(ext)
            ElseIf edenart Or frodoart Then
                If edenart And Not eden And Not frodoart Then
                    IO.File.Copy(ext, ext2)
                    IO.File.Delete(ext)
                ElseIf edenart And frodo And Not frodoart Then
                    IO.File.Copy(ext, ext2)
                ElseIf frodoart And Not frodo And Not edenart Then
                    IO.File.Copy(ext2, ext)
                    IO.File.Delete(ext2)
                ElseIf frodoart And eden And Not edenart Then
                    IO.File.Copy(ext2, ext)
                End If
            End If
            '''''Call LoadTvEpisode(WorkingEpisode)
            tv_EpisodeSelected(TvTreeview.SelectedNode.Tag) 'reload the episode after it has been rescraped
            messbox.Close()

        End If
        'End If
        'Tv_CacheSave()
        'tv_CacheLoad()
        'Dim show As String = WorkingTvShow.Title.Value
        tv_CacheRefresh(WorkingTvShow)


        If Not tv_IMDbID_warned And tv_IMDbID_detected Then
            MessageBox.Show(tv_IMDbID_detectedMsg, "TV Show ID", MessageBoxButtons.OK, MessageBoxIcon.Information)
            tv_IMDbID_warned = True
        End If

    End Sub

    Private Sub Button44_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button44.Click
        Try
            tv_Rescrape()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button45_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button45.Click
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()

            Dim TVShowNFOContent As String = ""
            If Button45.Text = "TVDB" Then
                If WorkingTvShow.ImdbId.Value<>"" Then
                    WorkingTvShow.TvShowActorSource.Value = "imdb"
                    Button45.Text = "IMDB"
                Else
                    MsgBox("No IMDB ID allocated to this Show!")
                End If
            Else
                WorkingTvShow.TvShowActorSource.Value = "tvdb"
                Button45.Text = "TVDB"
            End If
            WorkingTvShow.Save()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button46_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button46.Click
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
            Dim TVShowNFOContent As String = ""
            If Button46.Text = "TVDB" Then
                WorkingTvShow.EpisodeActorSource.Value = "imdb"
                Button46.Text = "IMDB"
            Else
                WorkingTvShow.EpisodeActorSource.Value = "tvdb"
                Button46.Text = "TVDB"
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button47_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button47.Click
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()

            Dim TVShowNFOContent As String = ""
            If Button47.Text = "Default" Then
                WorkingTvShow.SortOrder.Value = "dvd"
                Button47.Text = "DVD"
            Else
                WorkingTvShow.SortOrder.Value = "default"
                Button47.Text = "default"
            End If
            'Dim DiditWork As Boolean = CreateMovieNfo(workingTvShow.path, TVShowNFOContent)
            'If DiditWork = True Then


            '    For Each Shows In TvShows
            '        If WorkingTvShow.path = Shows.fullpath Then
            '            Dim newtv As New TvShow
            '            newtv = Shows
            '            If Button47.Text = "Default" Then
            '                newtv.sortorder = "default"
            '            Else
            '                newtv.sortorder = "dvd"
            '            End If
            '            TvShows.Remove(Shows)
            '            TvShows.Add(newtv)
            '            Exit For
            '        End If
            '    Next
            'End If
            '        Call nfofunction.savetvshownfo(workingtvshow.path, workingtvshow, True)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub RenameTVShowsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_RenameEp.Click
        
        Try
            Dim renamelog As String = ""
            Dim tempint As Integer = 0

            Dim oldname As String = ""

            Dim nfofilestorename As New List(Of String)
            nfofilestorename.Clear()
            Dim donelist As New List(Of String)
            donelist.Clear()
            If TvTreeview.SelectedNode.Name.IndexOf("Missing: ") <> 0 Then
                If TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvEpisode Then
                    'individual episode
                    tempint = MessageBox.Show("Using this option will rename the selected episode" & vbCrLf & "Do you wish to continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
                    If tempint = DialogResult.No Then
                        Exit Sub
                    End If
                    If Not nfofilestorename.Contains(TvTreeview.SelectedNode.Name) And TvTreeview.SelectedNode.Name.IndexOf("Missing: ") <> 0 Then
                        nfofilestorename.Add(TvTreeview.SelectedNode.Name)
                    End If
                ElseIf TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvSeason Then
                    'season
                    tempint = MessageBox.Show("Using this option will rename all episode nfo's within the selected season" & vbCrLf & "Do you wish to continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
                    If tempint = DialogResult.No Then
                        Exit Sub
                    End If
                    Dim childnode As TreeNode
                    For Each childnode In TvTreeview.SelectedNode.Nodes
                        If Not nfofilestorename.Contains(childnode.Name) And childnode.Name.IndexOf("Missing: ") <> 0 Then
                            nfofilestorename.Add(childnode.Name)
                        End If
                    Next
                ElseIf TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvShow Then
                    'full show
                    tempint = MessageBox.Show("Using this option will rename all episode nfo's within the selected show" & vbCrLf & "Do you wish to continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
                    If tempint = DialogResult.No Then
                        Exit Sub
                    End If
                    Dim childnode As TreeNode
                    Dim childchildnode As TreeNode
                    For Each childnode In TvTreeview.SelectedNode.Nodes
                        For Each childchildnode In childnode.Nodes
                            If Not nfofilestorename.Contains(childchildnode.Name) And childchildnode.Name.IndexOf("Missing: ") <> 0 Then
                                nfofilestorename.Add(childchildnode.Name)
                            End If
                        Next
                    Next
                End If
            End If

            Dim messbox As New frmMessageBox("Renaming episodes,", "", "   Please Wait")
            messbox.Show()
            messbox.Refresh()
            Application.DoEvents()
            If nfofilestorename.Count <= 0 Then
                messbox.Close()
                Exit Sub
            End If
            renamelog += "!!! " & nfofilestorename.Count & " nfo's to rename..." & vbCrLf & vbCrLf
            For Each renamefile In nfofilestorename
                Dim seasonno As String = ""
                Dim episodetitle As String = ""
                Dim showtitle As String = ""
                Dim episodeno As New List(Of String)
                episodeno.Clear()
                For Each tvshow In Cache.TvCache.Shows
                    Dim showpath As String = tvshow.NfoFilePath.Replace(IO.Path.GetFileName(tvshow.NfoFilePath), "")
                    If renamefile.IndexOf(showpath) <> -1 Then
                        showtitle = tvshow.Title.Value

                        If Preferences.ignorearticle = True Then
                            If showtitle.ToLower.IndexOf("the ") = 0 Then
                                showtitle = showtitle.Substring(4, showtitle.Length - 4) & ", The"
                            End If
                        End If

                        For Each episode In tvshow.Episodes
                            If episode.NfoFilePath = renamefile Then
                                If seasonno = "" Then
                                    seasonno = episode.Season.Value
                                End If
                                If episodetitle = "" Then
                                    episodetitle = episode.Title.Value
                                End If
                                episodeno.Add(episode.Episode.Value)
                            End If
                        Next
                        Dim newfilename As String
                        newfilename = ""
                        If seasonno.Length = 1 Then
                            seasonno = "0" & seasonno
                        End If
                        For f = 0 To episodeno.Count - 1
                            If episodeno(f).Length = 1 Then
                                episodeno(f) = "0" & episodeno(f)
                            End If
                        Next
                        newfilename = Renamer.setTVFilename(showtitle, episodetitle, episodeno, seasonno)

                        newfilename = newfilename.Replace("?", "")
                        newfilename = newfilename.Replace("/", "")
                        newfilename = newfilename.Replace("\", "")
                        newfilename = newfilename.Replace("<", "")
                        newfilename = newfilename.Replace(">", "")
                        newfilename = newfilename.Replace(":", "")
                        newfilename = newfilename.Replace("""", "")
                        newfilename = newfilename.Replace("*", "")
                        Dim listtorename As New List(Of String)
                        listtorename.Clear()
                        listtorename.Add(renamefile)
                        For Each ext In Utilities.VideoExtensions
                            If ext = "VIDEO_TS.IFO" Then Continue For
                            Dim temppath2 As String = renamefile.Replace(IO.Path.GetExtension(renamefile), ext)
                            If IO.File.Exists(temppath2) Then
                                listtorename.Add(temppath2)
                            End If
                        Next

                        Dim di As DirectoryInfo = New DirectoryInfo(renamefile.Replace(IO.Path.GetFileName(renamefile), ""))
                        Dim filenama As String = IO.Path.GetFileNameWithoutExtension(renamefile)
                        Dim fils As IO.FileInfo() = di.GetFiles(filenama & ".*")
                        For Each fiNext In fils
                            If Not listtorename.Contains(fiNext.FullName) Then
                                listtorename.Add(fiNext.FullName)
                            End If
                        Next

                        Dim temppath As String = renamefile
                        temppath = temppath.Replace(IO.Path.GetExtension(temppath), ".tbn")
                        If IO.File.Exists(temppath) Then
                            If Not listtorename.Contains(temppath) Then
                                listtorename.Add(temppath)
                            End If
                        End If

                        temppath = temppath.Replace(IO.Path.GetExtension(temppath), ".rar")
                        If IO.File.Exists(temppath) Then
                            If Not listtorename.Contains(temppath) Then
                                listtorename.Add(temppath)
                            End If
                        End If

                        temppath = temppath.Replace(IO.Path.GetExtension(temppath), "-thumb.jpg")
                        If IO.File.Exists(temppath) Then
                            If Not listtorename.Contains(temppath) Then
                                listtorename.Add(temppath)
                            End If
                        End If

                        Dim oldnfofile As String = ""
                        Dim newnfofile As String = ""
                        For Each items In listtorename
                            If IO.Path.GetExtension(items).ToLower = ".nfo" And oldnfofile = "" Then
                                oldnfofile = items
                                newnfofile = items.Replace(IO.Path.GetFileName(items), newfilename) & IO.Path.GetExtension(items)
                                'newnfofile = newnfofile.Replace("..", ".")
                            End If
                            Dim newname As String = items.Replace(filenama, newfilename)
                            'newname = newname.Replace("..", ".")
                            Try
                                renamelog += "!!! Renaming" & vbCrLf
                                renamelog += "!!! " & items & vbCrLf & "!!! to " & vbCrLf & "!!! " & newname & vbCrLf
                                Dim fi As New IO.FileInfo(items)
                                If Not IO.File.Exists(newname) Then
                                    fi.MoveTo(newname)
                                    If items.ToLower = IO.Path.Combine(TextBox17.Text, TextBox29.Text).ToLower Then
                                        TextBox29.Text = IO.Path.GetFileName(fi.FullName)
                                    End If
                                    renamelog += "!!! Succeeded" & vbCrLf & "!!! " & vbCrLf
                                Else
                                    renamelog += "!!! Not Renamed - Same" & vbCrLf & "!!! " & vbCrLf
                                End If

                            Catch ex As Exception
                                renamelog += "!!! *** Not Succeeded - Please rename all files manually!" & vbCrLf & "!!! Reported Message: " & ex.Message.ToString & vbCrLf
                            End Try
                            renamelog += "!!! " & vbCrLf
                        Next
                        renamelog += "!!! Updating Tables" & vbCrLf
                        Try
                            For Each noder2 In TvTreeview.Nodes
                                If noder2.name = oldnfofile Then
                                    noder2.name = newnfofile
                                End If
                                For Each noder3 In noder2.nodes
                                    If noder3.name = oldnfofile Then
                                        noder3.name = newnfofile
                                    End If
                                    For Each noder4 In noder3.nodes
                                        If noder4.name = oldnfofile Then
                                            noder4.name = newnfofile
                                        End If
                                    Next
                                Next
                            Next
                            For Each episode In tvshow.Episodes
                                If episode.NfoFilePath = oldnfofile Then
                                    episode.NfoFilePath = newnfofile
                                End If
                            Next
                            renamelog += "!!! Tables Updated" & vbCrLf & vbCrLf
                        Catch
                            renamelog += "!!! Failed to update tables, use 'Refresh TV Shows' menu item to fix" & vbCrLf & vbCrLf
                        End Try
                    End If
                Next
            Next
            Call Tv_CacheSave()
            messbox.Close()
            If Preferences.disabletvlogs = False Then
                Dim MyFormObject As New frmoutputlog(renamelog, True)
                Try
                    MyFormObject.ShowDialog()
                Catch ex As ObjectDisposedException

                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button48_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button48.Click
        Try
            Dim WorkingEpisode As TvEpisode = ep_SelectedCurrently()
            util_EpisodeSetWatched(WorkingEpisode.PlayCount.Value, True)
            WorkingEpisode.Save()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub tv_PosterSetup()

        Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
        Dim WorkingSeason As TvSeason = tv_SeasonSelectedCurrently()
        'If workingTvShow.tvdbid = currentposterid Then
        '    Exit Sub
        'End If
        tvposterpage = 0
        imdbposterlist.Clear()
        tvdbposterlist.Clear()
        rbTVposter.Checked = True
        rbTVposter.Enabled = False
        rbTVbanner.Enabled = False
        ComboBox2.Items.Clear()
        tvobjects.Clear()
        TextBox31.Text = WorkingTvShow.Title.Value
        Label72.Text = ""
        'If IO.File.Exists(workingtvshow.path.Replace("tvshow.nfo", "folder.jpg")) Then
        '    Dim bmp As New Bitmap(workingtvshow.path.Replace("tvshow.nfo", "folder.jpg"))
        '    PictureBox12.Image = bmp
        'End If
        For i = Panel16.Controls.Count - 1 To 0 Step -1
            Panel16.Controls.RemoveAt(i)
        Next

        ComboBox2.Items.Add("Main Image")
        ComboBox2.Items.Add("Season All")
        For Each tvshow In Cache.TvCache.Shows
            If tvshow.TvdbId = WorkingTvShow.TvdbId Then
                currentposterid = tvshow.TvdbId.Value
                For Each Season As Media_Companion.TvSeason In tvshow.Seasons.Values
                    For Each ep As Media_Companion.TvEpisode In Season.Episodes
                        Dim seasonstring As String = ""

                        If ep.Season.Value < 1 Then
                            seasonstring = "Specials"
                        Else
                            seasonstring = "Season " & Utilities.PadNumber(ep.Season.Value.ToString, 2)
                        End If

                        If Not ComboBox2.Items.Contains(seasonstring) Then
                            ComboBox2.Items.Add(seasonstring)
                        End If
                    Next
                Next
                Exit For
            End If
        Next

        ComboBox2.SelectedIndex = 0
        
        
        If Not WorkingSeason is Nothing then
            Dim ThisSeason As String = WorkingSeason.ToString 
            If ThisSeason = "Season 00" then ThisSeason = "Specials"
            For i=0 to ComboBox2.Items.Count
                ComboBox2.SelectedIndex = i
                If ComboBox2.text = ThisSeason Then
                    Exit For
                End If
            Next

        End If
        '        For Each item In tvobjects
        '            ComboBox2.Items.Add(item)
        '            If item = combostart Then
        '                Try
        '                    ComboBox2.SelectedIndex = ComboBox2.Items.Count - 1
        '                Catch ex As Exception
        '#If SilentErrorScream Then
        '                    Throw ex
        '#End If
        '                End Try
        '            End If
        '        Next

    End Sub

    Public Function BannerAndPosterViewer()
        Try
            Me.Panel16.Hide()
            Label72.Text = ""
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
            rbTVposter.Enabled = True
            rbTVbanner.Enabled = True
            Button53.Enabled = True
            Dim eden As Boolean = Preferences.EdenEnabled
            Dim frodo As Boolean = Preferences.FrodoEnabled
            Dim edenpath As String =""
            Dim frodopath As string =""
            Dim tempstring As String = ComboBox2.SelectedItem
            Dim bmp As Bitmap = Nothing
            Dim path As String = ""
            EdenImageTrue.Visible = False
            FrodoImageTrue.Visible=False
            If tempstring = "Main Image" Then
                If eden Then
                    path = WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "folder.jpg")
                    edenpath = path
                End If
                If frodo Then
                    If rbTVbanner.Checked = True Then
                        path = WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "banner.jpg")
                        frodopath = path
                    ElseIf rbTVposter.Checked = True Then
                        path = WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "poster.jpg")
                        frodopath = path
                    End If
                End If

            ElseIf tempstring = "Specials" Then
                If eden Then
                    path = WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "season-specials.tbn")
                    edenpath = path
                End If
                If frodo Then
                    If rbTVbanner.Checked = True Then
                        path = WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "season-specials-banner.jpg")
                        frodopath = path
                    ElseIf rbTVposter.Checked = True Then
                        path = WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "season-specials-poster.jpg")
                        frodopath = path
                    End If
                End If
            ElseIf tempstring.IndexOf("Season") = 0 And tempstring.IndexOf("Season All") = -1 Then
                path = tempstring.Replace("Season ", "")
                path = WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "season" & path & ".tbn")
                edenpath = path
                If frodo Then
                    If rbTVbanner.Checked = True Then
                        path = path.Replace(".tbn", "-banner.jpg")
                        frodopath = path
                    ElseIf rbTVposter.Checked = True Then
                        path = path.Replace(".tbn", "-poster.jpg")
                        frodopath = path
                    End If
                End If


            ElseIf tempstring = "Season All" Then
                Button53.Enabled = False
                If eden Then
                    path = WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "season-all.tbn")
                    edenpath = path
                End If
                If frodo Then
                    If rbTVbanner.Checked = True Then
                        path = WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "season-all-banner.jpg")
                        frodopath = path
                    ElseIf rbTVposter.Checked = True Then
                        path = WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "season-all-poster.jpg")
                        frodopath = path
                    End If
                End If
            End If

            If (eden and IO.File.Exists(edenpath)) or (frodo and IO.File.Exists(frodopath)) Then
                EdenImageTrue.Visible =False
                EdenImageTrue.Text = "Eden Image Present"
                FrodoImageTrue.Visible=False
                FrodoImageTrue.Text = "Frodo Image Present"
                ArtMode.Text=""
                If eden and Not frodo Then
                    bmp = New Bitmap(edenpath)
                    EdenImageTrue.Visible=true
                    FrodoImageTrue.Visible=false
                    ArtMode.Text="Pre-Frodo Enabled
                End If
                If frodo and Not eden then
                    bmp = New Bitmap(frodopath)
                    EdenImageTrue.Visible=false
                    FrodoImageTrue.Visible=True
                    ArtMode.Text="Frodo Enabled"
                End If
                If frodo and eden then
                    ArtMode.text="Both Enabled"
                    EdenImageTrue.Visible=True
                    FrodoImageTrue.Visible=True
                    If IO.File.Exists(edenpath) then 
                        bmp = New Bitmap(edenpath)
                        EdenImageTrue.Text = "Eden Image Present"
                    Else
                        EdenImageTrue.Text = "No Eden Image
                    End If
                    If IO.File.Exists(frodopath) then 
                        bmp = new bitmap(frodopath)
                        FrodoImageTrue.Text="Frodo Image Present"
                    Else
                        FrodoImageTrue.Text = "No Frodo Image"
                    End If
                End If
                Dim Image2 As New Bitmap(bmp)
                PictureBox12.Image = Image2
                If rbTVbanner.Checked = True Then
                    Label73.Text = "Current Banner - " & PictureBox12.Image.Width.ToString & " x " & PictureBox12.Image.Height.ToString
                Else
                    Label73.Text = "Current Poster - " & PictureBox12.Image.Width.ToString & " x " & PictureBox12.Image.Height.ToString
                End If
            Else
                If rbTVbanner.Checked = True Then
                    bmp = New Bitmap(Utilities.DefaultBannerPath)
                    If eden and not frodo then
                        EdenImageTrue.Text="No Eden Image"
                        EdenImageTrue.Visible=True
                        FrodoImageTrue.Visible=False
                    ElseIf frodo and Not eden then
                        FrodoImageTrue.Text="No Frodo Image"
                        FrodoImageTrue.Visible=True
                        EdenImageTrue.Visible=False
                    ElseIf frodo and eden then
                        EdenImageTrue.Text="No Eden Image"
                        EdenImageTrue.Visible=True
                        FrodoImageTrue.Text="No Frodo Image"
                        FrodoImageTrue.Visible=True
                    End If
                Else
                    bmp = New Bitmap(Utilities.DefaultPosterPath)
                    If eden and not frodo then
                        EdenImageTrue.Text="No Eden Image"
                        EdenImageTrue.Visible=True
                        FrodoImageTrue.Visible=False
                    ElseIf frodo and Not eden then
                        FrodoImageTrue.Text="No Frodo Image"
                        FrodoImageTrue.Visible=True
                        EdenImageTrue.Visible=False
                    ElseIf frodo and eden then
                        EdenImageTrue.Text="No Eden Image"
                        EdenImageTrue.Visible=True
                        FrodoImageTrue.Text="No Frodo Image"
                        FrodoImageTrue.Visible=True
                    End If
                End If
                Dim Image2 As New Bitmap(bmp)
                PictureBox12.Image=Image2
                GC.Collect
            End If
            Return workingposterpath
        Catch ex As Exception
            Return 0
            ExceptionHandler.LogError(ex)
        End Try
    End Function

    Private Sub ComboBox2_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles ComboBox2.SelectedIndexChanged
        BannerAndPosterViewer()
    End Sub

    Private Sub tv_TvdbThumbsGet()

        Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
        Dim showlist As New XmlDocument
        'Dim tvdbstuff As New TVDB.tvdbscraper 'commented because of removed TVDB.dll
        Dim tvdbstuff As New TVDBScraper
        Dim thumblist As String = tvdbstuff.GetPosterList(WorkingTvShow.TvdbId.Value)
        Try
            showlist.LoadXml(thumblist)
        Catch ex As Exception
            MsgBox(thumblist, MsgBoxStyle.OkOnly, "TVdb site returned.....")
            'thumblist = "<error>ERROR</error>"
            'showlist.LoadXml(thumblist)
            Exit Sub
        End Try

        'CheckBox3 = seasons
        'CheckBox4 = fanart
        'CheckBox5 = poster
        For Each thisresult In showlist("banners")
            Select Case thisresult.Name
                Case "banner"
                    Dim individualposter As New TvBanners
                    For Each results In thisresult.ChildNodes
                        Select Case results.Name
                            Case "url"
                                individualposter.Url = results.InnerText
                            Case "bannertype"
                                individualposter.BannerType = results.InnerText
                            Case "resolution"
                                individualposter.Resolution = results.InnerText
                            Case "language"
                                individualposter.Language = results.InnerText
                            Case "season"
                                individualposter.Season = results.InnerText

                        End Select
                    Next
                    individualposter.SmallUrl = individualposter.Url.Replace("http://thetvdb.com/banners/", "http://thetvdb.com/banners/_cache/")
                    tvdbposterlist.Add(individualposter)
            End Select
        Next
    End Sub

    Private Sub Button53_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button53.Click
        Try

            'tvdb specific
            tvdbmode = True
            usedlist.Clear()
            Button56.Visible = False
            'Button57.Visible = False
            If tvdbposterlist.Count = 0 Then
                Call tv_TvdbThumbsGet()
            End If

            Dim tempseason As String = ""
            If ComboBox2.SelectedItem.indexof("Season ") <> -1 Then
                tempseason = ComboBox2.SelectedItem.replace("Season ", "")
            End If
            If tempseason.IndexOf("0") = 0 And tempseason.Length > 1 Then
                tempseason = tempseason.Substring(1, tempseason.Length - 1)
            End If
            If ComboBox2.SelectedItem.indexof("Specials") <> -1 Then
                tempseason = "0"
            End If
            'If ComboBox2.SelectedItem.indexof("Main Image") <> -1 And CheckBox8.Checked = True Then
            If ComboBox2.SelectedItem.indexof("Main Image") <> -1 And rbTVposter.Checked = True Then
                tempseason = "poster"
                'ElseIf ComboBox2.SelectedItem.indexof("Main Image") <> -1 And CheckBox8.Checked = False Then
            ElseIf ComboBox2.SelectedItem.indexof("Main Image") <> -1 And rbTVposter.Checked = False Then
                tempseason = "series"
            End If
            If tempseason = "poster" Or tempseason = "series" Then
                For Each poster In tvdbposterlist
                    'If poster.bannerType = "poster" And CheckBox8.Checked = True Then
                    If poster.BannerType = "poster" And rbTVposter.Checked = True Then
                        If poster.BannerType <> "fanart" Then usedlist.Add(poster)
                    End If
                    'If poster.bannerType = "series" And CheckBox8.Checked = False Then
                    If poster.BannerType = "series" And rbTVposter.Checked = False Then
                        If poster.BannerType <> "fanart" Then usedlist.Add(poster)
                    End If
                Next
            Else
                For Each poster In tvdbposterlist
                    If poster.Season = tempseason Then
                        If rbTVbanner.Checked = True Then
                            If poster.Resolution = "seasonwide" And poster.BannerType <> "fanart" And poster.BannerType <> "poster" Then usedlist.Add(poster)
                        ElseIf rbTVposter.Checked = True Then
                            If poster.Resolution <> "seasonwide" And poster.BannerType <> "fanart" And poster.BannerType <> "banner" Then usedlist.Add(poster)
                        End If
                    End If
                Next
            End If

            Call tv_PosterPanelPopulate()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub tv_PosterPanelPopulate()
        Me.Panel16.Show()
        tvposterpage = 1
        If usedlist.Count <= 0 Then
            Label72.Text = "Displaying 0 of 0 Images"
            Button54.Visible = False
            Button55.Visible = False
            Exit Sub
        End If

        If usedlist.Count > Preferences.maximumthumbs Then
            Button54.Visible = True
            Button55.Visible = True
            If usedlist.Count >= Preferences.maximumthumbs Then
                Label72.Text = "Displaying 1 to 10 of " & usedlist.Count.ToString & " Images"
            Else
                Label72.Text = "Displaying 1 to " & usedlist.Count.ToString & " of " & usedlist.Count.ToString & " Images"
            End If
            Label72.Visible = True
            Me.Refresh()
            Application.DoEvents()
            Button55.Enabled = False
            Button54.Enabled = True
        Else
            Button54.Visible = False
            Button55.Visible = False
            If posterArray.Count >= Preferences.maximumthumbs Then
                Label72.Text = "Displaying 1 to " & Preferences.maximumthumbs & " of " & usedlist.Count.ToString & " Images"
            Else
                Label72.Text = "Displaying 1 to " & usedlist.Count.ToString & " of " & usedlist.Count.ToString & " Images"
            End If
            Label72.Visible = True
            Me.Refresh()
            Application.DoEvents()
        End If
        Call tv_PosterSelectionDisplay()
    End Sub

    Private Sub tv_PosterSelectionDisplay()

        For i = Panel16.Controls.Count - 1 To 0 Step -1
            Panel16.Controls.RemoveAt(i)
        Next



        Dim tempint As Integer = (tvposterpage * (Preferences.maximumthumbs) + 1) - Preferences.maximumthumbs
        Dim tempint2 As Integer = tvposterpage * 10

        If tempint2 > usedlist.Count Then
            tempint2 = usedlist.Count
        End If

        Label72.Text = "Displaying " & tempint.ToString & " to " & tempint2 & " of " & usedlist.Count.ToString & " Images"

        Dim location As Integer = 0
        Dim itemcounter As Integer = 0
        Dim tempboolean As Boolean = True
        'If CheckBox8.Checked = True Or CheckBox8.Visible = False Then
        If rbTVposter.Checked = True Or rbTVbanner.Enabled = False Then
            For f = tempint - 1 To tempint2 - 1
                If tempboolean = True Then
                    tvposterpicboxes() = New PictureBox()
                    With tvposterpicboxes
                        .Location = New Point(location, 0)
                        .Width = 123
                        .Height = 168
                        .SizeMode = PictureBoxSizeMode.Zoom
                        .ImageLocation = usedlist(f).SmallUrl
                        .Tag = usedlist(f).Url
                        .Visible = True
                        .BorderStyle = BorderStyle.Fixed3D
                        .Name = "poster" & itemcounter.ToString
                        AddHandler tvposterpicboxes.DoubleClick, AddressOf tv_PosterDoubleClick
                        'AddHandler tvposterpicboxes.LoadCompleted, AddressOf imageres
                    End With

                    tvpostercheckboxes() = New RadioButton()
                    With tvpostercheckboxes
                        .Location = New Point(location + 50, 166) '179
                        .Name = "postercheckbox" & itemcounter.ToString
                        .SendToBack()
                        .Text = " "
                        AddHandler tvpostercheckboxes.CheckedChanged, AddressOf tv_PosterRadioChanged
                    End With

                    itemcounter += 1


                    Me.Panel16.Controls.Add(tvposterpicboxes())
                    Me.Panel16.Controls.Add(tvpostercheckboxes())
                End If
                If tempboolean = False Then
                    tvposterpicboxes() = New PictureBox()
                    With tvposterpicboxes
                        .Location = New Point(location, 192) '210
                        .Width = 123
                        .Height = 168
                        .SizeMode = PictureBoxSizeMode.Zoom
                        .ImageLocation = usedlist(f).SmallUrl
                        .Tag = usedlist(f).Url
                        .Visible = True
                        .BorderStyle = BorderStyle.Fixed3D
                        .Name = "poster" & itemcounter.ToString
                        AddHandler tvposterpicboxes.DoubleClick, AddressOf tv_PosterDoubleClick
                    End With

                    tvpostercheckboxes() = New RadioButton()
                    With tvpostercheckboxes
                        .Location = New Point(location + 50, 358) '389
                        .Name = "postercheckbox" & itemcounter.ToString
                        .SendToBack()
                        .Text = " "
                        AddHandler tvpostercheckboxes.CheckedChanged, AddressOf tv_PosterRadioChanged
                    End With

                    itemcounter += 1


                    Me.Panel16.Controls.Add(tvposterpicboxes())
                    Me.Panel16.Controls.Add(tvpostercheckboxes())
                End If
                Me.Refresh()
                Application.DoEvents()
                If tempboolean = False Then location += 120
                tempboolean = Not tempboolean
            Next
        Else
            For f = tempint - 1 To tempint2 - 1
                If tempboolean = True Then
                    tvposterpicboxes() = New PictureBox()
                    With tvposterpicboxes
                        .Location = New Point(0, location)
                        .Width = 600
                        .Height = 114
                        .SizeMode = PictureBoxSizeMode.Zoom
                        .ImageLocation = usedlist(f).SmallUrl
                        .Tag = usedlist(f).Url
                        .Visible = True
                        .BorderStyle = BorderStyle.Fixed3D
                        .Name = "poster" & itemcounter.ToString
                        AddHandler tvposterpicboxes.DoubleClick, AddressOf tv_PosterDoubleClick
                        'AddHandler tvposterpicboxes.LoadCompleted, AddressOf imageres
                    End With

                    tvpostercheckboxes() = New RadioButton()
                    With tvpostercheckboxes
                        .Location = New Point(290, location + 110)
                        .Name = "postercheckbox" & itemcounter.ToString
                        .SendToBack()
                        .Text = " "
                        AddHandler tvpostercheckboxes.CheckedChanged, AddressOf tv_PosterRadioChanged
                    End With
                    itemcounter += 1
                    location += 140

                    Me.Panel16.Controls.Add(tvposterpicboxes())
                    Me.Panel16.Controls.Add(tvpostercheckboxes())
                End If
            Next
        End If
        Me.Refresh()
        Application.DoEvents()

    End Sub

    Private Sub tv_PosterRadioChanged(ByVal sender As Object, ByVal e As EventArgs)

        PictureBox13.Image = Nothing
        Dim tempstring As String = sender.name
        Dim tempint As Integer = 0
        Dim tempstring2 As String = tempstring
        Dim allok As Boolean = False
        tempstring = tempstring.Replace("postercheckbox", "")
        tempint = Convert.ToDecimal(tempstring)
        'For Each button As Control In Me.Panel8.Controls
        '    If button.Name.IndexOf("postercheckbox") <> -1 Then
        '        Dim b1 As RadioButton = CType(button, RadioButton)
        '        If b1.Checked = True Then
        '            allok = True
        '            Exit For
        '        End If
        '    End If
        'Next

        Dim hires(1)
        Dim lores(1)
        lores(0) = ""
        hires(0) = ""
        lores(1) = ""
        hires(1) = ""
        For Each cont As Control In Me.Panel16.Controls()
            If cont.Name.Replace("poster", "") = tempint.ToString Then
                Dim picbox As PictureBox = cont
                lores(0) = "Save Image (" & picbox.Image.Width & " x " & picbox.Image.Height & ")"
                lores(1) = picbox.Name
                If tvdbmode = True Then
                    For Each poster In usedlist
                        If poster.smallUrl = picbox.ImageLocation Then
                            If IsNumeric(poster.resolution.Replace("x", "")) Then
                                hires(0) = "Save Image (" & poster.resolution & ")"
                                hires(0) = hires(0).replace("x", " x ")
                            Else
                                hires(0) = "Save Image (Hi-Res)"
                            End If
                            hires(1) = poster.url
                            Exit For
                        End If
                    Next
                    allok = True
                    Exit For
                Else
                    allok = True
                End If
            End If
        Next

        If allok = True Then
            'Button57.Visible = True
            'Button57.Tag = lores(1)
            'Button57.Text = lores(0)
            If tvdbmode = True Then
                Button56.Text = hires(0)
                Button56.Visible = True
                Button56.Tag = hires(1)
            Else
                Button56.Visible = False
            End If

        Else
            Button56.Visible = False
            'Button57.Visible = False
        End If
    End Sub

    Private Sub tv_PosterDoubleClick(ByVal sender As Object, ByVal e As EventArgs)
        Dim tempstring As String = sender.name.replace("poster", "postercheckbox")

        For Each Control In Panel16.Controls
            If Control.name = tempstring Then
                Dim rb As RadioButton = Control
                rb.Checked = True
            End If
        Next
        Dim messbox As frmMessageBox = New frmMessageBox("Please wait,", "", "Downloading Full Res Image")
        System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
        messbox.Show()
        Me.Refresh()
        messbox.Refresh()
        PictureBox13.Image = sender.image
        Call util_ZoomImage(PictureBox13.Image)
        messbox.Close()
    End Sub

    Private Sub Button52_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button52.Click
        Try
            'tvdb all
            tvdbmode = True
            usedlist.Clear()
            Button56.Visible = False
            'Button57.Visible = False
            If tvdbposterlist.Count = 0 Then
                Call tv_TvdbThumbsGet()
            End If
            For Each poster In tvdbposterlist
                'If CheckBox8.Visible = False Then
                If rbTVbanner.Enabled = False Then
                    If poster.BannerType <> "fanart" And poster.BannerType <> "series" Then
                        usedlist.Add(poster)
                    End If
                Else
                    'If CheckBox8.Checked = False And poster.BannerType = "series" Then
                    If rbTVposter.Checked = False And poster.BannerType = "series" Then
                        usedlist.Add(poster)
                        'ElseIf CheckBox8.Checked = True And poster.BannerType <> "fanart" Then
                    ElseIf rbTVposter.Checked = True And poster.BannerType <> "fanart" Then
                        If poster.BannerType <> "series" Then usedlist.Add(poster)
                    End If

                End If
            Next


            Call tv_PosterPanelPopulate()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button56_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button56.Click
        Try
            Dim witherror As Boolean = False
            Dim witherror2 As Boolean = False
            Dim path As String = ""
            Dim eden As Int16=0
            Dim frodo As Int16=0
            Dim imagePaths As New ArrayList
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
            Dim workingposterpath = WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "folder.jpg")
            If ComboBox2.Text.ToLower = "main image" Then
                If Preferences.EdenEnabled Then
                    imagePaths.Add(workingposterpath)
                    eden =1
                End If
                If Preferences.FrodoEnabled Then
                    If rbTVbanner.Checked = True Then
                        imagePaths.Add(workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "banner.jpg"))
                        'imagePaths.Add(workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-all-banner.jpg"))
                        frodo =1
                    ElseIf rbTVposter.Checked = True Then
                        imagePaths.Add(workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "poster.jpg"))
                        'imagePaths.Add(workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-all-poster.jpg"))
                        frodo = 1
                    End If
                End If
            ElseIf ComboBox2.Text.ToLower.IndexOf("season") <> -1 And ComboBox2.Text.ToLower.IndexOf("all") = -1 Then
                Dim temp As String = ComboBox2.Text.ToLower
                temp = temp.Replace(" ", "")
                If Preferences.EdenEnabled Then
                    imagePaths.Add(workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), temp & ".tbn"))
                    eden =1
                End If
                If Preferences.FrodoEnabled Then
                    If rbTVbanner.Checked = True Then
                        imagePaths.Add(workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), temp & "-banner.jpg"))
                        frodo = 1
                    ElseIf rbTVposter.Checked = True Then
                        imagePaths.Add(workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), temp & "-poster.jpg"))
                        frodo = 1
                    End If
                End If
            ElseIf ComboBox2.Text.ToLower.IndexOf("season") <> -1 And ComboBox2.Text.ToLower.IndexOf("all") <> -1 Then
                If Preferences.EdenEnabled Then
                    If Preferences.seasonall="poster" and rbTVposter.Checked Then
                        imagePaths.Add(workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-all.tbn"))
                        eden =1
                    ElseIf Preferences.seasonall="wide" and rbTVbanner.Checked Then
                        imagePaths.Add(workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-all.tbn"))
                        eden =1
                    End If 
                End If
                If Preferences.FrodoEnabled Then
                    If rbTVbanner.Checked = True Then
                        imagePaths.Add(workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-all-banner.jpg"))
                        frodo = 1
                    ElseIf rbTVposter.Checked = True Then
                        imagePaths.Add(workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-all-poster.jpg"))
                        frodo = 1
                    End If
                End If
            ElseIf ComboBox2.Text.ToLower = "specials" Then
                If Preferences.EdenEnabled Then
                    imagePaths.Add(workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-specials.tbn"))
                    eden =1
                End If
                If Preferences.FrodoEnabled Then
                    If rbTVbanner.Checked = True Then
                        imagePaths.Add(workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-specials-banner.jpg"))
                        frodo = 1
                    ElseIf rbTVposter.Checked = True Then
                        imagePaths.Add(workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-specials-poster.jpg"))
                        frodo = 1
                    End If
                End If
            End If
            If PictureBox13.ImageLocation = Button56.Tag And Not PictureBox13.Image Is Nothing Then
                For Each savepath As String In imagePaths
                    PictureBox13.Image.Save(savepath, Imaging.ImageFormat.Jpeg)
                Next
                If combostart = ComboBox2.SelectedItem Then
                    If rbTVbanner.Checked = True Then
                        tv_PictureBoxBottom.Image = PictureBox13.Image
                    Else
                        tv_PictureBoxRight.Image = PictureBox13.Image
                    End If
                End If
                PictureBox12.Image = PictureBox13.Image
                Label73.Text = "Current Poster - " & PictureBox12.Image.Width.ToString & " x " & PictureBox12.Image.Height.ToString
            Else
                Dim messbox As frmMessageBox = New frmMessageBox("Please wait,", "", "Downloading Full Resolution Image")
                System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
                messbox.Show()
                Me.Refresh()
                messbox.Refresh()
                Dim i1 As New PictureBox

                With i1
                    .WaitOnLoad = True
                    Try
                        .ImageLocation = Button56.Tag
                    Catch
                        witherror = True
                    End Try
                End With

                Try
                    If Not i1 Is Nothing Then
                        For Each savepath As String In imagePaths
                            i1.Image.Save(savepath, Imaging.ImageFormat.Jpeg)
                            path = savepath
                        Next
                        Dim OriginalImage As New Bitmap(path)
                        Dim Image2 As New Bitmap(OriginalImage)
                        OriginalImage.Dispose()

                        'If TvTreeview.SelectedNode.Name.ToLower.IndexOf("tvshow.nfo") <> -1 Or TvTreeview.SelectedNode.Name = "" Then
                        If rbTVbanner.Checked Then
                            tv_PictureBoxBottom.ImageLocation = path
                            tv_PictureBoxBottom.Load()
                        End If
                        If rbTVposter.Checked Then
                            tv_PictureBoxRight.ImageLocation = path
                            tv_PictureBoxRight.Load()
                        End If
                        'End If

                        PictureBox12.Image = Image2
                        Label73.Text = "Current Poster - " & PictureBox12.Image.Width.ToString & " x " & PictureBox12.Image.Height.ToString
                    End If

                    If witherror = True  Then
                        MsgBox("Unable to download image")
                    Else
                        If eden =1 then
                            EdenImageTrue.Visible =True
                            EdenImageTrue.Text="Eden Image Present"
                        End if
                        If frodo =1 then
                            FrodoImageTrue.Visible =True
                            FrodoImageTrue.Text="Frodo Image Present"
                        End if
                    End If
                Catch ex As Exception
                    MsgBox(ex.ToString)
                Finally

                    messbox.Close()
                End Try
            End If
            path = ""
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button57_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button57.Click
        'Try
        '    'savesmall
        '    Dim postname As String = ""
        '    Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
        '    Dim workingposterpath = WorkingTvShow.NfoFilePath.Replace("tvshow.nfo", "folder.jpg")
        '    For Each Control In Panel16.Controls
        '        If Control.name.indexof("postercheckbox") <> -1 Then
        '            Dim rb As RadioButton = Control
        '            If rb.Checked = True Then
        '                postname = Control.name.replace("postercheckbox", "poster")
        '                Exit For
        '            End If
        '        End If
        '    Next
        '    If postname <> "" Then
        '        For Each Control In Panel16.Controls
        '            If Control.name = postname Then
        '                Try
        '                    '                           Dim path As String = ""
        '                    Dim picBox As PictureBox = Control

        '                    If ComboBox2.Text.ToLower = "main image" Then

        '                        If Preferences.EdenEnabled Then
        '                            If rbTVposter.Checked Then
        '                                Utilities.SaveImageNoDispose(picBox.Image, workingposterpath)
        '                                PictureBox12.Image = picBox.Image
        '                            End If
        '                        End If

        '                        If Preferences.FrodoEnabled Then
        '                            If rbTVbanner.Checked Then
        '                                workingposterpath = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "banner.jpg")
        '                            Else
        '                                workingposterpath = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "poster.jpg")
        '                            End If
        '                            Utilities.SaveImageNoDispose(picBox.Image, workingposterpath)
        '                            PictureBox12.Image = picBox.Image
        '                        End If

        '                        '                                If Preferences.XBMC_version = 0 Then
        '                        '                                    path = workingposterpath
        '                        '                                ElseIf Preferences.XBMC_version = 2 Then
        '                        '                                    If rbTVbanner.Checked = True Then
        '                        '                                        path = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "banner.jpg")
        '                        '                                    ElseIf rbTVposter.Checked = True Then
        '                        '                                        path = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "poster.jpg")
        '                        '                                    End If
        '                        '                                End If

        '                    ElseIf ComboBox2.Text.ToLower.IndexOf("season") <> -1 And ComboBox2.Text.ToLower.IndexOf("all") = -1 Then

        '                        Dim temp As String = ComboBox2.Text.ToLower
        '                        temp = temp.Replace(" ", "")

        '                        If Preferences.EdenEnabled Then
        '                            If rbTVposter.Checked Then
        '                                workingposterpath = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), temp & ".tbn")
        '                                Utilities.SaveImageNoDispose(picBox.Image, workingposterpath)
        '                                PictureBox12.Image = picBox.Image
        '                            End If
        '                        End If

        '                        If Preferences.FrodoEnabled Then
        '                            If rbTVbanner.Checked Then
        '                                workingposterpath = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), temp & "-banner.jpg")
        '                            Else
        '                                workingposterpath = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), temp & "-poster.jpg")
        '                            End If
        '                            Utilities.SaveImageNoDispose(picBox.Image, workingposterpath)
        '                            PictureBox12.Image = picBox.Image
        '                        End If

        '                        'If Preferences.XBMC_version = 0 Then
        '                        '    path = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), temp & ".tbn")
        '                        'ElseIf Preferences.XBMC_version = 2 Then
        '                        '    If rbTVbanner.Checked = True Then
        '                        '        path = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), temp & "-banner.jpg")
        '                        '    ElseIf rbTVposter.Checked = True Then
        '                        '        path = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), temp & "-poster.jpg")
        '                        '    End If
        '                        'End If

        '                    ElseIf ComboBox2.Text.ToLower.IndexOf("season") <> -1 And ComboBox2.Text.ToLower.IndexOf("all") <> -1 Then

        '                        If Preferences.EdenEnabled Then
        '                            If rbTVposter.Checked Then
        '                                workingposterpath = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-all.tbn")
        '                                Utilities.SaveImageNoDispose(picBox.Image, workingposterpath)
        '                                PictureBox12.Image = picBox.Image
        '                            End If
        '                        End If

        '                        If Preferences.FrodoEnabled Then
        '                            If rbTVbanner.Checked Then
        '                                workingposterpath = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-all-banner.jpg")
        '                            Else
        '                                workingposterpath = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-all-poster.jpg")
        '                            End If
        '                            Utilities.SaveImageNoDispose(picBox.Image, workingposterpath)
        '                            PictureBox12.Image = picBox.Image
        '                        End If

        '                        'If Preferences.XBMC_version = 0 Then
        '                        '    path = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-all.tbn")
        '                        'ElseIf Preferences.XBMC_version = 2 Then
        '                        '    If rbTVbanner.Checked = True Then
        '                        '        path = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-all-banner.jpg")
        '                        '    ElseIf rbTVposter.Checked = True Then
        '                        '        path = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-all-poster.jpg")
        '                        '    End If
        '                        'End If

        '                    ElseIf ComboBox2.Text.ToLower = "specials" Then

        '                        If Preferences.EdenEnabled Then
        '                            If rbTVposter.Checked Then
        '                                workingposterpath = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-specials.tbn")
        '                                Utilities.SaveImageNoDispose(picBox.Image, workingposterpath)
        '                                PictureBox12.Image = picBox.Image
        '                            End If
        '                        End If

        '                        If Preferences.FrodoEnabled Then
        '                            If rbTVbanner.Checked Then
        '                                workingposterpath = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-specials-banner.jpg")
        '                            Else
        '                                workingposterpath = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-specials-poster.jpg")
        '                            End If
        '                            Utilities.SaveImageNoDispose(picBox.Image, workingposterpath)
        '                            PictureBox12.Image = picBox.Image
        '                        End If

        '                        'If Preferences.XBMC_version = 0 Then
        '                        '    path = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-specials.tbn")
        '                        'ElseIf Preferences.XBMC_version = 2 Then
        '                        '    If rbTVbanner.Checked = True Then
        '                        '        path = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-specials-banner.jpg")
        '                        '    ElseIf rbTVposter.Checked = True Then
        '                        '        path = workingposterpath.Replace(IO.Path.GetFileName(workingposterpath), "season-specials-poster.jpg")
        '                        '    End If
        '                        'End If
        '                    End If
        '                    'Dim newpicbox As PictureBox = Control
        '                    'newpicbox.Image.Save(path, Imaging.ImageFormat.Jpeg)
        '                    If combostart = ComboBox2.SelectedItem Then
        '                        If rbTVbanner.Checked = True Then
        '                            tv_PictureBoxBottom.Image = PictureBox13.Image
        '                        Else
        '                            tv_PictureBoxRight.Image = PictureBox13.Image
        '                        End If
        '                    End If
        '                    'PictureBox12.Image = newpicbox.Image

        '                    Label73.Text = "Current Poster - " & PictureBox12.Image.Width.ToString & " x " & PictureBox12.Image.Height.ToString

        '                    '                            If TvTreeview.SelectedNode.Name.ToLower.IndexOf("tvshow.nfo") <> -1 Or TvTreeview.SelectedNode.Name = "" Then
        '                    ''                                tv_PictureBoxRight.ImageLocation = path
        '                    '                                tv_PictureBoxRight.ImageLocation = workingposterpath
        '                    '                                tv_PictureBoxRight.Load()
        '                    '                            End If



        '                    If rbTVbanner.Checked Then
        '                        tv_PictureBoxBottom.ImageLocation = workingposterpath
        '                        tv_PictureBoxBottom.Load()
        '                    End If
        '                    If rbTVposter.Checked Then
        '                        tv_PictureBoxRight.ImageLocation = workingposterpath
        '                        tv_PictureBoxRight.Load()
        '                    End If



        '                    'workingposterpath = path
        '                Catch ex As Exception
        '                    MsgBox(ex.ToString)
        '                End Try
        '            End If
        '        Next
        '    End If
        'Catch ex As Exception
        '    ExceptionHandler.LogError(ex)
        'End Try

    End Sub

    Private Sub Button54_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button54.Click
        Try
            tvposterpage += 1
            Button56.Visible = False
            'Button57.Visible = False
            If usedlist.Count < 10 * tvposterpage Then
                Button54.Enabled = False
            End If
            Call tv_PosterSelectionDisplay()
            Button55.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button55_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button55.Click
        Try
            tvposterpage -= 1
            Button56.Visible = False
            'Button57.Visible = False
            If tvposterpage = 1 Then
                Button55.Enabled = False
            End If
            Call tv_PosterSelectionDisplay()
            Button54.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button58_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button58.Click
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
            If WorkingTvShow.ImdbId = Nothing Then
                MsgBox("No IMDB ID is available for this movie, cant scrape posters")
                Exit Sub
            End If
            If WorkingTvShow.ImdbId.Value = "" Then
                MsgBox("No IMDB ID is available for this movie, cant scrape posters")
                Exit Sub
            End If
            Dim ok As Boolean = False
            If WorkingTvShow.ImdbId.Value.ToLower.IndexOf("tt") = 0 Then
                Dim tempstring As String = WorkingTvShow.ImdbId.Value.ToLower.Substring(2, WorkingTvShow.ImdbId.Value.Length - 2)
                If IsNumeric(tempstring) Then
                    ok = True
                End If
            End If
            If IsNumeric(WorkingTvShow.ImdbId) And WorkingTvShow.ImdbId.Value.Length = 7 Then
                WorkingTvShow.ImdbId.Value = "tt" & WorkingTvShow.ImdbId.Value
                ok = True
            End If

            If ok = False Then
                MsgBox("IMDB ID seems to be an invalid format, can't scrape posters")
                Exit Sub
            End If

            tvdbmode = False
            usedlist.Clear()
            If imdbposterlist.Count <= 0 Then
                Dim newobject2 As New imdb_thumbs.Class1
                Dim posters(,) As String = newobject2.getimdbposters(WorkingTvShow.ImdbId.Value)
                For f = 0 To UBound(posters)
                    If posters(f, 0) <> Nothing Then
                        Dim individualposter As New TvBanners
                        individualposter.SmallUrl = posters(f, 0)
                        individualposter.Url = posters(f, 0)
                        imdbposterlist.Add(individualposter)
                    End If
                Next
            End If
            For Each po In imdbposterlist
                usedlist.Add(po)
            Next
            usedlist.Reverse()
            Call tv_PosterPanelPopulate()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button49_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button49.Click
        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
            'browse
            openFD.InitialDirectory = WorkingTvShow.NfoFilePath.Replace(IO.Path.GetFileName(WorkingTvShow.NfoFilePath), "")
            openFD.Title = "Select a jpeg image File"
            openFD.FileName = ""
            openFD.Filter = "Media Companion Image Files|*.jpg;*.tbn|All Files|*.*"
            openFD.FilterIndex = 0
            openFD.ShowDialog()
            TextBox30.Text = openFD.FileName
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button51_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button51.Click
        Try
            'set thumb
            Try
                Dim MyWebClient As New System.Net.WebClient

                Dim ImageInBytes() As Byte = MyWebClient.DownloadData(TextBox30.Text)
                Dim ImageStream As New IO.MemoryStream(ImageInBytes)

                PictureBox13.Image = New System.Drawing.Bitmap(ImageStream)
                PictureBox13.Image.Save(workingposterpath, Imaging.ImageFormat.Jpeg)

                If combostart = ComboBox2.SelectedItem Then
                    tv_PictureBoxRight.Image = PictureBox13.Image
                End If
                PictureBox12.Image = PictureBox13.Image
                Label73.Text = "Current Poster - " & PictureBox12.Image.Width.ToString & " x " & PictureBox12.Image.Height.ToString
            Catch ex As Exception
                MsgBox(ex.ToString)
            Finally
                Panel14.Visible = False
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button50_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button50.Click
        Try
            'cancel
            Panel14.Visible = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button59_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button59.Click
        Try
            Panel14.Visible = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TextBox26_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles TextBox26.KeyDown
        Try
            If e.KeyCode = Keys.Enter Then
                Call tv_ShowListLoad()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RefreshMovieNfoFilesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RefreshMovieNfoFilesToolStripMenuItem.Click
        Try
            Call util_BatchUpdate()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ButtonSave_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ButtonSave.Click
        Try
            Call mov_SaveQuick()
        
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TextBox35_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles TextBox35.KeyPress
        If Char.IsNumber(e.KeyChar) = False And e.KeyChar <> Chr(8) Then
            e.Handled = True
        End If
    End Sub

    Private Sub tv_EpThumbScreenShot_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tv_EpThumbScreenShot.Click
        Try
            TvEpThumbScreenShot
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub TextBox35_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles TextBox35.Leave
        If TextBox35.Text = "" Then
            MsgBox("Please enter a numerical value >0 into the textbox")
            TextBox35.Focus()
        ElseIf Convert.ToInt32(TextBox35.Text) = 0 Then
            MsgBox("Please enter a numerical value >0 into the textbox")
            TextBox35.Focus()
        End If
    End Sub

    Private Sub tv_EpThumbRescrape_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tv_EpThumbRescrape.Click
        Try
            TvEpThumbRescrape
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button11_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button11.Click
        Try
            ActorFilter=actorcb.Text

            For Each item As String In cbFilterActor.Items
                If item.IndexOf(ActorFilter)=0 Then
                    cbFilterActor.SelectedItem=item
                    Exit For
                End If
            Next
            
            Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)
            LabelCountFilter.Text = "Displaying " & DataGridViewMovies.Rows.Count & " " & actorcb.Text & " movie" & If( DataGridViewMovies.Rows.Count>1, "s", "")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_WallReset()
        For i = TabPage22.Controls.Count - 1 To 0 Step -1
            'If  Is PictureBox(TabPage22.Controls(i)) Then
            TabPage22.Controls.RemoveAt(i)
            'End If
        Next
        walllocked = True
        Dim count As Integer = 0
        Dim locx As Integer = 0
        Dim locy As Integer = 0
        Dim maxcount As Integer = Convert.ToInt32((TabPage22.Width - 50) / 150)

        While (DataGridViewMovies.SelectedRows.Count / maxcount) > 164
            maxcount += 1
        End While      

        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        'If filteredList.Count / maxcount > 159 Then
        '    maxcount += 1
        'End If
        Try
            'Panel17.AutoScroll = False
            For Each pic In pictureList
                Try
                    If count = maxcount Then
                        count = 0
                        locx = 0
                        locy += 200
                    End If

                    With pic
                        Dim vscrollPos As Integer = TabPage22.VerticalScroll.Value
                        .Location = New Point(locx, locy - vscrollPos)
                        .ContextMenuStrip = ContextMenuStrip3
                    End With
                    locx += 150
                    count += 1

                    Me.TabPage22.Controls.Add(pic)
                    TabPage22.Refresh()
                    Application.DoEvents()

                Catch ex As Exception
                    MsgBox(ex.ToString)
                End Try
            Next

        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        Finally
            walllocked = False
        End Try
    End Sub

    Private Sub mov_WallSetup()
        Dim check As Boolean = True
        Dim count As Integer = 0
        Dim locx As Integer = 0
        Dim locy As Integer = 0

       
        If moviecount_bak <> DataGridViewMovies.RowCount Then moviecount_bak = DataGridViewMovies.RowCount : check = False
        If cbSort.SelectedIndex <> cbSortHidden.SelectedIndex Then cbSortHidden.SelectedIndex = cbSort.SelectedIndex : check = False
        If btnreverse.CheckState <> CheckBox9.CheckState Then CheckBox9.CheckState = btnreverse.CheckState : check = False
        If TextBox1.Text <> TextBox37.Text Then TextBox37.Text = cbMoviePosterSaveLoRes.Text : check = False
        If txt_titlesearch.Text <> TextBox36.Text Then TextBox36.Text = txt_titlesearch.Text : check = False
        If check = True Then Return

        maxcount = Convert.ToInt32((TabPage22.Width - 50) / 150)

        While (DataGridViewMovies.SelectedRows.Count / maxcount) > 164
            maxcount += 1
        End While        
        

        pictureList.Clear()
        For i = TabPage22.Controls.Count - 1 To 0 Step -1
            If TabPage22.Controls(i).Name = "" Then
                TabPage22.Controls.RemoveAt(i)
            End If
        Next
        TabPage22.Refresh()
        Application.DoEvents()

        'Panel17.AutoScroll = False

        For Each row As DataGridViewRow In DataGridViewMovies.Rows

            Dim m As Data_GridViewMovie = row.DataBoundItem

            bigPictureBox = New PictureBox()
            With bigPictureBox
                '.Location = New Point(0, 0)
                .Width = 150
                .Height = 200
                .SizeMode = PictureBoxSizeMode.StretchImage
                '.Image = sender.image
                Dim filename As String = Utilities.GetCRC32(m.fullpathandfilename)
                Dim posterCache As String = IO.Path.Combine(applicationPath, "settings\postercache\" & filename & ".jpg")
                If Not File.Exists(posterCache) And File.Exists(Preferences.GetPosterPath(m.fullpathandfilename)) Then
                    Try
                        Dim bitmap2 As New Bitmap(Preferences.GetPosterPath(m.fullpathandfilename))
                        bitmap2 = Utilities.ResizeImage(bitmap2, 150, 200)
                        Utilities.SaveImage(bitmap2, IO.Path.Combine(posterCache))
                        bitmap2.Dispose()
                    Catch
                        'Invalid file
                        File.Delete(Preferences.GetPosterPath(m.fullpathandfilename))
                    End Try
                End If
                If File.Exists(posterCache) Then
                    Try
                        .Image = Utilities.LoadImage(posterCache)
                    Catch
                        'Invalid file
                        File.Delete(Preferences.GetPosterPath(m.fullpathandfilename))
                    End Try
                Else
                    .Image = Utilities.LoadImage(Utilities.DefaultPosterPath)
                End If
                


                .Tag = m.fullpathandfilename
                Dim toolTip1 As ToolTip = New ToolTip(Me.components)

                Dim outline As String = m.outline
                Dim newoutline As List(Of String) = util_TextWrap(outline, 50)
                outline = ""
                For Each line In newoutline
                    outline = outline & vbCrLf & line
                Next
                outline.TrimEnd(vbCrLf)
                toolTip1.SetToolTip(bigPictureBox, m.fullpathandfilename & vbCrLf & vbCrLf & m.DisplayTitleAndYear & vbCrLf & outline)
                toolTip1.Active = True
                toolTip1.InitialDelay = 0

                .Visible = True
                .BorderStyle = BorderStyle.None
                .WaitOnLoad = True
                .ContextMenuStrip = ContextMenuStrip3
                AddHandler bigPictureBox.MouseEnter, AddressOf util_MouseEnter
                AddHandler bigPictureBox.DoubleClick, AddressOf mov_WallClicked
                If count = maxcount Then
                    count = 0
                    locx = 0
                    locy += 200
                End If
                walllocked = True
                Dim vscrollPos As Integer = TabPage22.VerticalScroll.Value
                If mouseDelta <> 0 Then
                    vscrollPos = vscrollPos - mouseDelta
                    mouseDelta = 0
                End If
                .Location = New Point(locx, locy - vscrollPos)
                locx += 150
                count += 1

            End With
            Me.TabPage22.Controls.Add(bigPictureBox)
            pictureList.Add(bigPictureBox)
            Me.TabPage22.Refresh()
            Application.DoEvents()
            walllocked = False
        Next

        walllocked = False
    End Sub

    Private Sub mov_WallClicked(ByVal sender As Object, ByVal e As EventArgs)

        Dim item As Windows.Forms.PictureBox = sender
        'Dim picbox As PictureBox = item.SourceControl
        Dim tempstring As String = item.Tag
        For f = 0 To DataGridViewMovies.RowCount - 1
            'If CType(MovieListComboBox.Items(f), ValueDescriptionPair).Value = tempstring Then
            If DataGridViewMovies.Rows(f).Cells("fullpathandfilename").ToString = tempstring Then
                'MovieListComboBox.SelectedItems.Clear()
                'MovieListComboBox.SelectedIndex = f
                DataGridViewMovies.ClearSelection()
                DataGridViewMovies.Rows(f).Selected = True

                Application.DoEvents()
                currentTabIndex = 0
                Me.TabControl2.SelectedIndex = 0
                Exit For
            End If
        Next

    End Sub

    Private Function util_TextWrap(ByVal text As String, ByVal linelength As Integer)
        Dim ReturnValue As New List(Of String)
        text = Trim(text)

        Dim Words As String() = text.Split(" ")

        If Words.Length = 1 And Words(0).Length > linelength Then
            Dim lines As Integer = (Int(text.Length / linelength) + 1)
            text = text.PadRight(lines * linelength)
            For i = 0 To lines - 1
                Dim SliceStart As Integer = i * linelength
                ReturnValue.Add(text.Substring(SliceStart, linelength))
            Next
        Else
            Dim CurrentLine As New System.Text.StringBuilder
            For Each Word As String In Words
                If CurrentLine.Length + Word.Length < linelength Then
                    CurrentLine.Append(Word & " ")
                Else
                    If Word.Length > linelength Then
                        Dim Slice As String = Word.Substring(0, linelength - CurrentLine.Length)
                        CurrentLine.Append(Slice)
                        ReturnValue.Add(CurrentLine.ToString)
                        CurrentLine = New System.Text.StringBuilder()
                        Word = Word.Substring(Slice.Length, Word.Length - Slice.Length)
                        Dim RemainingSlices As Integer = Int(Word.Length / linelength) + 1
                        For LineNumber = 1 To RemainingSlices
                            If LineNumber = RemainingSlices Then
                                CurrentLine.Append(Word & " ")
                            Else
                                Slice = Word.Substring(0, linelength)
                                CurrentLine.Append(Slice)
                                ReturnValue.Add(CurrentLine.ToString)
                                CurrentLine = New System.Text.StringBuilder()
                                Word = Word.Substring(Slice.Length, Word.Length - Slice.Length)
                            End If
                        Next
                    Else
                        ReturnValue.Add(CurrentLine.ToString)
                        CurrentLine = New System.Text.StringBuilder(Word & " ")
                    End If
                End If
            Next

            If CurrentLine.Length > 0 Then
                ReturnValue.Add(CurrentLine.ToString)
            End If
        End If

        Return ReturnValue

    End Function

    Private Shadows Sub util_MouseEnter(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Try
            ClickedControl = sender.tag
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub PlayMovieToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PlayMovieToolStripMenuItem.Click
        Try
            'Dim item As Windows.Forms.ToolStripMenuItem = sender
            ''Dim picbox As PictureBox = item.SourceControl
            Dim tempstring As String = ClickedControl
            If tempstring = Nothing Then
                Exit Sub
            End If
            If tempstring = "" Then
                Exit Sub
            End If
            Dim playlist As New List(Of String)
            tempstring = Utilities.GetFileName(tempstring)
            If IO.File.Exists(tempstring) Then
                playlist.Add(tempstring)
            End If
            If tempstring.IndexOf("cd1") <> -1 Then
                tempstring = tempstring.Replace("cd1", "cd2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd2", "cd3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd3", "cd4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd4", "cd5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("cd_1") <> -1 Then
                tempstring = tempstring.Replace("cd_1", "cd_2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd_2", "cd_3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd_3", "cd_4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd_4", "cd_5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("cd 1") <> -1 Then
                tempstring = tempstring.Replace("cd 1", "cd 2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd 2", "cd 3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd 3", "cd 4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd 4", "cd 5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("cd.1") <> -1 Then
                tempstring = tempstring.Replace("cd.1", "cd.2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd.2", "cd.3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd.3", "cd.4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("cd.4", "cd.5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("dvd1") <> -1 Then
                tempstring = tempstring.Replace("dvd1", "dvd2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd2", "dvd3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd3", "dvd4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd4", "dvd5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("dvd_1") <> -1 Then
                tempstring = tempstring.Replace("dvd_1", "dvd_2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd_2", "dvd_3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd_3", "dvd_4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd_4", "dvd_5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("dvd 1") <> -1 Then
                tempstring = tempstring.Replace("dvd 1", "dvd 2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd 2", "dvd 3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd 3", "dvd 4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd 4", "dvd 5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("dvd.1") <> -1 Then
                tempstring = tempstring.Replace("dvd.1", "dvd.2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd.2", "dvd.3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd.3", "dvd.4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("dvd.4", "dvd.5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("part1") <> -1 Then
                tempstring = tempstring.Replace("part1", "part2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part2", "part3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part3", "part4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part4", "part5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("part_1") <> -1 Then
                tempstring = tempstring.Replace("part_1", "part_2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part_2", "part_3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part_3", "part_4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part_4", "part_5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("part 1") <> -1 Then
                tempstring = tempstring.Replace("part 1", "part 2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part 2", "part 3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part 3", "part 4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part 4", "part 5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("part.1") <> -1 Then
                tempstring = tempstring.Replace("part.1", "part.2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part.2", "part.3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part.3", "part.4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("part.4", "part.5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("disk1") <> -1 Then
                tempstring = tempstring.Replace("disk1", "disk2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk2", "disk3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk3", "disk4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk4", "disk5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("disk_1") <> -1 Then
                tempstring = tempstring.Replace("disk_1", "disk_2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk_2", "disk_3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk_3", "disk_4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk_4", "disk_5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("disk 1") <> -1 Then
                tempstring = tempstring.Replace("disk 1", "disk 2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk 2", "disk 3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk 3", "disk 4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk 4", "disk 5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("disk.1") <> -1 Then
                tempstring = tempstring.Replace("disk.1", "disk.2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk.2", "disk.3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk.3", "disk.4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("disk.4", "disk.5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("part1") <> -1 Then
                tempstring = tempstring.Replace("pt1", "pt2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt2", "pt3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt3", "pt4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt4", "pt5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("pt_1") <> -1 Then
                tempstring = tempstring.Replace("pt_1", "pt_2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt_2", "pt_3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt_3", "pt_4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt_4", "pt_5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("pt 1") <> -1 Then
                tempstring = tempstring.Replace("pt 1", "pt 2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt 2", "pt 3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt 3", "pt 4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt 4", "pt 5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If
            If tempstring.IndexOf("pt.1") <> -1 Then
                tempstring = tempstring.Replace("pt.1", "pt.2")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt.2", "pt.3")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt.3", "pt.4")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
                tempstring = tempstring.Replace("pt.4", "pt.5")
                If IO.File.Exists(tempstring) Then
                    playlist.Add(tempstring)
                End If
            End If

            If playlist.Count <= 0 Then
                MsgBox("No Media File Found For This nfo")
                Exit Sub
            End If


            tempstring = applicationPath & "\settings\temp.m3u"


            Dim file As IO.StreamWriter = IO.File.CreateText(tempstring)

            For Each part In playlist
                If part <> Nothing Then file.WriteLine(part)
            Next
            file.Close()



            If Preferences.videomode = 1 Then Call util_VideoMode1(tempstring)
            If Preferences.videomode = 2 Then Call util_VideoMode2(tempstring)
            If Preferences.videomode = 3 Then
                Preferences.videomode = 2
                Call util_VideoMode2(tempstring)
            End If
            If Preferences.videomode >= 4 Then
                If Preferences.selectedvideoplayer <> Nothing Then
                    Call util_VideoMode4(tempstring)
                Else
                    Call util_VideoMode1(tempstring)
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub EditMovieToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles EditMovieToolStripMenuItem1.Click
        Try
            Dim tempstring As String = ClickedControl
            'Dim picbox As PictureBox = item.SourceControl
            For f = 0 To DataGridViewMovies.RowCount - 1
                'If CType(MovieListComboBox.Items(f), ValueDescriptionPair).Value = tempstring Then
                If DataGridViewMovies.Rows(f).Cells("fullpathandfilename").Value.ToString = tempstring Then
                    'MovieListComboBox.SelectedItems.Clear()
                    'MovieListComboBox.SelectedIndex = f
                    DataGridViewMovies.ClearSelection()
                    DataGridViewMovies.Rows(f).Selected = True
                    DisplayMovie()
                    Application.DoEvents()
                    currentTabIndex = 4
                    Me.TabControl2.SelectedIndex = 4
                    Exit For
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub DToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DToolStripMenuItem.Click
        Try
            Dim tempstring As String = ClickedControl
            If tempstring <> Nothing Then
                Try
                    If IO.File.Exists(Preferences.GetPosterPath(tempstring)) Then
                        Me.ControlBox = False
                        MenuStrip1.Enabled = False
                        'ToolStrip1.Enabled = False
                        Dim newimage As New Bitmap(Preferences.GetPosterPath(tempstring))
                        Dim newimage2 As New Bitmap(newimage)
                        newimage.Dispose()
                        Call util_ZoomImage(newimage2)
                    Else
                        MsgBox("Cant find file:-" & vbCrLf & Preferences.GetPosterPath(tempstring))
                    End If
                Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
                End Try
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub OpenFolderToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OpenFolderToolStripMenuItem1.Click
        Try
            Dim tempstring As String = ClickedControl
            If tempstring <> Nothing Then
                Try
                    Call util_OpenFolder(tempstring)
                Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
                End Try
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button_TV_State_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button_TV_State.Click
        Try
            Dim Btn As Button = sender
            If TypeOf Btn.Tag Is Media_Companion.TvShow Then
                Dim TempShow As Media_Companion.TvShow = Btn.Tag
                Select Case TempShow.State
                    Case Media_Companion.ShowState.Locked
                        TempShow.State = Media_Companion.ShowState.Open
                    Case Media_Companion.ShowState.Open
                        TempShow.State = Media_Companion.ShowState.Locked
                    Case Media_Companion.ShowState.Error
                    Case Media_Companion.ShowState.Unverified
                        TempShow.State = Media_Companion.ShowState.Open
                        TextBox_Title.BackColor = Color.White
                End Select


                If TempShow.State = Media_Companion.ShowState.Locked Then
                    Button_TV_State.Text = "Locked"
                    Button_TV_State.BackColor = Color.Red
                ElseIf TempShow.State = Media_Companion.ShowState.Open Then
                    Button_TV_State.Text = "Open"
                    Button_TV_State.BackColor = Color.LawnGreen
                ElseIf TempShow.State = Media_Companion.ShowState.Unverified Then
                    Button_TV_State.Text = "Un-Verified"
                    Button_TV_State.BackColor = Color.Yellow
                Else
                    Button_TV_State.Text = "Error"
                    Button_TV_State.BackColor = Color.Gray
                End If
                TempShow.UpdateTreenode()   'update the treenode so we can see the state change
                TempShow.Save()             'save the nfo immediately (you don't have to press save button)
            End If

        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

#Region "Media Info Export"
    Dim exportMovieInfo As Boolean = False  'these are used to allow only a single execution of media export functions
    Dim exportTVInfo As Boolean = False     'when there may be mulitple drop-down events. (Found that out the hard way!)

    Private Sub ExportMovieListInfoToolStripMenuItem_DropDownItemClicked(ByVal sender As Object, ByVal e As System.Windows.Forms.ToolStripItemClickedEventArgs) Handles ExportMovieListInfoToolStripMenuItem.DropDownItemClicked
        If Not exportMovieInfo Then exportMovieInfo = mediaInfoExp.setTemplate(e.ClickedItem.Text)
    End Sub

    Private Sub ExportTVShowInfoToolStripMenuItem_DropDownItemClicked(sender As Object, e As System.Windows.Forms.ToolStripItemClickedEventArgs) Handles ExportTVShowInfoToolStripMenuItem.DropDownItemClicked
        If Not exportTVInfo Then exportTVInfo = mediaInfoExp.setTemplate(e.ClickedItem.Text)
    End Sub

    Private Sub ExportMovieListInfoToolStripMenuItem_DropDownClosed(ByVal sender As Object, ByVal e As System.EventArgs) Handles ExportMovieListInfoToolStripMenuItem.DropDownClosed
        If exportMovieInfo Then
            exportMovieInfo = False
            Call util_ExportMediaListInfo(MediaInfoExport.mediaType.Movie)
        End If
    End Sub

    Private Sub ExportTVShowInfoToolStripMenuItem_DropDownClosed(sender As Object, e As System.EventArgs) Handles ExportTVShowInfoToolStripMenuItem.DropDownClosed
        If exportTVInfo = True Then
            exportTVInfo = False
            Call util_ExportMediaListInfo(MediaInfoExport.mediaType.TV)
        End If
    End Sub

    Private Sub util_ExportMediaListInfo(ByVal mediaType As String)
        Dim savepath As String
        Dim extensions As New Dictionary(Of String, String)
        extensions.Add("html", "Html Documents (*.html)|*.html")
        extensions.Add("xml", "XML Data (*.xml)|*.xml")
        extensions.Add("csv", "CSV (Comma delimited) (*.csv)|*.csv")
        Dim ext As String = mediaInfoExp.getPossibleFileType
        Dim idx As Integer
        For idx = 1 To extensions.Count
            If extensions.Keys(idx - 1) = ext Then Exit For
        Next
        With SaveFileDialog1
            .DefaultExt = ext
            .Filter = String.Join("|", extensions.Values)
            .FilterIndex = idx
            .Title = "ExportMedia File"
            .OverwritePrompt = True
            .CheckPathExists = True
        End With
        If SaveFileDialog1.ShowDialog = Windows.Forms.DialogResult.OK Then
            savepath = SaveFileDialog1.FileName
            Dim mediaCollection As Object
            If mediaType = MediaInfoExport.mediaType.Movie Then
                'Dirty hack to get the media export to use the data grid source. Wasn't as straight forward as hoped,
                'and after spending many hours trying to find an elegant solution, I gave up.
                'If anyone comes across this and thinks "Huey, you twat, just do it like this", then please go right
                'ahead! - HueyHQ 15Feb13
                Dim mediaList As New List(Of ComboList)
                For Each mediaItem As Data_GridViewMovie In DataGridViewMovies.DataSource
                    mediaList.Add(mediaItem.Export)
                Next
                mediaCollection = mediaList
            Else
                mediaCollection = Cache.TvCache.Shows
            End If
            mediaInfoExp.createDocument(savepath, mediaCollection)
        End If
    End Sub

#End Region


    Private Sub bckgroundscanepisodes_ProgressChanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bckgroundscanepisodes.ProgressChanged
        Try
            If e.ProgressPercentage = 0 Then
                ToolStripStatusLabel6.Text = e.UserState
                ToolStripStatusLabel6.Visible = True
            ElseIf e.ProgressPercentage = 1 Then
                If TypeOf e.UserState Is TvEpisode Then
                    Dim TempEpisode As TvEpisode = CType(e.UserState, TvEpisode)

                    TempEpisode.ShowObj.AddEpisode(TempEpisode)
                    TempEpisode.SeasonObj.UpdateTreenode()
                    TempEpisode.UpdateTreenode()
                    'This bit updates the Epsiode Count on the fly when the progress is updated. It has to be done here to avoid thread issues. (GUI wouldn't update properly) 
                    TextBox_TotEpisodeCount.Text = Cache.TvCache.Episodes.Count
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub bckgroundscanepisodes_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs, Optional ByVal manual As Boolean = False) Handles bckgroundscanepisodes.DoWork
        Try
            Dim List As List(Of TvShow) = e.Argument(0)
            Dim Force As Boolean = e.Argument(1)

            Call TV_EpisodeScraper(List, Force)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ep_Search()
        Dim ShowList As New List(Of TvShow)

        If Not bckgroundscanepisodes.IsBusy And Not Bckgrndfindmissingepisodes.IsBusy Then
            'ToolStripButton10.Visible = True
            TabPage15.Text = "Cancel Episode Search"
            TabPage15.ToolTipText = "This cancels the episode search" & vbCrLf & "and episode scraper thread"

            For Each item In Cache.TvCache.Shows
                If (item.NfoFilePath.ToLower.IndexOf("tvshow.nfo") <> -1) And ((item.State = Media_Companion.ShowState.Open) Or TVSearchALL = True) Then
                    ShowList.Add(item)
                End If
            Next
            bckgroundscanepisodes.RunWorkerAsync({ShowList, TVSearchALL}) 'if searching all episodes (inc locked) TVSearchALL is true
        ElseIf bckgroundscanepisodes.IsBusy Then
            MsgBox("This Episode Scraper is already running")
        ElseIf Bckgrndfindmissingepisodes.IsBusy Then
            MsgBox("The missing episode search cannot be performed" & vbCrLf & "    while the episode scraper is running")
        End If
    End Sub

    Private Sub SearchThisShowForNewEpisodesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_SearchNewEp.Click
        Try
            If TvTreeview.SelectedNode Is Nothing Then Exit Sub

            Dim Season As TvSeason
            Dim Episode As TvEpisode
            Dim ShowList As New List(Of TvShow)
            If TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvShow Then
                ShowList.Add(TvTreeview.SelectedNode.Tag)
            ElseIf TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvSeason Then

                Season = TvTreeview.SelectedNode.Tag
                ShowList.Add(Season.ShowObj)
            ElseIf TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvEpisode Then
                Episode = TvTreeview.SelectedNode.Tag
                ShowList.Add(Episode.ShowObj)
            End If
            Dim OverrideLock As Boolean = False
            If ShowList(0).State <> 0 Then  'i.e. it is either locked or unverified
                If MsgBox("This show is either 'Locked' or 'Unverified'. Do you want to continue scan?", MsgBoxStyle.YesNo, "Question?") = MsgBoxResult.Yes Then
                    OverrideLock = True
                Else
                    Exit Sub
                End If
            End If

            If Not bckgroundscanepisodes.IsBusy And Not Bckgrndfindmissingepisodes.IsBusy Then
                'ToolStripButton10.Visible = True
                TabPage15.Text = "Cancel Episode Search"
                TabPage15.ToolTipText = "This cancels the episode search" & vbCrLf & "and episode scraper thread"

                bckgroundscanepisodes.RunWorkerAsync({ShowList, OverrideLock})
            ElseIf bckgroundscanepisodes.IsBusy Then
                MsgBox("This Episode Scraper is already running")
            ElseIf Bckgrndfindmissingepisodes.IsBusy Then
                MsgBox("The missing episode search cannot be performed" & vbCrLf & "    while the episode scraper is running")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Public Function ep_Get(ByVal tvdbid As String, ByVal sortorder As String, ByVal seriesno As String, ByVal episodeno As String, ByVal language As String)
        Dim episodestring As String = ""
        Dim episodeurl As String = ""
        Dim xmlfile As String

        If language.ToLower.IndexOf(".xml") = -1 Then
            language = language & ".xml"
        End If
        episodeurl = "http://thetvdb.com/api/6E82FED600783400/series/" & tvdbid & "/" & sortorder & "/" & seriesno & "/" & episodeno & "/" & language

        xmlfile = Utilities.DownloadTextFiles(episodeurl)
        Dim xmlOK As Boolean = Utilities.CheckForXMLIllegalChars(xmlfile)
        If xmlOK Then
            episodestring = "<episodedetails>"
            episodestring = episodestring & "<url>" & episodeurl & "</url>"
            Dim mirrorslist As New XmlDocument
            mirrorslist.LoadXml(xmlfile)
            Dim thisresult As XmlNode = Nothing
            For Each thisresult In mirrorslist("Data")
                Select Case thisresult.Name
                    Case "Episode"
                        Dim mirrorselection As XmlNode = Nothing
                        For Each mirrorselection In thisresult.ChildNodes
                            Select Case mirrorselection.Name
                                Case "EpisodeName"
                                    episodestring = episodestring & "<title>" & mirrorselection.InnerXml & "</title>"
                                Case "FirstAired"
                                    episodestring = episodestring & "<premiered>" & mirrorselection.InnerXml & "</premiered>"
                                Case "GuestStars"
                                    Dim gueststars() As String = mirrorselection.InnerXml.Split("|")
                                    For Each guest In gueststars
                                        If Not String.IsNullOrEmpty(guest) Then
                                            episodestring = episodestring & "<actor><name>" & guest & "</name></actor>"
                                        End If
                                    Next
                                Case "Director"
                                    Dim tempstring As String = mirrorselection.InnerXml
                                    tempstring = tempstring.Trim("|")
                                    episodestring = episodestring & "<director>" & tempstring & "</director>"
                                Case "Writer"
                                    Dim tempstring As String = mirrorselection.InnerXml
                                    tempstring = tempstring.Trim("|")
                                    episodestring = episodestring & "<credits>" & tempstring & "</credits>"
                                Case "Overview"
                                    episodestring = episodestring & "<plot>" & mirrorselection.InnerXml & "</plot>"
                                Case "Rating"
                                    episodestring = episodestring & "<rating>" & mirrorselection.InnerXml & "</rating>"
                                Case "filename"
                                    episodestring = episodestring & "<thumb>http://www.thetvdb.com/banners/" & mirrorselection.InnerXml & "</thumb>"
                            End Select
                        Next
                End Select
            Next
            episodestring = episodestring & "</episodedetails>"
        Else
            If CheckBoxDebugShowTVDBReturnedXML.Checked = True Then MsgBox(xmlfile, MsgBoxStyle.OkOnly, "FORM1 getepisode - TVDB returned.....")
            episodestring = "Error"
        End If
        Return episodestring
    End Function

    Private Sub ReloadItemToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mov_ToolStripReloadFromCache.Click
        Try
            Call mov_FormPopulate()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TabPage22_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles TabPage22.LostFocus
        Try
            TabPage22.Focus()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TabPage22_MouseWheel(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles TabPage22.MouseWheel
        Try

        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RefreshActorDBToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) 
        Try
            Call mov_ActorRebuild()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button14_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button14.Click
        Try
            If TextBox38.Text <> "" Then
                Dim ex As Boolean = False
                For Each mset In Preferences.moviesets
                    If mset.ToLower = TextBox38.Text.ToLower Then
                        ex = True
                        Exit For
                    End If
                Next
                If ex = False Then
                    Preferences.moviesets.Add(TextBox38.Text)
                    ListofMovieSets.Items.Add(TextBox38.Text)
                   
                    pop_cbMovieDisplay_MovieSet

                    'If workingMovieDetails.fullmoviebody.movieset <> Nothing Then
                    '    Dim add As Boolean = True
                    '    For Each mset In Preferences.moviesets
                    '        If mset = workingMovieDetails.fullmoviebody.movieset Then
                    '            add = False
                    '        End If
                    '    Next
                    '    If add = True Then
                    '        Preferences.moviesets.Add(workingMovieDetails.fullmoviebody.movieset)
                    '    End If


                    '    For f = 0 To cbMovieDisplay_MovieSet.Items.Count - 1
                    '        If cbMovieDisplay_MovieSet.Items(f) = workingMovieDetails.fullmoviebody.movieset Then
                    '            cbMovieDisplay_MovieSet.SelectedIndex = f
                    '            Exit For
                    '        End If
                    '    Next
                    'Else
                    '    cbMovieDisplay_MovieSet.SelectedIndex = 0
                    'End If
                Else
                    MsgBox("This Movie Set Already Exists")
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button65_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button65.Click
        Try
            For i = 0 To ListofMovieSets.SelectedItems.Count - 1
                Dim tempboolean As Boolean = False
                If ListofMovieSets.SelectedItems(i) <> Nothing And ListofMovieSets.SelectedItems(i) <> "" Then
                    For Each mset In Preferences.moviesets
                        If mset = ListofMovieSets.SelectedItems(i) Then
                            If workingMovieDetails.fullmoviebody.movieset <> mset Then
                                Preferences.moviesets.Remove(mset)
                            Else
                                MsgBox("Unable to remove """ & mset & """, it is being used by the selected Movie")
                            End If
                            Exit For
                            'tempboolean = True
                            'Exit For
                        End If
                    Next
                    'If tempboolean = False Then
                    'Preferences.moviesets.Remove(ListBox4.SelectedItems(i))
                    'Else
                    'MsgBox("Unable to remove """ & ListBox4.SelectedItems(i) & """, it is being used by the selected Movie")
                    'End If
                    'Exit For
                End If
            Next

            ListofMovieSets.Items.Clear()

            For Each mset In Preferences.moviesets
                If mset <> "-None-" Then ListofMovieSets.Items.Add(mset)
            Next

            pop_cbMovieDisplay_MovieSet
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try


    End Sub

    Private Sub btnMovieDisplay_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnMovieDisplay.Click
        Try
            SetFilter=cbMovieDisplay_MovieSet.Text
            Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton32_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton32.CheckedChanged
        Try
            If RadioButton32.Checked = True Then
                Call tv_Filter()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton30_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton30.CheckedChanged
        Try
            If RadioButton30.Checked = True Then
                Call tv_Filter()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton29_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton29.CheckedChanged
        Try
            If RadioButton29.Checked = True Then
                Call tv_Filter()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton31_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton31.CheckedChanged
        Try
            If RadioButton31.Checked = True Then
                Call tv_Filter()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub titletxt_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles titletxt.Enter
        Try
            Try
                processnow = False
                If titletxt.Text.IndexOf(workingMovieDetails.fullmoviebody.year) <> -1 Then
                    Dim tempstring2 As String = " (" & workingMovieDetails.fullmoviebody.year & ")"
                    Dim tempstring As String = titletxt.Text.Replace(tempstring2, "")
                    tempstring = tempstring.TrimEnd(" ")
                    currenttitle = tempstring
                    titletxt.Items.Clear()
                    'titletxt.Items.Add(tempstring)
                    For Each item In workingMovieDetails.alternativetitles
                        If item <> tempstring Then
                            titletxt.Items.Add(item)
                        End If
                    Next
                    titletxt.SelectedIndex = -1
                    titletxt.Text = tempstring

                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub titletxt_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles titletxt.Leave
        Try
            Try

            '   TextBox34.Text = titletxt.Text
                'For Each item In workingmoviedetails.alternativetitles
                '    If item = currenttitle Then
                '        workingmoviedetails.alternativetitles.Remove(item)
                '        workingmoviedetails.alternativetitles.Add(titletxt.Text)
                '        Exit For
                '    End If
                'Next
                If titletxt.Text.IndexOf(workingMovieDetails.fullmoviebody.year) = -1 Then
                    Dim tempstring As String = titletxt.Text
                    titletxt.Items.Clear()
                    'titletxt.Items.Add(tempstring & " (" & workingmoviedetails.fullmoviebody.year & ")")
                    For Each item In workingMovieDetails.alternativetitles
                        If item <> currenttitle Then
                            titletxt.Items.Add(item)
                        End If
                    Next
                    titletxt.Text = tempstring & " (" & workingMovieDetails.fullmoviebody.year & ")"
                    'titletxt.SelectedIndex = -1
                End If
                processnow = True
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub titletxt_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles titletxt.SelectedIndexChanged
        Try
            Try
                If titletxt.Text.IndexOf(workingMovieDetails.fullmoviebody.year) = -1 Then
                    Dim tempstring As String = titletxt.Text
                    titletxt.Items.Clear()
                    titletxt.Items.Add(tempstring & " (" & workingMovieDetails.fullmoviebody.year & ")")
                    For Each item In workingMovieDetails.alternativetitles
                        If item <> tempstring Then
                            titletxt.Items.Add(item)
                        End If
                    Next
                    titletxt.SelectedIndex = 0
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_PreferencesDisplay()
        ListBox7.Items.Clear()
        For Each item In movieFolders
            ListBox7.Items.Add(item)
        Next
        ListBox15.Items.Clear()
        For Each item In Preferences.offlinefolders
            ListBox15.Items.Add(item)
        Next
        lbCleanFilename.Items.Clear()
        lbCleanFilename.Items.AddRange(Preferences.moviecleanTags.Split("|"))
    End Sub


    Private Sub btn_addmoviefolderdialogue_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_addmoviefolderdialogue.Click
        Try
            Dim allok As Boolean = True
            Dim theFolderBrowser As New FolderBrowserDialog
            Dim thefoldernames As String
            theFolderBrowser.Description = "Please Select Folder to Add to DB (Subfolders will also be added)"
            theFolderBrowser.ShowNewFolderButton = True
            theFolderBrowser.RootFolder = System.Environment.SpecialFolder.Desktop
            theFolderBrowser.SelectedPath = Preferences.lastpath
            If theFolderBrowser.ShowDialog = Windows.Forms.DialogResult.OK Then
                thefoldernames = (theFolderBrowser.SelectedPath)
                Preferences.lastpath = thefoldernames
                For Each item As Object In ListBox2.Items
                    If thefoldernames.ToString = item.ToString Then allok = False
                Next

                If allok = True Then
                    ListBox7.Items.Add(thefoldernames)
                    ListBox7.Refresh()
                Else
                    MsgBox("        Folder Already Exists")
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btn_removemoviefolder_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_removemoviefolder.Click
        Try
            While ListBox7.SelectedItems.Count > 0
                ListBox7.Items.Remove(ListBox7.SelectedItems(0))
            End While
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DownsizeAllFanartsToSelectedSizeToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DownsizeAllFanartsToSelectedSizeToolStripMenuItem.Click
        DownSizeAll("Backdrops")
    End Sub


    Private Sub DownsizeAllPostersToSelectedSizeToolStripMenuItem_Click( sender As System.Object,  e As System.EventArgs) Handles DownsizeAllPostersToSelectedSizeToolStripMenuItem.Click
        DownSizeAll("Posters")
    End Sub
    
    Private Sub DownSizeAll(postersOrBackdrops As String) 

        Dim tempint As Integer = oMovies.MovieCache.Count

        System.Windows.Forms.Cursor.Current = Cursors.WaitCursor

        Dim point As Point
        Dim height = 0

        If postersOrBackdrops = "Backdrops" then
            point = Movie.GetBackDropResolution(Preferences.BackDropResolutionSI)
        Else
            height = Movie.GetHeightResolution(Preferences.PosterResolutionSI)
        End If


        Using messbox As frmMessageBox = New frmMessageBox("Please wait - " & postersOrBackdrops & " are being resized", "", tempint.ToString & " remaining")

            messbox.Show
            Me.Refresh
            messbox.Refresh


            Dim path   = ""

            For Each m In oMovies.MovieCache

                If postersOrBackdrops = "Backdrops" then

                    path = Preferences.GetFanartPath(m.fullpathandfilename)

                    If File.Exists(path) then
                        DownloadCache.CopyAndDownSizeImage(path, path, point.x, point.y)
                    End If
                Else

                    path   = Preferences.GetPosterPath(m.fullpathandfilename)

                    If File.Exists(path) then
                        DownloadCache.CopyAndDownSizeImage(path, path, , height  )
                    End If
                End If

                tempint -= 1
                messbox.TextBox3.Text = tempint.ToString & " remaining"
                messbox.TextBox3.Refresh
                
                Application.DoEvents
            Next
        End Using
    End Sub

    Private Sub ButtonSaveAndQuickRefresh_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ButtonSaveAndQuickRefresh.Click
        'ProgressAndStatus1.Display()
        'Application.DoEvents()

        Dim folderstoadd As New List(Of String)
        Dim offlinefolderstoadd As New List(Of String)
        Dim folderstoremove As New List(Of String)
        Dim offlinefolderstoremove As New List(Of String)
        For Each item In ListBox7.Items
            Dim add As Boolean = True
            For Each folder In movieFolders
                If folder = item Then add = False
            Next
            If add = True Then folderstoadd.Add(item)
        Next
        For Each item In ListBox15.Items
            Dim add As Boolean = True
            For Each folder In Preferences.offlinefolders
                If folder = item Then add = False
            Next
            If add = True Then offlinefolderstoadd.Add(item)
        Next
        For Each item In movieFolders
            Dim remove As Boolean = True
            For Each folder In ListBox7.Items
                If folder = item Then remove = False
            Next
            If remove = True Then folderstoremove.Add(item)
        Next
        For Each item In Preferences.offlinefolders
            Dim remove As Boolean = True
            For Each folder In ListBox15.Items
                If folder = item Then remove = False
            Next
            If remove = True Then offlinefolderstoremove.Add(item)
        Next
        If folderstoremove.Count > 0 Or offlinefolderstoremove.Count > 0 Then
            For Each item In folderstoremove
                    For f = oMovies.MovieCache.Count - 1 To 0 Step -1
                        If oMovies.MovieCache(f).fullpathandfilename.IndexOf(item) <> -1 Then
                            oMovies.MovieCache.RemoveAt(f)
                        End If
                    Next
                Next
                For Each item In offlinefolderstoremove
                    For f = oMovies.MovieCache.Count - 1 To 0 Step -1
                        If oMovies.MovieCache(f).fullpathandfilename.IndexOf(item) <> -1 Then
                            oMovies.MovieCache.RemoveAt(f)
                    End If
                Next
            Next
            For f = movieFolders.Count - 1 To 0 Step -1
                Dim remove As Boolean = False
                For Each folder In folderstoremove
                    If movieFolders(f) = folder Then
                        remove = True
                    End If
                Next
                If remove = True Then movieFolders.RemoveAt(f)
            Next
            For f = Preferences.offlinefolders.Count - 1 To 0 Step -1
                Dim remove As Boolean = False
                For Each folder In offlinefolderstoremove
                    If Preferences.offlinefolders(f) = folder Then
                        remove = True
                    End If
                Next
                If remove = True Then Preferences.offlinefolders.RemoveAt(f)
            Next
            Preferences.SaveConfig
        End If
        If folderstoadd.Count > 0 Or offlinefolderstoadd.Count > 0 Then
            Application.DoEvents()

            For Each folder In folderstoadd
                movieFolders.Add(folder)
            Next
            For Each folder In offlinefolderstoadd
                Preferences.offlinefolders.Add(folder)
                folderstoadd.Add(folder)
            Next
            If Preferences.usefoldernames = True Then         'use TRUE if folder contains nfo's, False if folder contains folders which contain nfo's
                progressmode = False
            Else
                progressmode = True
            End If
            'Call mov_NfoLoad(folderstoadd, progressmode)
            Preferences.SaveConfig
       '     messbox.Close 'Where's the open???
        End If

        mov_RebuildMovieCaches
        TabControl2.SelectedIndex = 0
    End Sub


    Public Sub mov_RebuildMovieCaches

        'Enabled = False

        mov_PreferencesDisplay

        'ProgressAndStatus1.Display()
        'ProgressAndStatus1.Status("Rebuilding Movie caches...")
        'ProgressAndStatus1.ReportProgress(0, "Processing....")
        'Application.DoEvents()

        'oMovies.RebuildCaches
        RunBackgroundMovieScrape("RebuildCaches")

        'filteredList.Clear
        'filteredList.AddRange(oMovies.MovieCache)
        'filteredListObj.Clear
        'filteredListObj.AddRange(oMovies.Data_GridViewMovieCache)


        'ProgressAndStatus1.ReportProgress(0, "Apply Filters...")
        'Mc.clsGridViewMovie.mov_FiltersAndSortApply

        'ProgressAndStatus1.ReportProgress(0, "Reload Main Page...")
        'mov_FormPopulate

        'If DataGridViewMovies.Rows.Count>0 Then
        '    DataGridViewMovies.Rows(0).Selected = True
        '    DisplayMovie
        'End If

        'Activate
        'Enabled = True
        'ProgressAndStatus1.Visible = False
    End Sub





    Private Sub tv_PosterCheck(ByVal season As String, ByVal path As String, ByVal tvdbid As String)
        Dim seasonposterpath As String = "na"
        Dim seasonfilename As String = season 'Season 08
        Dim seasonnumber As String
        season = season.Replace("Season ", "season")
        seasonnumber = season
        seasonnumber = seasonnumber.Replace("season", "")
        If seasonnumber.IndexOf("0") = 0 Then
            Try
                seasonnumber = seasonnumber.Substring(1, 1)
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
        End If
        If season = "season00" Then
            season = "season-specials.tbn"
        Else
            season = season & ".tbn"
        End If
        For Each folder In tvFolders
            If path.IndexOf(folder) <> -1 Then
                seasonposterpath = IO.Path.Combine(folder, season)
            End If
        Next
        If seasonposterpath <> "na" Then
            If IO.File.Exists(seasonposterpath) Then Exit Sub
            Dim showlist As New XmlDocument
            'Dim tvdbstuff As New TVDB.tvdbscraper 'commented because of removed TVDB.dll
            Dim tvdbstuff As New TVDBScraper
            Dim thumblist As String = tvdbstuff.GetPosterList(tvdbid)
            Try
                showlist.LoadXml(thumblist)
            Catch
                Exit Sub
            End Try
            Dim tvseasonposterlist As New List(Of TvBanners)
            tvseasonposterlist.Clear()
            Dim backupposterurl As String = ""
            Dim primaryposterurl As String = ""
            For Each thisresult In showlist("banners")
                Dim newtvposter As New TvBanners
                Select Case thisresult.Name
                    Case "banner"

                        For Each results In thisresult.ChildNodes
                            Select Case results.Name
                                Case "url"
                                    newtvposter.Url = results.InnerText
                                Case "bannertype"
                                    newtvposter.BannerType = results.InnerText
                                Case "language"
                                    newtvposter.Language = results.InnerText
                                Case "season"
                                    newtvposter.Season = results.InnerText
                            End Select
                        Next
                End Select
                If newtvposter.Language = Preferences.TvdbLanguageCode And newtvposter.Season = seasonnumber Then
                    primaryposterurl = newtvposter.Url
                    Exit For
                Else
                    If backupposterurl = "" And newtvposter.Season = seasonnumber Then backupposterurl = newtvposter.Url
                End If
            Next
            If primaryposterurl <> "" Then
                Dim i1 As New PictureBox

                With i1
                    .WaitOnLoad = True
                    Try
                        .ImageLocation = primaryposterurl
                    Catch
                        Try
                            .ImageLocation = backupposterurl
                        Catch ex As Exception
#If SilentErrorScream Then
                            Throw ex
#End If
                        End Try
                    End Try
                End With

                Try
                    If Not i1 Is Nothing Then
                        i1.Image.Save(seasonposterpath, Imaging.ImageFormat.Jpeg)
                    End If
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
            End If
        End If
    End Sub

    Private Sub tv_FoldersSetup()
        ListBox5.Items.Clear()
        ListBox6.Items.Clear()
        For Each folder In tvRootFolders
            ListBox5.Items.Add(folder)
        Next
        For Each folder In tvFolders
            ListBox6.Items.Add(folder)
        Next
    End Sub

    Private Sub btn_TvFoldersRootRemove_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_TvFoldersRootRemove.Click
        Try
            While ListBox5.SelectedItems.Count > 0
                ListBox5.Items.Remove(ListBox5.SelectedItems(0))
            End While
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btn_TvFoldersRemove_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_TvFoldersRemove.Click
        Try
            Dim Folder As String
            While ListBox6.SelectedItems.Count > 0
                Folder = ListBox6.SelectedItems(0)

                For Each Item As Media_Companion.TvShow In Cache.TvCache.Shows
                    If Item.FolderPath.Trim("\") = Folder.Trim("\") Then
                        TvTreeview.Nodes.Remove(Item.ShowNode)
                        Cache.TvCache.Remove(Item)
                        Exit For
                    End If
                Next
                ListBox6.Items.Remove(ListBox6.SelectedItems(0))
            End While
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btn_TvFoldersRootBrowse_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_TvFoldersRootBrowse.Click
        Try
            'browse for root tv folder
            Dim allok As Boolean = True
            Dim cancelregex As Boolean = False
            Dim newtvshow As Boolean = False
            Dim theFolderBrowser As New FolderBrowserDialog
            Dim strfolder As String
            Dim tempstring3 As String
            Dim tempint As Integer = 0
            Dim tempint2 As Integer = 0
            theFolderBrowser.Description = "Please Select Root Folder of the TV Shows You Wish To Add to DB"
            theFolderBrowser.ShowNewFolderButton = True
            theFolderBrowser.RootFolder = System.Environment.SpecialFolder.Desktop
            theFolderBrowser.SelectedPath = Preferences.lastpath
            If theFolderBrowser.ShowDialog = Windows.Forms.DialogResult.OK Then
                strfolder = (theFolderBrowser.SelectedPath)
                Preferences.lastpath = strfolder
                'Try
                allok = True
                For Each item As Object In ListBox5.Items
                    If strfolder = item.ToString Then allok = False
                Next
                Dim hasseason As Boolean = False
                If allok = True Then
                    For Each strfolder2 As String In My.Computer.FileSystem.GetDirectories(strfolder)
                        Dim M As Match
                        tempstring3 = strfolder2.ToLower
                        M = Regex.Match(tempstring3, "(series ?\d+|season ?\d+|s ?\d+|^\d{1,3}$)")
                        If M.Success = True Then
                            hasseason = True
                            Exit For
                        End If
                    Next
                    If hasseason = True Then
                        tempint = MessageBox.Show(strfolder & " Appears to Contain Season Folders." & vbCrLf & "Are you sure this folder contains multiple" & vbCrLf & "TV Shows, each in its own folder?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                        If tempint = DialogResult.Yes Then
                            ListBox5.Items.Add(strfolder)
                        ElseIf tempint = DialogResult.No Then
                            tempint2 = MessageBox.Show("Do you wish to add this as a single TV Show Folder?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                            If tempint2 = DialogResult.Yes Then
                                Dim test As Boolean = True
                                For Each folder In ListBox6.Items
                                    If folder = strfolder Then
                                        test = False
                                        MsgBox("Folder not added, Already exists")
                                        Exit For
                                    End If
                                Next
                                If test = True Then
                                    ListBox6.Items.Add(strfolder)
                                End If
                            End If
                        End If
                    Else
                        ListBox5.Items.Add(strfolder)
                    End If
                Else
                    MsgBox("Root already exists")
                End If
                'Catch ex As Exception
                '    MsgBox("error")
                'End Try
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub


    Private Sub btn_TvFoldersUndo_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_TvFoldersUndo.Click
        Try
            'newTvFolders.Clear()
            'Call setuptvfolders()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    '    Public Sub updatetree(Optional ByVal addnew As Boolean = True)


    '        Dim oldfolders As New List(Of String)
    '        totalTvShowCount = 0
    '        totalEpisodeCount = 0
    '        TextBox32.Text = ""
    '        TextBox33.Text = ""
    '        'Me.Enabled = False
    '        'basictvlist.Clear()
    '        TvTreeview.Nodes.Clear()

    '        For Each tvshow In TvShows
    '            If tvshow.fullpath IsNot Nothing Then
    '                Dim tempstring As String = tvshow.fullpath.Replace("\tvshow.nfo", "")
    '                If Not tvFolders.Contains(tempstring) Then
    '                    oldfolders.Add(tempstring)
    '                End If
    '            End If
    '        Next
    '        For Each folder In oldfolders
    '            For Each oldshow In TvShows
    '                Dim tempstring As String = oldshow.fullpath.Replace("\tvshow.nfo", "")
    '                If tempstring = folder Then
    '                    TvShows.Remove(oldshow)
    '                    For Each fol In tvFolders
    '                        If oldshow.fullpath.IndexOf(fol) <> -1 Then
    '                            tvFolders.Remove(fol)
    '                            Exit For
    '                        End If
    '                    Next
    '                    Exit For
    '                End If
    '            Next
    '        Next

    '        'get list of new
    '        Dim folderstoadd As New List(Of String)
    '        For Each folder In tvFolders
    '            Dim add As Boolean = True
    '            Dim tempstring2 As String = folder
    '            For Each tvshow In TvShows
    '                Dim tempstring As String = tvshow.fullpath.Replace("\tvshow.nfo", "")
    '                If folder = tempstring Then
    '                    add = False
    '                    Exit For
    '                End If
    '            Next
    '            If add = True Then
    '                folderstoadd.Add(tempstring2)
    '            End If
    '        Next

    '        If folderstoadd.Count > 0 Then
    '            messbox = New frmMessageBox("New TV Folders Found", "Adding to DB", "Please Wait")
    '            'remove old
    '            messbox.Show()
    '            messbox.Refresh()
    '            Application.DoEvents()
    '            messbox.Show()
    '            Try
    '                For Each tvfolder In folderstoadd
    '                    Try
    '                        Dim shownfopath As String = IO.Path.Combine(tvfolder, "tvshow.nfo")
    '                        Dim newtvshownfo As TvShow
    '                        newtvshownfo = nfoFunction.loadbasictvshownfo(shownfopath)
    '                        'Try
    '                        '    If addnew = True Then
    '                        '        If Not IO.File.Exists(shownfopath) Then
    '                        'Call setgoingnewtvshows(shownfopath)
    '                        '        End If
    '                        '    End If
    '                        'Catch
    '                        'End Try
    '                        If newtvshownfo.title <> Nothing Then
    '                            If newtvshownfo.status.IndexOf("skipthisfile") = -1 Then
    '                                Dim skip As Boolean = False
    '                                For Each tvshow In TvShows
    '                                    If newtvshownfo.fullpath = tvshow.fullpath Then
    '                                        skip = True
    '                                        Exit For
    '                                    End If
    '                                Next
    '                                If skip = False Then
    '                                    ListtvFiles(newtvshownfo, "*.NFO")
    '                                    TvShows.Add(newtvshownfo)
    '                                End If
    '                            End If
   '                        End If
    '                        realTvPaths.Add(tvfolder)
    '                    Catch ex As Exception
    '#If SilentErrorScream Then
    '                        Throw ex
    '#End If
    '                    End Try
    '                Next
    '            Catch ex As Exception
    '#If SilentErrorScream Then
    '                Throw ex
    '#End If
    '            End Try
    '            messbox.Close()
    '            Me.Activate()               'bring main form back to front
    '        End If
    '        'For Each tv In basictvlist
    '        '    ListtvFiles(tv, "*.NFO")
    '        'Next
    '        'Call populatetvtree()
    '        'messbox.Close()
    '        Me.Enabled = True

    '        Call TV_SaveTvData("New Function")

    '    End Sub

    Private Sub CheckRootsForToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckRootsForToolStripMenuItem.Click
        Try
            tv_FoldersSetup()
            tv_ShowFind()
            tv_ShowScrape()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TabPage23_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles TabPage23.Leave
        Try
            'Dim allok As Boolean = True
            'If TabPage23.Text <> "Folders" Then
            '    Exit Sub
            'End If
            'If tvFolders.Count <> ListBox6.Items.Count Then allok = False
            'If tvRootFolders.Count <> ListBox5.Items.Count Then allok = False
            'If allok = True Then
            '    Dim templist As New List(Of String)
            '    templist.Clear()
            '    For Each item In ListBox5.Items
            '        templist.Add(item)
            '    Next
            '    For Each item In tvRootFolders
            '        If Not templist.Contains(item) Then
            '            allok = False
            '            Exit For
            '        End If
            '    Next
            'End If
            'If allok = True Then
            '    Dim templist As New List(Of String)
            '    templist.Clear()
            '    For Each item In ListBox6.Items
            '        templist.Add(item)
            '    Next
            '    For Each item In tvFolders
            '        If Not templist.Contains(item) Then
            '            allok = False
            '            Exit For
            '        End If
            '    Next
            'End If
            'If allok = False Then
            '    Dim tempint As Integer = MessageBox.Show("There appears to be unsaved changes to your folderlists," & vbCrLf & "Do wish to save the changes", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
            '    If tempint = DialogResult.Yes Then
            '        tvFolders.Clear()
            '        For Each item In ListBox6.Items
            '            If Not newTvFolders.Contains(item) Then
            '                tvFolders.Add(item)
            '            End If
            '        Next
            '        tvRootFolders.Clear()
            '        For Each item In ListBox5.Items
            '            tvRootFolders.Add(item)
            '        Next
            '        Dim save As New Preferences
            '        Call save.saveconfig()
            '        Call updatetree()
            '        If newTvFolders.Count = 0 Then
            '            MsgBox("Changes Saved")
            '        Else
            '            MsgBox("Changes Saved, additional folders will be added to your list as they are scraped")
            '            If Not bckgrnd_tvshowscraper.IsBusy Then
            '                bckgrnd_tvshowscraper.RunWorkerAsync()
            '            End If
            '        End If
            '    Else
            '        Dim load As New Preferences
            '        Call load.loadconfig()
            '    End If
            'End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub btn_TvFoldersSave_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_TvFoldersSave.Click
        Try
            tv_ShowScrape()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btn_TvFoldersAddFromRoot_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_TvFoldersAddFromRoot.Click
        Try
            tv_ShowFind()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Public Sub tv_ShowFind()
        Dim Folders As List(Of String)
        For Each folder In ListBox5.Items
            Folders = Utilities.EnumerateFolders(folder, 0)
            For Each strfolder2 As String In Folders
                If Not ListBox6.Items.Contains(strfolder2) AndAlso Utilities.ValidMovieDir(strfolder2) Then
                    ListBox6.Items.Add(strfolder2)
                    newTvFolders.Add(strfolder2)
                End If
            Next
        Next
    End Sub

    Public Sub tv_ShowScrape()
        tvFolders.Clear()
        For Each item In ListBox6.Items
            'If Not newTvFolders.Contains(item) Then
            tvFolders.Add(item)
            'End If
        Next
        tvRootFolders.Clear()
        For Each item In ListBox5.Items
            tvRootFolders.Add(item)
        Next
        Preferences.SaveConfig()
        'Call updatetree()
        If newTvFolders.Count = 0 Then
            MsgBox("Changes Saved")
            If Not bckgrnd_tvshowscraper.IsBusy Then
                ' if this is not here, the tree view does not update correctly if the shows were removed.
                ' ^^^ - not sure this statement is valid anymore; newTvFolders.Count = 0 does not execute
                '       anything in bckgrnd_tvshowscraper.DoWork() - HueyHQ 20Feb2013
                bckgrnd_tvshowscraper.RunWorkerAsync()
            End If
        Else
            MsgBox("Changes Saved, additional folders will be added to your list as they are scraped")
            If Not bckgrnd_tvshowscraper.IsBusy Then
                ToolStripStatusLabel5.Text = "Scraping TV Shows, " & newTvShows.Count + 1 & " remaining"
                ToolStripStatusLabel5.Visible = True
                bckgrnd_tvshowscraper.RunWorkerAsync()
            End If
        End If
        'Me.Focus()
    End Sub

    Private Sub btn_TvFoldersBrowse_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_TvFoldersBrowse.Click
        Try
            Dim allok As Boolean = True
            Dim theFolderBrowser As New FolderBrowserDialog
            Dim thefoldernames As String
            theFolderBrowser.Description = "Please Select TV Folder to Add to DB"
            theFolderBrowser.ShowNewFolderButton = True
            theFolderBrowser.RootFolder = System.Environment.SpecialFolder.Desktop
            theFolderBrowser.SelectedPath = Preferences.lastpath
            If theFolderBrowser.ShowDialog = Windows.Forms.DialogResult.OK Then
                thefoldernames = (theFolderBrowser.SelectedPath)
                For Each item As Object In ListBox6.Items
                    If thefoldernames.ToString = item.ToString Then allok = False
                Next
                Preferences.lastpath = thefoldernames
                If allok = True Then
                    ListBox6.Items.Add(thefoldernames)
                    newTvFolders.Add(thefoldernames)
                Else
                    MsgBox("        Folder Already Exists", MsgBoxStyle.OkOnly)
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btn_TvFoldersAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_TvFoldersAdd.Click
        Try
            If TextBox40.Text = Nothing Then
                Exit Sub
            End If
            If TextBox40.Text = "" Then
                Exit Sub
            End If
            Dim tempstring As String = TextBox40.Text
            Do While tempstring.LastIndexOf("\") = tempstring.Length - 1
                tempstring = tempstring.Substring(0, tempstring.Length - 1)
            Loop
            Do While tempstring.LastIndexOf("/") = tempstring.Length - 1
                tempstring = tempstring.Substring(0, tempstring.Length - 1)
            Loop
            Dim exists As Boolean = False
            For Each item In ListBox6.Items
                If item.ToString.ToLower = tempstring.ToLower Then
                    exists = True
                    Exit For
                End If
            Next
            If exists = True Then
                MsgBox("        Folder Already Exists")
            Else
                Dim f As New IO.DirectoryInfo(tempstring)
                If f.Exists Then
                    ListBox6.Items.Add(tempstring)
                    TextBox40.Text = ""
                    newTvFolders.Add(tempstring)
                Else
                    Dim tempint As Integer = MessageBox.Show("This folder does not appear to exist" & vbCrLf & "Are you sure you wish to add it", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                    If tempint = DialogResult.Yes Then
                        ListBox6.Items.Add(tempstring)
                        TextBox40.Text = ""
                        newTvFolders.Add(tempstring)
                    End If
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub btn_TvFoldersRootAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_TvFoldersRootAdd.Click
        Try
            If TextBox39.Text = Nothing Then
                Exit Sub
            End If
            If TextBox39.Text = "" Then
                Exit Sub
            End If
            Dim tempstring As String = TextBox39.Text
            Do While tempstring.LastIndexOf("\") = tempstring.Length - 1
                tempstring = tempstring.Substring(0, tempstring.Length - 1)
            Loop
            Do While tempstring.LastIndexOf("/") = tempstring.Length - 1
                tempstring = tempstring.Substring(0, tempstring.Length - 1)
            Loop
            Dim exists As Boolean = False
            For Each item In ListBox5.Items
                If item.ToString.ToLower = tempstring.ToLower Then
                    exists = True
                    Exit For
                End If
            Next
            If exists = True Then
                MsgBox("        Folder Already Exists")
            Else
                Dim f As New IO.DirectoryInfo(tempstring)
                If f.Exists Then
                    ListBox5.Items.Add(tempstring)
                    TextBox39.Text = ""
                Else
                    Dim tempint As Integer = MessageBox.Show("This folder does not appear to exist" & vbCrLf & "Are you sure you wish to add it", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                    If tempint = DialogResult.Yes Then
                        ListBox5.Items.Add(tempstring)
                        TextBox39.Text = ""
                    End If
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub util_GeneralPreferencesSetup()

        CopyOfPreferencesIgnoreArticle = Preferences.ignorearticle

        prefsload = True
        generalprefschanged = False

        Dim tcc As TypeConverter = TypeDescriptor.GetConverter(GetType(System.Drawing.Font))
        Dim newFont As System.Drawing.Font
        If Preferences.font <> Nothing Then
            If Preferences.font <> "" Then
                Try
                    newFont = CType(tcc.ConvertFromString(Preferences.font), System.Drawing.Font)
                Catch ex As Exception
                    newFont = CType(tcc.ConvertFromString("Times New Roman, 9pt"), System.Drawing.Font)
                    Preferences.font = "Times New Roman, 9pt"
                End Try
            Else
                newFont = CType(tcc.ConvertFromString("Times New Roman, 9pt"), System.Drawing.Font)
                Preferences.font = "Times New Roman, 9pt"
            End If
        Else
            newFont = CType(tcc.ConvertFromString("Times New Roman, 9pt"), System.Drawing.Font)
            Preferences.font = "Times New Roman, 9pt"
        End If
        Label130.Font = newFont
        Label130.Text = Preferences.font

'        chkbx_disablecache.CheckState      = If(Preferences.startupCache, CheckState.Checked, CheckState.Unchecked)
        chkbx_disablecache.Checked          = Not Preferences.startupCache

        cbOverwriteArtwork.CheckState       = If(Preferences.overwritethumbs, CheckState.Checked, CheckState.Unchecked)

        CheckBoxRenameNFOtoINFO.CheckState  = If(Preferences.renamenfofiles, CheckState.Checked, CheckState.Unchecked)
        CheckBox41.CheckState               = If(Preferences.ignorearticle, CheckState.Checked, CheckState.Unchecked)
        CheckBox38.CheckState               = If(Preferences.intruntime, CheckState.Checked, CheckState.Unchecked)
        CheckBox33.CheckState               = If(Preferences.actorseasy, CheckState.Checked, CheckState.Unchecked)

        txtbx_minrarsize.Text               = Preferences.rarsize.ToString
        cbExternalbrowser.Checked           = Preferences.externalbrowser
        btnFindBrowser.Enabled              = cbExternalbrowser.Checked

        cbCheckForNewVersion.Checked        = Preferences.CheckForNewVersion

        If Preferences.videomode = 1 Then
            RadioButton38.Checked = True
        ElseIf Preferences.videomode = 2 Then
            RadioButton37.Checked = True
        ElseIf Preferences.videomode = 4 Then
            RadioButton36.Checked = True
        End If

        If Preferences.videomode = 4 Then
            Label121.Text = Preferences.selectedvideoplayer
            Label121.Visible = True
            btn_custommediaplayer.Enabled = True
        Else
            btn_custommediaplayer.Enabled = False
            Label121.Visible = False
        End If

        If Preferences.XBMC_version = 0 Then
            rbXBMCv_pre.Checked = True
        ElseIf Preferences.XBMC_version = 1 Then
            rbXBMCv_both.Checked = True
        ElseIf Preferences.XBMC_version = 2 Then
            rbXBMCv_post.Checked = True
        End If

        Label112.Text = "Current Default Profile: " & profileStruct.DefaultProfile
        Label108.Text = "Current Startup Profile: " & profileStruct.StartupProfile
        ListBox13.Items.Clear()
        For Each prof In profileStruct.ProfileList
            ListBox13.Items.Add(prof.ProfileName)
        Next

        ListBox16.Items.Clear()
        ListBox17.Items.Clear()
        For Each com In Preferences.commandlist
            ListBox16.Items.Add(com.title)
            ListBox17.Items.Add(com.command)
        Next

        cbShowMovieGridToolTip.Checked = Preferences.ShowMovieGridToolTip
        cbShowLogOnError      .Checked = Preferences.ShowLogOnError
        cbUseMultipleThreads  .Checked = Preferences.UseMultipleThreads
   '    tbMkvMergeGuiPath     .Text    = Preferences.MkvMergeGuiPath

        prefsload = False
        generalprefschanged = False
        btnGeneralPrefsSaveChanges.Enabled = False
    End Sub

    Private Sub RadioButton38_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton38.CheckedChanged
        Try
            If RadioButton38.Checked = True Then
                Preferences.videomode = 1
            End If
            If prefsload = False Then
                generalprefschanged = True
                btnGeneralPrefsSaveChanges.Enabled = True
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton37_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton37.CheckedChanged
        Try
            If RadioButton37.Checked = True Then
                Preferences.videomode = 2
            End If
            If prefsload = False Then
                generalprefschanged = True
                btnGeneralPrefsSaveChanges.Enabled = True
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton36_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton36.CheckedChanged
        Try
            If RadioButton36.Checked = True Then
                Preferences.videomode = 4
                btn_custommediaplayer.Enabled = True
                Label121.Visible = True
                If Preferences.selectedvideoplayer <> Nothing Then
                    If Preferences.selectedvideoplayer <> "" Then
                        Label121.Text = Preferences.selectedvideoplayer
                    Else
                        Label121.Text = ""
                    End If
                Else
                    Label121.Text = ""
                End If
            Else
                Label121.Visible = False
                btn_custommediaplayer.Enabled = False
            End If
            If prefsload = False Then
                generalprefschanged = True
                btnGeneralPrefsSaveChanges.Enabled = True
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btn_custommediaplayer_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_custommediaplayer.Click
        Try
            Dim filebrowser As New OpenFileDialog
            Dim mstrProgramFilesPath As String = System.Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles)
            filebrowser.InitialDirectory = mstrProgramFilesPath
            filebrowser.Filter = "Executable Files|*.exe"
            filebrowser.Title = "Find Executable Of Preferred Media Player"
            If filebrowser.ShowDialog = Windows.Forms.DialogResult.OK Then
                Preferences.selectedvideoplayer = filebrowser.FileName
                Label121.Visible = True
                Label121.Text = Preferences.selectedvideoplayer
            End If
            If prefsload = False Then
                generalprefschanged = True
                btnGeneralPrefsSaveChanges.Enabled = True
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub txtbx_minrarsize_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtbx_minrarsize.KeyPress
        Try
            If Char.IsNumber(e.KeyChar) = False And e.KeyChar <> Chr(8) Then
                If txtbx_minrarsize.Text <> "" Then
                    e.Handled = True
                Else
                    MsgBox("Please Enter at least 0")
                    txtbx_minrarsize.Text = "8"
                End If
            End If
            If txtbx_minrarsize.Text = "" Then
                MsgBox("Please enter a numerical Value that is 1 or more")
                txtbx_minrarsize.Text = "8"
                Exit Sub
            End If
            If Not IsNumeric(txtbx_minrarsize.Text) Then
                MsgBox("Please enter a numerical Value that is 1 or more")
                txtbx_minrarsize.Text = "8"
                Exit Sub
            End If
            Preferences.rarsize = Convert.ToInt32(txtbx_minrarsize.Text)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub txtbx_minrarsize_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtbx_minrarsize.TextChanged
        If IsNumeric(txtbx_minrarsize.Text) Then
            Preferences.rarsize = Convert.ToInt32(txtbx_minrarsize.Text)
        Else
            Preferences.rarsize = 8
            txtbx_minrarsize.Text = "8"
        End If
        If prefsload = False Then
            generalprefschanged = True
            btnGeneralPrefsSaveChanges.Enabled = True
        End If
    End Sub



    Private Sub chkbx_disablecache_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkbx_disablecache.CheckedChanged
        Try
            'If chkbx_disablecache.Checked = True Then
            '    Preferences.startupCache = False
            'Else
            '    Preferences.startupCache = True
            'End If

            Preferences.startupCache = Not chkbx_disablecache.Checked

            If prefsload = False Then
                generalprefschanged = True
                btnGeneralPrefsSaveChanges.Enabled = True
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub cbExternalbrowser_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cbExternalbrowser.CheckedChanged
        Try
            Preferences.externalbrowser = cbExternalbrowser.Checked
            btnFindBrowser.Enabled      = cbExternalbrowser.Checked

            If prefsload = False Then
                generalprefschanged = True
                btnGeneralPrefsSaveChanges.Enabled = True
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub


    Private Sub TabPage18_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles TabPage18.Leave
        Try
            If generalprefschanged = True Then
                Dim tempint As Integer = MessageBox.Show("You appear to have made changes to your preferences," & vbCrLf & "Do wish to save the changes", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                If tempint = DialogResult.Yes Then
                    Preferences.SaveConfig()

                    If CopyOfPreferencesIgnoreArticle <> Preferences.ignorearticle Then
                    '    oMovies.LoadMovieCache
                    '    UpdateFilteredList
                        Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)
                    End If
                    
                    MsgBox("Changes Saved")
                Else
                    Me.util_ConfigLoad(True)
                End If
                generalprefschanged = False
                btnGeneralPrefsSaveChanges.Enabled = False
            End If
            If Preferences.font <> Nothing Then
                If Preferences.font <> "" Then
                    Dim tc As TypeConverter = TypeDescriptor.GetConverter(GetType(System.Drawing.Font))
                    Dim newFont As System.Drawing.Font = CType(tc.ConvertFromString(Preferences.font), System.Drawing.Font)
                    Call util_FontSetup()
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub btnGeneralPrefsSaveChanges_Click(sender As System.Object, e As System.EventArgs) Handles btnGeneralPrefsSaveChanges.Click
        Try
            Preferences.SaveConfig()

            If CopyOfPreferencesIgnoreArticle <> Preferences.ignorearticle Then
            '    oMovies.LoadMovieCache
            '    UpdateFilteredList
                Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)
            End If

            generalprefschanged = False
            btnGeneralPrefsSaveChanges.Enabled = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_PreferencesSetup()
        displayRuntimeScraper = True
        If Preferences.enablehdtags = True Then
            CheckBox19.CheckState = CheckState.Checked
            PanelDisplayRuntime.Enabled = True
            If Preferences.movieRuntimeDisplay = "file" Then
                rbRuntimeFile.Checked = True
            Else
                rbRuntimeScraper.Checked = True
            End If
        Else
            CheckBox19.CheckState = CheckState.Unchecked
            PanelDisplayRuntime.Enabled = False
            rbRuntimeScraper.Checked = True
        End If
        Call mov_SwitchRuntime()

        ListBox9                    .SelectedItem   = Preferences.imdbmirror
        cbPreferredTrailerResolution.Enabled        = Preferences.gettrailer
        TextBox_OfflineDVDTitle     .Text           = Preferences.OfflineDVDTitle
        MovieRenameTemplateTextBox  .Text           = Preferences.MovieRenameTemplate
        localactorpath              .Text           = Preferences.actorsavepath
        xbmcactorpath               .Text           = Preferences.actornetworkpath
        cbPreferredTrailerResolution.Text           = Preferences.moviePreferredTrailerResolution.ToUpper()
        cbMovieRuntimeFallbackToFile.Enabled        = (Preferences.movieRuntimeDisplay = "scraper")
        cbMovieRuntimeFallbackToFile.Checked        = Preferences.movieRuntimeFallbackToFile
        tbDateFormat                .Text           = Preferences.DateFormat
        cbMovieList_ShowColPlot     .Checked        = Preferences.MovieList_ShowColPlot
        cbMovieList_ShowColWatched  .Checked        = Preferences.MovieList_ShowColWatched
        nudMovieScraper_MaxStudios  .Text           = Preferences.MovieScraper_MaxStudios
        nudActorsFilterMinFilms     .Text           = Preferences.ActorsFilterMinFilms
        nudMaxActorsInFilter        .Text           = Preferences.MaxActorsInFilter
        cbMovieFilters_Actors_Order .SelectedIndex  = Preferences.MovieFilters_Actors_Order
        nudSetsFilterMinFilms       .Text           = Preferences.SetsFilterMinFilms
        nudMaxSetsInFilter          .Text           = Preferences.MaxSetsInFilter
        cbMovieFilters_Sets_Order   .SelectedIndex  = Preferences.MovieFilters_Sets_Order
        chkbOriginal_Title          .Checked        = Preferences.Original_Title
        RadioButton52               .Checked        = If(Preferences.XBMC_Scraper = "tmdb", True, False )       

        CheckBox16.CheckState                   = If(Preferences.disablelogfiles, CheckState.Unchecked, CheckState.Checked)

        cbDlTrailerDuringScrape.CheckState      = If(Preferences.DownloadTrailerDuringScrape, CheckState.Checked, CheckState.Unchecked)
        CheckBox11.CheckState                   = If(Preferences.gettrailer, CheckState.Checked, CheckState.Unchecked)
        cbMoviePosterScrape.CheckState          = If(Preferences.scrapemovieposters, CheckState.Checked, CheckState.Unchecked)
        CheckBox13.CheckState                   = If(Preferences.savefanart, CheckState.Checked, CheckState.Unchecked)
        cbMovieUseFolderNames.CheckState         = If(Preferences.usefoldernames, CheckState.Checked, CheckState.Unchecked)
        cbMovieAllInFolders.CheckState        = If(Preferences.allfolders, CheckState.Checked, CheckState.Unchecked)
        chkbx_createfolderjpg.CheckState        = If(Preferences.createfolderjpg, CheckState.Checked, CheckState.Unchecked)
        chkbx_basicsave.CheckState              = If(Preferences.basicsavemode, CheckState.Checked, CheckState.Unchecked)
        cbxNameMode.CheckState                  = If(Preferences.namemode, CheckState.Checked, CheckState.Unchecked)
        cbxCleanFilenameIgnorePart.CheckState   = If(Preferences.movieignorepart, CheckState.Checked, CheckState.Unchecked)
        ScrapeFullCertCheckBox.CheckState       = If(Preferences.scrapefullcert, CheckState.Checked, CheckState.Unchecked)
        MovieRenameCheckBox.CheckState          = If(Preferences.MovieRenameEnable, CheckState.Checked, CheckState.Unchecked)
        CheckBox_ShowDateOnMovieList.CheckState = If(Preferences.showsortdate, CheckState.Checked, CheckState.Unchecked)
 
        'saveactorchkbx.CheckState               = If(Preferences.actorsave, CheckState.Checked, CheckState.Unchecked)
        saveactorchkbx.CheckState = CheckState.Unchecked

        localactorpath.Enabled                  = Preferences.actorsave
        xbmcactorpath.Enabled                   = Preferences.actorsave
        Button77.Enabled                        = Preferences.actorsave

        If Not Preferences.usefoldernames and Not Preferences.allfolders then
            chkbx_createfolderjpg.Enabled = False
            cbFanartInFolders.Enabled=False
            cbMoviePosterInFolder.Enabled=False
            Preferences.fanartjpg=False
            Preferences.posterjpg=False
        Else
            cbFanartInFolders.CheckState        = If(Preferences.fanartjpg, CheckState.Checked, CheckState.Unchecked)
            cbMoviePosterInFolder.CheckState    = If(Preferences.posterjpg, CheckState.Checked, CheckState.Unchecked)
        End If

        Select Case Preferences.maxactors
            Case 9999
                ComboBox7.SelectedItem = "All Available"
            Case 0
                ComboBox7.SelectedItem = "None"
            Case Else
                ComboBox7.SelectedItem = Preferences.maxactors.ToString
        End Select

        Select Case Preferences.maxmoviegenre
            Case 99
                ComboBox6.SelectedItem = "All Available"
            Case 0
                ComboBox6.SelectedItem = "None"
            Case Else
                ComboBox6.SelectedItem = Preferences.maxmoviegenre.ToString
        End Select

        If lbPosterSourcePriorities.Items.Count <> Preferences.moviethumbpriority.Length Then
            lbPosterSourcePriorities.Items.Clear()
            For f = 0 To 3
                lbPosterSourcePriorities.Items.Add(Preferences.moviethumbpriority(f))
            Next
        End If

        If ListBox11.Items.Count <> Preferences.certificatepriority.Length Then
            ListBox11.Items.Clear()
            For f = 0 To 33
                ListBox11.Items.Add(Preferences.certificatepriority(f))
            Next
        End If

        If lbVideoSource.Items.Count <> Preferences.releaseformat.Length Then
            lbVideoSource.Items.Clear()
            For f = 0 To Preferences.releaseformat.Length - 1
                lbVideoSource.Items.Add(Preferences.releaseformat(f))
            Next
        End If

        lbCleanFilename.Items.Clear()
        lbCleanFilename.Items.AddRange(Preferences.moviecleanTags.Split("|"))

        IMPA_chk.CheckState = If(Preferences.nfoposterscraper And 1, CheckState.Checked, CheckState.Unchecked)
        tmdb_chk.CheckState = If(Preferences.nfoposterscraper And 2, CheckState.Checked, CheckState.Unchecked)
        mpdb_chk.CheckState = If(Preferences.nfoposterscraper And 4, CheckState.Checked, CheckState.Unchecked)
        imdb_chk.CheckState = If(Preferences.nfoposterscraper And 8, CheckState.Checked, CheckState.Unchecked)


        If Preferences.movies_useXBMC_Scraper = True Then
            CheckBox_Use_XBMC_Scraper.CheckState = CheckState.Checked
        Else
            CheckBox_Use_XBMC_Scraper.CheckState = CheckState.Unchecked
            GroupBox_MovieIMDBMirror.Enabled = True
            GroupBox_MovieIMDBMirror.Visible = True
            GroupBox_MovieIMDBMirror.BringToFront()
        End If

        TMDbControlsIni()

        movieprefschanged = False
        btnMoviePrefSaveChanges.Enabled = False
    End Sub

    Private Sub CheckBox16_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox16.CheckedChanged
        Try
            If CheckBox16.CheckState = CheckState.Checked Then
                Preferences.disablelogfiles = False
            Else
                Preferences.disablelogfiles = True
            End If
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button73_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button73.Click
        Try
            Try
                Dim mSelectedIndex, mOtherIndex As Integer
                If Me.lbPosterSourcePriorities.SelectedIndex <> 0 Then
                    mSelectedIndex = Me.lbPosterSourcePriorities.SelectedIndex
                    mOtherIndex = mSelectedIndex - 1
                    lbPosterSourcePriorities.Items.Insert(mSelectedIndex + 1, lbPosterSourcePriorities.Items(mOtherIndex))
                    lbPosterSourcePriorities.Items.RemoveAt(mOtherIndex)
                End If
                For f = 0 To 3
                    Preferences.moviethumbpriority(f) = lbPosterSourcePriorities.Items(f)
                Next
                movieprefschanged = True
                btnMoviePrefSaveChanges.Enabled = True
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button61_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button61.Click
        Try
            Try
                Dim mSelectedIndex, mOtherIndex As Integer
                If Me.lbPosterSourcePriorities.SelectedIndex <> Me.ListBox3.Items.Count - 1 Then
                    mSelectedIndex = Me.lbPosterSourcePriorities.SelectedIndex
                    mOtherIndex = mSelectedIndex + 1
                    lbPosterSourcePriorities.Items.Insert(mSelectedIndex, lbPosterSourcePriorities.Items(mOtherIndex))
                    lbPosterSourcePriorities.Items.RemoveAt(mOtherIndex + 1)
                End If
                For f = 0 To 3
                    Preferences.moviethumbpriority(f) = lbPosterSourcePriorities.Items(f)
                Next
                movieprefschanged = True
                btnMoviePrefSaveChanges.Enabled = True
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub Button75_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button75.Click
        Try
            Try
                Dim mSelectedIndex, mOtherIndex As Integer
                If Me.ListBox11.SelectedIndex <> 0 Then
                    mSelectedIndex = Me.ListBox11.SelectedIndex
                    mOtherIndex = mSelectedIndex - 1
                    ListBox11.Items.Insert(mSelectedIndex + 1, ListBox11.Items(mOtherIndex))
                    ListBox11.Items.RemoveAt(mOtherIndex)
                End If
                For f = 0 To 33
                    Preferences.certificatepriority(f) = ListBox11.Items(f)
                Next
                movieprefschanged = True
                btnMoviePrefSaveChanges.Enabled = True
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button74_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button74.Click
        Try
            Try
                Dim mSelectedIndex, mOtherIndex As Integer
                If Me.ListBox11.SelectedIndex <> Me.ListBox11.Items.Count - 1 Then
                    mSelectedIndex = Me.ListBox11.SelectedIndex
                    mOtherIndex = mSelectedIndex + 1
                    ListBox11.Items.Insert(mSelectedIndex, ListBox11.Items(mOtherIndex))
                    ListBox11.Items.RemoveAt(mOtherIndex + 1)
                End If
                For f = 0 To 33
                    Preferences.certificatepriority(f) = ListBox11.Items(f)
                Next
                movieprefschanged = True
                btnMoviePrefSaveChanges.Enabled = True
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub saveactorchkbx_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles saveactorchkbx.CheckedChanged
        Try
            If saveactorchkbx.CheckState = CheckState.Checked Then
                Preferences.actorsave = True
                localactorpath.Text = Preferences.actorsavepath
                xbmcactorpath.Text = Preferences.actornetworkpath
                localactorpath.Enabled = True
                xbmcactorpath.Enabled = True
                Button77.Enabled = True
            Else
                Preferences.actorsave = False
                localactorpath.Text = ""
                xbmcactorpath.Text = ""
                localactorpath.Enabled = False
                xbmcactorpath.Enabled = False
                Button77.Enabled = False
            End If
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub



    Private Sub cbMoviePosterScrape_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cbMoviePosterScrape.CheckedChanged
        Try
            If cbMoviePosterScrape.CheckState = CheckState.Checked Then
                Preferences.scrapemovieposters = True
            Else
                Preferences.scrapemovieposters = False
            End If
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub cbMoviePosterInFolder_CheckedChanged( sender As System.Object,  e As System.EventArgs) Handles cbMoviePosterInFolder.CheckedChanged
        Try
            If cbMoviePosterInFolder.CheckState = CheckState.Checked Then
                If Preferences.usefoldernames or Preferences.allfolders Then
                    Preferences.posterjpg = True
                Else 
                    Preferences.posterjpg = False
                    cbMoviePosterInFolder.Checked = False
                    MsgBox("Either Use Foldername or All Movies in Folders not selected!")
                End If
            Else
                Preferences.posterjpg = False
            End If
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox13_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox13.CheckedChanged
        Try
            If CheckBox13.CheckState = CheckState.Checked Then
                Preferences.savefanart = True
            Else
                Preferences.savefanart = False
            End If
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub cbFanartInFolders_CheckedChanged( sender As System.Object,  e As System.EventArgs) Handles cbFanartInFolders.CheckedChanged
        Try
            If cbFanartInFolders.CheckState = CheckState.Checked Then
                If Preferences.usefoldernames or Preferences.allfolders Then
                    Preferences.fanartjpg = True
                Else 
                    Preferences.fanartjpg = False
                    cbFanartInFolders.Checked = False
                    MsgBox("Either Use Foldername or All Movies in Folders not selected!")
                End If
            Else
                Preferences.fanartjpg = False
            End If
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox11_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox11.CheckedChanged
        Preferences.gettrailer = CheckBox11.Checked
        cbPreferredTrailerResolution.Enabled = Preferences.gettrailer
        movieprefschanged = True
        btnMoviePrefSaveChanges.Enabled = True
    End Sub

    Private Sub cbDlTrailerDuringScrape_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles cbDlTrailerDuringScrape.CheckedChanged
        Preferences.DownloadTrailerDuringScrape = cbDlTrailerDuringScrape.Checked
        movieprefschanged = True
        btnMoviePrefSaveChanges.Enabled = True
    End Sub

    Private Sub CheckBox_Use_XBMC_Scraper_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_Use_XBMC_Scraper.CheckedChanged
        Try
            If CheckBox_Use_XBMC_Scraper.CheckState = CheckState.Checked Then
                Preferences.movies_useXBMC_Scraper = True
                GroupBox_MovieIMDBMirror.Enabled = False
                GroupBox_MovieIMDBMirror.Visible = False
                GroupBox_IMDB_Scraper_Preferences.Enabled = True
                GroupBox_IMDB_Scraper_Preferences.Visible = True
                GroupBox_IMDB_Scraper_Preferences.BringToFront()
                GroupBox11.Visible = False
                ComboBox7.Visible = False
                ComboBox6.Visible = False
                Label98.Visible = False
                Label92.Visible = False

                Label93.Enabled = False
                Label99.Enabled = False
                lbPosterSourcePriorities.Enabled = False
                Button73.Enabled = False
                Button61.Enabled = False


                RadioButton51.Enabled = False    'Hidden IMDB option for XBMC Scrapers as XBMC IMDB Scraper is broken.
                RadioButton52.Enabled = True
                If Preferences.XBMC_Scraper = "imdb" Then
                    RadioButton51.Checked = True
                    GroupBox_IMDB_Scraper_Preferences.Enabled = True
                    GroupBox_IMDB_Scraper_Preferences.Visible = True
                    GroupBox_IMDB_Scraper_Preferences.BringToFront()
                    GroupBox_TMDB_Scraper_Preferences.Enabled = False
                    GroupBox_TMDB_Scraper_Preferences.Visible = False
                    GroupBox_TMDB_Scraper_Preferences.SendToBack()
                ElseIf Preferences.XBMC_Scraper = "tmdb" Then
                    RadioButton52.Checked = True
                    GroupBox_IMDB_Scraper_Preferences.Enabled = False
                    GroupBox_IMDB_Scraper_Preferences.Visible = False
                    GroupBox_IMDB_Scraper_Preferences.SendToBack()
                    GroupBox_TMDB_Scraper_Preferences.Enabled = True
                    GroupBox_TMDB_Scraper_Preferences.Visible = True
                    GroupBox_TMDB_Scraper_Preferences.BringToFront()
                End If
            Else
                Preferences.movies_useXBMC_Scraper = False
                GroupBox_MovieIMDBMirror.Enabled = True
                GroupBox_MovieIMDBMirror.Visible = True
                GroupBox_MovieIMDBMirror.BringToFront()



                GroupBox11.Visible = True
                ComboBox7.Visible = True
                ComboBox6.Visible = True
                Label98.Visible = True
                Label92.Visible = True
                Label93.Enabled = True
                Label99.Enabled = True
                lbPosterSourcePriorities.Enabled = True
                Button73.Enabled = True
                Button61.Enabled = True
                RadioButton51.Enabled = False
                RadioButton52.Enabled = False
            End If
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    '### RadioButton51 has been disabled due to XBMC no longer supporting the IMDb scraper
    'Private Sub RadioButton51_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton51.CheckedChanged
    '    Try
    '        If RadioButton51.Checked = True Then
    '            Preferences.XBMC_Scraper = "imdb"
    '            Read_XBMC_IMDB_Scraper_Config()
    '            GroupBox_IMDB_Scraper_Preferences.Enabled = True
    '            GroupBox_IMDB_Scraper_Preferences.Visible = True
    '            GroupBox_IMDB_Scraper_Preferences.BringToFront()
    '            GroupBox_TMDB_Scraper_Preferences.Enabled = False
    '            GroupBox_TMDB_Scraper_Preferences.Visible = False
    '            GroupBox_TMDB_Scraper_Preferences.SendToBack()
    '        Else
    '            Preferences.XBMC_Scraper = "tmdb"
    '            GroupBox_IMDB_Scraper_Preferences.Enabled = False
    '            GroupBox_IMDB_Scraper_Preferences.Visible = False
    '            GroupBox_IMDB_Scraper_Preferences.SendToBack()
    '            GroupBox_TMDB_Scraper_Preferences.Enabled = True
    '            GroupBox_TMDB_Scraper_Preferences.Visible = True
    '            GroupBox_TMDB_Scraper_Preferences.BringToFront()
    '        End If
    '        movieprefschanged = True
    '        btnMoviePrefSaveChanges.Enabled = True
    '    Catch ex As Exception
    '        ExceptionHandler.LogError(ex)
    '    End Try
    'End Sub

    Private Sub RadioButton52_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton52.CheckedChanged
        Try
            If RadioButton52.Checked = True Then
                Preferences.XBMC_Scraper = "tmdb"
                Read_XBMC_TMDB_Scraper_Config()
                GroupBox_IMDB_Scraper_Preferences.Enabled = False
                GroupBox_IMDB_Scraper_Preferences.Visible = False
                GroupBox_IMDB_Scraper_Preferences.SendToBack()
                GroupBox_TMDB_Scraper_Preferences.Enabled = True
                GroupBox_TMDB_Scraper_Preferences.Visible = True
                GroupBox_TMDB_Scraper_Preferences.BringToFront()
            Else
                Preferences.XBMC_Scraper = "imdb"
                GroupBox_IMDB_Scraper_Preferences.Enabled = True
                GroupBox_IMDB_Scraper_Preferences.Visible = True
                GroupBox_IMDB_Scraper_Preferences.BringToFront()
                GroupBox_TMDB_Scraper_Preferences.Enabled = False
                GroupBox_TMDB_Scraper_Preferences.Visible = False
                GroupBox_TMDB_Scraper_Preferences.SendToBack()
            End If
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub cbMovieUseFolderNames_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cbMovieUseFolderNames.CheckedChanged
        Try
            If cbMovieUseFolderNames.CheckState = CheckState.Checked Then
                Preferences.usefoldernames = True
                cbMovieAllInFolders.Checked = False
                chkbx_createfolderjpg.Enabled = True
                cbFanartInFolders.Enabled = True
                cbMoviePosterInFolder.Enabled = True
            Else
                Preferences.usefoldernames = False
                If Not Preferences.allfolders then
                    chkbx_createfolderjpg.Checked = False
                    chkbx_createfolderjpg.Enabled = False
                    cbFanartInFolders.Checked = False
                    cbFanartInFolders.Enabled = False
                    cbMoviePosterInFolder.Checked = False
                    cbMoviePosterInFolder.Enabled = False
                    'Preferences.createfolderjpg = False
                End If
            End If
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub cbMovieAllInFolders_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles cbMovieAllInFolders.CheckedChanged
        Try
            Preferences.allfolders = cbMovieAllInFolders.Checked
            If cbMovieAllInFolders.Checked = True Then 
                cbMovieUseFolderNames.Checked = False
                chkbx_createfolderjpg.Enabled = True
                cbFanartInFolders.Enabled = True
                cbMoviePosterInFolder.Enabled = True
            Else
                If Not Preferences.usefoldernames Then
                    chkbx_createfolderjpg.Enabled = False
                    chkbx_createfolderjpg.Checked = False
                    cbFanartInFolders.Checked = False
                    cbFanartInFolders.Enabled = False
                    cbMoviePosterInFolder.Checked = False
                    cbMoviePosterInFolder.Enabled = False
                End If
            End If
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub chkbx_createfolderjpg_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkbx_createfolderjpg.CheckedChanged
        Try
            If chkbx_createfolderjpg.CheckState = CheckState.Checked and (Preferences.usefoldernames or Preferences.allfolders) Then
                Preferences.createfolderjpg = True
            Else
                Preferences.createfolderjpg = False
            End If
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ListBox9_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ListBox9.SelectedIndexChanged
        Try
            Preferences.imdbmirror = ListBox9.SelectedItem
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ComboBox7_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox7.SelectedIndexChanged
        Try
            If IsNumeric(ComboBox7.SelectedItem) Then
                Preferences.maxactors = Convert.ToInt32(ComboBox7.SelectedItem)
            ElseIf ComboBox7.SelectedItem.ToString.ToLower = "none" Then
                Preferences.maxactors = 0
            Else
                Preferences.maxactors = 9999
            End If
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub ComboBox6_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox6.SelectedIndexChanged
        Try
            If IsNumeric(ComboBox6.SelectedItem) Then
                Preferences.maxmoviegenre = Convert.ToInt32(ComboBox6.SelectedItem)
            ElseIf ComboBox6.SelectedItem.ToString.ToLower = "none" Then
                Preferences.maxmoviegenre = 0
            Else
                Preferences.maxmoviegenre = 9999
            End If
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub IMPA_chk_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles IMPA_chk.CheckedChanged
        Try
            Call mov_ThumbNailUrlsSet()
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mpdb_chk_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mpdb_chk.CheckedChanged
        Try
            Call mov_ThumbNailUrlsSet()
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub tmdb_chk_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tmdb_chk.CheckedChanged
        Try
            Call mov_ThumbNailUrlsSet()
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub imdb_chk_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles imdb_chk.CheckedChanged
        Try
            Call mov_ThumbNailUrlsSet()
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_ThumbNailUrlsSet()
        If IMPA_chk.CheckState = CheckState.Unchecked And tmdb_chk.CheckState = CheckState.Unchecked And mpdb_chk.CheckState = CheckState.Unchecked And imdb_chk.CheckState = CheckState.Unchecked Then
            Preferences.nfoposterscraper = 0
        ElseIf IMPA_chk.CheckState = CheckState.Checked And tmdb_chk.CheckState = CheckState.Unchecked And mpdb_chk.CheckState = CheckState.Unchecked And imdb_chk.CheckState = CheckState.Unchecked Then
            Preferences.nfoposterscraper = 1
        ElseIf IMPA_chk.CheckState = CheckState.Unchecked And tmdb_chk.CheckState = CheckState.Checked And mpdb_chk.CheckState = CheckState.Unchecked And imdb_chk.CheckState = CheckState.Unchecked Then
            Preferences.nfoposterscraper = 2
        ElseIf IMPA_chk.CheckState = CheckState.Checked And tmdb_chk.CheckState = CheckState.Checked And mpdb_chk.CheckState = CheckState.Unchecked And imdb_chk.CheckState = CheckState.Unchecked Then
            Preferences.nfoposterscraper = 3
        ElseIf IMPA_chk.CheckState = CheckState.Unchecked And tmdb_chk.CheckState = CheckState.Unchecked And mpdb_chk.CheckState = CheckState.Checked And imdb_chk.CheckState = CheckState.Unchecked Then
            Preferences.nfoposterscraper = 4
        ElseIf IMPA_chk.CheckState = CheckState.Checked And tmdb_chk.CheckState = CheckState.Unchecked And mpdb_chk.CheckState = CheckState.Checked And imdb_chk.CheckState = CheckState.Unchecked Then
            Preferences.nfoposterscraper = 5
        ElseIf IMPA_chk.CheckState = CheckState.Unchecked And tmdb_chk.CheckState = CheckState.Checked And mpdb_chk.CheckState = CheckState.Checked And imdb_chk.CheckState = CheckState.Unchecked Then
            Preferences.nfoposterscraper = 6
        ElseIf IMPA_chk.CheckState = CheckState.Checked And tmdb_chk.CheckState = CheckState.Checked And mpdb_chk.CheckState = CheckState.Checked And imdb_chk.CheckState = CheckState.Unchecked Then
            Preferences.nfoposterscraper = 7
        ElseIf IMPA_chk.CheckState = CheckState.Unchecked And tmdb_chk.CheckState = CheckState.Unchecked And mpdb_chk.CheckState = CheckState.Unchecked And imdb_chk.CheckState = CheckState.Checked Then
            Preferences.nfoposterscraper = 8
        ElseIf IMPA_chk.CheckState = CheckState.Checked And tmdb_chk.CheckState = CheckState.Unchecked And mpdb_chk.CheckState = CheckState.Unchecked And imdb_chk.CheckState = CheckState.Checked Then
            Preferences.nfoposterscraper = 9
        ElseIf IMPA_chk.CheckState = CheckState.Unchecked And tmdb_chk.CheckState = CheckState.Checked And mpdb_chk.CheckState = CheckState.Unchecked And imdb_chk.CheckState = CheckState.Checked Then
            Preferences.nfoposterscraper = 10
        ElseIf IMPA_chk.CheckState = CheckState.Checked And tmdb_chk.CheckState = CheckState.Checked And mpdb_chk.CheckState = CheckState.Unchecked And imdb_chk.CheckState = CheckState.Checked Then
            Preferences.nfoposterscraper = 11
        ElseIf IMPA_chk.CheckState = CheckState.Unchecked And tmdb_chk.CheckState = CheckState.Unchecked And mpdb_chk.CheckState = CheckState.Checked And imdb_chk.CheckState = CheckState.Checked Then
            Preferences.nfoposterscraper = 12
        ElseIf IMPA_chk.CheckState = CheckState.Checked And tmdb_chk.CheckState = CheckState.Unchecked And mpdb_chk.CheckState = CheckState.Checked And imdb_chk.CheckState = CheckState.Checked Then
            Preferences.nfoposterscraper = 13
        ElseIf IMPA_chk.CheckState = CheckState.Unchecked And tmdb_chk.CheckState = CheckState.Checked And mpdb_chk.CheckState = CheckState.Checked And imdb_chk.CheckState = CheckState.Checked Then
            Preferences.nfoposterscraper = 14
        ElseIf IMPA_chk.CheckState = CheckState.Checked And tmdb_chk.CheckState = CheckState.Checked And mpdb_chk.CheckState = CheckState.Checked And imdb_chk.CheckState = CheckState.Checked Then
            Preferences.nfoposterscraper = 15
        End If
    End Sub

    Private Sub Button77_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button77.Click
        Try
            Dim theFolderBrowser As New FolderBrowserDialog
            Dim thefoldernames As String
            theFolderBrowser.Description = "Please Select Folder to Save Actor Thumbnails)"
            theFolderBrowser.ShowNewFolderButton = True
            theFolderBrowser.RootFolder = System.Environment.SpecialFolder.Desktop
            theFolderBrowser.SelectedPath = Preferences.lastpath
            If theFolderBrowser.ShowDialog = Windows.Forms.DialogResult.OK Then
                thefoldernames = (theFolderBrowser.SelectedPath)
                localactorpath.Text = thefoldernames
                Preferences.lastpath = thefoldernames
                Preferences.actorsavepath = thefoldernames
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub localactorpath_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles localactorpath.TextChanged
        Try
            Preferences.actorsavepath = localactorpath.Text
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub xbmcactorpath_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles xbmcactorpath.TextChanged
        Try
            Preferences.actornetworkpath = xbmcactorpath.Text
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub chkbx_basicsave_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkbx_basicsave.CheckedChanged
        Try
            If chkbx_basicsave.CheckState = CheckState.Checked Then
                Preferences.basicsavemode = True
            Else
                Preferences.basicsavemode = False
            End If
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TabPage26_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles TabPage26.Leave
        Try
            If movieprefschanged Then
                Dim tempint As Integer = MessageBox.Show("You appear to have made changes to your preferences," & vbCrLf & "Do wish to save the changes", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                If tempint = DialogResult.Yes Then
                    applyAdvancedLists()
                    Preferences.SaveConfig()
                Else
                    util_ConfigLoad(True)
                End If
            End If
            movieprefschanged = False
            btnMoviePrefSaveChanges.Enabled = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button91_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button91.Click
        Try
            ListBox12.Items.Clear()
            languageList.Clear()
            util_LanguageListLoad()

            Try
                ListBox12.SelectedItem = Preferences.TvdbLanguage
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ListBox12_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ListBox12.SelectedIndexChanged
        Try
            For Each lan In languageList
                If lan.Language.Value = ListBox12.SelectedItem Then
                    Preferences.TvdbLanguage = lan.Language.Value
                    Preferences.TvdbLanguageCode = lan.Abbreviation.Value
                    Exit For
                End If
            Next
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox14_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox14.CheckedChanged
        Try
            If CheckBox14.CheckState = CheckState.Checked Then
                Preferences.tvposter = True
            Else
                Preferences.tvposter = False
            End If
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox10_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox10.CheckedChanged
        Try
            If CheckBox10.CheckState = CheckState.Checked Then
                Preferences.tvfanart = True
            Else
                Preferences.tvfanart = False
            End If
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox15_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox15.CheckedChanged
        Try
            If CheckBox15.CheckState = CheckState.Checked Then
                Preferences.downloadtvseasonthumbs = True
            Else
                Preferences.downloadtvseasonthumbs = False
            End If
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub posterbtn_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles posterbtn.CheckedChanged
        Try
            If posterbtn.Checked = True Then
                Preferences.postertype = "poster"
            End If
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub bannerbtn_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles bannerbtn.CheckedChanged
        Try
            If bannerbtn.Checked = True Then
                Preferences.postertype = "banner"
            End If
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton41_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton41.CheckedChanged
        Try
            'none
            If RadioButton41.Checked = True Then
                Preferences.seasonall = "none"
            End If
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton40_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton40.CheckedChanged
        Try
            'poster
            If RadioButton40.Checked = True Then
                Preferences.seasonall = "poster"
            End If
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton39_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton39.CheckedChanged
        Try
            'banner
            If RadioButton39.Checked = True Then
                Preferences.seasonall = "wide"
            End If
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    'Private Sub RadioButton43_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton43.CheckedChanged
    '    Try
    '        If RadioButton43.Checked = True Then
    '            Preferences.sortorder = "default"
    '        Else
    '            Preferences.sortorder = "dvd"
    '        End If
    '        tvprefschanged = True
    '        btnTVPrefSaveChanges.Enabled = True
    '    Catch ex As Exception
    '        ExceptionHandler.LogError(ex)
    '    End Try
    'End Sub

    Private Sub RadioButton42_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton42.CheckedChanged
        Try
            If RadioButton42.Checked = True Then
                Preferences.sortorder = "dvd"
            Else
                Preferences.sortorder = "default"
            End If
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ComboBox8_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox8.SelectedIndexChanged
        Try
            Preferences.TvdbActorScrape = ComboBox8.SelectedIndex.ToString
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub tv_PreferencesSetup()
        ComboBox_tv_EpisodeRename.Items.Clear()
        For Each Regex In tv_RegexRename
            ComboBox_tv_EpisodeRename.Items.Add(Regex)
        Next

        ListBox_tv_RegexScrape.Items.Clear()
        For Each regexc In tv_RegexScraper
            ListBox_tv_RegexScrape.Items.Add(regexc)
        Next

        ListBox_tv_RegexRename.Items.Clear()
        For Each regexc In tv_RegexRename
            ListBox_tv_RegexRename.Items.Add(regexc)
        Next

        ListBox12.Items.Clear()
        ListBox12.Items.Add(Preferences.TvdbLanguage)
        If ListBox12.Items.Count <> 0 Then
            ListBox12.SelectedIndex = 0
        End If

        ComboBox8.SelectedIndex                     = Preferences.TvdbActorScrape
        ComboBox_tv_EpisodeRename.SelectedIndex     = If(Preferences.tvrename < ComboBox_tv_EpisodeRename.Items.Count, Preferences.tvrename, 0)

        CheckBox17.CheckState                       = If(Preferences.disabletvlogs, CheckState.Unchecked, CheckState.Checked)

        CheckBox20.CheckState                       = If(Preferences.enabletvhdtags, CheckState.Checked, CheckState.Unchecked)
        CheckBox_tv_EpisodeRenameCase.CheckState    = If(Preferences.eprenamelowercase, CheckState.Checked, CheckState.Unchecked)
        CheckBox_tv_EpisodeRenameAuto.CheckState    = If(Preferences.autorenameepisodes, CheckState.Checked, CheckState.Unchecked)
        CheckBox36.CheckState                       = If(Preferences.autoepisodescreenshot, CheckState.Checked, CheckState.Unchecked)
        CheckBox35.CheckState                       = If(Preferences.tvshowautoquick, CheckState.Checked, CheckState.Unchecked)
        CheckBox34.CheckState                       = If(Preferences.copytvactorthumbs, CheckState.Checked, CheckState.Unchecked)
        CheckBox14.CheckState                       = If(Preferences.tvposter, CheckState.Checked, CheckState.Unchecked)
        CheckBox10.CheckState                       = If(Preferences.tvfanart, CheckState.Checked, CheckState.Unchecked)
        CheckBox15.CheckState                       = If(Preferences.downloadtvseasonthumbs, CheckState.Checked, CheckState.Unchecked)
        CheckBox_Use_XBMC_TVDB_Scraper.CheckState   = If(Preferences.tvshow_useXBMC_Scraper, CheckState.Checked, CheckState.Unchecked)
        AutoScrnShtDelay.Text = ScrShtDelay

        Select Case Preferences.seasonall
            Case "none"
                RadioButton41.Checked = True
            Case "poster"
                RadioButton40.Checked = True
            Case "wide"
                RadioButton39.Checked = True
        End Select

        If Preferences.sortorder = "dvd" Then
            RadioButton42.Checked = True
        Else
            RadioButton43.Checked = True
        End If

        If Preferences.postertype = "poster" Then
            posterbtn.Checked = True
        Else
            bannerbtn.Checked = True
        End If

        tvprefschanged = False
        btnTVPrefSaveChanges.Enabled = False
    End Sub

    Private Sub Button_tv_RegexScrape_Restore_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button_tv_RegexScrape_Restore.Click
        Try
            util_RegexSetDefaultScraper()
            ListBox_tv_RegexScrape.Items.Clear()
            For Each Regex In tv_RegexScraper
                ListBox_tv_RegexScrape.Items.Add(Regex)
            Next
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexRename_Restore_Click(sender As Object, e As System.EventArgs) Handles Button_tv_RegexRename_Restore.Click
        Try
            util_RegexSetDefaultRename()
            ListBox_tv_RegexRename.Items.Clear()
            For Each Regex In tv_RegexRename
                ListBox_tv_RegexRename.Items.Add(Regex)
            Next
            ComboBox_tv_EpisodeRename.Items.Clear()
            For Each Regex In tv_RegexRename
                ComboBox_tv_EpisodeRename.Items.Add(Regex)
            Next
            ComboBox_tv_EpisodeRename.SelectedIndex = Preferences.tvrename
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub CheckBox17_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox17.CheckedChanged
        Try
            If CheckBox17.CheckState = CheckState.Checked Then
                Preferences.disabletvlogs = False
            Else
                Preferences.disabletvlogs = True
            End If
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexScrape_Remove_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button_tv_RegexScrape_Remove.Click
        Try
            'remove selected
            Dim tempstring = ListBox_tv_RegexScrape.SelectedItem
            Try
                ListBox_tv_RegexScrape.Items.Remove(ListBox_tv_RegexScrape.SelectedItem)
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
            For Each regexp In tv_RegexScraper
                If regexp = tempstring Then
                    tv_RegexScraper.Remove(regexp)
                    Exit For
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Function util_RegexValidate(ByVal regexs As String)
        Try
            Dim test As Match
            test = Regex.Match("", regexs)
        Catch ex As Exception
            Return False
        End Try
        Return True
    End Function

    Private Sub Button_tv_RegexScrape_Edit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button_tv_RegexScrape_Edit.Click
        Try
            'edit
            If TextBox_tv_RegexScrape_Edit.Text = "" Then
                MsgBox("No Text")
                'TextBox46.Text = ListBox7.SelectedItem     'WTF? Listbox7 = Movie Folder?
                Exit Sub
            End If
            If Not util_RegexValidate(TextBox_tv_RegexScrape_Edit.Text) Then
                MsgBox("Invalid Regex")
                Exit Sub
            End If
            Dim tempint As Integer = ListBox_tv_RegexScrape.SelectedIndex
            ListBox_tv_RegexScrape.Items.RemoveAt(tempint)
            ListBox_tv_RegexScrape.Items.Insert(tempint, TextBox_tv_RegexScrape_Edit.Text)
            ListBox_tv_RegexScrape.SelectedIndex = tempint
            tv_RegexScraper.Clear()
            For Each regexp In ListBox_tv_RegexScrape.Items
                tv_RegexScraper.Add(regexp)
            Next
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexScrape_Add_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button_tv_RegexScrape_Add.Click
        Try
            'add textbox49
            If Not util_RegexValidate(TextBox_tv_RegexScrape_New.Text) Then
                MsgBox("Invalid Regex")
                Exit Sub
            End If
            ListBox_tv_RegexScrape.Items.Add(TextBox_tv_RegexScrape_New.Text)
            tv_RegexScraper.Add(TextBox_tv_RegexScrape_New.Text)

            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexRename_Remove_Click(sender As Object, e As System.EventArgs) Handles Button_tv_RegexRename_Remove.Click
        Try
            Dim strRegexSelected = ListBox_tv_RegexRename.SelectedItem
            Dim idxRegexSelected = ListBox_tv_RegexRename.SelectedIndex

            Try
                ListBox_tv_RegexRename.Items.RemoveAt(idxRegexSelected)
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try

            For Each regexp In tv_RegexRename
                If regexp = strRegexSelected Then
                    tv_RegexRename.Remove(regexp)
                    Exit For
                End If
            Next

            TextBox_tv_RegexRename_Edit.Clear()

            ComboBox_tv_EpisodeRename.Items.Clear()
            For Each Regex In tv_RegexRename
                ComboBox_tv_EpisodeRename.Items.Add(Regex)
            Next
            ComboBox_tv_EpisodeRename.SelectedIndex = If(Preferences.tvrename >= idxRegexSelected, Preferences.tvrename - 1, Preferences.tvrename)

            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexRename_Add_Click(sender As Object, e As System.EventArgs) Handles Button_tv_RegexRename_Add.Click
        Try
            'add
            ListBox_tv_RegexRename.Items.Add(TextBox_tv_RegexRename_New.Text)
            tv_RegexRename.Add(TextBox_tv_RegexRename_New.Text)
            TextBox_tv_RegexRename_New.Clear()
            ComboBox_tv_EpisodeRename.Items.Clear()
            For Each Regex In tv_RegexRename
                ComboBox_tv_EpisodeRename.Items.Add(Regex)
            Next
            ComboBox_tv_EpisodeRename.SelectedIndex = Preferences.tvrename

            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexRename_Edit_Click(sender As Object, e As System.EventArgs) Handles Button_tv_RegexRename_Edit.Click
        Try
            'edit
            If TextBox_tv_RegexRename_Edit.Text = "" Then
                MsgBox("No Text")
                'TextBox50.Text = ListBox7.SelectedItem
                Exit Sub
            End If
            Dim tempint As Integer = ListBox_tv_RegexRename.SelectedIndex
            ListBox_tv_RegexRename.Items.RemoveAt(tempint)
            ListBox_tv_RegexRename.Items.Insert(tempint, TextBox_tv_RegexRename_Edit.Text)
            ListBox_tv_RegexRename.SelectedIndex = tempint
            tv_RegexRename.Clear()
            For Each regexp In ListBox_tv_RegexRename.Items
                tv_RegexRename.Add(regexp)
            Next
            TextBox_tv_RegexRename_Edit.Clear()
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btnTVPrefSaveChanges_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnTVPrefSaveChanges.Click
        Try
            Preferences.SaveConfig()
            Call util_RegexSave()
            ComboBox_tv_EpisodeRename.Items.Clear()
            For Each Regex In tv_RegexRename
                ComboBox_tv_EpisodeRename.Items.Add(Regex)
            Next
            'MsgBox("Changes Saved!" & vbCrLf & vbCrLf & "Please restart the program" & vbCrLf & "for the changes to take effect")
            tvprefschanged = False
            btnTVPrefSaveChanges.Enabled = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TabPage24_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles TabPage24.Leave
        Try
            If tvprefschanged = True Then
                Dim tempint As Integer = MessageBox.Show("You appear to have made changes to your preferences," & vbCrLf & "Do wish to save the changes", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                If tempint = DialogResult.Yes Then

                    Call util_RegexSave()
                    Preferences.SaveConfig()
                    MsgBox("Changes Saved")
                Else

                    Me.util_ConfigLoad(True)
                    Call util_RegexLoad()
                End If
                tvprefschanged = False
                btnTVPrefSaveChanges.Enabled = False
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexScrape_Test_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button_tv_RegexScrape_Test.Click
        Try
            If TextBox_tv_RegexScrape_TestString.Text = "" Then
                MsgBox("Please Enter a filename or any string to test")
                Exit Sub
            End If
            If ListBox_tv_RegexScrape.SelectedItem = Nothing Then
                MsgBox("Please Select a Regex to test")
                Exit Sub
            End If
            TextBox_tv_RegexScrape_TestResult.Text = ""
            Dim tvseries As String
            Dim tvepisode As String
            Dim s As String
            Dim tempstring As String = TextBox_tv_RegexScrape_TestString.Text
            s = tempstring '.ToLower
            Dim M As Match


            M = Regex.Match(s, ListBox_tv_RegexScrape.SelectedItem)
            If M.Success = True Then
                Try
                    tvseries = M.Groups(1).Value
                    tvepisode = M.Groups(2).Value
                Catch
                    tvseries = "-1"
                    tvepisode = "-1"
                End Try
                Try
                    If tvseries <> "-1" Then
                        TextBox_tv_RegexScrape_TestResult.Text = "Series No = " & tvseries & vbCrLf
                    End If
                    If tvepisode <> "-1" Then
                        TextBox_tv_RegexScrape_TestResult.Text = TextBox_tv_RegexScrape_TestResult.Text & "Episode No = " & tvepisode
                    End If
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
            Else
                TextBox_tv_RegexScrape_TestResult.Text = "No Matches"
            End If

        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub bckgrnd_tvshowscraper_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bckgrnd_tvshowscraper.RunWorkerCompleted
        Try
            ToolStripStatusLabel5.Text = "Saving data"
            Tv_CacheSave()
            ToolStripStatusLabel5.Text = "Populating shows"
            tv_CacheRefresh()
            ToolStripStatusLabel5.Visible = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub


    Public Function tv_LanguageCheck(ByVal id As String, ByVal language As String)
        Try
            Dim languagecode As String = language
            Dim url As String = "http://thetvdb.com/api/6E82FED600783400/series/" & id & "/" & languagecode & ".xml"
            Dim websource(10000)
            Dim urllinecount As Integer = 0
            Try
                Dim wrGETURL As WebRequest
                wrGETURL = WebRequest.Create(url)
                Dim myProxy As New WebProxy("myproxy", 80)
                myProxy.BypassProxyOnLocal = True
                Dim objStream As Stream
                objStream = wrGETURL.GetResponse.GetResponseStream()
                Dim objReader As New StreamReader(objStream)
                Dim sLine As String = ""
                urllinecount = 0

                Do While Not sLine Is Nothing
                    urllinecount += 1
                    sLine = objReader.ReadLine
                    If Not sLine Is Nothing Then
                        websource(urllinecount) = sLine
                    End If
                Loop
                objReader.Close()
                objStream.Close()
                urllinecount -= 1

            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
                'MsgBox(ex.ToString)
            End Try
            For f = 1 To urllinecount
                If websource(f).IndexOf("<Language>") <> -1 Then
                    websource(f) = websource(f).Replace("<Language>", "")
                    websource(f) = websource(f).Replace("</Language>", "")
                    websource(f) = websource(f).Replace("  ", "")
                    If websource(f).ToLower = languagecode Then
                        Return True
                    Else
                        Return False
                    End If
                End If
            Next
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
        Return "Error"
    End Function

    Private Sub Button79_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button79.Click
        Try
            For Each pro In profileStruct.ProfileList
                If pro.ProfileName.ToLower = TextBox42.Text.ToLower Then
                    MsgBox("This Profile Already Exists" & vbCrLf & "Please Select Another Name")
                    Exit Sub
                End If
            Next
            Dim done As Boolean = False
            Dim tempint As Integer = 0
            For f = 1 To 1000
                Dim tempstring2 As String = applicationPath & "\Settings\"
                Dim configpath As String = tempstring2 & "config" & f.ToString & ".xml"
                Dim actorcachepath As String = tempstring2 & "actorcache" & f.ToString & ".xml"
                Dim filterspath As String = tempstring2 & "filters" & f.ToString & ".xml"
                Dim moviecachepath As String = tempstring2 & "moviecache" & f.ToString & ".xml"
                Dim regexpath As String = tempstring2 & "regex" & f.ToString & ".xml"
                Dim tvcachepath As String = tempstring2 & "tvcache" & f.ToString & ".xml"
                Dim ok As Boolean = True
                If IO.File.Exists(configpath) Then
                    ok = False
                End If
                If IO.File.Exists(actorcachepath) Then
                    ok = False
                End If
                If IO.File.Exists(filterspath) Then
                    ok = False
                End If
                If IO.File.Exists(moviecachepath) Then
                    ok = False
                End If
                If IO.File.Exists(regexpath) Then
                    ok = False
                End If
                If IO.File.Exists(tvcachepath) Then
                    ok = False
                End If
                If ok = True Then
                    tempint = f
                    Exit For
                End If
            Next
            'new profilename
            Dim tempstring As String = applicationPath & "\Settings\"
            Dim moviecachetocopy As String = String.Empty
            Dim actorcachetocopy As String = String.Empty
            Dim tvcachetocopy As String = String.Empty
            Dim configtocopy As String = String.Empty
            Dim filterstocopy As String = String.Empty
            Dim regextocopy As String = String.Empty
            For Each profs In profileStruct.ProfileList
                If profs.ProfileName = profileStruct.defaultprofile Then
                    moviecachetocopy = profs.MovieCache
                    actorcachetocopy = profs.ActorCache
                    tvcachetocopy = profs.TvCache
                    configtocopy = profs.Config
                    filterstocopy = profs.Filters
                    regextocopy = profs.RegExList
                End If
            Next

            Dim profiletoadd As New ListOfProfiles
            profiletoadd.ActorCache = tempstring & "actorcache" & tempint.ToString & ".xml"
            profiletoadd.Config = tempstring & "config" & tempint.ToString & ".xml"
            profiletoadd.Filters = tempstring & "filters" & tempint.ToString & ".xml"
            profiletoadd.MovieCache = tempstring & "moviecache" & tempint.ToString & ".xml"
            profiletoadd.RegExList = tempstring & "regex" & tempint.ToString & ".xml"
            profiletoadd.TvCache = tempstring & "tvcache" & tempint.ToString & ".xml"
            profiletoadd.ProfileName = TextBox42.Text
            profileStruct.ProfileList.Add(profiletoadd)

            If System.IO.File.Exists(moviecachetocopy) = True Then
                System.IO.File.Copy(moviecachetocopy, profiletoadd.MovieCache)
            End If
            If System.IO.File.Exists(actorcachetocopy) = True Then
                System.IO.File.Copy(actorcachetocopy, profiletoadd.ActorCache)
            End If
            If System.IO.File.Exists(tvcachetocopy) = True Then
                System.IO.File.Copy(tvcachetocopy, profiletoadd.TvCache)
            End If
            If System.IO.File.Exists(configtocopy) = True Then
                System.IO.File.Copy(configtocopy, profiletoadd.Config)
            End If
            If System.IO.File.Exists(filterstocopy) = True Then
                System.IO.File.Copy(filterstocopy, profiletoadd.Filters)
            End If
            If System.IO.File.Exists(regextocopy) = True Then
                System.IO.File.Copy(regextocopy, profiletoadd.RegExList)
            End If
            ListBox13.Items.Add(TextBox42.Text)
            Call util_ProfileSave()
            done = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button78_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button78.Click
        Try
            'setselected profile to default
            For Each prof In profileStruct.ProfileList
                If prof.ProfileName = ListBox13.SelectedItem Then
                    profileStruct.defaultprofile = prof.ProfileName
                    Label112.Text = "Current Default Profile: " & prof.ProfileName
                    Call util_ProfileSave()
                    Exit For
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button93_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button93.Click
        Try
            'setselected profile to startup
            For Each prof In profileStruct.ProfileList
                If prof.ProfileName = ListBox13.SelectedItem Then
                    profileStruct.startupprofile = prof.ProfileName
                    Label108.Text = "Current Startup Profile: " & prof.ProfileName
                    Call util_ProfileSave()
                    Exit For
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button80_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button80.Click
        Try
            'remove selected profile
            If ListBox13.SelectedItem = profileStruct.DefaultProfile Then
                MsgBox("You can't delete your default profile" & vbCrLf & "Set another Profile to default then delete it")
                Exit Sub
            End If
            If ListBox13.SelectedItem = profileStruct.StartupProfile Then
                MsgBox("You can't delete your startup profile" & vbCrLf & "Set another Profile to startup then delete it")
                Exit Sub
            End If
            If ListBox13.SelectedItem = workingProfile.profilename Then
                MsgBox("You can't delete a loaded profile" & vbCrLf & "Load another Profile then delete it")
                Exit Sub
            End If
            Dim tempint As Integer = MessageBox.Show("Removing a profile will delete all associated cache files and settings," & vbCrLf & "Are you sure you want to remove the selected profile", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
            If tempint = DialogResult.Yes Then
                Dim tempint2 As Integer = 0
                For f = 0 To profileStruct.ProfileList.Count - 1

                    If profileStruct.profilelist(f).ProfileName = ListBox13.SelectedItem Then
                        tempint2 = f
                        Try
                            IO.File.Delete(profileStruct.profilelist(f).ActorCache)
                        Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                        End Try
                        Try
                            IO.File.Delete(profileStruct.profilelist(f).Config)
                        Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                        End Try
                        Try
                            IO.File.Delete(profileStruct.profilelist(f).Filters)
                        Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                        End Try
                        Try
                            IO.File.Delete(profileStruct.profilelist(f).MovieCache)
                        Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                        End Try
                        Try
                            IO.File.Delete(profileStruct.profilelist(f).RegExList)
                        Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                        End Try
                        Try
                            IO.File.Delete(profileStruct.profilelist(f).TvCache)
                        Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                        End Try
                        Exit For
                    End If
                Next
                profileStruct.ProfileList.RemoveAt(tempint2)
                ListBox13.Items.Clear()
                ProfilesToolStripMenuItem.DropDownItems.Clear()
                If profileStruct.ProfileList.Count > 1 Then
                    ProfilesToolStripMenuItem.Visible = True
                Else
                    ProfilesToolStripMenuItem.Visible = False
                End If
                ProfilesToolStripMenuItem.DropDownItems.Clear()
                For Each prof In profileStruct.ProfileList
                    ListBox13.Items.Add(prof.ProfileName)
                    ProfilesToolStripMenuItem.DropDownItems.Add(prof.ProfileName)
                Next


            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub ProfilesToolStripMenuItem_DropDownItemClicked(ByVal sender As Object, ByVal e As System.Windows.Forms.ToolStripItemClickedEventArgs) Handles ProfilesToolStripMenuItem.DropDownItemClicked
        Try
            generalprefschanged = False

            Preferences.SaveConfig()

            For Each prof In profileStruct.ProfileList
                If prof.ProfileName = e.ClickedItem.Text Then
                    workingProfile.actorcache = prof.actorcache
                    workingProfile.config = prof.config
                    workingProfile.filters = prof.filters
                    workingProfile.moviecache = prof.moviecache
                    workingProfile.profilename = prof.profilename
                    workingProfile.regexlist = prof.regexlist
                    workingProfile.tvcache = prof.tvcache
                    Call util_ProfileSetup()
                End If
            Next
            If e.ClickedItem.Text <> workingProfile.profilename Then
                Exit Sub
            End If
            For Each item In ProfilesToolStripMenuItem.DropDownItems
                If item.text = workingProfile.profilename Then
                    With item
                        item.checked = True
                    End With
                Else
                    item.checked = False
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub util_ProfileSetup()

        Dim mess As New frmMessageBox(" Please Wait", , "Loading Profile")
        mess.Show()
        mess.Refresh()
        Application.DoEvents()
        Me.Enabled = False
        If IO.File.Exists(workingProfile.config) Then
            Preferences.moviesets.Clear()
            Me.util_ConfigLoad()
        Else
            Call SetUpPreferences()
        End If

        util_MainFormTitleUpdate()  'creates & shows new title to Form1, also includes current profile name

        If Not IO.File.Exists(workingProfile.moviecache) Or Preferences.startupCache = False Then
            mov_RebuildMovieCaches
        Else
            oMovies.LoadCaches
        End If

        If IO.File.Exists(workingProfile.filters) Then
            Call util_GenreLoad()
        End If

        If Not IO.File.Exists(workingProfile.tvcache) Or Preferences.startupCache = False Then
            Call tv_CacheRefresh()
        Else
            Call tv_CacheLoad()
        End If




        'If Preferences.maximised = True Then
        '    Me.WindowState = FormWindowState.Maximized
        'Else
        '    If Preferences.locx <> 0 Then
        '        Me.Location = New Point(Preferences.locx, Preferences.locy)
        '    End If
        '    If Preferences.locy <> 0 Then
        '        Me.Location = New Point(Preferences.locx, Preferences.locy)
        '    End If
        '    If Preferences.formheight <> 0 And Preferences.formwidth <> 0 Then
        '        Me.Width = Preferences.formwidth
        '        Me.Height = Preferences.formheight
        '    End If
        'End If

        Me.Refresh()
        Application.DoEvents()

        If Preferences.splt5 = 0 Then
            Dim tempint As Integer = SplitContainer1.Height
            tempint = tempint / 4
            tempint = tempint * 3
            If tempint > 275 Then
                Preferences.splt5 = tempint
            Else
                Preferences.splt5 = 275
            End If
        End If

        If Preferences.startuptab = 0 Then
            SplitContainer1.SplitterDistance = Preferences.splt1
            SplitContainer2.SplitterDistance = Preferences.splt2
            SplitContainer5.SplitterDistance = Preferences.splt5
            TabLevel1.SelectedIndex = 1
            SplitContainer3.SplitterDistance = Preferences.splt3
            SplitContainer4.SplitterDistance = Preferences.splt4
            TabLevel1.SelectedIndex = 0
        Else
            SplitContainer1.SplitterDistance = Preferences.splt1
            SplitContainer2.SplitterDistance = Preferences.splt2
            SplitContainer5.SplitterDistance = Preferences.splt5
            TabLevel1.SelectedIndex = 1
            SplitContainer3.SplitterDistance = Preferences.splt3
            SplitContainer4.SplitterDistance = Preferences.splt4
        End If
        SplitContainer1.IsSplitterFixed = False
        SplitContainer2.IsSplitterFixed = False
        SplitContainer3.IsSplitterFixed = False
        SplitContainer4.IsSplitterFixed = False
        SplitContainer5.IsSplitterFixed = False
        'Dim tempboolean As Boolean = UrlIsValid("http://thetvdb.com/")

        Try
            If cbMovieDisplay_MovieSet.Items.Count <> Preferences.moviesets.Count Then
                cbMovieDisplay_MovieSet.Items.Clear()
                For Each mset In Preferences.moviesets
                    cbMovieDisplay_MovieSet.Items.Add(mset)
                Next
            End If
            If workingMovieDetails.fullmoviebody.movieset <> "-None-" Then
                For Each mset In Preferences.moviesets
                    cbMovieDisplay_MovieSet.Items.Add(mset)
                Next
                For te = 0 To cbMovieDisplay_MovieSet.Items.Count - 1
                    If cbMovieDisplay_MovieSet.Items(te) = workingMovieDetails.fullmoviebody.movieset Then
                        cbMovieDisplay_MovieSet.SelectedIndex = te
                        Exit For
                    End If
                Next
                'setsTxt.Text = workingMovieDetails.fullmoviebody.movieset
            End If
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
        mov_VideoSourcePopulate()
        Try
            TabControl2.SelectedIndex = 0
            currentTabIndex = 0
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
        Try
            TabControl3.SelectedIndex = 0
            tvCurrentTabIndex = 0
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try


        Me.Enabled = True
        mess.Close()
    End Sub

    Private Sub CheckBox19_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox19.CheckedChanged
        Try
            displayRuntimeScraper = True
            If CheckBox19.CheckState = CheckState.Checked Then
                Preferences.enablehdtags = True
                PanelDisplayRuntime.Enabled = True
                If Preferences.movieRuntimeDisplay = "file" Then
                    rbRuntimeFile.Checked = True
                    displayRuntimeScraper = False
                Else
                    rbRuntimeScraper.Checked = True
                End If
            Else
                Preferences.enablehdtags = False
                PanelDisplayRuntime.Enabled = False
                rbRuntimeScraper.Checked = True
            End If
            Call mov_SwitchRuntime()
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Label27_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Label27.Click
        Try
            If runtimetxt.Enabled = True Then
                displayRuntimeScraper = False
            Else
                displayRuntimeScraper = True
            End If
            Call mov_SwitchRuntime()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub rbRuntimeScraper_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles rbRuntimeScraper.CheckedChanged
        Try
            If rbRuntimeScraper.Checked = True Then
                Preferences.movieRuntimeDisplay = "scraper"
                displayRuntimeScraper = True
            Else
                Preferences.movieRuntimeDisplay = "file"
                displayRuntimeScraper = False
            End If

            cbMovieRuntimeFallbackToFile.Enabled = rbRuntimeScraper.Checked

            'Call mov_SwitchRuntime() 'Damn it - this call prevents MC starting, and I have no idea why! HueyHQ
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub rbXBMCv_pre_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles rbXBMCv_pre.CheckedChanged
        If rbXBMCv_pre.Checked Then
            Preferences.XBMC_version = 0
        End If
        If prefsload = False Then
            generalprefschanged = True
            btnGeneralPrefsSaveChanges.Enabled = True
        End If
    End Sub

    Private Sub rbXBMCv_post_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles rbXBMCv_post.CheckedChanged
        If rbXBMCv_post.Checked Then
            Preferences.XBMC_version = 2
        End If
        If prefsload = False Then
            generalprefschanged = True
            btnGeneralPrefsSaveChanges.Enabled = True
        End If
    End Sub

    Private Sub rbXBMCv_both_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles rbXBMCv_both.CheckedChanged
        If rbXBMCv_both.Checked Then
            Preferences.XBMC_version = 1
        End If
        If prefsload = False Then
            generalprefschanged = True
            btnGeneralPrefsSaveChanges.Enabled = True
        End If
    End Sub

    Private Sub mov_SwitchRuntime()
        If workingMovieDetails Is Nothing Then Exit Sub
        If Preferences.enablehdtags = True And workingMovieDetails.filedetails.filedetails_video.DurationInSeconds <> Nothing And Not displayRuntimeScraper Then
            runtimetxt.Text = Utilities.cleanruntime(workingMovieDetails.filedetails.filedetails_video.DurationInSeconds.Value) & " min"
            runtimetxt.Enabled = False
        Else
            runtimetxt.Text = workingMovieDetails.fullmoviebody.runtime
            runtimetxt.Enabled = True
        End If
    End Sub

    Private Sub CheckBox20_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox20.CheckedChanged
        Try
            If CheckBox20.CheckState = CheckState.Checked Then
                Preferences.enabletvhdtags = True
            Else
                Preferences.enabletvhdtags = False
            End If
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexScrape_MoveUp_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button_tv_RegexScrape_MoveUp.Click
        'up
        Try
            Dim mSelectedIndex, mOtherIndex As Integer
            If Me.ListBox_tv_RegexScrape.SelectedIndex <> 0 Then
                mSelectedIndex = Me.ListBox_tv_RegexScrape.SelectedIndex
                mOtherIndex = mSelectedIndex - 1
                ListBox_tv_RegexScrape.Items.Insert(mSelectedIndex + 1, ListBox_tv_RegexScrape.Items(mOtherIndex))
                ListBox_tv_RegexScrape.Items.RemoveAt(mOtherIndex)
            End If
            tv_RegexScraper.Clear()
            For Each item In ListBox_tv_RegexScrape.Items
                tv_RegexScraper.Add(item)
            Next
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexScrape_MoveDown_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button_tv_RegexScrape_MoveDown.Click
        'down
        Try
            Dim mSelectedIndex, mOtherIndex As Integer
            If Me.ListBox_tv_RegexScrape.SelectedIndex <> Me.ListBox_tv_RegexScrape.Items.Count - 1 Then
                mSelectedIndex = Me.ListBox_tv_RegexScrape.SelectedIndex
                mOtherIndex = mSelectedIndex + 1
                ListBox_tv_RegexScrape.Items.Insert(mSelectedIndex, ListBox_tv_RegexScrape.Items(mOtherIndex))
                ListBox_tv_RegexScrape.Items.RemoveAt(mOtherIndex + 1)
            End If
            tv_RegexScraper.Clear()
            For Each item In ListBox_tv_RegexScrape.Items
                tv_RegexScraper.Add(item)
            Next
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexRename_MoveUp_Click(sender As System.Object, e As System.EventArgs) Handles Button_tv_RegexRename_MoveUp.Click
        Try
            'up
            Try
                Dim mSelectedIndex, mOtherIndex As Integer
                If Me.ListBox_tv_RegexRename.SelectedIndex <> 0 Then
                    mSelectedIndex = Me.ListBox_tv_RegexRename.SelectedIndex
                    mOtherIndex = mSelectedIndex - 1
                    ListBox_tv_RegexRename.Items.Insert(mSelectedIndex + 1, ListBox_tv_RegexRename.Items(mOtherIndex))
                    ListBox_tv_RegexRename.Items.RemoveAt(mOtherIndex)
                End If
                tv_RegexRename.Clear()
                For Each item In ListBox_tv_RegexRename.Items
                    tv_RegexRename.Add(item)
                Next
                tvprefschanged = True
                btnTVPrefSaveChanges.Enabled = True
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button_tv_RegexRename_MoveDown_Click(sender As System.Object, e As System.EventArgs) Handles Button_tv_RegexRename_MoveDown.Click
        Try
            'down
            Try
                Dim mSelectedIndex, mOtherIndex As Integer
                If Me.ListBox_tv_RegexRename.SelectedIndex <> Me.ListBox_tv_RegexRename.Items.Count - 1 Then
                    mSelectedIndex = Me.ListBox_tv_RegexRename.SelectedIndex
                    mOtherIndex = mSelectedIndex + 1
                    ListBox_tv_RegexRename.Items.Insert(mSelectedIndex, ListBox_tv_RegexRename.Items(mOtherIndex))
                    ListBox_tv_RegexRename.Items.RemoveAt(mOtherIndex + 1)
                End If
                tv_RegexRename.Clear()
                For Each item In ListBox_tv_RegexRename.Items
                    tv_RegexRename.Add(item)
                Next
                tvprefschanged = True
                btnTVPrefSaveChanges.Enabled = True
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ComboBox_tv_EpisodeRename_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox_tv_EpisodeRename.SelectedIndexChanged
        Try
            If Renamer.setRenamePref(tv_RegexRename.Item(ComboBox_tv_EpisodeRename.SelectedIndex), tv_RegexScraper) Then
                Preferences.tvrename = ComboBox_tv_EpisodeRename.SelectedIndex
                tvprefschanged = True
                btnTVPrefSaveChanges.Enabled = True
            Else
                MsgBox("Format does not match scraper regex" & vbCrLf & "Please check")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub SearchForNewMoviesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SearchForNewMoviesToolStripMenuItem.Click
        SearchForNew
    End Sub


    'Private Sub txt_titlesearch_ModifiedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txt_titlesearch.ModifiedChanged
    '    Try
    '        If filterOverride = False Then
    '            If txt_titlesearch.Text.Length > 0 Then
    '                txt_titlesearch.BackColor = Color.DarkOrange
    '            Else
    '                txt_titlesearch.BackColor = Color.White
    '            End If
    '            txt_titlesearch.Refresh()
    '            Call Mc.clsGridViewMovie.mov_FiltersAndSortApply()
    '        End If
    '    Catch ex As Exception
    '        ExceptionHandler.LogError(ex)
    '    End Try
    'End Sub

    Private Sub txt_titlesearch_KeyUp(ByVal sender As Object, ByVal e As Object) Handles txt_titlesearch.KeyUp,txt_titlesearch.ModifiedChanged
        Try
            If filterOverride = False Then

                 _yield = True
                Application.DoEvents
                _yield = False

               If txt_titlesearch.Text.Length > 0 Then
                    txt_titlesearch.BackColor = Color.DarkOrange
                Else
                    txt_titlesearch.BackColor = Color.White
                End If
                txt_titlesearch.Refresh
                Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)
                
                If _yield Then Return


                DisplayMovie(True)
                Cursor.Current = Cursors.Default
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub


    Public Function Yield(yielding As Boolean) As Boolean
        If yielding Then
            Application.DoEvents
            Return _yield
        End If
        Return False
    End Function


    Private Sub mov_TableViewSetup()
        Preferences.tableview.Clear()
        Preferences.tableview.Add("title|150|0|true")
        Preferences.tableview.Add("year|40|1|true")
        Preferences.tableview.Add("genre|160|2|true")
        Preferences.tableview.Add("rating|50|3|true")
        Preferences.tableview.Add("runtime|60|4|true")
        Preferences.tableview.Add("top250|60|5|false")
        Preferences.tableview.Add("source|150|6|false")
        Preferences.tableview.Add("playcount|62|7|true")
        Preferences.tableview.Add("set|150|8|true")
        Preferences.tableview.Add("sorttitle|100|9|false")
        Preferences.tableview.Add("outline|200|10|false")
        Preferences.tableview.Add("plot|200|11|false")
        Preferences.tableview.Add("id|75|12|false")
        Preferences.tableview.Add("missingdata1|115|13|false")
        Preferences.tableview.Add("fullpathandfilename|300|14|false")
    End Sub

    Private Sub mov_TableSetup()
        DataGridView1.Columns.Clear()
        If Preferences.tablesortorder = Nothing Then Preferences.tablesortorder = "Title|Ascending"
        If Preferences.tablesortorder = "" Then Preferences.tablesortorder = "Title|Ascending"
        If Preferences.tableview.Count <> 15 Then
            Call mov_TableViewSetup()
        End If
        cmbobx_tablesets.Items.Clear()
        Cmbobx_tablewatched.Items.Clear()
        cmbobx_tablesource.Items.Clear()
        tableSets.Clear()
        For Each item In Preferences.tableview
            Dim tempdata() As String
            tempdata = item.Split("|")
            Dim newcolumn As New str_TableItems(SetDefaults)
            newcolumn.title = tempdata(0)
            newcolumn.width = Convert.ToInt32(tempdata(1))
            newcolumn.index = Convert.ToInt32(tempdata(2))
            If tempdata(3).ToLower = "true" Then
                newcolumn.visible = True
            Else
                newcolumn.visible = False
            End If
            tableSets.Add(newcolumn)
        Next


        DataGridView1.AutoGenerateColumns = False

        Dim doc As New XmlDocument

        Dim thispref As XmlNode = Nothing
        Dim xmlproc As XmlDeclaration

        xmlproc = doc.CreateXmlDeclaration("1.0", "UTF-8", "yes")
        doc.AppendChild(xmlproc)
        Dim root As XmlElement
        Dim child As XmlElement
        root = doc.CreateElement("movie_cache")

        Dim childchild As XmlElement

'        For Each movie In filteredList
        For Each row As DataGridViewRow In DataGridViewMovies.Rows

            Dim movie As Data_GridViewMovie = row.DataBoundItem

            child = doc.CreateElement("movie")
            childchild = doc.CreateElement("filedate")
            childchild.InnerText = movie.filedate
            child.AppendChild(childchild)
            childchild = doc.CreateElement("missingdata1")
            childchild.InnerText = movie.missingdata1.ToString
            child.AppendChild(childchild)
            childchild = doc.CreateElement("filename")
            childchild.InnerText = movie.filename
            child.AppendChild(childchild)
            childchild = doc.CreateElement("foldername")
            childchild.InnerText = movie.foldername
            child.AppendChild(childchild)
            childchild = doc.CreateElement("fullpathandfilename")
            childchild.InnerText = movie.fullpathandfilename
            child.AppendChild(childchild)
            If movie.movieset <> Nothing Then
                If movie.movieset <> "" Then
                    childchild = doc.CreateElement("set")
                    childchild.InnerText = movie.movieset
                    child.AppendChild(childchild)
                Else
                    childchild = doc.CreateElement("set")
                    childchild.InnerText = "-None-"
                    child.AppendChild(childchild)
                End If
            Else
                childchild = doc.CreateElement("set")
                childchild.InnerText = "-None-"
                child.AppendChild(childchild)
            End If
            If movie.source <> Nothing And movie.source <> "" Then
                childchild = doc.CreateElement("source")
                childchild.InnerText = movie.source
                child.AppendChild(childchild)
            Else
                childchild = doc.CreateElement("source")
                childchild.InnerText = ""
                child.AppendChild(childchild)
            End If
            childchild = doc.CreateElement("genre")
            childchild.InnerText = movie.genre
            child.AppendChild(childchild)
            childchild = doc.CreateElement("id")
            childchild.InnerText = movie.id
            child.AppendChild(childchild)
            childchild = doc.CreateElement("playcount")
            childchild.InnerText = movie.playcount
            child.AppendChild(childchild)
            childchild = doc.CreateElement("rating")
            childchild.InnerText = movie.Rating
            child.AppendChild(childchild)
            childchild = doc.CreateElement("title")
            childchild.InnerText = movie.title
            child.AppendChild(childchild)
            If movie.SortOrder = Nothing Then
                movie.SortOrder = movie.DisplayTitle
            End If
            If movie.SortOrder = "" Then
                movie.SortOrder = movie.DisplayTitle
            End If
            childchild = doc.CreateElement("outline")
            childchild.InnerText = movie.outline
            child.AppendChild(childchild)
            childchild = doc.CreateElement("plot")
            childchild.InnerText = movie.plot
            child.AppendChild(childchild)
            childchild = doc.CreateElement("sortorder")
            childchild.InnerText = movie.SortOrder
            child.AppendChild(childchild)

            'childchild = doc.CreateElement("titleandyear")
            'childchild.InnerText = movie.titleandyear
            'child.AppendChild(childchild)

            childchild = doc.CreateElement("runtime")
            childchild.InnerText = movie.runtime
            child.AppendChild(childchild)
            childchild = doc.CreateElement("top250")
            childchild.InnerText = movie.top250
            child.AppendChild(childchild)
            childchild = doc.CreateElement("year")
            childchild.InnerText = movie.year
            child.AppendChild(childchild)
            root.AppendChild(child)
        Next

        doc.AppendChild(root)

        For Each thisresult In doc("movie_cache")
            'Try
            Select Case thisresult.Name
                Case "movie"
                    Dim chi As XmlElement
                    For Each chi In thisresult.childnodes
                        If chi.Name = "runtime" Then
                            chi.InnerText = chi.InnerText.Replace("minutes", "")
                            chi.InnerText = chi.InnerText.Replace("mins", "")
                            chi.InnerText = chi.InnerText.Replace("min", "")
                            chi.InnerText = chi.InnerText.Replace(" ", "")
                            If chi.InnerText.Length = 1 Then
                                chi.InnerText = "00" & chi.InnerText
                            End If
                            If chi.InnerText.Length = 2 Then
                                chi.InnerText = "0" & chi.InnerText
                            End If
                            chi.InnerText = chi.InnerText & " min"
                        End If
                        If chi.Name = "top250" Then
                            If chi.InnerText = "" Then
                                chi.InnerText = "000" & chi.InnerText
                            End If
                            If IsNumeric(chi.InnerText) Then
                                If chi.InnerText.Length = 0 Then
                                    chi.InnerText = "000" & chi.InnerText
                                End If
                                If chi.InnerText.Length = 1 Then
                                    chi.InnerText = "00" & chi.InnerText
                                End If
                                If chi.InnerText.Length = 2 Then
                                    chi.InnerText = "0" & chi.InnerText
                                End If
                            End If
                        End If
                        If chi.Name = "playcount" Then
                            If chi.InnerText = "" Then
                                chi.InnerText = "0"
                            End If
                            If Not IsNumeric(chi.InnerText) Then
                                chi.InnerText = "0"
                            End If
                            Dim play As Integer = Convert.ToInt32(chi.InnerText)
                            Dim bbol As String = "False"
                            If play > 0 Then
                                bbol = "True"
                            Else
                                bbol = "False"
                            End If
                            chi.InnerText = bbol
                        End If
                        If chi.Name = "missingdata1" Then
                            If chi.InnerText = "" Or Not IsNumeric(chi.InnerText) Then
                                chi.InnerText = "0"
                            Else
                                chi.InnerText = Movie.GetMissingDataText( Convert.ToByte(chi.InnerText) )
                            End If
                            'Dim play As Integer = Convert.ToInt32(chi.InnerText)
                            'Dim bbol As String = String.Empty
                            'If play = 0 Then
                            '    bbol = "None"
                            'ElseIf play And 1 Then
                            '    bbol = "Fanart"
                            'ElseIf play And 2 Then
                            '    bbol = "Poster"
                            'ElseIf play And 3 Then
                            '    bbol = "Poster & Fanart"
                            'End If
                        End If
                    Next
            End Select
        Next

        Dim movstring As String = doc.InnerXml
        Dim XMLreader2 As StringReader = New System.IO.StringReader(movstring)

        ' Create the dataset
        Dim newDS As DataSet = New DataSet
        newDS.ReadXml(XMLreader2)
        XMLreader2.Dispose()

        DataGridView1.DataSource = Nothing

        Try
            DataGridView1.DataSource = newDS.Tables(0)
        Catch
        End Try

'        DataGridView1.DataSource = DataGridViewMovies.DataSource       TO DO: Replace with this

        DataGridView1.AllowUserToOrderColumns = True
        DataGridView1.RowHeadersVisible = True
        DataGridView1.RowHeadersWidth = 30

        Dim titlecolumn As New DataGridViewColumn()
        With titlecolumn
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            .HeaderText = "Title"
            .DataPropertyName = "title"
            .Name = "title"
            .SortMode = DataGridViewColumnSortMode.Automatic
        End With

        Dim yearcolumn As New DataGridViewColumn()
        With yearcolumn
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            .HeaderText = "Year"
            .DataPropertyName = "year"
            .Name = "year"
            .SortMode = DataGridViewColumnSortMode.Automatic
            .DefaultCellStyle.Alignment = DataGridViewContentAlignment.BottomCenter
        End With


        Dim idcolumn As New DataGridViewColumn()
        With idcolumn
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            .HeaderText = "IMDB ID"
            .DataPropertyName = "id"
            .Name = "id"
            .SortMode = DataGridViewColumnSortMode.Automatic
            .ReadOnly = True
            '            .DefaultCellStyle.Alignment = DataGridViewContentAlignment.BottomCenter
        End With

        Dim pathcolumn As New DataGridViewColumn()
        With pathcolumn
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            .HeaderText = "Full Path"
            .DataPropertyName = "fullpathandfilename"
            .Name = "fullpathandfilename"
            .SortMode = DataGridViewColumnSortMode.Automatic
            .ReadOnly = True
        End With

        Dim genrecolumn As New DataGridViewColumn()
        With genrecolumn
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            .HeaderText = "Genre"
            .DataPropertyName = "genre"
            .Name = "genre"
            .SortMode = DataGridViewColumnSortMode.Automatic
        End With

        Dim ratingcolumn As New DataGridViewColumn()
        With ratingcolumn
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            .HeaderText = "Rating"
            .DataPropertyName = "rating"
            .Name = "rating"
            .SortMode = DataGridViewColumnSortMode.Automatic
            .DefaultCellStyle.Alignment = DataGridViewContentAlignment.BottomCenter
        End With

        Dim outlinecolumn As New DataGridViewColumn()
        With outlinecolumn
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            '.DefaultCellStyle.WrapMode = DataGridViewTriState.True
            .HeaderText = "Outline"
            .DataPropertyName = "outline"
            .Name = "outline"
            .SortMode = DataGridViewColumnSortMode.Automatic
        End With

        Dim plotcolumn As New DataGridViewColumn()
        With plotcolumn
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            '.DefaultCellStyle.WrapMode = DataGridViewTriState.True
            .HeaderText = "Plot"
            .DataPropertyName = "plot"
            .Name = "plot"
            .SortMode = DataGridViewColumnSortMode.Automatic
        End With

        Dim sorttitlecolumn As New DataGridViewColumn()
        With sorttitlecolumn
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            .HeaderText = "Sort Title"
            .DataPropertyName = "sortorder"
            .Name = "sorttitle"
            .SortMode = DataGridViewColumnSortMode.Automatic
        End With

        Dim top250column As New DataGridViewColumn()
        With top250column
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            .HeaderText = "Top 250"
            .DataPropertyName = "top250"
            .Name = "top250"
            .SortMode = DataGridViewColumnSortMode.Automatic
            '            .DefaultCellStyle.Alignment = DataGridViewContentAlignment.BottomCenter
        End With

        Dim watchedcolumn As New DataGridViewCheckBoxColumn()
        With watchedcolumn
            'Dim oCell As DataGridViewCell = New DataGridViewComboBoxCell
            '.CellTemplate = oCell
            .HeaderText = "Watched"
            .Name = "playcount"
            .DataPropertyName = "playcount"
            .SortMode = DataGridViewColumnSortMode.Automatic
        End With

        Dim runtimecolumn As New DataGridViewColumn()
        With runtimecolumn
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            .HeaderText = "Runtime"
            .Name = "runtime"
            .DataPropertyName = "runtime"
            .SortMode = DataGridViewColumnSortMode.Automatic
        End With

        Dim sourcecolumn As New DataGridViewComboBoxColumn()
        cmbobx_tablesource.Items.Add("UnChanged")
        For Each src In Preferences.releaseformat
            sourcecolumn.Items.Add(src)
            cmbobx_tablesource.Items.Add(src)
        Next
        cmbobx_tablesource.SelectedItem = "UnChanged"
        With sourcecolumn
            .HeaderText = "Source"
            .Name = "source"
            .DataPropertyName = "source"
            .SortMode = DataGridViewColumnSortMode.Automatic
            .DefaultCellStyle.NullValue = ""
        End With

        Dim setscolumn As New DataGridViewComboBoxColumn
        cmbobx_tablesets.Items.Add("UnChanged")
        For Each sets In Preferences.moviesets
            setscolumn.Items.Add(sets)
            cmbobx_tablesets.Items.Add(sets)
        Next
        cmbobx_tablesets.SelectedItem = "UnChanged"
        With setscolumn
            .HeaderText = "Sets"
            .Name = "set"
            .DataPropertyName = "set"
            .SortMode = DataGridViewColumnSortMode.Automatic
            .DefaultCellStyle.NullValue = "-None-"
        End With

        Dim artcolumn As New DataGridViewColumn()
        With artcolumn
            Dim oCell As DataGridViewCell = New DataGridViewTextBoxCell
            .CellTemplate = oCell
            .HeaderText = "Missing"
            .Name = "missingdata1"
            .DataPropertyName = "missingdata1"
            .SortMode = DataGridViewColumnSortMode.Automatic
            .ReadOnly = True
        End With

        For f = 0 To 14
            For Each col In tableSets
                If col.index = f Then
                    Select Case col.title
                        Case "title"
                            titlecolumn.Width = col.width
                            If col.visible = True Then
                                titlecolumn.Visible = True
                            Else
                                titlecolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, titlecolumn)
                            Exit For
                        Case "year"
                            yearcolumn.Width = col.width
                            If col.visible = True Then
                                yearcolumn.Visible = True
                            Else
                                yearcolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, yearcolumn)
                            Exit For
                        Case "sorttitle"
                            sorttitlecolumn.Width = col.width
                            If col.visible = True Then
                                CheckBox21.CheckState = CheckState.Checked
                                sorttitlecolumn.Visible = True
                            Else
                                sorttitlecolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, sorttitlecolumn)
                            Exit For
                        Case "genre"
                            genrecolumn.Width = col.width
                            If col.visible = True Then
                                genrecolumn.Visible = True
                                CheckBox28.CheckState = CheckState.Checked
                            Else
                                genrecolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, genrecolumn)
                            Exit For
                        Case "rating"
                            ratingcolumn.Width = col.width
                            If col.visible = True Then
                                ratingcolumn.Visible = True
                                CheckBox26.CheckState = CheckState.Checked
                            Else
                                ratingcolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, ratingcolumn)
                            Exit For
                        Case "runtime"
                            runtimecolumn.Width = col.width
                            If col.visible = True Then
                                CheckBox31.CheckState = CheckState.Checked
                                runtimecolumn.Visible = True
                            Else
                                runtimecolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, runtimecolumn)
                            Exit For
                        Case "top250"
                            top250column.Width = col.width
                            If col.visible = True Then
                                CheckBox29.CheckState = CheckState.Checked
                                top250column.Visible = True
                            Else
                                top250column.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, top250column)
                            Exit For
                        Case "source"
                            sourcecolumn.Width = col.width
                            If col.visible = True Then
                                sourcecolumn.Visible = True
                                CheckBox37.CheckState = CheckState.Checked
                            Else
                                sourcecolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, sourcecolumn)
                            Exit For
                        Case "playcount"
                            watchedcolumn.Width = col.width
                            If col.visible = True Then
                                watchedcolumn.Visible = True
                                CheckBox25.CheckState = CheckState.Checked
                            Else
                                watchedcolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, watchedcolumn)
                            Exit For
                        Case "set"
                            setscolumn.Width = col.width
                            If col.visible = True Then
                                'setscolumn.Visible = True
                                'CheckBox30.CheckState = CheckState.Checked
                                setscolumn.Visible = False
                            Else
                                setscolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, setscolumn)
                            Exit For
                        Case "outline"
                            outlinecolumn.Width = col.width
                            If col.visible = True Then
                                outlinecolumn.Visible = True
                                CheckBox27.CheckState = CheckState.Checked
                            Else
                                outlinecolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, outlinecolumn)
                            Exit For
                        Case "plot"
                            plotcolumn.Width = col.width
                            If col.visible = True Then
                                plotcolumn.Visible = True
                                CheckBox42.CheckState = CheckState.Checked
                            Else
                                plotcolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, plotcolumn)
                            Exit For
                        Case "id"
                            idcolumn.Width = col.width
                            If col.visible = True Then
                                CheckBox24.CheckState = CheckState.Checked
                                idcolumn.Visible = True
                            Else
                                idcolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, idcolumn)
                            Exit For
                        Case "missingdata1"
                            artcolumn.Width = col.width
                            If col.visible = True Then
                                CheckBox32.CheckState = CheckState.Checked
                                artcolumn.Visible = True
                            Else
                                artcolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, artcolumn)
                            Exit For
                        Case "fullpathandfilename"
                            pathcolumn.Width = col.width
                            If col.visible = True Then
                                CheckBox23.CheckState = CheckState.Checked
                                pathcolumn.Visible = True
                            Else
                                pathcolumn.Visible = False
                            End If
                            DataGridView1.Columns.Insert(f, pathcolumn)
                            Exit For
                    End Select
                End If
            Next
        Next f

        Cmbobx_tablewatched.Items.Add("UnChanged")
        Cmbobx_tablewatched.Items.Add("Watched")
        Cmbobx_tablewatched.Items.Add("Unwatched")

        cmbobx_tablesets.SelectedIndex = 0
        Cmbobx_tablewatched.SelectedIndex = 0

        Dim sortheader As String
        Dim sortord As String
        Dim tempdata2() As String
        tempdata2 = Preferences.tablesortorder.Split("|")
        sortheader = tempdata2(0)
        sortord = tempdata2(1)

        For Each col In DataGridView1.Columns
            If col.headertext = sortheader Then
                If sortord.ToLower.IndexOf("desc") <> -1 Then
                    DataGridView1.Sort(DataGridView1.Columns(col.index), ListSortDirection.Descending)
                Else
                    DataGridView1.Sort(DataGridView1.Columns(col.index), ListSortDirection.Ascending)
                End If
            End If
        Next

        For Each tempRow As System.Windows.Forms.DataGridViewRow In Me.DataGridView1.Rows
            For Each tempCell As Windows.Forms.DataGridViewCell In tempRow.Cells
                If tempCell.Value = "Fanart" Or tempCell.Value = "Poster" Or tempCell.Value = "Poster & Fanart" Then
                'If TypeName(tempCell.Value) = "Byte" AndAlso tempCell.Value > 0 then
                    tempCell.Style.BackColor = Color.Red
                End If
            Next
        Next

        Call mov_TextBoxesSetup()
        Try
            For f = 0 To DataGridView1.Rows.Count-1
                If DataGridView1.Rows(f).Cells("fullpathandfilename").Value = workingMovieDetails.fileinfo.fullpathandfilename Then
                    DataGridView1.ClearSelection()
                    'DataGridView1.CurrentCell = DataGridView1.Rows(f).Cells(NFO_INDEX)
                    'DataGridView1.Rows(f).Selected = True
                    DataGridView1.FirstDisplayedScrollingRowIndex = f
                    Exit For
                End If
            Next
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
    End Sub

    Private Sub util_FontSetup()
        If Preferences.font <> Nothing Then
            If Preferences.font <> "" Then
                Try
                    Dim tcc As TypeConverter = TypeDescriptor.GetConverter(GetType(System.Drawing.Font))
                    Dim newFont As System.Drawing.Font = CType(tcc.ConvertFromString(Preferences.font), System.Drawing.Font)
                    genretxt.Font = newFont
                    certtxt.Font = newFont
                    directortxt.Font = newFont
                    creditstxt.Font = newFont
                    outlinetxt.Font = newFont
                    runtimetxt.Font = newFont
                    studiotxt.Font = newFont
                    taglinetxt.Font = newFont
                    actorcb.Font = newFont
                    roletxt.Font = newFont
                    pathtxt.Font = newFont
                    'CheckedListBox1.Font = newFont
                    TextBox34.Font = newFont
                    DataGridViewMovies.Font = newFont
                    plottxt.Font = newFont
                    txtStars.Font = newFont
                    'titletxt.Font = newFont
                    'setsTxt.Font = newFont
                    cbMovieDisplay_MovieSet.Font = newFont
                    ComboBox5.Font = newFont
                    TvTreeview.Font = newFont
                    TextBox25.Font = newFont
                    TextBox_Director.Font = newFont
                    TextBox_Credits.Font = newFont
                    TextBox_Plot.Font = newFont
                    TextBox_Aired.Font = newFont
                    TextBox_Rating.Font = newFont
                    TextBox17.Font = newFont
                    TextBox29.Font = newFont
                    TextBox19.Font = newFont
                    ComboBox4.Font = newFont
                    TextBox18.Font = newFont
                    TextBox15.Font = newFont
                    TextBox16.Font = newFont
                    TextBox10.Font = newFont
                    TextBox13.Font = newFont
                    TextBox9.Font = newFont
                    TextBox11.Font = newFont
                    TextBox12.Font = newFont
                    TextBox14.Font = newFont

                    ratingtxt.Font = newFont
                    votestxt.Font = newFont
                    imdbtxt.Font = newFont
                    cbFilterGeneral.Font = newFont
                    cbFilterGenre.Font = newFont
                    cbFilterSet.Font = newFont
                    cbFilterActor.Font = newFont
                    cbFilterSource.Font = newFont
                    cbFilterResolution.Font = newFont
                    cbFilterAudioCodecs.Font = newFont
                    cbFilterAudioLanguages.Font = newFont
                    cbFilterAudioBitrates .Font = newFont
                    cbFilterAudioChannels .Font = newFont
                    cbFilterNumAudioTracks.Font = newFont

                    LabelCountFilter.Font = newFont

                    Me.Refresh()
                    Application.DoEvents()
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
            End If
        End If


    End Sub

    Private Sub ListBox_tv_RegexScrape_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ListBox_tv_RegexScrape.SelectedIndexChanged
        Try
            If ListBox_tv_RegexScrape.SelectedItem <> Nothing Then
                TextBox_tv_RegexScrape_Edit.Text = ListBox_tv_RegexScrape.SelectedItem
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ListBox_tv_RegexRename_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles ListBox_tv_RegexRename.SelectedIndexChanged
        Try
            If ListBox_tv_RegexRename.SelectedItem <> Nothing Then
                TextBox_tv_RegexRename_Edit.Text = ListBox_tv_RegexRename.SelectedItem
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button96_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button96.Click
        Try
            Dim dlg As FontDialog = New FontDialog()
            Dim res As DialogResult = dlg.ShowDialog()
            If res = Windows.Forms.DialogResult.OK Then
                Dim tc As TypeConverter = TypeDescriptor.GetConverter(GetType(System.Drawing.Font))
                Dim fontString As String = tc.ConvertToString(dlg.Font)

                Preferences.font = fontString

                Dim tcc As TypeConverter = TypeDescriptor.GetConverter(GetType(System.Drawing.Font))
                Dim newFont As System.Drawing.Font = CType(tcc.ConvertFromString(Preferences.font), System.Drawing.Font)

                Label130.Font = newFont
                Label130.Text = fontString
                If prefsload = False Then
                    generalprefschanged = True
                    btnGeneralPrefsSaveChanges.Enabled = True
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TabPage32_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles tpMoviesTable.Leave
        DataGridView1.EndEdit()
        Preferences.tableview.Clear()
        For Each column In DataGridView1.Columns
            Dim tempstring As String = String.Format("{0}|{1}|{2}|{3}", column.name, column.width, column.displayindex, column.visible)
            Preferences.tableview.Add(tempstring)
        Next
        If IsNothing(DataGridView1.SortedColumn) = False Then
            Preferences.tablesortorder = String.Format("{0} | {1}", DataGridView1.SortedColumn.HeaderText, DataGridView1.SortOrder.ToString)
            Preferences.SaveConfig()
        End If

'        Dim changed As Boolean = False
'        Dim gridrow As DataGridViewRow

'        For Each gridrow In DataGridView1.Rows
'            Dim idpath As String = gridrow.Cells("fullpathandfilename").Value

'            For Each mov In oMovies.MovieCache
'                If mov.fullpathandfilename = idpath Then
'                    If mov.title <> gridrow.Cells("Title").Value Then
'                        changed = True
'                    End If
'                    If mov.outline <> gridrow.Cells("Outline").Value Then
'                        changed = True
'                    End If
'                    If mov.plot.Trim <> gridrow.Cells("Plot").Value.ToString Then
'                        changed = True
'                    End If
'                    If mov.genre <> gridrow.Cells("genre").Value Then
'                        changed = True
'                    End If
'                    If mov.rating <> gridrow.Cells("rating").Value Then
'                        changed = True
'                    End If
'                    Try
'                        If gridrow.Cells("playcount").Value Then
'                            If Convert.ToInt32(mov.playcount) <= 0 Then
'                                changed = True
'                            End If
'                        Else
'                            If Convert.ToInt32(mov.playcount) > 0 Then
'                                changed = True
'                            End If
'                        End If
'                    Catch
'                        If Convert.ToInt32(mov.playcount) > 0 Then
'                            changed = True
'                        End If
'                    End Try
'                    If mov.sortorder <> gridrow.Cells("sorttitle").Value Then
'                        changed = True
'                    End If
'                    If mov.year <> gridrow.Cells("year").Value Then
'                        If IsNumeric(gridrow.Cells("year").Value) Then
'                            changed = True
'                        End If
'                    End If
'                            Try
'                    If Convert.ToInt32(mov.top250) <> Convert.ToInt32(gridrow.Cells("top250").Value) Then
'                        If IsNumeric(gridrow.Cells("top250").Value) Then
'                            changed = True
'                        End If
'                    End If
'                            Catch ex As Exception
'#If SilentErrorScream Then
'                            Throw ex
'#End If
'                            End Try
'                    Dim runtime As String = gridrow.Cells("runtime").Value
'                    runtime = runtime.Replace("min", "")
'                    runtime = runtime.Trim(" ")
'                    If IsNumeric(runtime) Then
'                        Dim temruntime As Integer = Convert.ToInt32(runtime)
'                        Dim tempstrin As String = temruntime.ToString & " min"
'                        If mov.runtime <> tempstrin Then
'                            changed = True
'                        End If
'                    End If

'                    If mov.source <> gridrow.Cells("source").Value Then
'                        If mov.source = "" And gridrow.Cells("source").Value = Nothing Then
'                        Else
'                            If mov.source = Nothing Then
'                                If gridrow.Cells("source").Value <> "" Then
'                                    changed = True
'                                End If
'                            Else
'                                changed = True
'                            End If
'                        End If
'                    End If

'                    If mov.movieset <> gridrow.Cells("set").Value Then
'                        If mov.movieset = "-None-" And gridrow.Cells("set").Value = Nothing Then
'                        Else
'                            If mov.movieset = Nothing Then
'                                If gridrow.Cells("set").Value <> "-None-" Then
'                                    changed = True
'                                End If
'                            Else
'                                changed = True
'                            End If
'                        End If
'                    End If
'                End If
'                If changed = True Then Exit For
'            Next
'            If changed = True Then
'                Exit For
'            End If

'        Next gridrow

        If DataDirty Then
            Dim tempint As Integer = MessageBox.Show("You appear to have made changes to some of your movie details." & vbCrLf & vbCrLf & "Any changes will be lost if you do not save the changes now." & "                 Do wish to save the changes?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
            If tempint = DialogResult.Yes Then
                Call mov_TableChangesSave()
                MsgBox("Changes Saved")
            End If
        End If

        DataDirty=False
        btn_movTableSave.Enabled = DataDirty
    End Sub

    Private Sub CheckBox21_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox21.CheckedChanged
        If CheckBox21.CheckState = CheckState.Checked Then
            If IsNothing(DataGridView1.Columns("sorttitle")) = False Then DataGridView1.Columns("sorttitle").Visible = True
            Call mov_TextBoxesSetup()
        Else
            If IsNothing(DataGridView1.Columns("sorttitle")) = False Then DataGridView1.Columns("sorttitle").Visible = False
            Call mov_TextBoxesSetup()
        End If
    End Sub

    Private Sub CheckBox23_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox23.CheckedChanged
        If CheckBox23.CheckState = CheckState.Checked Then
            If IsNothing(DataGridView1.Columns("fullpathandfilename")) = False Then DataGridView1.Columns("fullpathandfilename").Visible = True
            Call mov_TextBoxesSetup()
        Else
            If IsNothing(DataGridView1.Columns("fullpathandfilename")) = False Then DataGridView1.Columns("fullpathandfilename").Visible = False
            Call mov_TextBoxesSetup()
        End If
    End Sub

    Private Sub CheckBox24_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox24.CheckedChanged
        If CheckBox24.CheckState = CheckState.Checked Then
            If IsNothing(DataGridView1.Columns("id")) = False Then DataGridView1.Columns("id").Visible = True
            Call mov_TextBoxesSetup()
        Else
            If IsNothing(DataGridView1.Columns("id")) = False Then DataGridView1.Columns("id").Visible = False
            Call mov_TextBoxesSetup()
        End If
    End Sub

    Private Sub CheckBox25_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox25.CheckedChanged
        If CheckBox25.CheckState = CheckState.Checked Then
            If IsNothing(DataGridView1.Columns("playcount")) = False Then DataGridView1.Columns("playcount").Visible = True
            Call mov_TextBoxesSetup()
        Else
            If IsNothing(DataGridView1.Columns("playcount")) = False Then DataGridView1.Columns("playcount").Visible = False
            Call mov_TextBoxesSetup()
        End If
    End Sub

    Private Sub CheckBox26_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox26.CheckedChanged
        If CheckBox26.CheckState = CheckState.Checked Then
            If IsNothing(DataGridView1.Columns("rating")) = False Then DataGridView1.Columns("rating").Visible = True
            Call mov_TextBoxesSetup()
        Else
            If IsNothing(DataGridView1.Columns("rating")) = False Then DataGridView1.Columns("rating").Visible = False
            Call mov_TextBoxesSetup()
        End If
    End Sub

    Private Sub CheckBox27_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox27.CheckedChanged
        If CheckBox27.CheckState = CheckState.Checked Then
            If IsNothing(DataGridView1.Columns("outline")) = False Then DataGridView1.Columns("outline").Visible = True
            Call mov_TextBoxesSetup()
        Else
            If IsNothing(DataGridView1.Columns("outline")) = False Then DataGridView1.Columns("outline").Visible = False
            Call mov_TextBoxesSetup()
        End If
    End Sub

    Private Sub CheckBox28_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox28.CheckedChanged
        If CheckBox28.CheckState = CheckState.Checked Then
            If IsNothing(DataGridView1.Columns("genre")) = False Then DataGridView1.Columns("genre").Visible = True
            Call mov_TextBoxesSetup()
        Else
            If IsNothing(DataGridView1.Columns("genre")) = False Then DataGridView1.Columns("genre").Visible = False
            Call mov_TextBoxesSetup()
        End If
    End Sub

    Private Sub CheckBox29_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox29.CheckedChanged
        If CheckBox29.CheckState = CheckState.Checked Then
            If IsNothing(DataGridView1.Columns("top250")) = False Then DataGridView1.Columns("top250").Visible = True
            Call mov_TextBoxesSetup()
        Else
            If IsNothing(DataGridView1.Columns("top250")) = False Then DataGridView1.Columns("top250").Visible = False
            Call mov_TextBoxesSetup()
        End If
    End Sub

    Private Sub CheckBox30_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox30.CheckedChanged
        If CheckBox30.CheckState = CheckState.Checked Then
            If IsNothing(DataGridView1.Columns("set")) = False Then DataGridView1.Columns("set").Visible = True
            Call mov_TextBoxesSetup()
        Else
            If IsNothing(DataGridView1.Columns("set")) = False Then DataGridView1.Columns("set").Visible = False
            Call mov_TextBoxesSetup()
        End If
    End Sub

    Private Sub CheckBox31_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox31.CheckedChanged
        If CheckBox31.CheckState = CheckState.Checked Then
            If IsNothing(DataGridView1.Columns("runtime")) = False Then DataGridView1.Columns("runtime").Visible = True
            Call mov_TextBoxesSetup()
        Else
            If IsNothing(DataGridView1.Columns("runtime")) = False Then DataGridView1.Columns("runtime").Visible = False
            Call mov_TextBoxesSetup()
        End If
    End Sub

    Private Sub CheckBox37_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles CheckBox37.CheckedChanged
        If CheckBox37.CheckState = CheckState.Checked Then
            If IsNothing(DataGridView1.Columns("source")) = False Then DataGridView1.Columns("source").Visible = True
            Call mov_TextBoxesSetup()
        Else
            If IsNothing(DataGridView1.Columns("source")) = False Then DataGridView1.Columns("source").Visible = False
            Call mov_TextBoxesSetup()
        End If
    End Sub

'    Private Sub mov_TableChangesSave()
'        'Dim mess As New frmMessageBox("Saving Changes", "", "Please Wait")
'        'mess.Show()
'        'mess.Refresh()
'        DataDirty=False
'        frmSplash2.Text = "Saving Table Changes..."
'        frmSplash2.Label1.Text = "Saving Movie Data....."
'        frmSplash2.Label1.Visible = True
'        frmSplash2.Label2.Visible = True
'        frmSplash2.ProgressBar1.Visible = True
'        frmSplash2.ProgressBar1.Maximum = DataGridView1.Rows.Count
'        frmSplash2.Show()
'        Dim progcount As Integer = 0
'        Application.DoEvents()
'        Dim gridrow As DataGridViewRow

'        For Each gridrow In DataGridView1.Rows
'            progcount += 1
'            frmSplash2.ProgressBar1.Value = progcount


'            Dim changed As Boolean = False
'            Dim idpath As String = gridrow.Cells("fullpathandfilename").Value
'            Dim array As New List(Of String)
'            frmSplash2.Label2.Text = gridrow.Cells("Title").Value
'            For f = oMovies.MovieCache.Count - 1 To 0 Step -1
'                changed = False
'                If Not array.Contains(oMovies.MovieCache(f).fullpathandfilename) Then
'                    If oMovies.MovieCache(f).fullpathandfilename = idpath Then
'                        array.Add(oMovies.MovieCache(f).fullpathandfilename)
'                        Try
'                            If oMovies.MovieCache(f).title <> gridrow.Cells("Title").Value Then
'                                changed = True
'                            End If
'                        Catch ex As Exception
'#If SilentErrorScream Then
'                            Throw ex
'#End If
'                        End Try
'                        Try
'                            If oMovies.MovieCache(f).outline <> gridrow.Cells("Outline").Value Then
'                                changed = True
'                            End If
'                        Catch ex As Exception
'#If SilentErrorScream Then
'                            Throw ex
'#End If
'                        End Try
'                        Try
'                            If oMovies.MovieCache(f).genre <> gridrow.Cells("genre").Value Then
'                                changed = True
'                            End If
'                        Catch ex As Exception
'#If SilentErrorScream Then
'                            Throw ex
'#End If
'                        End Try
'                        Try
'                            If oMovies.MovieCache(f).rating <> gridrow.Cells("rating").Value Then
'                                changed = True
'                            End If
'                        Catch ex As Exception
'#If SilentErrorScream Then
'                            Throw ex
'#End If
'                        End Try
'                        Try
'                            If gridrow.Cells("playcount").Value = True Then
'                                If oMovies.MovieCache(f).playcount <= 0 Then
'                                    changed = True
'                                End If
'                            Else
'                                If oMovies.MovieCache(f).playcount > 0 Then
'                                    changed = True
'                                End If
'                            End If
'                        Catch
'                            If oMovies.MovieCache(f).playcount > 0 Then
'                                changed = True
'                            End If
'                        End Try
'                        Try
'                            If oMovies.MovieCache(f).sortorder <> gridrow.Cells("sorttitle").Value Then
'                                changed = True
'                            End If
'                        Catch ex As Exception
'#If SilentErrorScream Then
'                            Throw ex
'#End If
'                        End Try
'                        Try
'                            If oMovies.MovieCache(f).year <> gridrow.Cells("year").Value Then
'                                If IsNumeric(gridrow.Cells("year").Value) Then
'                                    changed = True
'                                End If
'                            End If
'                        Catch ex As Exception
'#If SilentErrorScream Then
'                            Throw ex
'#End If
'                        End Try
'                        Try
'                            If Convert.ToInt32(oMovies.MovieCache(f).top250) <> Convert.ToInt32(gridrow.Cells("top250").Value) Then
'                                If IsNumeric(gridrow.Cells("top250").Value) Then
'                                    changed = True
'                                End If
'                            End If
'                        Catch ex As Exception
'#If SilentErrorScream Then
'                            Throw ex
'#End If
'                        End Try
'                        Try
'                            Dim runtime As String = gridrow.Cells("runtime").Value
'                            runtime = runtime.Replace("min", "")
'                            runtime = runtime.Trim(" ")
'                            If IsNumeric(runtime) Then
'                                Dim temruntime As Integer = Convert.ToInt32(runtime)
'                                Dim tempstrin As String = temruntime.ToString & " min"
'                                If oMovies.MovieCache(f).runtime <> tempstrin Then
'                                    changed = True
'                                End If
'                            End If
'                        Catch ex As Exception
'#If SilentErrorScream Then
'                            Throw ex
'#End If
'                        End Try
'                        Try
'                            If oMovies.MovieCache(f).source <> If(IsDBNull(gridrow.Cells("source").Value), "", gridrow.Cells("source").Value) Then
'                                changed = True
'                            End If
'                        Catch ex As Exception
'#If SilentErrorScream Then
'                            Throw ex
'#End If
'                        End Try
'                        Try
'                            If oMovies.MovieCache(f).MovieSet <> If(IsDBNull(gridrow.Cells("set").Value), "", gridrow.Cells("set").Value) Then
'                                changed = True
'                            End If
'                        Catch ex As Exception
'#If SilentErrorScream Then
'                            Throw ex
'#End If
'                        End Try
'                    End If
'                    If changed = True And IO.File.Exists(oMovies.MovieCache(f).fullpathandfilename) Then
'                        Dim changedmoviedetails As New FullMovieDetails
'                        Dim changedmovie As New ComboList
'                        changedmoviedetails = nfoFunction.mov_NfoLoadFull(oMovies.MovieCache(f).fullpathandfilename)
'                        If IsNothing(changedmoviedetails) Then Continue For
'                        If Not changedmoviedetails Is Nothing Then
'                            changedmovie = oMovies.MovieCache(f)
'                            Try
'                                changedmovie.genre = gridrow.Cells("genre").Value
'                            Catch ex As Exception
'#If SilentErrorScream Then
'                                Throw ex
'#End If
'                            End Try
'                            Try
'                                changedmovie.title = gridrow.Cells("title").Value
'                            Catch ex As Exception
'#If SilentErrorScream Then
'                                Throw ex
'#End If
'                            End Try
'                            Try
'                                changedmovie.year = gridrow.Cells("year").Value
'                            Catch ex As Exception
'#If SilentErrorScream Then
'                                Throw ex
'#End If
'                            End Try
'                            Try
'                                changedmovie.sortorder = gridrow.Cells("sorttitle").Value
'                            Catch ex As Exception
'#If SilentErrorScream Then
'                                Throw ex
'#End If
'                            End Try
'                            Try
'                                changedmovie.rating = gridrow.Cells("rating").Value
'                            Catch ex As Exception
'#If SilentErrorScream Then
'                                Throw ex
'#End If
'                            End Try
'                            Try
'                                changedmovie.outline = gridrow.Cells("outline").Value
'                            Catch ex As Exception
'#If SilentErrorScream Then
'                                Throw ex
'#End If
'                            End Try
'                            ' Because plot is truncated to 100 chars to save moviecache.xml length, we don't want the user to overwrite the real plot
'                            '                            Try
'                            '                                changedmovie.plot = gridrow.Cells("plot").Value
'                            '                            Catch ex As Exception
'                            '#If SilentErrorScream Then
'                            '                                Throw ex
'                            '#End If
'                            '                            End Try
'                            Try
'                                changedmovie.source = If(IsDBNull(gridrow.Cells("source").Value), "", gridrow.Cells("source").Value)
'                            Catch ex As Exception
'#If SilentErrorScream Then
'                                Throw ex
'#End If
'                            End Try

'                            Try
'                                changedmovie.MovieSet = If(IsDBNull(gridrow.Cells("set").Value), "", gridrow.Cells("set").Value)
'                            Catch ex As Exception
'#If SilentErrorScream Then
'                                Throw ex
'#End If
'                            End Try

'                            Try
'                                If IsNumeric(gridrow.Cells("top250").Value) Then
'                                    changed = True
'                                End If
'                                changedmovie.top250 = Convert.ToInt32(gridrow.Cells("top250").Value).ToString
'                            Catch ex As Exception
'#If SilentErrorScream Then
'                                Throw ex
'#End If
'                            End Try

'                            Try
'                                If gridrow.Cells("playcount").EditedFormattedValue = True Then
'                                    If Convert.ToInt32(changedmovie.playcount) > 0 Then
'                                    Else
'                                        changedmovie.playcount = "1"
'                                    End If
'                                Else
'                                    changedmovie.playcount = "0"
'                                End If
'                            Catch ex As Exception
'#If SilentErrorScream Then
'                                Throw ex
'#End If
'                            End Try

'                            changedmovie.runtime = Utilities.cleanruntime(gridrow.Cells("runtime").Value)

'                            changedmoviedetails.fullmoviebody.runtime = changedmovie.runtime
'                            'changedmoviedetails.filedetails.filedetails_video.DurationInSeconds.Value = changedmovie.runtime.ToString

'                            changedmoviedetails.fullmoviebody.title = changedmovie.title
'                            changedmoviedetails.fullmoviebody.year = changedmovie.year
'                            changedmoviedetails.fullmoviebody.playcount = changedmovie.playcount
'                            changedmoviedetails.fullmoviebody.genre = changedmovie.genre
'                            changedmoviedetails.fullmoviebody.outline = changedmovie.outline
'                            'changedmoviedetails.fullmoviebody.plot = changedmovie.plot
'                            changedmoviedetails.fullmoviebody.rating = changedmovie.rating
'                            changedmoviedetails.fullmoviebody.source = changedmovie.source
'                            changedmoviedetails.fullmoviebody.movieset = changedmovie.MovieSet
'                            changedmoviedetails.fullmoviebody.sortorder = changedmovie.sortorder
'                            changedmoviedetails.fullmoviebody.top250 = changedmovie.top250

'                            nfoFunction.mov_NfoSave(changedmoviedetails.fileinfo.fullpathandfilename, changedmoviedetails, True)
'                   '         changedmovie.titleandyear = changedmovie.title & " (" & changedmovie.year & ")"
'                            oMovies.MovieCache.RemoveAt(f)
'                            oMovies.MovieCache.Add(changedmovie)
'                            Exit For
'                        End If
'                    End If
'                End If
'            Next
'        Next gridrow

'        oMovies.SaveMovieCache
        
'        'Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)
'        'mov_FormPopulate

'        UpdateFilteredList

'        frmSplash2.Hide()
'        'mess.Close()
'        Application.DoEvents()
'        Me.BringToFront()
'    End Sub


   Private Sub mov_TableChangesSave()

        DataDirty=False

        frmSplash2.Text = "Saving Table Changes..."
        frmSplash2.Label1.Text = "Saving Movie Data....."
        frmSplash2.Label1.Visible = True
        frmSplash2.Label2.Visible = True
        frmSplash2.ProgressBar1.Visible = True
        frmSplash2.ProgressBar1.Maximum = DataGridView1.Rows.Count
        frmSplash2.Show()

        Application.DoEvents

        Dim progcount     As Integer = 0
        Dim changed       As Boolean
        Dim oCachedMovie  As ComboList


        For Each gridrow As DataGridViewRow In DataGridView1.Rows

            changed    = False
            progcount += 1

            frmSplash2.ProgressBar1.Value = progcount
            frmSplash2.Label2.Text = gridrow.Cells("Title").Value
            
            oCachedMovie = oMovies.FindCachedMovie( gridrow.Cells("fullpathandfilename").Value )


            Try
                If oCachedMovie.title <> gridrow.Cells("Title").Value Then
                    changed = True
                End If
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
            Try
                If oCachedMovie.outline <> gridrow.Cells("Outline").Value Then
                    changed = True
                End If
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
            Try
                If oCachedMovie.genre <> gridrow.Cells("genre").Value Then
                    changed = True
                End If
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
            Try
                If oCachedMovie.rating <> gridrow.Cells("rating").Value Then
                    changed = True
                End If
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
            Try
                'If gridrow.Cells("playcount").Value = True Then
                If gridrow.Cells("playcount").EditedFormattedValue Then
                    If oCachedMovie.playcount <= 0 Then
                        changed = True
                    End If
                Else
                    If oCachedMovie.playcount > 0 Then
                        changed = True
                    End If
                End If
            Catch
                If oCachedMovie.playcount > 0 Then
                    changed = True
                End If
            End Try
            Try
                If oCachedMovie.sortorder <> gridrow.Cells("sorttitle").Value Then
                    changed = True
                End If
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
            Try
                If oCachedMovie.year <> gridrow.Cells("year").Value Then
                    If IsNumeric(gridrow.Cells("year").Value) Then
                        changed = True
                    End If
                End If
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
            Try
                If Convert.ToInt32(oCachedMovie.top250) <> Convert.ToInt32(gridrow.Cells("top250").Value) Then
                    If IsNumeric(gridrow.Cells("top250").Value) Then
                        changed = True
                    End If
                End If
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try

            Dim runtime        As String=""
            Dim intRunTime     As Integer
            Dim runTimeChanged As Boolean
            Dim newRunTime     As String=""

            Try
                runtime = gridrow.Cells("runtime").Value
                runtime = runtime.Replace("min", "")
                runtime = runtime.Trim(" ")
                If IsNumeric(runtime) Then
                    intRunTime = Convert.ToInt32(runtime)
                    newRunTime = intRunTime.ToString & " min"
                    If oCachedMovie.runtime <> newRunTime Then
                        changed = True
                        runTimeChanged = True
                    End If
                End If
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
            Try
                If oCachedMovie.source <> If(IsDBNull(gridrow.Cells("source").Value), "", gridrow.Cells("source").Value) Then
                    changed = True
                End If
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try
            Try
                If oCachedMovie.MovieSet <> If(IsDBNull(gridrow.Cells("set").Value), "", gridrow.Cells("set").Value) Then
                    changed = True
                End If
            Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
            End Try



            If changed And IO.File.Exists(oCachedMovie.fullpathandfilename) Then

                Dim oMovie As Movie = oMovies.LoadMovie(oCachedMovie.fullpathandfilename)

                If IsNothing(oMovie) Then Continue For


                Try
                    oCachedMovie.genre = gridrow.Cells("genre").Value
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
                Try
                    oCachedMovie.title = gridrow.Cells("title").Value
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
                Try
                    oCachedMovie.year = gridrow.Cells("year").Value
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
                Try
                    oCachedMovie.sortorder = gridrow.Cells("sorttitle").Value
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
                Try
                    oCachedMovie.rating = gridrow.Cells("rating").Value
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
                Try
                    oCachedMovie.outline = gridrow.Cells("outline").Value
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
                ' Because plot is truncated to 100 chars to save moviecache.xml length, we don't want the user to overwrite the real plot
                '                            Try
                '                                oCachedMovie.plot = gridrow.Cells("plot").Value
                '                            Catch ex As Exception
                '#If SilentErrorScream Then
                '                                Throw ex
                '#End If
                '                            End Try
                Try
                    oCachedMovie.source = If(IsDBNull(gridrow.Cells("source").Value), "", gridrow.Cells("source").Value)
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try

                Try
                    oCachedMovie.MovieSet = If(IsDBNull(gridrow.Cells("set").Value), "", gridrow.Cells("set").Value)
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try

                Try
                    oCachedMovie.top250 = Convert.ToInt32(gridrow.Cells("top250").Value).ToString
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try

                Try
                    If gridrow.Cells("playcount").EditedFormattedValue = True Then
                        If Convert.ToInt32(oCachedMovie.playcount) > 0 Then
                        Else
                            oCachedMovie.playcount = "1"
                        End If
                    Else
                        oCachedMovie.playcount = "0"
                    End If
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try

               'oCachedMovie.runtime = Utilities.cleanruntime(gridrow.Cells("runtime").Value)

               'oMovie.ScrapedMovie.fullmoviebody.runtime = oCachedMovie.runtime

                If runTimeChanged Then
                    oMovie.ScrapedMovie.fullmoviebody.runtime = newRunTime
                End If

                'oMovie.ScrapedMovie.filedetails.filedetails_video.DurationInSeconds.Value = oCachedMovie.runtime.ToString

                oMovie.ScrapedMovie.fullmoviebody.title = oCachedMovie.title
                oMovie.ScrapedMovie.fullmoviebody.year = oCachedMovie.year
                oMovie.ScrapedMovie.fullmoviebody.playcount = oCachedMovie.playcount
                oMovie.ScrapedMovie.fullmoviebody.genre = oCachedMovie.genre
                oMovie.ScrapedMovie.fullmoviebody.outline = oCachedMovie.outline
                'oMovie.ScrapedMovie.fullmoviebody.plot = oCachedMovie.plot
                oMovie.ScrapedMovie.fullmoviebody.rating = oCachedMovie.rating
                oMovie.ScrapedMovie.fullmoviebody.source = oCachedMovie.source
                oMovie.ScrapedMovie.fullmoviebody.movieset = oCachedMovie.MovieSet
                oMovie.ScrapedMovie.fullmoviebody.sortorder = oCachedMovie.sortorder
                oMovie.ScrapedMovie.fullmoviebody.top250 = oCachedMovie.top250

                oMovie.AssignMovieToCache
                oMovie.SaveNFO
                oMovie.UpdateMovieCache

            End If
        Next


        oMovies.SaveMovieCache
        
        'Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)
        'mov_FormPopulate

        UpdateFilteredList

        frmSplash2.Hide

        Application.DoEvents
        Me.BringToFront
    End Sub



    Private Sub Button97_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_movTableSave.Click
        Try
            Call mov_TableChangesSave()
            MsgBox("Changes Saved")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox32_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox32.CheckedChanged
        Try
            Try
                If CheckBox32.CheckState = CheckState.Checked Then
                    Me.DataGridView1.Columns("missingdata1").Visible = True
                    Call mov_TextBoxesSetup()
                Else
                    Me.DataGridView1.Columns("missingdata1").Visible = False
                    Call mov_TextBoxesSetup()
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DataGridView1_ColumnDisplayIndexChanged(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewColumnEventArgs) Handles DataGridView1.ColumnDisplayIndexChanged
        Try
            Call mov_TextBoxesSetup()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DataGridView1_ColumnWidthChanged(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewColumnEventArgs) Handles DataGridView1.ColumnWidthChanged
        Try
            Call mov_TextBoxesSetup()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    'Private Sub DataGridView1_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles DataGridView1.MouseDown
    '    Try
    '        Dim hti As DataGridView.HitTestInfo = sender.HitTest(e.X, e.Y)
    '        If e.Button = Windows.Forms.MouseButtons.Right Then
    '            If DataGridView1.SelectedRows.Count < 2 Then

    '                If hti.Type = DataGridViewHitTestType.Cell Then

    '                    If Not DataGridView1.Rows(hti.RowIndex).Selected Then

    '                        ' User right clicked a row that is not selected, so throw away all other selections and select this row

    '                        DataGridView1.ClearSelection()

    '                        DataGridView1.Rows(hti.RowIndex).Selected = True
    '                    End If
    '                End If

    '            End If
    '        ElseIf e.Button = Windows.Forms.MouseButtons.Left Then
    '            DataGridView1.Rows(hti.RowIndex).Selected = True
    '        End If
    '    Catch ex As Exception
    '        ExceptionHandler.LogError(ex)
    '    End Try
    'End Sub

    Private Sub DataGridView1_RowHeadersWidthChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles DataGridView1.RowHeadersWidthChanged
        Try
            Call mov_TextBoxesSetup()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DataGridView1_SelectionChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles DataGridView1.SelectionChanged
        Try
            Call mov_TextBoxesSetup()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DataGridView1_Sorted(ByVal sender As Object, ByVal e As System.EventArgs) Handles DataGridView1.Sorted
        Try
            For Each tempRow As System.Windows.Forms.DataGridViewRow In Me.DataGridView1.Rows
                For Each tempCell As Windows.Forms.DataGridViewCell In tempRow.Cells
                    If tempCell.Value = "Fanart" Or tempCell.Value = "Poster" Or tempCell.Value = "Poster & Fanart" Then
                        tempCell.Style.BackColor = Color.Red
                    End If
                Next
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub MarkAllSelectedAsWatchedToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MarkAllSelectedAsWatchedToolStripMenuItem.Click
        Try
            For Each selecteditem In DataGridView1.SelectedRows
                selecteditem.Cells("playcount").Value = True
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub MarkAllSelectedAsUnWatchedToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MarkAllSelectedAsUnWatchedToolStripMenuItem.Click
        Try
            For Each selecteditem In DataGridView1.SelectedRows
                selecteditem.Cells("playcount").Value = False
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_TextBoxesSetup()
        Dim multirowControlsVisibility As Boolean = DataGridView1.SelectedRows.Count > 1
        Dim textBoxLocY As Integer = DataGridView1.Height + 32

        txt_tabletitle.Visible = False
        txt_tabletop250.Visible = False
        txt_tableyear.Visible = False
        txt_tablesorttitle.Visible = False
        txt_tableruntime.Visible = False
        txt_tablerating.Visible = False
        txt_tableoutline.Visible = False
        txt_tableplot.Visible = False
        txt_tablegenre.Visible = False
        Cmbobx_tablewatched.Visible = False
        cmbobx_tablesets.Visible = False
        cmbobx_tablesource.Visible = False
        btn_movTableApply.Visible = False
        lbl_movTableMultirow.Visible = False

        If Not multirowControlsVisibility Then
            Exit Sub
        End If

        btn_movTableApply.Visible = True
        lbl_movTableMultirow.Visible = True
        For Each column In DataGridView1.Columns
            If column.visible Then
                Select Case column.headertext.tolower
                    Case "title"
                        txt_tabletitle.Width = column.width - 4
                        txt_tabletitle.Visible = True
                        Dim textBoxLocX As Integer = 0
                        For Each col In DataGridView1.Columns
                            If col.displayindex < DataGridView1.Columns("Title").DisplayIndex And col.visible = True Then
                                textBoxLocX = textBoxLocX + col.width
                            End If
                        Next
                        txt_tabletitle.Location = New Point(textBoxLocX + 2, textBoxLocY)
                    Case "year"
                        txt_tableyear.Width = column.width - 4
                        txt_tableyear.Visible = True
                        Dim textBoxLocX As Integer = 0
                        For Each col In DataGridView1.Columns
                            If col.displayindex < DataGridView1.Columns("Year").DisplayIndex And col.visible = True Then
                                textBoxLocX = textBoxLocX + col.width
                            End If
                        Next
                        txt_tableyear.Location = New Point(textBoxLocX + 2, textBoxLocY)
                    Case "sort title"
                        txt_tablesorttitle.Width = column.width - 4
                        txt_tablesorttitle.Visible = True
                        Dim textBoxLocX As Integer = 0
                        For Each col In DataGridView1.Columns
                            If col.displayindex < DataGridView1.Columns("sorttitle").DisplayIndex And col.visible = True Then
                                textBoxLocX = textBoxLocX + col.width
                            End If
                        Next
                        txt_tablesorttitle.Location = New Point(textBoxLocX + 2, textBoxLocY)
                    Case "genre"
                        txt_tablegenre.Width = column.width - 4
                        txt_tablegenre.Visible = True
                        Dim textBoxLocX As Integer = 0
                        For Each col In DataGridView1.Columns
                            If col.displayindex < DataGridView1.Columns("Genre").DisplayIndex And col.visible = True Then
                                textBoxLocX = textBoxLocX + col.width
                            End If
                        Next
                        txt_tablegenre.Location = New Point(textBoxLocX + 2, textBoxLocY)
                    Case "rating"
                        txt_tablerating.Width = column.width - 4
                        txt_tablerating.Visible = True
                        Dim textBoxLocX As Integer = 0
                        For Each col In DataGridView1.Columns
                            If col.displayindex < DataGridView1.Columns("Rating").DisplayIndex And col.visible = True Then
                                textBoxLocX = textBoxLocX + col.width
                            End If
                        Next
                        txt_tablerating.Location = New Point(textBoxLocX + 2, textBoxLocY)
                    Case "runtime"
                        txt_tableruntime.Width = column.width - 4
                        txt_tableruntime.Visible = True
                        Dim textBoxLocX As Integer = 0
                        For Each col In DataGridView1.Columns
                            If col.displayindex < DataGridView1.Columns("Runtime").DisplayIndex And col.visible = True Then
                                textBoxLocX = textBoxLocX + col.width
                            End If
                        Next
                        txt_tableruntime.Location = New Point(textBoxLocX + 2, textBoxLocY)
                    Case "top 250"
                        txt_tabletop250.Width = column.width - 4
                        txt_tabletop250.Visible = True
                        Dim textBoxLocX As Integer = 0
                        For Each col In DataGridView1.Columns
                            If col.displayindex < DataGridView1.Columns("top250").DisplayIndex And col.visible = True Then
                                textBoxLocX = textBoxLocX + col.width
                            End If
                        Next
                        txt_tabletop250.Location = New Point(textBoxLocX + 2, textBoxLocY)
                    Case "source"
                        cmbobx_tablesource.Visible = True
                        cmbobx_tablesource.Width = column.width - 4
                        Dim textBoxLocX As Integer = 0
                        For Each col In DataGridView1.Columns
                            If col.displayindex < DataGridView1.Columns("source").DisplayIndex And col.visible = True Then
                                textBoxLocX = textBoxLocX + col.width
                            End If
                        Next
                        cmbobx_tablesource.Location = New Point(textBoxLocX + 2, textBoxLocY)
                    Case "watched"
                        Cmbobx_tablewatched.Visible = True
                        Cmbobx_tablewatched.Width = column.width - 4
                        Dim textBoxLocX As Integer = 0
                        For Each col In DataGridView1.Columns
                            If col.displayindex < DataGridView1.Columns("playcount").DisplayIndex And col.visible = True Then
                                textBoxLocX = textBoxLocX + col.width
                            End If
                        Next
                        Cmbobx_tablewatched.Location = New Point(textBoxLocX + 2, textBoxLocY)
                    Case "sets"
                        cmbobx_tablesets.Visible = True
                        cmbobx_tablesets.Width = column.width - 4
                        Dim textBoxLocX As Integer = 0
                        For Each col In DataGridView1.Columns
                            If col.displayindex < DataGridView1.Columns("Set").DisplayIndex And col.visible = True Then
                                textBoxLocX = textBoxLocX + col.width
                            End If
                        Next
                        cmbobx_tablesets.Location = New Point(textBoxLocX + 2, textBoxLocY)
                    Case "outline"
                        'txt_tableoutline.Width = column.width - 4
                        txt_tableoutline.Visible = True
                        'Dim textBoxLocX As Integer = 0
                        'For Each col In DataGridView1.Columns
                        '    If col.displayindex < DataGridView1.Columns("Outline").DisplayIndex And col.visible = True Then
                        '        textBoxLocX = textBoxLocX + col.width
                        '    End If
                        'Next
                        'txt_tableoutline.Location = New Point(textBoxLocX + 2, textBoxLocY)
                    Case "plot"
                        'txt_tableplot.Width = column.width - 4
                        txt_tableplot.Visible = True
                        'Dim textBoxLocX As Integer = 0
                        'For Each col In DataGridView1.Columns
                        '    If col.displayindex < DataGridView1.Columns("Plot").DisplayIndex And col.visible = True Then
                        '        textBoxLocX = textBoxLocX + col.width
                        '    End If
                        'Next
                        'txt_tableplot.Location = New Point(textBoxLocX + 2, textBoxLocY)
                End Select
            End If
        Next
    End Sub

    Private Sub GoToToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles GoToToolStripMenuItem.Click
        Try
            Dim tempstring As String = ""
            For Each selecteditem In DataGridView1.SelectedRows
                tempstring = selecteditem.Cells("fullpathandfilename").Value
            Next
            For f = 0 To DataGridViewMovies.Rows.Count - 1
                'If CType(MovieListComboBox.Items(f), ValueDescriptionPair).Value = tempstring Then
                If DataGridViewMovies.Rows(f).Cells("fullpathandfilename").ToString = tempstring Then
                    'MovieListComboBox.SelectedItems.Clear()
                    'MovieListComboBox.SelectedIndex = f
                    DataGridViewMovies.ClearSelection()
                    DataGridViewMovies.Rows(f).Selected = True
                    Application.DoEvents()
                    currentTabIndex = 0
                    Me.TabControl2.SelectedIndex = 0
                    Exit For
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button98_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn_movTableApply.Click
        Try
            Call mov_TableUpdate()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button99_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Try
            Call mov_TableUpdate()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_TableUpdate()
        For Each row In DataGridView1.SelectedRows
            If txt_tabletitle.Text <> "" And txt_tabletitle.Visible = True Then
                row.cells("title").value = txt_tabletitle.Text
            End If
            If txt_tabletop250.Text <> "" And txt_tabletop250.Visible = True Then
                row.cells("top250").value = txt_tabletop250.Text
            End If
            If txt_tableyear.Text <> "" And txt_tableyear.Visible = True Then
                row.cells("year").value = txt_tableyear.Text
            End If
            If txt_tablesorttitle.Text <> "" And txt_tablesorttitle.Visible = True Then
                row.cells("sorttitle") = txt_tablesorttitle.Text
            End If
            If txt_tableruntime.Text <> "" And txt_tableruntime.Visible = True Then
                row.cells("runtime").value = txt_tableruntime.Text
            End If
            If txt_tablerating.Text <> "" And txt_tablerating.Visible = True Then
                row.cells("rating").value = txt_tablerating.Text
            End If
            If txt_tableoutline.Text <> "" And txt_tableoutline.Visible = True Then
                row.cells("outline").value = txt_tableoutline.Text
            End If
            If txt_tableplot.Text <> "" And txt_tableplot.Visible = True Then
                row.cells("plot").value = txt_tableplot.Text
            End If
            If txt_tablegenre.Text <> "" And txt_tablegenre.Visible = True Then
                row.cells("genre").value = txt_tablegenre.Text
            End If

            If cmbobx_tablesource.SelectedItem <> "UnChanged" And cmbobx_tablesource.Visible = True Then
                row.cells("source").value = cmbobx_tablesource.SelectedItem
            End If
            If Cmbobx_tablewatched.SelectedIndex <> 0 And Cmbobx_tablewatched.Visible = True Then
                If Cmbobx_tablewatched.SelectedIndex = 1 Then
                    row.cells("playcount").value = True
                ElseIf Cmbobx_tablewatched.SelectedIndex = 2 Then
                    row.cells("playcount").value = False
                End If
            End If
            If cmbobx_tablesets.SelectedItem <> "UnChanged" And cmbobx_tablesets.Visible = True Then
                row.cells("set").value = cmbobx_tablesets.SelectedItem
            End If
        Next
    End Sub

    Private Sub Button100_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button100.Click
        Try
            Call mov_TableUpdate()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub GoToSelectedMoviePosterSelectorToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles GoToSelectedMoviePosterSelectorToolStripMenuItem.Click
        Try
            Dim tempstring As String = ""
            For Each selecteditem In DataGridView1.SelectedRows
                tempstring = selecteditem.Cells("fullpathandfilename").Value
            Next
            For f = 0 To DataGridViewMovies.Rows.Count - 1
                'If CType(MovieListComboBox.Items(f), ValueDescriptionPair).Value = tempstring Then
                If DataGridViewMovies.Rows(f).Cells("fullpathandfilename").ToString = tempstring Then
                    'MovieListComboBox.SelectedItems.Clear()
                    'MovieListComboBox.SelectedIndex = f
                    DataGridViewMovies.ClearSelection()
                    DataGridViewMovies.Rows(f).Selected = True
                    For Each tabs In TabControl2.TabPages
                        If tabs.text = "Posters" Then
                            currentTabIndex = tabs.tabindex + 1
                            Me.TabControl2.SelectedIndex = tabs.tabindex + 1
                            Exit For
                        End If
                    Next
                    Exit For
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub GoToSelectedMovieFanartSelectorToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles GoToSelectedMovieFanartSelectorToolStripMenuItem.Click
        Try
            Dim tempstring As String = ""
            For Each selecteditem In DataGridView1.SelectedRows
                tempstring = selecteditem.Cells("fullpathandfilename").Value
            Next
            'For f = 0 To MovieListComboBox.Items.Count - 1
            For f = 0 To DataGridViewMovies.RowCount - 1
                'If DataGridViewMovies.SelectedCells(NFO_INDEX).Value.ToString = tempstring Then
                If DataGridViewMovies.Rows(f).Cells("fullpathandfilename").ToString = tempstring Then
                    'MovieListComboBox.SelectedItems.Clear()
                    'MovieListComboBox.SelectedIndex = f
                    DataGridViewMovies.ClearSelection()
                    DataGridViewMovies.Rows(f).Selected = True
                    For Each tabs In TabControl2.TabPages
                        If tabs.text = "Fanart" Then
                            currentTabIndex = tabs.tabindex + 1
                            Me.TabControl2.SelectedIndex = tabs.tabindex + 1
                            Exit For
                        End If
                    Next
                    Exit For
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub SearchForNewEpisodesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SearchForNewEpisodesToolStripMenuItem.Click
        Try
            'If Not bckgroundscanepisodes.IsBusy Then
            '    'ToolStripButton10.Visible = True
            '    TabPage15.Text = "Cancel Episode Search"
            '    TabPage15.ToolTipText = "This cancels the episode search" & vbCrLf & "and episode scraper thread"
            '    showstoscrapelist.Clear()
            '    For Each item In basictvlist
            '        If (item.fullpath.ToLower.IndexOf("tvshow.nfo") <> -1) And (item.locked = 0) Then
            '            showstoscrapelist.Add(item.fullpath)
            '        End If
            '    Next
            '    bckgroundscanepisodes.RunWorkerAsync()
            'Else
            '    MsgBox("This TV Scraper is already running")
            'End If
            SearchForNewEpisodesToolStripMenuItem.Owner.Hide()
            Call ep_Search()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub SearchALLForNewEpisodesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SearchALLForNewEpisodesToolStripMenuItem.Click
        Try

            TVSearchALL = True
            Call ep_Search()
            TVSearchALL = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub mov_ScrapeSpecific(ByVal field As String)

        _rescrapeList.Field = field
        _rescrapeList.FullPathAndFilenames.Clear

        For Each row As DataGridViewRow In DataGridViewMovies.SelectedRows
            _rescrapeList.FullPathAndFilenames.Add(row.Cells("fullpathandfilename").Value.ToString)
        Next

        RunBackgroundMovieScrape("RescrapeSpecific")
    End Sub


    Private Sub ToolStripMenuItem3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem3.Click
        Try
            Call mov_ScrapeSpecific("title")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem4.Click
        Try
            Call mov_ScrapeSpecific("plot")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem5.Click
        Try
            Call mov_ScrapeSpecific("tagline")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem6.Click
        Try
            Call mov_ScrapeSpecific("director")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem7.Click
        Try
            Call mov_ScrapeSpecific("credits")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem8.Click
        Try
            Call mov_ScrapeSpecific("mpaa")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem9.Click
        Try
            Call mov_ScrapeSpecific("genre")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem10_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem10.Click
        Try
            Call mov_ScrapeSpecific("outline")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem12_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem12.Click
        Try
            Call mov_ScrapeSpecific("runtime")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem13_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem13.Click
        Try
            Call mov_ScrapeSpecific("runtime_file")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem14_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem14.Click
        Try
            Call mov_ScrapeSpecific("studio")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem15_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem15.Click
        Try
            Call mov_ScrapeSpecific("actors")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem16_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem16.Click
        Try
            Call mov_ScrapeSpecific("missingfanart")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem17_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem17.Click
        Try
            Call mov_ScrapeSpecific("missingposters")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem18_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem18.Click
        Try
            Call mov_ScrapeSpecific("mediatags")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem19_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem19.Click
        Try
            Call mov_ScrapeSpecific("rating")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem20_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem20.Click
        Try
            Call mov_ScrapeSpecific("votes")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub ToolStripMenuItem21_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem21.Click
        Try
            Call mov_ScrapeSpecific("stars")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub YearToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles YearToolStripMenuItem.Click
        Try
            Call mov_ScrapeSpecific("year")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub tsmiTMDbSetName_Click( sender As System.Object,  e As System.EventArgs) Handles tsmiTMDbSetName.Click
        Call mov_ScrapeSpecific("tmdb_set_name")
    End Sub


    Private Sub PictureBoxFanArt_Click(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles PictureBoxFanArt.MouseUp, PictureBoxFanArt.Click
        Try
            If e.Button = Windows.Forms.MouseButtons.Right Then
                RescrapePToolStripMenuItem.Visible = False
                RescrapePosterFromTMDBToolStripMenuItem.Visible = False
                RescraToolStripMenuItem.Visible = False
                PeToolStripMenuItem.Visible = False
                DownloadPosterToolStripMenuItem.Visible = False
                DownloadPosterFromTMDBToolStripMenuItem.Visible = False
                DownloadPosterFromMPDBToolStripMenuItem.Visible = False
                DownloadPosterFromIMDBToolStripMenuItem.Visible = False
                RescrapeFanartToolStripMenuItem.Visible = False
                DownloadFanartToolStripMenuItem.Visible = False
                Try
                    If IO.File.Exists(Preferences.GetFanartPath(workingMovieDetails.fileinfo.fullpathandfilename)) Or (workingMovieDetails.fileinfo.videotspath <>"" and IO.File.Exists(workingMovieDetails.fileinfo.videotspath+"fanart.jpg")) Then
                        RescrapeFanartToolStripMenuItem.Visible = True
                    Else
                        DownloadFanartToolStripMenuItem.Visible = True
                    End If
                Catch
                    RescrapePToolStripMenuItem.Visible = False
                    RescrapeFanartToolStripMenuItem.Visible = False
                    DownloadFanartToolStripMenuItem.Visible = False
                    DownloadPosterToolStripMenuItem.Visible = False

                End Try
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub moviethumb_Click(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles moviethumb.MouseUp
        Try
            If e.Button = Windows.Forms.MouseButtons.Right Then
                RescrapePToolStripMenuItem.Visible = False
                RescrapePosterFromTMDBToolStripMenuItem.Visible = False
                RescraToolStripMenuItem.Visible = False
                PeToolStripMenuItem.Visible = False
                DownloadPosterToolStripMenuItem.Visible = False
                DownloadPosterFromTMDBToolStripMenuItem.Visible = False
                DownloadPosterFromMPDBToolStripMenuItem.Visible = False
                DownloadPosterFromIMDBToolStripMenuItem.Visible = False
                RescrapeFanartToolStripMenuItem.Visible = False
                DownloadFanartToolStripMenuItem.Visible = False
                Try
                    If IO.File.Exists(Preferences.GetPosterPath(workingMovieDetails.fileinfo.fullpathandfilename)) Then
                        RescrapePToolStripMenuItem.Visible = True
                        RescrapePosterFromTMDBToolStripMenuItem.Visible = True
                        RescraToolStripMenuItem.Visible = True
                        PeToolStripMenuItem.Visible = True
                    Else
                        DownloadPosterToolStripMenuItem.Visible = True
                        DownloadPosterFromTMDBToolStripMenuItem.Visible = True
                        DownloadPosterFromMPDBToolStripMenuItem.Visible = True
                        DownloadPosterFromIMDBToolStripMenuItem.Visible = True
                    End If
                Catch
                    RescrapePToolStripMenuItem.Visible = False
                    RescrapePosterFromTMDBToolStripMenuItem.Visible = False
                    RescraToolStripMenuItem.Visible = False
                    PeToolStripMenuItem.Visible = False
                    DownloadPosterToolStripMenuItem.Visible = False
                    DownloadPosterFromTMDBToolStripMenuItem.Visible = False
                    DownloadPosterFromMPDBToolStripMenuItem.Visible = False
                    DownloadPosterFromIMDBToolStripMenuItem.Visible = False
                    RescrapeFanartToolStripMenuItem.Visible = False
                    DownloadFanartToolStripMenuItem.Visible = False

                End Try
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)

        End Try

    End Sub
    'rescrape fanart
    Private Sub RescrapeFanartToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RescrapeFanartToolStripMenuItem.Click
        Try
            'rescrape fanart
            Call mov_FanartGet()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DownloadFanartToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DownloadFanartToolStripMenuItem.Click
        Try
            'download fanart
            Call mov_FanartGet()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_FanartGet()

        If IsNothing(workingMovieDetails)
            Return
        End If

        Dim messbox As New frmMessageBox("      Please Wait,", "", "Attempting to download Fanart")

        messbox.Show()
        messbox.Refresh()
        Application.DoEvents()

        Dim FanartPath As String=workingMovieDetails.fileinfo.fanartpath
        Dim tmdb       As New TMDb(workingMovieDetails.fullmoviebody.imdbid)
        Dim FanartUrl  As String=tmdb.GetBackDropUrl()
        Dim isvideotspath As String = If(workingMovieDetails.fileinfo.videotspath="","",workingMovieDetails.fileinfo.videotspath+"fanart.jpg")

        If IsNothing(FanartUrl) then
            MsgBox("No Fanart Found on TMDB")
        Else

            'If Utilities.DownloadImage(FanartUrl, FanartPath) then
            If Movie.SaveFanartImageToCacheAndPath(FanartUrl, FanartPath) then
                If Preferences.FrodoEnabled and isvideotspath<>"" Then
                    If IO.File.Exists(isvideotspath) Then
                        Utilities.SafeDeleteFile(isvideotspath)
                    End If
                    IO.File.Copy(FanartPath,isvideotspath)
                    GC.Collect
                    If Not Preferences.EdenEnabled Then
                        Utilities.SafeDeleteFile(FanartPath)
                    End If
                    FanartPath=isvideotspath
                End If

                For Each paths In Preferences.offlinefolders
                    Dim offlinepath As String = paths & "\"
                    If workingMovieDetails.fileinfo.fanartpath.IndexOf(offlinepath) <> -1 Then
                        Dim mediapath As String
                        mediapath = Utilities.GetFileName(workingMovieDetails.fileinfo.fullpathandfilename)
                        Call mov_OfflineDvdProcess(workingMovieDetails.fileinfo.fullpathandfilename, workingMovieDetails.fullmoviebody.title, mediapath)
                    End If
                Next

                Dim bitmap3 As New Bitmap(FanartPath)
                Dim bmp4 As New Bitmap(bitmap3)
                bitmap3.Dispose()
                PictureBoxFanArt.Image = bmp4
                PictureBox2.Image = bmp4
 '               Rating1.PictureInit = bmp4
            End If
        End If

        messbox.Close()

    End Sub


    'Rescrape Poster
    Private Sub RescrapePToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RescrapePToolStripMenuItem.Click
        Try
            'rescrape poster IMPA
            mov_PosterGet("impa")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RescrapePosterFromTMDBToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RescrapePosterFromTMDBToolStripMenuItem.Click
        Try
            'rescrape poster tmdb
            mov_PosterGet("tmdb")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RescraToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RescraToolStripMenuItem.Click
        Try
            'rescrape poster mpdb
            mov_PosterGet("mpdb")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub PeToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PeToolStripMenuItem.Click
        Try
            'rescrape poster imdb
            mov_PosterGet("imdb")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DownloadPosterToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DownloadPosterToolStripMenuItem.Click
        Try
            'downloadposter impa
            mov_PosterGet("impa")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DownloadPosterFromTMDBToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DownloadPosterFromTMDBToolStripMenuItem.Click
        Try
            'downloadposter tmdb
            mov_PosterGet("tmdb")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DownloadPosterFromMPDBToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DownloadPosterFromMPDBToolStripMenuItem.Click
        Try
            'downloadposter mpdb
            mov_PosterGet("mpdb")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DownloadPosterFromIMDBToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DownloadPosterFromIMDBToolStripMenuItem.Click
        Try
            'downloadposter imdb
            mov_PosterGet("imdb")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub mov_PosterGet(ByVal source As String)
        Try
            Dim messbox As New frmMessageBox("          Please Wait,", "", "Attempting to download Poster from " & source.ToUpper)
            messbox.Show()
            messbox.Refresh()
            Application.DoEvents()
            Dim posterpath As String = ""
            Dim isvideotspath As String = ""
            If Not workingMovieDetails Is Nothing Then
                If workingMovieDetails.fileinfo.fullpathandfilename <> Nothing Then
                    If workingMovieDetails.fileinfo.fullpathandfilename <> "" Then
                        posterpath = Preferences.GetPosterPath(workingMovieDetails.fileinfo.fullpathandfilename)
                    End If
                    If workingMovieDetails.fileinfo.videotspath<>"" Then
                        isvideotspath=workingMovieDetails.fileinfo.videotspath+"poster.jpg"
                    End If
                End If
            End If

            If posterpath <> "" Then
                Dim moviethumburl As String = ""
                Dim tmdb As New TMDb(workingMovieDetails.fullmoviebody.imdbid)

                If source = "impa" Then
                    If workingMovieDetails.fullmoviebody.title <> "" And workingMovieDetails.fullmoviebody.year <> "" Then
                        moviethumburl = scraperFunction2.impathumb(workingMovieDetails.fullmoviebody.title, workingMovieDetails.fullmoviebody.year)
                    End If
                ElseIf source = "tmdb" Then
                    If workingMovieDetails.fullmoviebody.imdbid <> "" Then
                        'moviethumburl = scraperFunction2.tmdbthumb(workingMovieDetails.fullmoviebody.imdbid)
                        moviethumburl = tmdb.FirstOriginalPosterUrl
                    End If
                ElseIf source = "mpdb" Then
                    If workingMovieDetails.fullmoviebody.imdbid <> "" Then
                        moviethumburl = scraperFunction2.mpdbthumb(workingMovieDetails.fullmoviebody.imdbid)
                    End If
                ElseIf source = "imdb" Then
                    If workingMovieDetails.fullmoviebody.imdbid <> "" Then
                        moviethumburl = scraperFunction2.imdbthumb(workingMovieDetails.fullmoviebody.imdbid)
                    End If
                End If

                If moviethumburl <> "" And moviethumburl <> "na" Then

                    Try
                 '      Utilities.DownloadImage(moviethumburl, posterpath)
                        Movie.SavePosterImageToCacheAndPath(moviethumburl, posterpath)
                        If Preferences.FrodoEnabled and isvideotspath<>"" Then
                            If IO.File.Exists(isvideotspath) Then
                                Utilities.SafeDeleteFile(isvideotspath)
                            End If
                            IO.File.Copy(posterpath,isvideotspath)
                            GC.Collect
                            If Not Preferences.EdenEnabled Then
                                Utilities.SafeDeleteFile(posterpath)
                            End If
                            posterpath=isvideotspath
                        End If

                        Dim temppath As String = posterpath.Replace(System.IO.Path.GetFileName(posterpath), "folder.jpg")
                        If Preferences.createfolderjpg = True Then
                            If Preferences.overwritethumbs Or Not System.IO.File.Exists(temppath) Then

                          '      Utilities.DownloadImage(moviethumburl, temppath)
                                File.Copy(posterpath, temppath, True)

                            End If
                        End If

                        Dim bitmap3 As New Bitmap(posterpath)
                        Dim bmp4 As New Bitmap(bitmap3)
                        bitmap3.Dispose()
                        PictureBoxAssignedMoviePoster.Image = bmp4
                        moviethumb.Image = bmp4

                        Dim bitmap5 As New Bitmap(posterpath)
                        Dim bitmap6 As New Bitmap(bitmap5)
                        bitmap5.Dispose()
                        Dim bm_source As New Bitmap(bitmap6)
                        Dim bm_dest As New Bitmap(150, 200)
                        Dim gr As Graphics = Graphics.FromImage(bm_dest)
                        gr.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBilinear
                        gr.DrawImage(bm_source, 0, 0, 150 - 1, 200 - 1)
                        Dim tempbitmap As Bitmap = bm_dest
                        Dim filename As String = Utilities.GetCRC32(workingMovieDetails.fileinfo.fullpathandfilename)
                        Dim path As String = IO.Path.Combine(applicationPath, "settings\postercache\" & filename & ".jpg")
                        tempbitmap.Save(path, Imaging.ImageFormat.Jpeg)
                        tempbitmap.Dispose()

                        For Each poster As PictureBox In TabPage22.Controls
                            If poster.Tag = workingMovieDetails.fileinfo.fullpathandfilename Then
                                poster.ImageLocation = path
                                poster.Load()
                                Exit For
                            End If
                        Next
                    Catch ex As Exception
                        MsgBox("Error [" & ex.Message & "] occurred while trying to download and save the poster")
                    End Try
                Else
                    MsgBox("Unable to obtain a Poster from " & source.ToUpper)
                End If
            End If
            messbox.Close()
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        Finally

        End Try

    End Sub

    Public Sub mov_OfflineDvdProcess(ByVal nfopath As String, ByVal title As String, ByVal mediapath As String)
        Dim tempint2 As Integer = 2097152
        Dim SizeOfFile As Integer = FileLen(mediapath)
        If SizeOfFile > tempint2 Then
            Exit Sub
        End If
        Try
            Dim fanartpath As String = ""
            If IO.File.Exists(Preferences.GetFanartPath(nfopath)) Then
                fanartpath = Preferences.GetFanartPath(nfopath)
            Else
                fanartpath = Utilities.DefaultOfflineArtPath
            End If
            Dim curImage As Image = Image.FromFile(fanartpath)
            'Dim tempstring As String = "Please Insert '" & title & "' DVD"

            Dim tempstring As String = TextBox_OfflineDVDTitle.Text.Replace("%T", title)

            Dim g As System.Drawing.Graphics

            g = Graphics.FromImage(curImage)
            Dim semiTransBrush As New SolidBrush(Color.FromArgb(80, 0, 0, 0))

            Dim drawString As String = tempstring

            Dim drawFont As New System.Drawing.Font("Arial", 40)
            Dim drawBrush As New SolidBrush(Color.White)

            Dim StringSize As New SizeF
            StringSize = g.MeasureString(drawString, drawFont)
            Dim width As Single = StringSize.Width + 5
            Dim height As Single = StringSize.Height + 5



            If height < (curImage.Height / 100) * 8 Then
                Do
                    Dim newsize As Integer = drawFont.Size + 1
                    drawFont = New System.Drawing.Font("Arial", newsize)
                    StringSize = g.MeasureString(drawString, drawFont)
                    height = StringSize.Height
                Loop Until height > (curImage.Height / 100) * 8
            End If
            If height > (curImage.Height / 100) * 8 Then
                Do
                    Dim newsize As Integer = drawFont.Size - 1
                    drawFont = New System.Drawing.Font("Arial", newsize)
                    StringSize = g.MeasureString(drawString, drawFont)
                    height = StringSize.Height
                Loop Until height < (curImage.Height / 100) * 8
            End If
            StringSize = g.MeasureString(drawString, drawFont)
            width = StringSize.Width
            height = StringSize.Height
            If width > curImage.Width - 30 Then
                Do
                    Dim newsize As Integer = drawFont.Size - 1
                    drawFont = New System.Drawing.Font("Arial", newsize)
                    StringSize = g.MeasureString(drawString, drawFont)
                    width = StringSize.Width + 20
                Loop Until width < curImage.Width - 30
            End If
            StringSize = g.MeasureString(drawString, drawFont)
            width = StringSize.Width + 5
            height = StringSize.Height + 5
            Dim x As Integer = (curImage.Width / 2) - (width / 2)
            Dim y As Integer = (curImage.Height - StringSize.Height) - ((curImage.Height / 100) * 2)
            Dim drawRect As New RectangleF(x, y, width, height)


            g.FillRectangle(semiTransBrush, New Rectangle(x, y, width, height))

            Dim drawFormat As New StringFormat
            drawFormat.Alignment = StringAlignment.Center

            g.DrawString(drawString, drawFont, drawBrush, drawRect, drawFormat)
            For f = 1 To 16
                Dim path As String
                If f < 10 Then
                    path = applicationPath & "\Settings\00" & f.ToString & ".jpg"
                Else
                    path = applicationPath & "\Settings\0" & f.ToString & ".jpg"
                End If
                curImage.Save(path, Drawing.Imaging.ImageFormat.Jpeg)
            Next

            Dim myProcess As Process = New Process
            myProcess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden
            myProcess.StartInfo.CreateNoWindow = False
            myProcess.StartInfo.FileName = applicationPath & "\Assets\ffmpeg.exe"
            Dim proc_arguments As String = "-r 1 -b 1800 -qmax 6 -i """ & applicationPath & "\Settings\%03d.jpg"" -vcodec msmpeg4v2 -y """ & mediapath & """"
            myProcess.StartInfo.Arguments = proc_arguments
            myProcess.Start()
            myProcess.WaitForExit()

            For f = 1 To 16
                Dim tempstring4 As String
                If f < 10 Then
                    tempstring4 = applicationPath & "\Settings\00" & f.ToString & ".jpg"
                Else
                    tempstring4 = applicationPath & "\Settings\0" & f.ToString & ".jpg"
                End If
                Try
                    IO.File.Delete(tempstring4)
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
            Next
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
    End Sub

    Private Sub Button102_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button102.Click
        Try
            'add offline movie folder browser
            Dim allok As Boolean = True
            Dim theFolderBrowser As New FolderBrowserDialog
            Dim thefoldernames As String
            theFolderBrowser.Description = "Please Select a Root Offline DVD Folder to Add to DB"
            theFolderBrowser.ShowNewFolderButton = True
            theFolderBrowser.RootFolder = System.Environment.SpecialFolder.Desktop
            theFolderBrowser.SelectedPath = Preferences.lastpath
            If theFolderBrowser.ShowDialog = Windows.Forms.DialogResult.OK Then
                thefoldernames = (theFolderBrowser.SelectedPath)
                Preferences.lastpath = thefoldernames
                For Each item As Object In ListBox15.Items
                    If thefoldernames.ToString = item.ToString Then allok = False
                Next

                If allok = True Then
                    ListBox15.Items.Add(thefoldernames)
                    ListBox15.Refresh()
                Else
                    MsgBox("        Folder Already Exists")
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button101_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button101.Click
        Try
            'remove selected offline movie folders
            While ListBox15.SelectedItems.Count > 0
                ListBox15.Items.Remove(ListBox15.SelectedItems(0))
            End While
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox33_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox33.CheckedChanged
        Try
            If CheckBox33.Checked = True Then
                Preferences.actorseasy = True
            Else
                Preferences.actorseasy = False
            End If
            If prefsload = False Then
                generalprefschanged = True
                btnGeneralPrefsSaveChanges.Enabled = True
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox34_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox34.CheckedChanged
        Try
            If CheckBox34.Checked = True Then
                Preferences.copytvactorthumbs = True
            Else
                Preferences.copytvactorthumbs = False
            End If
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox35_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox35.CheckedChanged
        Try
            If CheckBox35.CheckState = CheckState.Checked Then
                Preferences.tvshowautoquick = True
            Else
                Preferences.tvshowautoquick = False
            End If
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox36_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox36.CheckedChanged
        Try
            If CheckBox36.CheckState = CheckState.Checked Then
                Preferences.autoepisodescreenshot = True
            Else
                Preferences.autoepisodescreenshot = False
            End If
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_tv_EpisodeRenameAuto_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_tv_EpisodeRenameAuto.CheckedChanged
        Try
            If CheckBox_tv_EpisodeRenameAuto.CheckState = CheckState.Checked Then
                Preferences.autorenameepisodes = True
            Else
                Preferences.autorenameepisodes = False
            End If
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub


    Private Sub Button105_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button105.Click
        Try
            If TextBox41.Text <> "" And TextBox43.Text <> "" Then
                Dim newcom As New str_ListOfCommands(SetDefaults)
                newcom.command = TextBox43.Text
                newcom.title = TextBox41.Text
                Preferences.commandlist.Add(newcom)
                ListBox16.Items.Add(newcom.title)
                ListBox17.Items.Add(newcom.command)
                ToolsToolStripMenuItem.DropDownItems.Clear()
                For Each com In Preferences.commandlist
                    ToolsToolStripMenuItem.DropDownItems.Add(com.title)
                Next
                If prefsload = False Then
                    generalprefschanged = True
                    btnGeneralPrefsSaveChanges.Enabled = True
                End If
            Else
                MsgBox("This feature needs both a title & command")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ListBox16_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ListBox16.SelectedIndexChanged
        Try
            ListBox17.SelectedIndex = ListBox16.SelectedIndex
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ListBox17_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ListBox17.SelectedIndexChanged
        Try
            ListBox16.SelectedIndex = ListBox17.SelectedIndex
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button106_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button106.Click
        Try
            If ListBox16.SelectedItem <> "" And ListBox17.SelectedItem <> "" Then
                For Each com In Preferences.commandlist
                    If com.title = ListBox16.SelectedItem And com.command = ListBox17.SelectedItem Then
                        Preferences.commandlist.Remove(com)
                        Exit For
                    End If
                Next
            End If
            ListBox16.Items.Clear()
            ListBox17.Items.Clear()
            ToolsToolStripMenuItem.DropDownItems.Clear()
            For Each com In Preferences.commandlist
                ListBox16.Items.Add(com.title)
                ListBox17.Items.Add(com.command)
                ToolsToolStripMenuItem.DropDownItems.Add(com.title)
            Next
            If prefsload = False Then
                generalprefschanged = True
                btnGeneralPrefsSaveChanges.Enabled = True
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ToolsToolStripMenuItem_DropDownItemClicked(ByVal sender As Object, ByVal e As System.Windows.Forms.ToolStripItemClickedEventArgs) Handles ToolsToolStripMenuItem.DropDownItemClicked
        Try
            For Each temp In Preferences.commandlist
                If temp.title = e.ClickedItem.Text Then
                    Try
                        Process.Start(temp.command)
                    Catch ex As Exception
                    End Try
                    Exit For
                End If
            Next
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub SearchForMissingEpisodesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SearchForMissingEpisodesToolStripMenuItem.Click
        Try
            If Not Bckgrndfindmissingepisodes.IsBusy And bckgroundscanepisodes.IsBusy = False Then
                Preferences.displayMissingEpisodes = SearchForMissingEpisodesToolStripMenuItem.Checked
                Preferences.SaveConfig()
                If Preferences.displayMissingEpisodes = False OrElse MsgBox("If you had previously downloaded missing episodes, do you wish to download them again?", MsgBoxStyle.YesNo, "Confirm Download Missing Episode Details") = Windows.Forms.DialogResult.No Then
                    tv_Filter()
                    Return
                End If
                Dim ShowList As New List(Of TvShow)
                For Each shows In Cache.TvCache.Shows
                    shows.MissingEpisodes.Clear()
                    ShowList.Add(shows)
                Next
                If MsgBox("This function will download & populate the treeview with all of the episode details missing from your collection." & vbCrLf & "The download will be completed in the background. You can watch the status in the status bar below." & vbCrLf & vbCrLf & "Do you want to proceed with the download for " & ShowList.Count & " shows?", MsgBoxStyle.YesNo, "Download Missing Episode Details") = Windows.Forms.DialogResult.No Then Exit Sub
                'Dim nod As TreeNode
                'For Each nod In TvTreeview.Nodes
                '    Dim nod2 As TreeNode
                '    For Each nod2 In nod.Nodes
                '        Dim nod3 As TreeNode
                '        For Each nod3 In nod2.Nodes
                '            If nod3.Name.IndexOf("Missing: ") = 0 Then
                '                nod3.Remove()
                '            End If
                '        Next
                '    Next
                'Next
                ToolStripStatusLabel2.Text = "Starting search for missing episodes"
                ToolStripStatusLabel2.Visible = True
                Bckgrndfindmissingepisodes.RunWorkerAsync(ShowList)
            ElseIf Bckgrndfindmissingepisodes.IsBusy Then
                MsgBox("Process is already running")
            Else
                MsgBox("Missing episode search cannot be performed" & vbCrLf & "    when the episode scraper is running")
            End If

        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub tv_CacheRefreshSelected(ByVal Show As TvShow)
        tv_CacheRefresh(Show)
        'MsgBox("Please use 'Full Rebuild' as this is not implemented yet")
        'we need to utilise the already created code for cache rebuild but be able to send to it a single TV show to clear & rebuild....
    End Sub

    Private Sub RefreshThisShowToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_RefreshShow.Click
        Try
            Dim Show As TvShow = tv_ShowSelectedCurrently()

            If Show IsNot Nothing Then
                Call tv_CacheRefreshSelected(Show)
            Else
                MsgBox("No Show Selected")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub MissingepisodesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_ShowMissEps.Click
        Try
            Dim Show As TvShow = tv_ShowSelectedCurrently()

            If Not Bckgrndfindmissingepisodes.IsBusy Then
                Dim tempstring As String = ""
                For Each sho In Cache.TvCache.Shows
                    If sho.NfoFilePath = TvTreeview.SelectedNode.Name Then
                        tempstring = "Checking """ & sho.Title.Value & """ for missing episodes"
                        Exit For
                    End If
                Next
                If tempstring = "" Then tempstring = "Checking for missing episodes"
                Dim messbox As New frmMessageBox(tempstring, "", "Please Wait")
                messbox.Show()
                messbox.Refresh()
                Application.DoEvents()
                Dim ShowList As New List(Of TvShow)
                ShowList.Add(Show)
                Bckgrndfindmissingepisodes.RunWorkerAsync(ShowList)
                'Call tv_EpisodesMissingFind()
                messbox.Close()
            Else
                MsgBox("The missing episode thread is already running")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub RadioButton44_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton44.CheckedChanged
        Try
            If RadioButton44.Checked = True Then
                Call tv_Filter()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    ' Phyonics - Fix for issue #208
    Private Sub RadioButton53_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton53.CheckedChanged
        Try
            If RadioButton53.Checked = True Then
                Call tv_Filter()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub LockAllToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LockAllToolStripMenuItem.Click
        Try
            Dim Show As Media_Companion.TvShow
            For Each Show In Cache.TvCache.Shows 'Removed "As TvShow" from before "In Cache."
                Show.Load()
                Show.State = Media_Companion.ShowState.Locked
                Show.Save()
                Tv_CacheSave()
            Next
            tv_CacheLoad()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub UnlockAllToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles UnlockAllToolStripMenuItem.Click
        Try
            Dim Show As Media_Companion.TvShow
            For Each Show In Cache.TvCache.Shows
                Show.Load()
                Show.State = Media_Companion.ShowState.Open
                Show.Save()
                Tv_CacheSave()
            Next
            tv_CacheLoad()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox38_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox38.CheckedChanged
        Try
            If CheckBox38.Checked = True Then
                Preferences.intruntime = True
            Else
                Preferences.intruntime = False
            End If
            If prefsload = False Then
                generalprefschanged = True
                btnGeneralPrefsSaveChanges.Enabled = True
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button107_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button107.Click
        Try
            'listbox15
            If ListBox15.SelectedItem <> Nothing Then
                Dim tempstring As String = TextBox44.Text
                tempstring = tempstring.Replace("?", "")
                tempstring = tempstring.Replace("/", "")
                tempstring = tempstring.Replace("\", "")
                tempstring = tempstring.Replace("<", "")
                tempstring = tempstring.Replace(">", "")
                tempstring = tempstring.Replace(":", "")
                tempstring = tempstring.Replace("""", "")
                tempstring = tempstring.Replace("*", "")
                If tempstring.Length <> 0 Then
                    Try
                        Dim temppath As String = IO.Path.Combine(ListBox15.SelectedItem, tempstring)
                        Dim f As New IO.DirectoryInfo(temppath)
                        If Not f.Exists Then
                            IO.Directory.CreateDirectory(temppath)
                            MsgBox("Folder Created")
                        Else
                            MsgBox("Folder Already Exists")
                        End If
                    Catch ex As Exception
                        MsgBox("Unable to create folder" & vbCrLf & ex.Message.ToString)
                    End Try
                End If
            Else
                MsgBox("Please Select a folder from the above listbox")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub Button108_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button108.Click
        Try
            If ListBox15.SelectedItem <> Nothing Then
                Dim tempint As Integer = 0
                Dim textfilename As String = ""
                Dim filebrowser As New OpenFileDialog
                Dim mstrProgramFilesPath As String = System.Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles)
                filebrowser.InitialDirectory = mstrProgramFilesPath
                filebrowser.Filter = "Text Files|*.txt"
                filebrowser.Title = "Select text file to load"
                If filebrowser.ShowDialog = Windows.Forms.DialogResult.OK Then
                    textfilename = filebrowser.FileName
                End If
                If textfilename <> "" Then
                    Using textfile As StreamReader = New StreamReader(textfilename)
                        Dim line As String
                        line = textfile.ReadLine
                        Do While (Not line Is Nothing)
                            ' Add this line to list.
                            Dim tempstring As String = line
                            tempstring = tempstring.Replace("?", "")
                            tempstring = tempstring.Replace("/", "")
                            tempstring = tempstring.Replace("\", "")
                            tempstring = tempstring.Replace("<", "")
                            tempstring = tempstring.Replace(">", "")
                            tempstring = tempstring.Replace(":", "")
                            tempstring = tempstring.Replace("""", "")
                            tempstring = tempstring.Replace("*", "")
                            If tempstring.Length <> 0 Then
                                Try
                                    Dim temppath As String = IO.Path.Combine(ListBox15.SelectedItem, tempstring)
                                    Dim f As New IO.DirectoryInfo(temppath)
                                    If Not f.Exists Then
                                        tempint += 1
                                        IO.Directory.CreateDirectory(temppath)
                                    Else

                                    End If
                                Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                                End Try
                            End If
                            line = textfile.ReadLine
                        Loop
                    End Using
                    MsgBox(tempint.ToString & " Movie Folders added")
                End If
            Else
                MsgBox("Please Select a folder from the above listbox")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub TV_BatchRescrapeWizardToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles TV_BatchRescrapeWizardToolStripMenuItem.Click
        Try
            If Not tvbckrescrapewizard.IsBusy Then
                tvBatchList.epActor = False
                tvBatchList.epAired = False
                tvBatchList.epCredits = False
                tvBatchList.epDirector = False
                tvBatchList.epPlot = False
                tvBatchList.epRating = False
                tvBatchList.epRuntime = False
                tvBatchList.epScreenshot = False
                tvBatchList.epStreamDetails = False
                tvBatchList.epCreateScreenshot = False
                tvBatchList.shActor = False
                tvBatchList.shFanart = False
                tvBatchList.shGenre = False
                tvBatchList.shPosters = False
                tvBatchList.shSeason = False
                tvBatchList.shMpaa = False
                tvBatchList.shPlot = False
                tvBatchList.shRating = False
                tvBatchList.shRuntime = False
                tvBatchList.shStudio = False
                tvBatchList.shYear = False
                tvBatchList.includeLocked = False
                tvBatchList.activate = False
                tvBatchList.doShows = False
                tvBatchList.doEpisodes = False
                tvBatchList.doShowArt = False
                tvBatchList.doShowActors = False
                tvBatchList.doShowBody = False
                tvBatchList.doEpisodeArt = False
                tvBatchList.doEpisodeActors = False
                tvBatchList.doEpisodeBody = False
                tvBatchList.doEpisodeMediaTags = False

                ' doshowbody As Boolean
                'Dim doshowart As Boolean
                'Dim doshowactors As Boolean
                'Dim doepisodebody As Boolean
                'Dim doepisodeart As Boolean
                'Dim doepisodeactors As Boolean
                Dim displaywizard As New tv_batch_wizard

                displaywizard.ShowDialog()

                If tvBatchList.activate = True Then
                    ToolStripStatusLabel8.Text = "Starting TV Batch Scrape"
                    ToolStripStatusLabel8.Visible = True
                    ToolStripProgressBar7.Value = 0
                    ToolStripProgressBar7.Visible = True
                    'ToolStripProgressBar6.Visible = True
                    tvbckrescrapewizard.RunWorkerAsync()
                End If
            Else
                MsgBox("The update Wizard is Already Running")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub tvbckrescrapewizard_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles tvbckrescrapewizard.DoWork
        Try
            Dim showprocesscount As Integer = 0
            Dim progresstext As String = ""
            Dim progress As Integer = 0
            Dim progcount As Integer = 0
            Dim done As Integer = 0
            For f = Cache.TvCache.Shows.Count - 1 To 0 Step -1
                If Cache.TvCache.Shows(f).State = Media_Companion.ShowState.Open Or Cache.TvCache.Shows(f).State = -1 Or tvBatchList.includeLocked = True Then
                    If tvBatchList.doEpisodes = True Then
                        showprocesscount += Cache.TvCache.Shows(f).Episodes.Count
                        showprocesscount += 1
                        progcount += 1
                    Else
                        showprocesscount += 1
                        progcount += 1
                    End If
                End If
            Next
            Dim showsdone As Integer = 0
            Dim showcounter As Integer = 0
            For f = Cache.TvCache.Shows.Count - 1 To 0 Step -1
                showcounter += 1
                If tvBatchList.RewriteAllNFOs Then
                    If Cache.TvCache.Shows(f).State = 0 Or tvBatchList.includeLocked = True Then
                        Call nfoFunction.tv_NfoSave(Cache.TvCache.Shows(f).NfoFilePath, nfoFunction.tv_NfoLoadFull(Cache.TvCache.Shows(f).NfoFilePath), True)
                    End If
                    Continue For
                    tvBatchList.RewriteAllNFOs = False
                End If

                If Cache.TvCache.Shows(f).State = Media_Companion.ShowState.Open Or Cache.TvCache.Shows(f).State = -1 Or tvBatchList.includeLocked = True Then
                    progresstext = "Working on Show: " & showcounter.ToString & " of " & progcount
                    If done > 0 Then
                        progress = (100 / showprocesscount) * done
                    Else
                        progress = 0
                    End If
                    tvbckrescrapewizard.ReportProgress(progress, progresstext)
                    Dim editshow As New TvShow
                    editshow = nfoFunction.tv_NfoLoadFull(Cache.TvCache.Shows(f).NfoFilePath)
                    'Dim tvdbstuff As New TVDB.tvdbscraper 'commented because of removed TVDB.dll
                    Dim tvdbstuff As New TVDBScraper
                    If tvBatchList.doShows = True Then
                        If tvBatchList.doShowBody = True Or tvBatchList.doShowActors = True Then
                            Dim language As String = editshow.Language.Value
                            If language = "" Then language = "en"

                            Dim tvshowxmlstring As String = tvdbstuff.GetShow(editshow.TvdbId.Value, language)
                            Try
                                Dim actorlist As New List(Of str_MovieActors)
                                actorlist.Clear()
                                Dim showlist As New XmlDocument
                                showlist.LoadXml(tvshowxmlstring)
                                Dim thisresult As XmlNode = Nothing
                                Dim maxcount As Integer = 0
                                For Each thisresult In showlist("fulltvshow")
                                    Select Case thisresult.Name
                                        Case "title"
                                            'thisresult.InnerText
                                        Case "mpaa"
                                            If tvBatchList.shMpaa = True Then
                                                editshow.Mpaa.Value = thisresult.InnerText
                                            End If
                                        Case "premiered"
                                            If tvBatchList.shYear = True Then
                                                editshow.Premiered.Value = thisresult.InnerText
                                            End If
                                        Case "genre"
                                            Dim newstring As String
                                            newstring = thisresult.InnerText
                                            newstring = newstring.TrimEnd("|")
                                            newstring = newstring.TrimStart("|")
                                            newstring = newstring.Replace("|", " / ")
                                            If tvBatchList.shGenre = True Then
                                                editshow.Genre.Value = newstring
                                            End If
                                        Case "imdbid"

                                        Case "studio"
                                            If tvBatchList.shStudio = True Then
                                                editshow.Studio.Value = thisresult.InnerText
                                            End If
                                        Case "plot"
                                            If tvBatchList.shPlot = True Then
                                                editshow.Plot.Value = thisresult.InnerText
                                            End If
                                        Case "rating"
                                            If tvBatchList.shRating = True Then
                                                editshow.Rating.Value = thisresult.InnerText
                                            End If
                                        Case "runtime"
                                            If tvBatchList.shRuntime = True Then
                                                editshow.Runtime.Value = thisresult.InnerText
                                            End If
                                        Case "episodeguideurl"
                                            editshow.EpisodeGuideUrl.Value = ""
                                            editshow.Url.Value = thisresult.InnerText
                                            editshow.Url.Node.SetAttributeValue("cache", editshow.TvdbId.Value)
                                            editshow.Url.AttachToParentNode(editshow.EpisodeGuideUrl.Node)
                                        Case "actor"
                                            If editshow.TvShowActorSource.Value = "tvdb" And tvBatchList.doShowActors = True Then
                                                If maxcount >= Preferences.maxactors Then
                                                    Exit For
                                                End If
                                                maxcount += 1
                                                Dim acts As New str_MovieActors(SetDefaults)
                                                Dim results As XmlNode = Nothing
                                                Dim lan As New str_PossibleShowList(SetDefaults)

                                                For Each results In thisresult.ChildNodes
                                                    Select Case results.Name
                                                        Case "name"
                                                            acts.actorname = results.InnerText
                                                        Case "role"
                                                            Dim newstring As String
                                                            newstring = results.InnerText
                                                            newstring = newstring.TrimEnd("|")
                                                            newstring = newstring.TrimStart("|")
                                                            newstring = newstring.Replace("|", ", ")
                                                            acts.actorrole = newstring
                                                        Case "thumb"
                                                            acts.actorthumb = results.InnerText
                                                        Case "actorid"
                                                            acts.actorid = results.InnerText
                                                    End Select
                                                Next
                                                '.Add(acts)actorlist
                                                If acts.actorthumb <> Nothing Then
                                                    If acts.actorthumb <> "" And Preferences.actorseasy = True Then
                                                        If editshow.TvShowActorSource.Value <> "imdb" Or editshow.ImdbId = Nothing Then
                                                            Try
                                                                Dim workingpath As String = Cache.TvCache.Shows(f).NfoFilePath.Replace(IO.Path.GetFileName(Cache.TvCache.Shows(f).NfoFilePath), "")
                                                                workingpath = workingpath & ".actors\"
                                                                Dim hg As New IO.DirectoryInfo(workingpath)
                                                                Dim destsorted As Boolean = False
                                                                If Not hg.Exists Then
                                                                    Try
                                                                        IO.Directory.CreateDirectory(workingpath)
                                                                        destsorted = True
                                                                    Catch ex As Exception
#If SilentErrorScream Then
                                                                        Throw ex
#End If
                                                                    End Try
                                                                Else
                                                                    destsorted = True
                                                                End If
                                                                If destsorted = True Then
                                                                    Dim filename As String = acts.actorname.Replace(" ", "_")
                                                                    filename = filename & ".tbn"
                                                                        filename = IO.Path.Combine(workingpath, filename)
                                                                    Utilities.DownloadFile(acts.actorthumb, filename)
                                                                    If Preferences.EdenEnabled And Preferences.FrodoEnabled Then
                                                                        Utilities.SafeCopyFile(filename, filename.Replace(".tbn", ".jpg"), Preferences.overwritethumbs)
                                                                    ElseIf Preferences.FrodoEnabled And Not Preferences.EdenEnabled Then
                                                                        Utilities.SafeCopyFile(filename, filename.Replace(".tbn", ".jpg"), Preferences.overwritethumbs)
                                                                        Utilities.SafeDeleteFile(filename)
                                                                    End If
                                                                End If
                                                            Catch ex As Exception
#If SilentErrorScream Then
                                                                Throw ex
#End If
                                                            End Try
                                                        End If
                                                    End If
                                                End If
                                                actorlist.Add(acts)
                                            End If
                                    End Select
                                Next
                                If tvBatchList.doShowActors = True And editshow.TvShowActorSource.Value = "imdb" Then
                                    '                    Dim imdbscraper As New imdb.Classimdbscraper
                                    Dim imdbscraper As New Classimdb
                                    Dim actorlist2 As String
                                    Dim actorstring As New XmlDocument
                                    actorlist2 = imdbscraper.getimdbactors(Preferences.imdbmirror, Cache.TvCache.Shows(f).ImdbId.Value)
                                    Try
                                        actorstring.LoadXml(actorlist2)
                                        thisresult = Nothing
                                        Dim actorcount As Integer = 0
                                        For Each thisresult In actorstring("actorlist")
                                            Select Case thisresult.Name
                                                Case "actor"
                                                    If actorcount > Preferences.maxactors Then
                                                        Exit For
                                                    End If
                                                    actorcount += 1
                                                    Dim newactor As New str_MovieActors(SetDefaults)
                                                    Dim detail As XmlNode = Nothing
                                                    For Each detail In thisresult.ChildNodes
                                                        Select Case detail.Name
                                                            Case "name"
                                                                newactor.actorname = detail.InnerText
                                                            Case "role"
                                                                newactor.actorrole = detail.InnerText
                                                            Case "thumb"
                                                                newactor.actorthumb = GetActorThumb(detail.InnerText)
                                                            Case "actorid"
                                                                If newactor.actorthumb <> Nothing Then
                                                                    If detail.InnerText <> "" And Preferences.actorseasy = True Then
                                                                        Dim workingpath As String = Cache.TvCache.Shows(f).NfoFilePath.Replace(IO.Path.GetFileName(Cache.TvCache.Shows(f).NfoFilePath), "")
                                                                        workingpath = workingpath & ".actors\"
                                                                        Dim hg As New IO.DirectoryInfo(workingpath)
                                                                        Dim destsorted As Boolean = False
                                                                        If Not hg.Exists Then
                                                                            Try
                                                                                IO.Directory.CreateDirectory(workingpath)
                                                                                destsorted = True
                                                                            Catch ex As Exception
#If SilentErrorScream Then
                                                                                Throw ex
#End If
                                                                            End Try
                                                                        Else
                                                                            destsorted = True
                                                                        End If
                                                                        If destsorted = True Then
                                                                            Dim filename As String = newactor.actorname.Replace(" ", "_")
                                                                            filename = filename & ".tbn"
                                                                            filename = IO.Path.Combine(workingpath, filename)
                                                                            Utilities.DownloadFile(newactor.actorthumb, filename)
                                                                            If Preferences.EdenEnabled And Preferences.FrodoEnabled Then
                                                                                Utilities.SafeCopyFile(filename, filename.Replace(".tbn", ".jpg"), Preferences.overwritethumbs)
                                                                            ElseIf Preferences.FrodoEnabled And Not Preferences.EdenEnabled Then
                                                                                Utilities.SafeCopyFile(filename, filename.Replace(".tbn", ".jpg"), Preferences.overwritethumbs)
                                                                                Utilities.SafeDeleteFile(filename)
                                                                            End If
                                                                        End If
                                                                    End If
                                                                    If Preferences.actorsave = True And detail.InnerText <> "" And Preferences.actorseasy = False Then
                                                                        Dim workingpath As String = ""
                                                                        Dim networkpath As String = Preferences.actorsavepath
                                                                        Try
                                                                            Dim tempstring As String = ""
                                                                            tempstring = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2)
                                                                            Dim hg As New IO.DirectoryInfo(tempstring)
                                                                            If Not hg.Exists Then
                                                                                IO.Directory.CreateDirectory(tempstring)
                                                                            End If
                                                                            workingpath = networkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                                            If Not IO.File.Exists(workingpath) Then
                                                                                Utilities.DownloadFile(newactor.actorthumb, workingpath)
                                                                            End If
                                                                            newactor.actorthumb = IO.Path.Combine(Preferences.actornetworkpath, detail.InnerText.Substring(detail.InnerText.Length - 2, 2))
                                                                            If Preferences.actornetworkpath.IndexOf("/") <> -1 Then
                                                                                newactor.actorthumb = Preferences.actornetworkpath & "/" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "/" & detail.InnerText & ".jpg"
                                                                            Else
                                                                                newactor.actorthumb = Preferences.actornetworkpath & "\" & detail.InnerText.Substring(detail.InnerText.Length - 2, 2) & "\" & detail.InnerText & ".jpg"
                                                                            End If
                                                                        Catch ex As Exception
#If SilentErrorScream Then
                                                                            Throw ex
#End If
                                                                        End Try
                                                                    End If
                                                                End If
                                                        End Select
                                                    Next
                                                    actorlist.Add(newactor)
                                            End Select
                                        Next
                                    Catch ex As Exception
#If SilentErrorScream Then
                                        Throw ex
#End If
                                    End Try
                                End If
                                If tvBatchList.doShowActors = True Then
                                    If actorlist.Count > 0 Then
                                        editshow.clearActors()
                                        For Each act In actorlist
                                            editshow.ListActors.Add(act)
                                        Next
                                    End If
                                End If
                            Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
                            End Try
                            Call nfoFunction.tv_NfoSave(Cache.TvCache.Shows(f).NfoFilePath, editshow, True)

                            'editshow.IsCache = True          'this doesn't stick so I had to remove the test in show.load

                        End If



                        'Posters, Fanart and Season art
                        Dim artlist As New List(Of TvBanners)
                        Dim showlist2 As New XmlDocument
                        Dim artdone As Boolean = False
                        If tvBatchList.doShowArt = True Then
                            TvGetArtwork(Cache.TvCache.Shows(f), tvBatchList.shFanart, tvBatchList.shPosters, tvBatchList.shSeason)
                        End If
                    End If
                    If tvBatchList.doEpisodes = True Then

                        'progresstext = "Working on Episodes: " & basictvlist(f).title
                        'tvbckrescrapewizard.ReportProgress(999999, progresstext)

                        For g = Cache.TvCache.Shows(f).Episodes.Count - 1 To 0 Step -1
                            progresstext = "Working on Show: " & Cache.TvCache.Shows(f).Title.Value & " Episode: " & Cache.TvCache.Shows(f).Episodes.Count - g & " of " & Cache.TvCache.Shows(f).Episodes.Count & ", Episode: " & Cache.TvCache.Shows(f).Episodes(g).Season.Value & "x" & Cache.TvCache.Shows(f).Episodes(g).Episode.Value & " - " & Cache.TvCache.Shows(f).Episodes(g).Title.Value
                            'progresstext = "Working on " & basictvlist(f).title & ", Episode: " & basictvlist(f).allepisodes(g).Season.value & "x" & basictvlist(f).allepisodes(g).episodeno
                            If done > 0 Then
                                progress = (100 / showprocesscount) * done
                            Else
                                progress = 0
                            End If
                            tvbckrescrapewizard.ReportProgress(progress, progresstext)
                            If tvBatchList.doEpisodeBody = True Or (tvBatchList.doEpisodeActors = True And Cache.TvCache.Shows(f).EpisodeActorSource.Value <> "") Or (tvBatchList.doEpisodeArt = True) Then
                                Dim listofnewepisodes As New List(Of TvEpisode)
                                listofnewepisodes.Clear()
                                listofnewepisodes = nfoFunction.ep_NfoLoadGeneric(Cache.TvCache.Shows(f).Episodes(g).NfoFilePath)
                                For h = listofnewepisodes.Count - 1 To 0 Step -1
                                    If listofnewepisodes(h).Season.Value = Cache.TvCache.Shows(f).Episodes(g).Season.Value And listofnewepisodes(h).Episode.Value = Cache.TvCache.Shows(f).Episodes(g).Episode.Value Then
                                        Dim newactors As New List(Of str_MovieActors)
                                        newactors.Clear()
                                        Dim sortorder As String = Cache.TvCache.Shows(f).SortOrder.Value
                                        Dim language As String = Cache.TvCache.Shows(f).Language.Value
                                        Dim actorsource As String = Cache.TvCache.Shows(f).EpisodeActorSource.Value
                                        Dim tvdbid As String = Cache.TvCache.Shows(f).TvdbId.Value
                                        Dim imdbid As String = Cache.TvCache.Shows(f).ImdbId.Value
                                        Dim seasonno As String = Cache.TvCache.Shows(f).Episodes(g).Season.Value
                                        Dim episodeno As String = Cache.TvCache.Shows(f).Episodes(g).Episode.Value
                                        'its an episode
                                        Dim episodescreenurl As String = ""
                                        'Dim episodescraper As New TVDB.tvdbscraper 'commented because of removed TVDB.dll
                                        Dim episodescraper As New TVDBScraper
                                        If sortorder = "" Then sortorder = "default"
                                        If language = "" Then language = "en"
                                        If actorsource = "" Then actorsource = "tvdb"
                                        Dim tempepisode As String = episodescraper.getepisode(tvdbid, sortorder, seasonno, episodeno, language)

                                        If tempepisode.Contains("ERROR") Then
                                            Dim chunkSize As Integer = 40
                                            Dim chunkSize2 As Integer = 1
                                            Dim loops As Integer = Math.Round(tempepisode.Length / chunkSize)
                                            Dim finalString As String = ""
                                            For i = 0 To loops
                                                If i * chunkSize + chunkSize > tempepisode.Length Then
                                                    chunkSize2 = tempepisode.Length - i * chunkSize
                                                Else
                                                    chunkSize2 = chunkSize
                                                End If
                                                finalString += tempepisode.Substring(i * chunkSize, chunkSize2) & vbCrLf
                                            Next
                                            'MsgBox("tvdb was unable to process the following show episode." & vbCrLf & Cache.TvCache.Shows(f).Title.Value & " - S" & Utilities.PadNumber(Cache.TvCache.Shows(f).Episodes(g).Season.Value, 2) & "E" & Utilities.PadNumber(Cache.TvCache.Shows(f).Episodes(g).Episode.Value, 2) & " " & Cache.TvCache.Shows(f).Episodes(g).Title.Value, MsgBoxStyle.OkOnly, "tvdb ERROR!")
                                            progresstext="tvdb was unable to process the following show episode." & vbCrLf & Cache.TvCache.Shows(f).Title.Value & " - S" & Utilities.PadNumber(Cache.TvCache.Shows(f).Episodes(g).Season.Value, 2) & "E" & Utilities.PadNumber(Cache.TvCache.Shows(f).Episodes(g).Episode.Value, 2) & " " & Cache.TvCache.Shows(f).Episodes(g).Title.Value
                                            tvbckrescrapewizard.ReportProgress(progress, progresstext)
                                            'MsgBox("TVDB reported the following error" & vbCrLf & finalString, MsgBoxStyle.OkOnly, "ERROR!")

                                            Continue For
                                        End If

                                        Dim scrapedepisode As New XmlDocument
                                        Try
                                            scrapedepisode.LoadXml(tempepisode)
                                            Dim thisresult As XmlNode = Nothing
                                            For Each thisresult In scrapedepisode("episodedetails")
                                                Select Case thisresult.Name
                                                    Case "title"
                                                        'listofnewepisodes(h).title = thisresult.InnerText
                                                    Case "premiered"
                                                        If tvBatchList.epAired = True Then
                                                            listofnewepisodes(h).Aired.Value = thisresult.InnerText
                                                        End If
                                                    Case "plot"
                                                        If tvBatchList.epPlot = True Then
                                                            listofnewepisodes(h).Plot.Value = thisresult.InnerText
                                                        End If
                                                    Case "director"
                                                        If tvBatchList.epDirector = True Then
                                                            Dim tempstring As String = ""
                                                            tempstring = thisresult.InnerText
                                                            tempstring = tempstring.TrimStart("|")
                                                            tempstring = tempstring.TrimEnd("|")
                                                            tempstring = tempstring.Replace("|", " / ")
                                                            listofnewepisodes(h).Director.Value = tempstring
                                                        End If
                                                    Case "credits"
                                                        Dim tempstring As String = ""
                                                        If tvBatchList.epCredits = True Then
                                                            tempstring = thisresult.InnerText
                                                            tempstring = tempstring.TrimStart("|")
                                                            tempstring = tempstring.TrimEnd("|")
                                                            tempstring = tempstring.Replace("|", " / ")
                                                            listofnewepisodes(h).Credits.Value = tempstring
                                                        End If
                                                    Case "rating"
                                                        If tvBatchList.epRating = True Then
                                                            listofnewepisodes(h).Rating.Value = thisresult.InnerText
                                                        End If
                                                        Cache.TvCache.Shows(f).Episodes(g).Rating.Value = thisresult.InnerText
                                                    Case "thumb"
                                                        episodescreenurl = thisresult.InnerText
                                                        Dim downloadok As Boolean = True
                                                        If tvBatchList.doEpisodeArt = True And tvBatchList.epScreenshot = True Then
                                                            If episodescreenurl <> "" And episodescreenurl.ToLower <> "http://www.thetvdb.com/banners/" Then
                                                                Dim screenshotpath As String = ""
                                                                If Preferences.EdenEnabled Then
                                                                    screenshotpath = listofnewepisodes(h).VideoFilePath.Replace(IO.Path.GetExtension(listofnewepisodes(h).VideoFilePath), ".tbn")
                                                                    If Not IO.File.Exists(screenshotpath) Then  'If exist, save time and skip
                                                                        Movie.SaveFanartImageToCacheAndPath(episodescreenurl, screenshotpath)
                                                                    End If
                                                                End If
                                                                If Preferences.FrodoEnabled Then
                                                                    screenshotpath = listofnewepisodes(h).VideoFilePath.Replace(IO.Path.GetExtension(listofnewepisodes(h).VideoFilePath), "-thumb.jpg")
                                                                    If Not IO.File.Exists(screenshotpath) Then    'If exist, save time and skip
                                                                        Movie.SaveFanartImageToCacheAndPath(episodescreenurl, screenshotpath)
                                                                    End If
                                                                End If
                                                            Else
                                                                If tvBatchList.epScreenshot = True Then
                                                                    Dim proc_arguments As String = ""
                                                                    Dim thumbpathandfilename As String = listofnewepisodes(h).VideoFilePath.Replace(IO.Path.GetExtension(listofnewepisodes(h).VideoFilePath), ".tbn")
                                                                    Dim tempstring2 As String = listofnewepisodes(h).VideoFilePath
                                                                    Dim myProcess As Process = New Process
                                                                    myProcess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden
                                                                    myProcess.StartInfo.CreateNoWindow = False
                                                                    myProcess.StartInfo.FileName = applicationPath & "\Assets\ffmpeg.exe"
                                                                    If Preferences.EdenEnabled = True Then
                                                                        Dim seconds As Integer = Preferences.ScrShtDelay 
                                                                        proc_arguments = "-y -i """ & tempstring2 & """ -f mjpeg -ss " & seconds.ToString & " -vframes 1 -an " & """" & thumbpathandfilename & """"
                                                                        myProcess.StartInfo.Arguments = proc_arguments
                                                                        myProcess.Start()
                                                                        myProcess.WaitForExit()
                                                                    End If
                                                                    If Preferences.FrodoEnabled = True Then
                                                                        thumbpathandfilename = thumbpathandfilename.Replace(".tbn", "-thumb.jpg")
                                                                        Dim seconds As Integer = Preferences.ScrShtDelay
                                                                        proc_arguments = "-y -i """ & tempstring2 & """ -f mjpeg -ss " & seconds.ToString & " -vframes 1 -an " & """" & thumbpathandfilename & """"
                                                                        myProcess.StartInfo.Arguments = proc_arguments
                                                                        myProcess.Start()
                                                                        myProcess.WaitForExit()
                                                                    End If
                                                                End If
                                                                'If Not IO.File.Exists(screenshotpath) Then
                                                                'End If
                                                                '   Utilities.DownloadImage(episodescreenurl, screenshotpath)
                                                                'Movie.SaveFanartImageToCacheAndPath(episodescreenurl, screenshotpath)
                                                                'If Preferences.EdenEnabled and Preferences.FrodoEnabled Then
                                                                '    IO.File.Copy(screenshotpath, screenshotpath.Replace(".tbn", "-thumb.jpg"))
                                                                'End If
                                                            End If
                                                        Else
                                                            Dim thumbpathandfilename As String = listofnewepisodes(h).VideoFilePath.Replace(IO.Path.GetExtension(listofnewepisodes(h).VideoFilePath), ".tbn")
                                                            Dim pathandfilename As String = listofnewepisodes(h).VideoFilePath.Replace(IO.Path.GetExtension(listofnewepisodes(h).VideoFilePath), "")
                                                            If Not IO.File.Exists(thumbpathandfilename) And tvBatchList.epCreateScreenshot = True Then
                                                                progresstext = listofnewepisodes(h).VideoFilePath
                                                                tvbckrescrapewizard.ReportProgress(888888, progresstext)
                                                            End If
                                                        End If
                                                        If downloadok = False Then
                                                            Dim thumbpathandfilename As String = listofnewepisodes(h).VideoFilePath.Replace(IO.Path.GetExtension(listofnewepisodes(h).VideoFilePath), ".tbn")
                                                            Dim pathandfilename As String = listofnewepisodes(h).VideoFilePath.Replace(IO.Path.GetExtension(listofnewepisodes(h).VideoFilePath), "")
                                                            If Not IO.File.Exists(thumbpathandfilename) And tvBatchList.epCreateScreenshot = True Then
                                                                progresstext = listofnewepisodes(h).VideoFilePath
                                                                tvbckrescrapewizard.ReportProgress(888888, progresstext)
                                                            End If
                                                        End If
                                                    Case "actor"
                                                        If tvBatchList.epActor = True And Preferences.episodeacrorsource = "tvdb" Then
                                                            Dim actors As XmlNode = Nothing
                                                            For Each actorl In thisresult.ChildNodes
                                                                Select Case actorl.name
                                                                    Case "name"
                                                                        Dim newactor As New str_MovieActors(SetDefaults)
                                                                        newactor.actorname = actorl.innertext
                                                                        newactors.Add(newactor)
                                                                End Select
                                                            Next
                                                        End If
                                                End Select
                                            Next
                                            'newepisode.playcount = "0"
                                            If Preferences.episodeacrorsource = "tvdb" And tvBatchList.epActor = True And newactors.Count > 0 Then
                                                listofnewepisodes(h).ListActors.Clear()
                                                For Each act In newactors
                                                    listofnewepisodes(h).ListActors.Add(act)
                                                Next
                                            End If
                                            If Cache.TvCache.Shows(f).EpisodeActorSource.Value = "imdb" And tvBatchList.epActor = True Then
                                                Dim ac As New actors
                                                Dim actorlist As New List(Of str_MovieActors)
                                                actorlist = ac.EpisodeGetImdbActors(Cache.TvCache.Shows(f).ImdbId.Value, listofnewepisodes(h).Season.Value, listofnewepisodes(h).Episode.Value)
                                                If Preferences.actorseasy = True Then
                                                    ac.savelocalactors(listofnewepisodes(h).VideoFilePath, actorlist, Cache.TvCache.Shows(f).NfoFilePath, True)
                                                End If
                                            End If
                                        Catch ex As Exception
#If SilentErrorScream Then
                                            Throw ex
#End If
                                            'MsgBox("hekp")
                                        End Try
                                        nfoFunction.saveepisodenfo(listofnewepisodes, listofnewepisodes(0).NfoFilePath)
                                        'For Each Episode In listofnewepisodes
                                        '    Episode.Save()
                                        'Next
                                        'Call nfoFunction.saveepisodenfo(listofnewepisodes, listofnewepisodes(0).VideoFilePath, listofnewepisodes(h).Season.value, listofnewepisodes(h).episodeno, True )
                                        Exit For
                                    End If




                                Next


                            End If


                            If tvBatchList.doEpisodeMediaTags = True Then
                                Dim listofnewepisodes As New List(Of TvEpisode)
                                listofnewepisodes.Clear()
                                listofnewepisodes = nfoFunction.ep_NfoLoadGeneric(Cache.TvCache.Shows(f).Episodes(g).NfoFilePath)
                                For h = listofnewepisodes.Count - 1 To 0 Step -1
                                    'listofnewepisodes(h).Details = Preferences.Get_HdTags(Utilities.GetFileName(listofnewepisodes(h).VideoFilePath))
                                    listofnewepisodes(h).GetFileDetails()
                                    If listofnewepisodes(h).Details.StreamDetails.Video.DurationInSeconds.Value <> Nothing Then
                                        Try
                                            '1h 24mn 48s 546ms
                                            'Dim tempint As Integer = 0
                                            'Dim hours As Integer = 0
                                            'Dim minutes As Integer = 0
                                            Dim tempstring As String
                                            tempstring = listofnewepisodes(h).Details.StreamDetails.Video.DurationInSeconds.Value
                                            'tempint = tempstring.IndexOf("h")
                                            'If tempint <> -1 Then
                                            '    hours = Convert.ToInt32(tempstring.Substring(0, tempint))
                                            '    tempstring = tempstring.Substring(tempint + 1, tempstring.Length - (tempint + 1))
                                            '    tempstring = Trim(tempstring)
                                            'End If
                                            'tempint = tempstring.IndexOf("mn")
                                            'If tempint <> -1 Then
                                            '    minutes = Convert.ToInt32(tempstring.Substring(0, tempint))
                                            'End If
                                            'If hours <> 0 Then
                                            '    hours = hours * 60
                                            'End If
                                            'minutes = minutes + hours
                                            If Preferences.intruntime Then
                                                listofnewepisodes(h).Runtime.Value = Math.Round(tempstring/60).ToString
                                            Else
                                                listofnewepisodes(h).Runtime.Value = Math.Round(tempstring/60).ToString & " min"
                                            End If
                                            
                                        Catch ex As Exception
#If SilentErrorScream Then
                                            Throw ex
#End If
                                        End Try
                                        nfoFunction.saveepisodenfo(listofnewepisodes, listofnewepisodes(0).NfoFilePath)
                                        'For Each Episode In listofnewepisodes
                                        '    Episode.Save()
                                        'Next
                                    End If
                                Next
                            End If
                            done += 1
                        Next
                    End If
                    done += 1
                End If
            Next

        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub tvbckrescrapewizard_ProgressChanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles tvbckrescrapewizard.ProgressChanged
        Try
            If e.ProgressPercentage = 999999 Then
                ToolStripStatusLabel8.Text = e.UserState
            ElseIf e.ProgressPercentage = 888888 Then
                'Dim getthumb As New createscreenshot
                Dim result As String = Utilities.CreateScreenShot(e.UserState, Preferences.ScrShtDelay)
            Else
                ToolStripStatusLabel8.Text = e.UserState
                ToolStripProgressBar7.Value = e.ProgressPercentage
                ToolStripProgressBar7.ProgressBar.Refresh()
                ToolStripProgressBar7.ProgressBar.PerformStep()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub tvbckrescrapewizard_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles tvbckrescrapewizard.RunWorkerCompleted
        Try
            ToolStripStatusLabel8.Visible = False
            ToolStripProgressBar7.Visible = False
            TvTreeview_AfterSelect_Do()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_tv_EpisodeRenameCase_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_tv_EpisodeRenameCase.CheckedChanged
        Try
            If CheckBox_tv_EpisodeRenameCase.CheckState = CheckState.Checked Then
                Preferences.eprenamelowercase = True
            Else
                Preferences.eprenamelowercase = False
            End If
            Renamer.applySeasonEpisodeCase()
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Function util_FileSizeGet(ByVal MyFilePath As String) As Long
        Dim MyFile As New IO.FileInfo(MyFilePath)
        Dim FileSize As Long = MyFile.Length
        Return FileSize
    End Function

    Private Sub ExportmoviesMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mov_ToolStripExportMovies.Click
        Try
            listoffilestomove.Clear()

            If DataGridViewMovies.SelectedRows.Count > 0 Then

                'For Each movie In MovieListComboBox.SelectedItems
                For Each sRow As DataGridViewRow In DataGridViewMovies.SelectedRows
                    'Dim tempstring As String = CType(MovieListComboBox.SelectedItem, ValueDescriptionPair).Value
                    Dim playlist As New List(Of String)
                    'tempstring = Utilities.GetFileName(tempstring)

                    Dim tempstring As String = Utilities.GetFileName(DataGridViewMovies.SelectedCells(NFO_INDEX).Value.ToString)

                    playlist = Utilities.GetMediaList(tempstring)
                    If playlist.Count > 0 Then
                        For Each File In playlist
                            If Not listoffilestomove.Contains(File) Then
                                listoffilestomove.Add(File)
                            End If
                        Next

                        Dim fullpathandfilename As String = sRow.Cells("fullpathandfilename").Value.ToString

                        listoffilestomove.Add(fullpathandfilename)
                        If IO.File.Exists(Preferences.GetFanartPath(fullpathandfilename)) Then
                            listoffilestomove.Add(Preferences.GetFanartPath(fullpathandfilename))
                        End If
                        If IO.File.Exists(Preferences.GetPosterPath(fullpathandfilename)) Then
                            listoffilestomove.Add(Preferences.GetPosterPath(fullpathandfilename))
                        End If
                        Dim di As DirectoryInfo = New DirectoryInfo(fullpathandfilename.Replace(IO.Path.GetFileName(fullpathandfilename), ""))
                        Dim filenama As String = IO.Path.GetFileNameWithoutExtension(fullpathandfilename)
                        Dim fils As IO.FileInfo() = di.GetFiles(filenama & ".*")
                        For Each fiNext In fils
                            If Not listoffilestomove.Contains(fiNext.FullName) Then
                                listoffilestomove.Add(fiNext.FullName)
                            End If
                        Next
                        Dim trailerpath As String = fullpathandfilename.Replace(IO.Path.GetExtension(fullpathandfilename), "-trailer.flv")
                        Dim filenama2 As String = IO.Path.GetFileNameWithoutExtension(trailerpath)
                        Dim fils2 As IO.FileInfo() = di.GetFiles(filenama2 & ".*")
                        For Each fiNext In fils2
                            If Not listoffilestomove.Contains(fiNext.FullName) Then
                                listoffilestomove.Add(fiNext.FullName)
                            End If
                        Next
                    End If
                Next

                totalfilesize = 0
                For Each item In listoffilestomove
                    totalfilesize = totalfilesize + util_FileSizeGet(item)
                Next


                With FolderBrowserDialog1
                    .ShowNewFolderButton = True
                    .Description = "Select destination for file copy"
                End With
                Dim drive As String = ""
                Dim savepath As String = ""
                'If FolderBrowserDialog1.ShowDialog = Windows.Forms.DialogResult.OK Then
                '    savepath = FolderBrowserDialog1.SelectedPath
                '    drive = IO.Path.GetPathRoot(savepath)
                '    Me.Visible = True
                '    Me.Show()
                '    Me.Refresh()

                '    Dim listoffilestomove2 As New List(Of String)
                '    listoffilestomove2.Clear()
                '    For Each fil In listoffilestomove
                '        listoffilestomove2.Add(fil)
                '    Next

                '    Dim drivespace As Long
                '    drivespace = GetFreeSpace(drive)
                '    Application.DoEvents()
                '    Me.Refresh()
                '    Dim percentages As New List(Of Integer)

                '    If drivespace > totalfilesize Then
                '        'My.Computer.FileSystem.CopyFile("C:\UserFiles\TestFiles\testFile.txt", "C:\UserFiles\TestFiles2\NewFile.txt", FileIO.UIOption.AllDialogs, FileIO.UICancelOption.DoNothing)

                frmCopyProgress.ShowDialog()
                '    End If
                'End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub frm_ExportTabSetup()
        If TextBox45.Text = "" Then

            Dim tempstring2 As String = workingProfile.config.Replace(IO.Path.GetFileName(workingProfile.config), "pathsubstitution.xml")
            If IO.File.Exists(tempstring2) Then
                relativeFolderList.Clear()
                Dim prefs As New XmlDocument
                Try
                    prefs.Load(tempstring2)
                Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                End Try
                Dim thisresult As XmlNode = Nothing


                For Each thisresult In prefs("relativepaths")

                    Select Case thisresult.Name
                        Case "folder"
                            Dim mc As New str_RelativeFileList(SetDefaults)
                            Dim it2 As XmlNode
                            For Each it2 In thisresult.ChildNodes
                                Select Case it2.Name
                                    Case "mc"
                                        mc.mc = it2.InnerText
                                    Case "xbmc"
                                        mc.xbmc = it2.InnerText
                                        relativeFolderList.Add(mc)
                                End Select
                            Next

                    End Select
                Next
                For Each item In relativeFolderList
                    TextBox45.Text += "<folder>" & vbCrLf
                    TextBox45.Text += "    <mc>" & item.mc & "</mc>" & vbCrLf
                    TextBox45.Text += "    <xbmc>" & item.xbmc & "</xbmc>" & vbCrLf
                    TextBox45.Text += "</folder>" & vbCrLf & vbCrLf
                Next
            End If
            If TextBox45.Text = "" Then
                For Each pat In movieFolders
                    TextBox45.Text += "<folder>" & vbCrLf
                    TextBox45.Text += "    <mc>" & pat & "</mc>" & vbCrLf
                    TextBox45.Text += "    <xbmc>" & pat & "</xbmc>" & vbCrLf
                    TextBox45.Text += "</folder>" & vbCrLf & vbCrLf
                Next
                For Each pat In Preferences.offlinefolders
                    TextBox45.Text += "<folder>" & vbCrLf
                    TextBox45.Text += "    <mc>" & pat & "</mc>" & vbCrLf
                    TextBox45.Text += "    <xbmc>" & pat & "</xbmc>" & vbCrLf
                    TextBox45.Text += "</folder>" & vbCrLf & vbCrLf
                Next
                For Each pat In tvRootFolders
                    TextBox45.Text += "<folder>" & vbCrLf
                    TextBox45.Text += "    <mc>" & pat & "</mc>" & vbCrLf
                    TextBox45.Text += "    <xbmc>" & pat & "</xbmc>" & vbCrLf
                    TextBox45.Text += "</folder>" & vbCrLf & vbCrLf
                Next
            End If
        End If
    End Sub

    Private Sub Button109_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button109.Click
        Try
            relativeFolderList.Clear()
            Dim tempstring2 As String = workingProfile.config.Replace(IO.Path.GetFileName(workingProfile.config), "pathsubstitution.xml")



            Dim temptext As String = ""
            temptext = "<relativepaths>" & TextBox45.Text & "</relativepaths>"
            Dim doc As New XmlDocument
            doc.LoadXml(temptext)
            Dim thisresult As XmlElement
            For Each thisresult In doc("relativepaths")
                Dim newfo As New str_RelativeFileList(SetDefaults)
                For Each innerresult In thisresult
                    Select Case innerresult.Name
                        Case "mc"
                            newfo.mc = innerresult.InnerText
                        Case "xbmc"
                            newfo.xbmc = innerresult.InnerText
                    End Select
                Next
                If newfo.mc <> Nothing Then
                    If newfo.mc <> "" Then
                        If newfo.xbmc <> Nothing Then
                            If newfo.xbmc <> "" Then
                                relativeFolderList.Add(newfo)
                            End If
                        End If
                    End If
                End If
            Next

            If relativeFolderList.Count > 0 Then
                Dim docs As New XmlDocument

                Dim thispref As XmlNode = Nothing
                Dim xmlproc As XmlDeclaration

                xmlproc = docs.CreateXmlDeclaration("1.0", "UTF-8", "yes")
                docs.AppendChild(xmlproc)
                Dim root As XmlElement
                Dim child As XmlElement
                Dim childchild As XmlElement
                root = doc.CreateElement("relativepaths")


                For Each item In relativeFolderList
                    child = doc.CreateElement("folder")
                    childchild = doc.CreateElement("mc")
                    childchild.InnerText = item.mc
                    child.AppendChild(childchild)
                    childchild = doc.CreateElement("xbmc")
                    childchild.InnerText = item.xbmc
                    child.AppendChild(childchild)
                    root.AppendChild(child)
                Next


                Dim output As New XmlTextWriter(tempstring2, System.Text.Encoding.UTF8)
                output.Formatting = Formatting.Indented
                doc.WriteTo(output)
                output.Close()
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox41_CheckedChanged_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox41.CheckedChanged
        Try
            If CheckBox41.CheckState = CheckState.Checked Then
                Preferences.ignorearticle = True
            Else
                Preferences.ignorearticle = False
            End If
            If prefsload = False Then
                generalprefschanged = True
                btnGeneralPrefsSaveChanges.Enabled = True
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_Use_XBMC_TVDB_Scraper_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_Use_XBMC_TVDB_Scraper.CheckedChanged
        Try
            If CheckBox_Use_XBMC_TVDB_Scraper.CheckState = CheckState.Checked Then
                Preferences.tvshow_useXBMC_Scraper = True
                GroupBox2.Enabled = False
                GroupBox3.Enabled = False
                GroupBox5.Enabled = False
                GroupBox22.Visible = False
                GroupBox22.SendToBack()
                GroupBox_TVDB_Scraper_Preferences.Visible = True
                GroupBox_TVDB_Scraper_Preferences.BringToFront()
            Else
                Preferences.tvshow_useXBMC_Scraper = False
                GroupBox2.Enabled = True
                GroupBox3.Enabled = True
                GroupBox5.Enabled = True
                GroupBox22.Visible = True
                GroupBox22.BringToFront()
                GroupBox_TVDB_Scraper_Preferences.Visible = False
                GroupBox_TVDB_Scraper_Preferences.SendToBack()
            End If
            Read_XBMC_TVDB_Scraper_Config()
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox3_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox3.CheckedChanged
        Try
            If CheckBox3.Checked = True Then
                Preferences.downloadtvseasonthumbs = True
            Else
                Preferences.downloadtvseasonthumbs = False
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox4_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox4.CheckedChanged
        Try
            If CheckBox4.Checked = True Then
                Preferences.tvfanart = True
            Else
                Preferences.tvfanart = False
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox5_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox5.CheckedChanged
        Try
            If CheckBox5.Checked = True Then
                Preferences.tvposter = True
            Else
                Preferences.tvposter = False
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton8_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton8.CheckedChanged
        Try
            If RadioButton8.Checked = True Then
                Preferences.postertype = "banner"
            Else
                Preferences.postertype = "poster"
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton9_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton9.CheckedChanged
        Try
            If RadioButton9.Checked = True Then
                Preferences.postertype = "poster"
            Else
                Preferences.postertype = "banner"
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton16_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton16.CheckedChanged
        Try
            If RadioButton16.Checked = True Then
                Preferences.seasonall = "wide"
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub RadioButton17_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton17.CheckedChanged
        Try
            If RadioButton17.Checked = True Then
                Preferences.seasonall = "poster"
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub RadioButton18_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton18.CheckedChanged
        Try
            If RadioButton18.Checked = True Then
                Preferences.seasonall = "none"
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RadioButton_XBMC_Scraper_TVDB_DVDOrder_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButton_XBMC_Scraper_TVDB_DVDOrder.CheckedChanged
        Try
            If RadioButton_XBMC_Scraper_TVDB_DVDOrder.Checked = True Then
                Save_XBMC_TVDB_Scraper_Config("dvdorder", "true")
                Save_XBMC_TVDB_Scraper_Config("absolutenumber", "false")
            Else
                Save_XBMC_TVDB_Scraper_Config("dvdorder", "false")
                Save_XBMC_TVDB_Scraper_Config("absolutenumber", "true")
            End If
            'Read_XBMC_TVDB_Scraper_Config()
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_XBMC_Scraper_TVDB_Fanart_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_XBMC_Scraper_TVDB_Fanart.CheckedChanged
        Try
            If CheckBox_XBMC_Scraper_TVDB_Fanart.Checked = True Then
                Save_XBMC_TVDB_Scraper_Config("fanart", "true")
            Else
                Save_XBMC_TVDB_Scraper_Config("fanart", "false")
            End If
            'Read_XBMC_TVDB_Scraper_Config()
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_XBMC_Scraper_TVDB_Posters_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_XBMC_Scraper_TVDB_Posters.CheckedChanged
        Try
            If CheckBox_XBMC_Scraper_TVDB_Posters.Checked = True Then
                Save_XBMC_TVDB_Scraper_Config("posters", "true")
            Else
                Save_XBMC_TVDB_Scraper_Config("posters", "false")
            End If
            'Read_XBMC_TVDB_Scraper_Config()
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ComboBox_TVDB_Language_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox_TVDB_Language.SelectedIndexChanged
        Try
            Save_XBMC_TVDB_Scraper_Config("language", ComboBox_TVDB_Language.Text)
            'Read_XBMC_TVDB_Scraper_Config()
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_XBMC_Scraper_TMDB_Fanart_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_XBMC_Scraper_TMDB_Fanart.CheckedChanged
        Try
            If CheckBox_XBMC_Scraper_TMDB_Fanart.Checked = True Then
                Save_XBMC_TMDB_Scraper_Config("fanart", "true")
            Else
                Save_XBMC_TMDB_Scraper_Config("fanart", "false")
            End If
            'Read_XBMC_TMDB_Scraper_Config()
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_XBMC_Scraper_TMDB_IMDBRatings_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_XBMC_Scraper_TMDB_IMDBRatings.CheckedChanged
        Try
            If CheckBox_XBMC_Scraper_TMDB_IMDBRatings.Checked = True Then
                Save_XBMC_TMDB_Scraper_Config("imdbrating", "true")
            Else
                Save_XBMC_TMDB_Scraper_Config("imdbrating", "false")
            End If
            'Read_XBMC_TMDB_Scraper_Config()
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ComboBox_TMDB_HD_Trailer_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox_TMDB_HD_Trailer.SelectedIndexChanged
        Try
            Save_XBMC_TMDB_Scraper_Config("trailerq", ComboBox_TMDB_HD_Trailer.Text)
            'Read_XBMC_TMDB_Scraper_Config()
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ComboBox_TMDB_Title_Language_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox_TMDB_Title_Language.SelectedIndexChanged
        Try
            Save_XBMC_TMDB_Scraper_Config("language", ComboBox_TMDB_Title_Language.Text)
            'Read_XBMC_TMDB_Scraper_Config()
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_XBMC_Scraper_IMDB_FullCredits_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_XBMC_Scraper_IMDB_FullCredits.CheckedChanged
        Try
            If CheckBox_XBMC_Scraper_IMDB_FullCredits.Checked = True Then
                Save_XBMC_IMDB_Scraper_Config("fullcredits", "true")
            Else
                Save_XBMC_IMDB_Scraper_Config("fullcredits", "false")
            End If
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_XBMC_Scraper_IMDB_Fanart_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_XBMC_Scraper_IMDB_Fanart.CheckedChanged
        Try
            If CheckBox_XBMC_Scraper_IMDB_Fanart.Checked = True Then
                Save_XBMC_IMDB_Scraper_Config("fanart", "true")
            Else
                Save_XBMC_IMDB_Scraper_Config("fanart", "false")
            End If
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_XBMC_Scraper_IMDB_Posters_MovieDB_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_XBMC_Scraper_IMDB_Posters_MovieDB.CheckedChanged
        Try
            If CheckBox_XBMC_Scraper_IMDB_Posters_MovieDB.Checked = True Then
                Save_XBMC_IMDB_Scraper_Config("tmdbthumbs", "true")
            Else
                Save_XBMC_IMDB_Scraper_Config("tmdbthumbs", "false")
            End If
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_XBMC_Scraper_IMDB_Posters_IMPAwards_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_XBMC_Scraper_IMDB_Posters_IMPAwards.CheckedChanged
        Try
            If CheckBox_XBMC_Scraper_IMDB_Posters_IMPAwards.Checked = True Then
                Save_XBMC_IMDB_Scraper_Config("impawards", "true")
            Else
                Save_XBMC_IMDB_Scraper_Config("impawards", "false")
            End If
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_XBMC_Scraper_IMDB_Posters_MoviePosterDB_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_XBMC_Scraper_IMDB_Posters_MoviePosterDB.CheckedChanged
        Try
            If CheckBox_XBMC_Scraper_IMDB_Posters_MoviePosterDB.Checked = True Then
                Save_XBMC_IMDB_Scraper_Config("movieposterdb", "true")
            Else
                Save_XBMC_IMDB_Scraper_Config("movieposterdb", "false")
            End If
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox_XBMC_Scraper_IMDB_Trailer_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBox_XBMC_Scraper_IMDB_Trailer.CheckedChanged
        Try
            If CheckBox_XBMC_Scraper_IMDB_Trailer.Checked = True Then
                Save_XBMC_IMDB_Scraper_Config("imdbtrailer", "true")
            Else
                Save_XBMC_IMDB_Scraper_Config("imdbtrailer", "false")
            End If
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ComboBox_IMDB_HD_Trailer_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox_IMDB_HD_Trailer.SelectedIndexChanged
        Try
            Save_XBMC_IMDB_Scraper_Config("trailerq", ComboBox_IMDB_HD_Trailer.Text)
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ComboBox_IMDB_Poster_Actor_Size_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox_IMDB_Poster_Actor_Size.SelectedIndexChanged
        Try
            Save_XBMC_IMDB_Scraper_Config("imdbscale", ComboBox_IMDB_Poster_Actor_Size.Text)
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ComboBox_IMDB_Title_Language_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ComboBox_IMDB_Title_Language.SelectedIndexChanged
        Try
            Save_XBMC_IMDB_Scraper_Config("akatitles", ComboBox_IMDB_Title_Language.Text)
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub



    Private Sub Button111_Click(sender As System.Object, e As System.EventArgs) Handles Button111.Click
        Try
            'Reset Font
            'Dim tc As TypeConverter = TypeDescriptor.GetConverter(GetType(System.Drawing.Font))
            'Dim fontString As String = tc.ConvertToString("Times New Roman, 9pt")

            Preferences.font = "Times New Roman, 9pt"

            Dim tcc As TypeConverter = TypeDescriptor.GetConverter(GetType(System.Drawing.Font))
            Dim newFont As System.Drawing.Font = CType(tcc.ConvertFromString(Preferences.font), System.Drawing.Font)

            Label130.Font = newFont
            Label130.Text = "Times New Roman, 9pt"
            If prefsload = False Then
                generalprefschanged = True
                btnGeneralPrefsSaveChanges.Enabled = True
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub SplitContainer1_SplitterMoved(ByVal sender As System.Object, ByVal e As System.Windows.Forms.SplitterEventArgs) Handles SplitContainer1.SplitterMoved

        Mc.clsGridViewMovie.SetFirstColumnWidth(DataGridViewMovies)

        Try
            DebugSplitter1PosLabel.Text = SplitContainer1.SplitterDistance
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub SplitContainer5_SplitterMoved(ByVal sender As System.Object, ByVal e As System.Windows.Forms.SplitterEventArgs) Handles SplitContainer5.SplitterMoved

        ResizeBottomLHSPanel()
        Try
            DebugSplitter5PosLabel.Text = SplitContainer5.SplitterDistance
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub


    Private Sub ExtraDebugEnable_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExtraDebugEnable.CheckedChanged
        Try
            If ExtraDebugEnable.Checked = True Then
                DebugSplitter1PosLabel.Visible = True
                DebugSplitter2PosLabel.Visible = True
                DebugSplitter5PosLabel.Visible = True
                DebugScreenSizeLabel.Visible = True
            Else
                DebugSplitter1PosLabel.Visible = False
                DebugSplitter2PosLabel.Visible = False
                DebugSplitter5PosLabel.Visible = False
                DebugScreenSizeLabel.Visible = False
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub SplitContainer2_SplitterMoved(ByVal sender As System.Object, ByVal e As System.Windows.Forms.SplitterEventArgs) Handles SplitContainer2.SplitterMoved
        Try
            DebugSplitter2PosLabel.Text = SplitContainer2.SplitterDistance
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ScrapeFullCertCheckBox_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles ScrapeFullCertCheckBox.CheckedChanged
        Try
            If ScrapeFullCertCheckBox.Checked Then
                Preferences.scrapefullcert = True
            Else
                Preferences.scrapefullcert = False
            End If
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub MediaCompanionCodeplexSiteToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MediaCompanionCodeplexSiteToolStripMenuItem.Click
        Try
            Dim webAddress As String = "http://mediacompanion.codeplex.com/"
            'Process.Start(webAddress)
            OpenUrl(webAddress)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub


    Private Sub CheckBoxDebugShowXML_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles CheckBoxDebugShowXML.CheckedChanged
        Try
            If CheckBoxDebugShowXML.Checked = False Then
                TabLevel1.TabPages.Remove(Me.TabConfigXML)
                TabLevel1.TabPages.Remove(Me.TabMovieCacheXML)
                TabLevel1.TabPages.Remove(Me.TabTVCacheXML)
                TabLevel1.TabPages.Remove(Me.TabProfile)
                TabLevel1.TabPages.Remove(Me.TabActorCache)
                TabLevel1.TabPages.Remove(Me.TabRegex)
            Else
                TabLevel1.TabPages.Add(Me.TabConfigXML)
                TabLevel1.TabPages.Add(Me.TabMovieCacheXML)
                TabLevel1.TabPages.Add(Me.TabTVCacheXML)
                TabLevel1.TabPages.Add(Me.TabProfile)
                TabLevel1.TabPages.Add(Me.TabActorCache)
                TabLevel1.TabPages.Add(Me.TabRegex)
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub



    'Private Sub btnNextMissingFanart_Click(sender As System.Object, e As System.EventArgs) Handles btnNextMissingFanart.Click
    '    Try
    '        If noFanart = False Then
    '            Call Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)
    '            Call mov_FanartLoad()   'refresh fanart for the current movie
    '            'If MovieListComboBox.Items.Count = 0 Then   'last fanart saved
    '            If DataGridViewMovies.Rows.Count = 0 Then
    '                btnNextMissingFanart.Visible = True
    '                btnNextMissingFanart.Enabled = False
    '                btnNextMissingFanart.Text = "All Fanart Done!"
    '            Else
    '                If noFanart = False Then btnNextMissingFanart.Visible = False 'Hide button whilst getting new fanart NOTE: noFanart can be changed by loadfanart inside the original If noFanart false
    '            End If
    '        Else
    '            'Dim maxIndex As Integer = MovieListComboBox.Items.Count - 1
    '            Dim maxIndex As Integer = DataGridViewMovies.Rows.Count - 1
    '            'Dim currentIndex As Integer = MovieListComboBox.SelectedIndex
    '            Dim currentIndex As Integer = DataGridViewMovies.CurrentRow.Index


    '            If currentIndex > maxIndex Then
    '                btnNextMissingFanart.Enabled = False
    '                btnNextMissingFanart.Text = "All Fanart Done!"
    '            Else
    '                'MovieListComboBox.ClearSelected()
    '                'MovieListComboBox.SetSelected(currentIndex, True)
    '                DataGridViewMovies.ClearSelection()
    '                DataGridViewMovies.Rows(currentIndex).Selected = True

    '                mov_FanartLoad()
    '            End If
    '        End If
    '    Catch ex As Exception
    '        ExceptionHandler.LogError(ex)
    '    End Try

    'End Sub


    Private Sub btnPrevNextMissingFanart_Click(sender As System.Object, e As System.EventArgs) Handles btnPrevMissingFanart.Click, btnNextMissingFanart.Click
        btnPrevMissingFanart.Enabled = False
        btnNextMissingFanart.Enabled = False

        DataGridViewMovies.ClearSelection
        DataGridViewMovies.Rows(sender.Tag).Selected = True
        DisplayMovie
        UpdateMissingFanartNav
        mov_FanartLoad
   End Sub


    Private Sub btnPrevNextMissingPoster_Click(sender As System.Object, e As System.EventArgs) Handles btnPrevMissingPoster.Click, btnNextMissingPoster.Click
        btnPrevMissingPoster.Enabled = False
        btnNextMissingPoster.Enabled = False

        PictureBoxAssignedMoviePoster.Image = Nothing
        DataGridViewMovies.ClearSelection
        DataGridViewMovies.Rows(sender.Tag).Selected = True
        DisplayMovie
        UpdateMissingPosterNav
    End Sub



    Private Sub CheckBoxRenameNFOtoINFO_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CheckBoxRenameNFOtoINFO.CheckedChanged
        Try
            If CheckBoxRenameNFOtoINFO.Checked = False Then
                Preferences.renamenfofiles = False
            Else
                Preferences.renamenfofiles = True
            End If
            If prefsload = False Then
                generalprefschanged = True
                btnGeneralPrefsSaveChanges.Enabled = True
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub CheckBox42_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles CheckBox42.CheckedChanged
        Try
            Try
                If CheckBox42.CheckState = CheckState.Checked Then
                    Me.DataGridView1.Columns("plot").Visible = True
                    Call mov_TextBoxesSetup()
                Else
                    Me.DataGridView1.Columns("plot").Visible = False
                    Call mov_TextBoxesSetup()
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub


    Public Sub util_ConfigLoad(ByVal Optional prefs As Boolean =False )
        Preferences.LoadConfig()

        'MovieListComboBox.Items.Clear()
        DataGridViewMovies.DataSource = Nothing

        Me.GroupBox22.Visible = Not Preferences.tvshow_useXBMC_Scraper
        Me.GroupBox22.SendToBack()
        Me.GroupBox_TVDB_Scraper_Preferences.Visible = Preferences.tvshow_useXBMC_Scraper
        Me.GroupBox_TVDB_Scraper_Preferences.BringToFront()

        Me.RadioButton51.Enabled = Preferences.movies_useXBMC_Scraper
        Me.RadioButton52.Enabled = Preferences.movies_useXBMC_Scraper
        Me.RadioButton51.Checked = CBool(Preferences.whatXBMCScraperIMBD)

        Me.CheckBoxRenameNFOtoINFO.Checked = Preferences.renamenfofiles
        Me.ScrapeFullCertCheckBox.Checked = Preferences.scrapefullcert

        Me.MovieRenameCheckBox.Checked = Preferences.MovieRenameEnable
        Me.ManualRenameChkbox.Checked = Preferences.MovieManualRename
        Me.TextBox_OfflineDVDTitle.Text = Preferences.OfflineDVDTitle
        Me.MovieRenameTemplateTextBox.Text = Preferences.MovieRenameTemplate
        Me.SearchForMissingEpisodesToolStripMenuItem.Checked = Preferences.displayMissingEpisodes

        Me.CheckBox_ShowDateOnMovieList.Checked = Preferences.showsortdate
        Me.cbxCleanFilenameIgnorePart.Checked = Preferences.movieignorepart
        Me.cbxNameMode.Checked = Preferences.namemode
        lblNameMode.Text = createNameModeText()
        Renamer.setRenamePref(tv_RegexRename.Item(Preferences.tvrename), tv_RegexScraper)
        Read_XBMC_IMDB_Scraper_Config()

        '----------------------------------------------------------

        mScraperManager = New ScraperManager(IO.Path.Combine(My.Application.Info.DirectoryPath, "Assets\scrapers"))
        '----------------------------------------------------------
        Dim loadinginfo As String = ""
        If Not IO.File.Exists(workingProfile.moviecache) Or Preferences.startupCache = False Then
            loadinginfo = "Status :- Building Movie caches"
            frmSplash.Label3.Text = loadinginfo
            frmSplash.Label3.Refresh()
            mov_RebuildMovieCaches()
        Else
            loadinginfo = "Status :- Loading Movie Database"
            frmSplash.Label3.Text = loadinginfo
            frmSplash.Label3.Refresh()
            mov_CacheLoad()
        End If

        If IO.File.Exists(workingProfile.filters) Then
            loadinginfo = "Status :- Loading Genrelist"
            frmSplash.Label3.Text = loadinginfo
            frmSplash.Label3.Refresh()
            Call util_GenreLoad()
        End If

        If IO.File.Exists(workingProfile.homemoviecache) Then
            loadinginfo = "Status :- Loading Home Movie Database"
            frmSplash.Label3.Text = loadinginfo
            frmSplash.Label3.Refresh()
            Call homemovieCacheLoad()
        End If

        If Not prefs then
        If Not IO.File.Exists(workingProfile.tvcache) Or Preferences.startupCache = False Then
            loadinginfo = "Status :- Building TV Database"
            frmSplash.Label3.Text = loadinginfo
            frmSplash.Label3.Refresh()
            Call tv_CacheRefresh()
        Else
            loadinginfo = "Status :- Loading TV Database"
            frmSplash.Label3.Text = loadinginfo
            frmSplash.Label3.Refresh()
            Call tv_CacheLoad()
        End If
        Call tv_Filter()
        End If

        If homemoviefolders.Count > 0 Then
            ListBox19.Items.Clear()
            For Each folder In homemoviefolders
                ListBox19.Items.Add(folder)
            Next
        End If

        'If Not IO.File.Exists(workingProfile.actorcache) Or Preferences.startupCache = False Then
        '    loadinginfo = "Status :- Building Actor Database"
        '    frmSplash.Label3.Text = loadinginfo
        '    frmSplash.Label3.Refresh()
        '    Call mov_ActorRebuild()
        'Else
        '    loadinginfo = "Status :- Loading Actor Database"
        '    frmSplash.Label3.Text = loadinginfo
        '    frmSplash.Label3.Refresh()
        '    'Dim NovaThread3 = New Thread(New ThreadStart(AddressOf mov_ActorCacheLoad))
        '    'NovaThread3.SetApartmentState(ApartmentState.STA)
        '    'NovaThread3.Start()
        '    oMovies.RebuildActorCache
        '    'Call loadactorcache()
        'End If

    End Sub


    Private Sub MediaCompanionHelpFileToolStripMenuItem_Click(sender As System.Object, e As System.EventArgs) Handles MediaCompanionHelpFileToolStripMenuItem.Click
        Try
            Process.Start(applicationPath & "\Media_Companion.chm")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub


    Private Sub CheckBox_ShowDateOnMovieList_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles CheckBox_ShowDateOnMovieList.CheckedChanged
        Try
            If CheckBox_ShowDateOnMovieList.Checked = True Then
                Preferences.showsortdate = True
            Else
                Preferences.showsortdate = False
            End If
            Call Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub DisplayEpisodesByAiredDateToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_DispByAiredDate.Click
        'This function displays in a Form with a fullscreen textbox, a list off all of a TvShows episodes in 'date aired' order, separated by calendar year.
        'It can be called from a TVShow, Season or Episode context menu
        'It handles the following errors - no aired date, episodes on the same aired date, episodes on same date with same series & same episode i.e. a duplicate.... 

        Try
            Dim WorkingTvShow As TvShow = tv_ShowSelectedCurrently()
            Dim NoDateCountUp As Integer = 0
            Dim Abort As Boolean = True     'this is used to verify that we actually have episodes to process
            Dim mySortedList As New SortedList()        'this is our sorted list, we add to the list a key (aired date) & the associated data (episode name), then we sort it & then we read out the data
            Dim childNodeLevel1 As TreeNode

            Select Case TvTreeview.SelectedNode.Level
                Case Is = 0
                    childNodeLevel1 = TvTreeview.SelectedNode
                Case Is = 1
                    childNodeLevel1 = TvTreeview.SelectedNode.Parent
                Case Is = 2
                    childNodeLevel1 = TvTreeview.SelectedNode.Parent.Parent
                Case Else
                    MsgBox("Unsupported TvTreeviewlevel in Aired Date Function", MsgBoxStyle.Exclamation, "Error!")
                    Exit Sub
            End Select




            'this section steps down through the tree to get from the tvshow to each episode
            For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes
                For Each childNodeLevel3 As TreeNode In childNodeLevel2.Nodes
                    Abort = False                                          'if we get here then there is at least 1 episode
                    Dim episode As New TvEpisode
                    episode.Load(childNodeLevel3.Name)

                    Dim EpAired As String = episode.Aired.Value  'this holds the 'aired' value

                    If EpAired Is Nothing Then
                        EpAired = "9999-" & Utilities.PadNumber(NoDateCountUp, 5)  'if the aired date is nothing then we add it as 9999-xxxxx where x increments
                        NoDateCountUp += 1
                    End If

                    'Convert episode to 2 digits for formatting
                    Dim episode2digit As New List(Of String)
                    episode2digit.Clear()
                    episode2digit.Add(childNodeLevel3.Tag.Episode.Value)
                    If episode2digit(0).Length = 1 Then episode2digit(0) = "0" & episode2digit(0)

                    'Convert season to 2 digits for formatting
                    Dim season2digit As String = childNodeLevel3.Tag.Season.Value
                    If season2digit.Length = 1 Then season2digit = "0" & season2digit

                    'here we add our data in the order that it is read in the tree - the sorted list will sort it for us
                    'using the key value .aired (date format is yyyy-mm-dd so simple alphabetical sort is all that is required)
                    'FormatTVFilename formats the show title,episode tile, season no & episode no as per the users preferences
                    Dim SameDateLoop As Boolean = True
                    Dim Key As String
                    Key = EpAired & season2digit & episode2digit(0)         'the key index (which is the string used to sort by) is the date+season+episode - this should be unique!

                    Do Until SameDateLoop = False
                        If mySortedList.ContainsKey(Key) Then
                            Key += "^"                          'we add an aditional ^ to the key if its still not unique.....
                        Else
                            SameDateLoop = False
                        End If
                    Loop

                    mySortedList.Add(Key, EpAired & "    " & Renamer.setTVFilename(WorkingTvShow.Title.Value, childNodeLevel3.Tag.title.value, episode2digit, season2digit))


                Next
            Next

            If Not Abort Then   'i.e. we have episodes in this show.... 
                Dim textstring As String = "!!! " & WorkingTvShow.Title.Value & "  Seasons: " & WorkingTvShow.Seasons.Count & "  Episodes: " & WorkingTvShow.Episodes.Count & vbCrLf 'start our text with the show title
                textstring += "!!! " & StrDup(textstring.Length - 2, "-") & vbCrLf              'add an underline of the same length    
                Dim prevkey As String = mySortedList.GetKey(0).Substring(0, 4)                      'load with first year value first four digits of aired date
                For Line = 0 To mySortedList.Count - 1  'read the data from the sorted list
                    If mySortedList.GetKey(Line).Substring(0, 4) <> prevkey Then textstring += "!!! ----------" & vbCrLf 'line break between years...
                    prevkey = mySortedList.GetKey(Line).Substring(0, 4)                             'set so that we can compare with next iteration
                    textstring += "!!! " & mySortedList.GetByIndex(Line) & vbCrLf ' "!!! " allows this to be shown in either brief or Full log modes
                Next

                textstring += "!!! " & vbCrLf & "!!! 9999 episodes have no valid aired date stored" & vbCrLf

                '                                                   'Show Final Listing Screen
                Dim MyFormObject As New frmoutputlog(textstring, True)                                   'create the log form & modify it to suit our needs   
                MyFormObject.TextBox1.Font = New System.Drawing.Font("Courier New", 10.2!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte)) 'constant width font
                MyFormObject.Button1.AutoSize = True                                                    'change button size to text will fit automatically
                MyFormObject.Button1.Text = "Save Details..."                                           'change the button text
                MyFormObject.Text = "Episodes in Aired Order for " & WorkingTvShow.Title.Value          'change the form title text
                MyFormObject.ShowDialog()                                                               'show the form

            Else                    'we get here if abort still = true, i.e. no episodes
                MsgBox("There are no Epsiodes or Missing Episodes for this show.", MsgBoxStyle.OkOnly, "No Episodes")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub
    Private Sub util_FixSeasonEpisode() 'atleast try...       if season or episode is -1, but title contains a regexable name to retreive season & episode
        Dim textstring As String = "!!! Season Episode -1 fix..." & vbCrLf
        Dim correctionsfound As Integer = 0
        Dim correctionsfixed As Integer = 0
        Dim childNodeLevel1 As TreeNode
        Dim originallabeltext = Label148.Text
        For Each childNodeLevel1 In TvTreeview.Nodes    'step thru each tvshow/season/episode in the treeview
            For Each childNodeLevel2 As TreeNode In childNodeLevel1.Nodes
                Label148.Text = childNodeLevel1.Text & " - " & childNodeLevel2.Text 'display some sort of progress using the text label associated with the fix
                Label148.Invalidate()
                Windows.Forms.Application.DoEvents()    'this refreshes the label whilst we are still in this sub
                For Each childNodeLevel3 As TreeNode In childNodeLevel2.Nodes
                    Dim episode As New TvEpisode
                    episode.Load(childNodeLevel3.Name)  'load the episode from the nfo using the path stored in the treeview

                    If episode.Season.Value = -1 Or episode.Episode.Value = -1 Then ' check if we have the issue
                        textstring += "!!! " & childNodeLevel1.Text & " - " & childNodeLevel3.Name      'add details to the log"
                        correctionsfound += 1   'increment the found issues counter
                        For Each regexp In tv_RegexScraper

                            Dim M As Match
                            Dim sourcetext As String = ""
                            If RadioButton_Fix_Filename.Checked Then
                                sourcetext = childNodeLevel3.Name       'use nfo filename to retrieve season/episode
                            Else
                                sourcetext = episode.Title.Value        'use 'title' node in nfo to retieve season/episode
                            End If
                            M = Regex.Match(episode.Title.Value, regexp)
                            If M.Success = True Then                            'we found a valid regex match
                                Try
                                    episode.Season.Value = M.Groups(1).Value.ToString   'set new values
                                    episode.Episode.Value = M.Groups(2).Value.ToString
                                    correctionsfixed += 1
                                    episode.Save(childNodeLevel3.Name)                  'save episode
                                    textstring += " - Corrected - S" & episode.Season.Value & "E" & episode.Episode.Value
                                    Exit For

                                Catch
                                    textstring += vbCrLf & "**** exception created during nfo save **** - " & childNodeLevel3.Name
                                End Try
                            End If

                        Next
                        textstring += vbCrLf
                    End If
                Next
            Next
        Next
        Label148.Text = originallabeltext           'return the label text back after we have used it to diplay progress
        Dim MyFormObject As New frmoutputlog(textstring, True)                                   'create the log form & modify it to suit our needs   
        MyFormObject.TextBox1.Font = New System.Drawing.Font("Courier New", 10.2!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte)) 'constant width font
        MyFormObject.Button1.AutoSize = True                                                    'change button size to text will fit automatically
        MyFormObject.Button1.Text = "Save Details..."                                           'change the button text
        MyFormObject.Font = New System.Drawing.Font("Courier New", 10.2!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        MyFormObject.Text = "Corrections" & vbCrLf & "Found: " & correctionsfound & vbCrLf & " Fixed: " & correctionsfixed            'change the form title text
        MyFormObject.ShowDialog()                                                               'show the form
        If MsgBox("Corrections" & vbCrLf & "Found: " & correctionsfound & vbCrLf & "Fixed: " & correctionsfixed & vbCrLf & vbCrLf & "Do you want to perform a refresh to reload the corrected nfo's?", MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then
            tv_CacheRefresh()   'ask to do a refresh or not, user may want to try both methods before do a refresh.
        End If

    End Sub
    Private Sub PlayMovieToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mov_ToolStripPlayMovie.Click
        Try
            mov_Play("Movie")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub PlayTrailerToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mov_ToolStripPlayTrailer.Click
        Try
            mov_Play("Trailer")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub RescrapeThisShowToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_RescrapeShowOrEpisode.Click
        'Try
        tv_Rescrape()
        'Catch ex As Exception
        ' ExceptionHandler.LogError(ex)
        ' End Try
    End Sub
    Private Sub WatchedShowOrEpisodeToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_WatchedShowOrEpisode.Click
        'Try
        Tv_MarkAsWatched()
        'Catch ex As Exception
        ' ExceptionHandler.LogError(ex)
        ' End Try
    End Sub
    Private Sub UnWatchedShowOrEpisodeToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_UnWatchedShowOrEpisode.Click
        'Try
        Tv_MarkAsUnWatched()
        'Catch ex As Exception
        ' ExceptionHandler.LogError(ex)
        ' End Try
    End Sub
    Private Sub PlayEpisodeToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_Play_Episode.Click
        Try
            Dim tempstring As String = DirectCast(TvTreeview.SelectedNode.Tag, Media_Companion.TvEpisode).VideoFilePath

            If Preferences.videomode = 1 Then Call util_VideoMode1(tempstring)
            If Preferences.videomode = 2 Then Call util_VideoMode2(tempstring)
            If Preferences.videomode = 3 Then
                Preferences.videomode = 2
                Call util_VideoMode2(tempstring)
            End If
            If Preferences.videomode >= 4 Then
                If Preferences.selectedvideoplayer <> Nothing Then
                    Call util_VideoMode4(tempstring)
                Else
                    Call util_VideoMode1(tempstring)
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TextBox_OfflineDVDTitle_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles TextBox_OfflineDVDTitle.TextChanged
        Try
            Preferences.OfflineDVDTitle = TextBox_OfflineDVDTitle.Text
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TvTreeview_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles TvTreeview.MouseUp

        If e.Button = MouseButtons.Right Then
            Dim pt As Point
            pt.X = e.X
            pt.Y = e.Y
            'MovieListComboBox.SelectedIndex = MovieListComboBox.IndexFromPoint(pt)

            Dim objMousePosition As Point = DataGridViewMovies.PointToClient(Control.MousePosition)
            Dim objHitTestInfo As DataGridView.HitTestInfo
            objHitTestInfo = DataGridViewMovies.HitTest(pt.X, pt.Y)
            'DataGridViewMovies.Rows(objHitTestInfo.RowIndex).Selected = True

            TvTreeview.SelectedNode = TvTreeview.GetNodeAt(TvTreeview.PointToClient(Cursor.Position)) '***select actual the node 

            'context menu will be shown soon so we modify it to suit...***after*** we make the selection of the node 

            Tv_TreeViewContextMenuItemsEnable()

        End If

    End Sub


    Private Sub ToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_ViewNfo.Click
        Try
            If TvTreeview.SelectedNode Is Nothing Then Exit Sub
            If TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvShow Then
                Utilities.NfoNotepadDisplay(DirectCast(TvTreeview.SelectedNode.Tag, Media_Companion.TvShow).NfoFilePath)
            ElseIf TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvSeason Then
                MsgBox("A Season NFO is invalid so it can't be shown")
            ElseIf TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvEpisode Then
                Utilities.NfoNotepadDisplay(DirectCast(TvTreeview.SelectedNode.Tag, Media_Companion.TvEpisode).NfoFilePath)
            Else
                MsgBox("None")
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

        Debug.Print(Me.Controls.Count)
    End Sub

    Private Sub Tv_TreeViewContext_FindMissArt_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Tv_TreeViewContext_FindMissArt.Click
        Try
            tv_MissingArtDownload(tv_ShowSelectedCurrently)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub CheckBox_fixNFOid_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles CheckBox_fixNFOid.CheckedChanged
        Try
            If CheckBox_fixNFOid.CheckState = CheckState.Checked Then
                Preferences.fixnfoid = True
            Else
                Preferences.fixnfoid = False
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ContextMenuStrip1_Opening(ByVal sender As System.Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles ContextMenuStrip1.Opening
        Try
            'If (MovieListComboBox.SelectedItems.Count = 0) Then
            If DataGridViewMovies.SelectedRows.Count = 0 Then
                e.Cancel = True
            End If

            RenameFilesToolStripMenuItem.Enabled = Not Preferences.usefoldernames AndAlso Not Preferences.basicsavemode And Preferences.MovieRenameEnable

            tsmiRescrapeFrodo_Poster_Thumbs.Enabled = Preferences.FrodoEnabled
            tsmiRescrapeFrodo_Fanart_Thumbs.Enabled = Preferences.FrodoEnabled

        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub ContextMenuStrip2_Opening(ByVal sender As System.Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles ContextMenuStrip2.Opening
        Try
            If (TvTreeview.SelectedNode Is Nothing) Then
                e.Cancel = True
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub
    Private Sub SaveSelectedFanartAsToolStripMenuItem_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles SaveSelectedFanartAsToolStripMenuItem.Click
        Try
            messbox = New frmMessageBox("Please wait,", "", "Downloading Fanart")
            System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
            messbox.Show()
            Me.Refresh()
            messbox.Refresh()
            Me.Refresh()
            Application.DoEvents()

            Dim tempstring As String
            Dim tempint As Integer = 0
            Dim tempstring2 As String = String.Empty
            Dim allok As Boolean = False
            For Each button As Control In Me.Panel2.Controls
                If button.Name.IndexOf("checkbox") <> -1 Then
                    Dim b1 As RadioButton = CType(button, RadioButton)
                    If b1.Checked = True Then
                        tempstring = b1.Name
                        tempstring = tempstring.Replace("moviefanartcheckbox", "")
                        tempint = Convert.ToDecimal(tempstring)
                        tempstring2 = fanartArray(tempint).hdUrl
                        allok = True
                        Exit For
                    End If
                End If
            Next
            If allok = False Then
                MsgBox("No Fanart Is Selected")
            Else
                Try
                    Panel1.Controls.Remove(Label1)
                    With SaveFileDialog1
                        .AddExtension = True
                        .DefaultExt = "jpg"
                        .Filter = "Jpg Pictures (*.jpg)|*.jpg"
                        .Title = "Save Hi-Res Fanart as"
                        .OverwritePrompt = True
                        .CheckPathExists = True
                        .InitialDirectory = workingMovieDetails.fileinfo.path
                    End With

                    If SaveFileDialog1.ShowDialog = Windows.Forms.DialogResult.OK Then
                        'Utilities.DownloadImage(tempstring2, SaveFileDialog1.FileName, True, Preferences.resizefanart)
                        Movie.SaveFanartImageToCacheAndPath(tempstring2, SaveFileDialog1.FileName)
                    End If

                Catch ex As WebException
                    MsgBox(ex.Message)
                End Try
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        Finally
            messbox.Close()
        End Try

    End Sub


    Private Sub TasksDontShowCompleted_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles TasksDontShowCompleted.CheckedChanged
        Me.TasksOnlyIncompleteTasks = TasksDontShowCompleted.Checked
    End Sub


    Private Sub cbPreferredTrailerResolution_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cbPreferredTrailerResolution.SelectedIndexChanged
        Preferences.moviePreferredTrailerResolution = cbPreferredTrailerResolution.Text.ToUpper()
        movieprefschanged = True
        btnMoviePrefSaveChanges.Enabled = True
    End Sub

    Private Sub MovieRenameTemplateTextBox_TextChanged(sender As System.Object, e As System.EventArgs) Handles MovieRenameTemplateTextBox.TextChanged
        Try
            Preferences.MovieRenameTemplate = MovieRenameTemplateTextBox.Text
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub MovieRenameCheckBox_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles MovieRenameCheckBox.CheckedChanged
        Try
            Preferences.MovieRenameEnable = MovieRenameCheckBox.Checked
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub cbxNameMode_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles cbxNameMode.CheckedChanged
        If cbxNameMode.Checked Then
            Preferences.namemode = "1"
        Else
            Preferences.namemode = "0"
        End If
        lblNameMode.Text = createNameModeText()
        movieprefschanged = True
        btnMoviePrefSaveChanges.Enabled = True
    End Sub

    Private Function createNameModeText() As String
        Dim txtMovieTitle As String = "Movie (0000)"
        Dim lstNameModeFiles As New List(Of String)(New String() {txtMovieTitle & " CD1.avi", txtMovieTitle & " CD2.avi"})
        If Preferences.namemode = "1" Then txtMovieTitle &= " CD1"
        lstNameModeFiles.Add(txtMovieTitle & ".nfo")
        lstNameModeFiles.Add(txtMovieTitle & ".tbn")
        lstNameModeFiles.Add(txtMovieTitle & "-fanart.jpg")
        lstNameModeFiles.Sort()
        Return String.Join(vbCrLf, lstNameModeFiles)
    End Function

    Private Sub Button2_Click_1(sender As System.Object, e As System.EventArgs) Handles Button2.Click
        util_FixSeasonEpisode()
    End Sub


    Private Sub RadioButtonFanart_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles RadioButtonFanart.CheckedChanged
        mov_DisplayFanart()
    End Sub

    Private Sub RadioButtonThumb1_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles RadioButtonThumb1.CheckedChanged
        mov_DisplayFanart()
    End Sub

    Private Sub RadioButtonThumb2_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles RadioButtonThumb2.CheckedChanged
        mov_DisplayFanart()
    End Sub

    Private Sub RadioButtonThumb3_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles RadioButtonThumb3.CheckedChanged
        mov_DisplayFanart()

    End Sub
    Private Sub RadioButtonThumb4_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles RadioButtonThumb4.CheckedChanged
        mov_DisplayFanart()
    End Sub
    Private Sub mov_DisplayFanart()
        If workingMovieDetails Is Nothing Then Exit Sub
        If (usefoldernames = False) And (allfolders = False) Then Exit Sub
        If workingMovieDetails.fileinfo.fanartpath <> Nothing Then
            Try
                Dim fanartpath = mov_FanartORExtrathumbPath()
                If IO.File.Exists(fanartpath) Then
                    Dim OriginalImage As New Bitmap(fanartpath)
                    Dim Image2 As New Bitmap(OriginalImage)
                    OriginalImage.Dispose()
                    PictureBox2.Image = Image2 'moviethumb - 3
                    Label16.Text = PictureBox2.Image.Width
                    Label17.Text = PictureBox2.Image.Height
                Else

                    PictureBox2.ImageLocation = Utilities.DefaultFanartPath 'moviethumb - 3
                    Label16.Text = ""
                    Label17.Text = ""
                End If
            Catch ex As Exception
#If SilentErrorScream Then
                                Throw ex
#End If
            End Try
        End If

    End Sub
    Private Function mov_FanartORExtrathumbPath() As String
        Dim fanarttype As String = ""
        If RadioButtonFanart.Checked Then fanarttype = "Fanart"
        If RadioButtonThumb1.Checked Then fanarttype = "Thumb1"
        If RadioButtonThumb2.Checked Then fanarttype = "Thumb2"
        If RadioButtonThumb3.Checked Then fanarttype = "Thumb3"
        If RadioButtonThumb4.Checked Then fanarttype = "Thumb4"
        Dim fanartpath As String = ""
        Select Case fanarttype
            Case "Fanart"
                fanartpath = workingMovieDetails.fileinfo.fanartpath
            Case "Thumb1"
                fanartpath = Strings.Left(workingMovieDetails.fileinfo.fanartpath, workingMovieDetails.fileinfo.fanartpath.LastIndexOf("\")) & "\extrathumbs\thumb1.jpg"
            Case "Thumb2"
                fanartpath = Strings.Left(workingMovieDetails.fileinfo.fanartpath, workingMovieDetails.fileinfo.fanartpath.LastIndexOf("\")) & "\extrathumbs\thumb2.jpg"
            Case "Thumb3"
                fanartpath = Strings.Left(workingMovieDetails.fileinfo.fanartpath, workingMovieDetails.fileinfo.fanartpath.LastIndexOf("\")) & "\extrathumbs\thumb3.jpg"
            Case "Thumb4"
                fanartpath = Strings.Left(workingMovieDetails.fileinfo.fanartpath, workingMovieDetails.fileinfo.fanartpath.LastIndexOf("\")) & "\extrathumbs\thumb4.jpg"

        End Select
        Return fanartpath
    End Function



    Private Sub TabPageMovMainBrowser_Enter(sender As Object, e As System.EventArgs) Handles TabPageLevel2MovMainBrowser.Enter
        mov_SplitContainerAutoPosition()
        'MsgBox("TabPageMainBrowser - MOV")  
    End Sub

    Private Sub TabPageTVMainBrowser_Enter(sender As Object, e As System.EventArgs) Handles TabPageLevel2TVMainBrowser.Enter
        tv_SplitContainerAutoPosition()
        'MsgBox("TabPageMainBrowser - tv")
    End Sub

    Private Sub plottxt_DoubleClick(sender As System.Object, e As System.EventArgs) Handles plottxt.DoubleClick
        ShowBigMovieText()
    End Sub


    Private Sub ShowBigMovieText()

        Dim frm As New frmBigMovieText

        frm.ShowDialog(
                        titletxt.Text,
                        directortxt.Text,
                        votestxt.Text,
                        ratingtxt.Text,
                        runtimetxt.Text,
                        genretxt.Text,
                        txtStars.Text,
                        certtxt.Text,
                        plottxt.Text
                        )
    End Sub


    Private Function GetActorThumb(ByRef currentUri As String)
        Dim actorthumb As String = currentUri
        If Preferences.actorsave Then
            Dim uri As Uri
            uri = New Uri(actorthumb)

            If Len(Preferences.actornetworkpath) > 0 AndAlso Len(Preferences.actorsavepath) > 0 Then
                Dim actorThumbFileName As String
                Dim localActorThumbFileName As String
                actorThumbFileName = System.IO.Path.Combine(Preferences.actornetworkpath, uri.Segments(uri.Segments.GetLength(0) - 1))
                localActorThumbFileName = System.IO.Path.Combine(Preferences.actorsavepath, uri.Segments(uri.Segments.GetLength(0) - 1))

                ' Utilities.DownloadImage(uri.OriginalString, localActorThumbFileName, True, False)
                Movie.SaveActorImageToCacheAndPath(uri.OriginalString, localActorThumbFileName)

                actorthumb = actorThumbFileName
            End If
        End If
        Return actorthumb
    End Function
    Private Sub RescrapeAllToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mov_ToolStripRescrapeAll.Click
        'Try
        'rescrape all
        mov_RescrapeAllSelected()
        'Catch ex As Exception
        '    ExceptionHandler.LogError(ex)
        'End Try
    End Sub

    Private Sub mov_RescrapeAllSelected()

        _rescrapeList.Field = Nothing
        _rescrapeList.FullPathAndFilenames.Clear()

        'For Each selected In MovieListComboBox.SelectedItems
        For Each row In DataGridViewMovies.SelectedRows
            _rescrapeList.FullPathAndFilenames.Add(row.Cells("fullpathandfilename").Value)
        Next

        RunBackgroundMovieScrape("RescrapeAll")
    End Sub




    ''22Feb12 - AnotherPhil - Fix up corrupt actor scraping
    'Private Sub mov_FixUpCorruptActors()
    '    Dim badNFOs As New List(Of ComboList)
    '    For Each movie In oMovies.MovieCache
    '        Dim movieadd As New FullMovieDetails
    '        movieadd = nfoFunction.mov_NfoLoadFull(movie.fullpathandfilename)
    '        If IsNothing(movieadd) Then
    '            Continue For
    '        End If
    '        For Each actor In movieadd.listactors
    '            If actor.actorname.IndexOf("<tr") > -1 Then
    '                badNFOs.Add(movie)
    '                Exit For
    '            End If
    '        Next
    '    Next
    '    If badNFOs.Count = 0 Then
    '        Exit Sub
    '    End If

    '    ToolStripStatusLabel1.Visible = True
    '    ToolStripStatusLabel1.Text = badNFOs.Count.ToString() + " NFO files found containing invalid actor data - Rescaping to fix problem..."

    '    Application.DoEvents()


    '    'Dim SavedList As New List(Of ComboList)
    '    'For Each movie In filteredList
    '    '    SavedList.Add(movie)
    '    'Next

    '    'filteredList.Clear()
    '    'For Each movie In oMovies.MovieCache
    '    '    filteredList.Add(movie)
    '    'Next


    '    _rescrapeList.Field = "actors"
    '    _rescrapeList.FullPathAndFilenames.Clear

    '    For Each movie In badNFOs
    '        _rescrapeList.FullPathAndFilenames.Add(movie.fullpathandfilename)
    '    Next

    '    RunBackgroundMovieScrape("RescrapeSpecific")

    '    'filteredList.Clear()
    '    'For Each movie In SavedList
    '    '    filteredList.Add(movie)
    '    'Next

    '    ToolStripStatusLabel1.Visible = False
    'End Sub

    Private Sub mov_VideoSourcePopulate()
        Try
            ComboBoxFormatSource.Items.Clear()
            ComboBoxFormatSource.Items.Add("")
            For Each mset In Preferences.releaseformat
                ComboBoxFormatSource.Items.Add(mset)
                cbFilterSource.Items.Add(mset)
            Next
            ComboBoxFormatSource.SelectedIndex = 0
            If IsNothing(workingMovieDetails) = False Then
                If workingMovieDetails.fullmoviebody.source <> "" Then
                    For te = 0 To ComboBoxFormatSource.Items.Count - 1
                        If ComboBoxFormatSource.Items(te) = workingMovieDetails.fullmoviebody.source Then
                            ComboBoxFormatSource.SelectedIndex = te
                            Exit For
                        End If
                    Next
                End If
            End If
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
    End Sub

    Private Sub btnVideoSourceAdd_Click(sender As System.Object, e As System.EventArgs) Handles btnVideoSourceAdd.Click
        lbVideoSource.Items.Add(txtVideoSourceAdd.Text)
        movieprefschanged = True
        btnMoviePrefSaveChanges.Enabled = True
        videosourceprefchanged = True
    End Sub

    Private Sub btnVideoSourceRemove_Click(sender As System.Object, e As System.EventArgs) Handles btnVideoSourceRemove.Click
        Dim strSelected = lbVideoSource.SelectedItem
        Dim idxSelected = lbVideoSource.SelectedIndex

        Try
            If ComboBoxFormatSource.Text = strSelected Then ComboBoxFormatSource.SelectedIndex = 0
            lbVideoSource.Items.RemoveAt(idxSelected)
            mov_VideoSourcePopulate()
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
            videosourceprefchanged = True
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try

    End Sub

    Private Sub cbxCleanFilenameIgnorePart_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles cbxCleanFilenameIgnorePart.CheckedChanged
        Try
            If cbxCleanFilenameIgnorePart.Checked = True Then
                Preferences.movieignorepart = True
            Else
                Preferences.movieignorepart = False
            End If
            movieprefschanged = True
            btnMoviePrefSaveChanges.Enabled = True
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub btnCleanFilenameAdd_Click(sender As System.Object, e As System.EventArgs) Handles btnCleanFilenameAdd.Click
        lbCleanFilename.Items.Add(txtCleanFilenameAdd.Text)
        movieprefschanged = True
        btnMoviePrefSaveChanges.Enabled = True
        cleanfilenameprefchanged = True
    End Sub

    Private Sub btnCleanFilenameRemove_Click(sender As System.Object, e As System.EventArgs) Handles btnCleanFilenameRemove.Click
        lbCleanFilename.Items.RemoveAt(lbCleanFilename.SelectedIndex)
        movieprefschanged = True
        btnMoviePrefSaveChanges.Enabled = True
        cleanfilenameprefchanged = True
    End Sub

    Private Sub applyAdvancedLists()
        If cleanfilenameprefchanged Then
            Dim strTemp As String = ""
            For i = 0 To lbCleanFilename.Items.Count - 1
                strTemp &= lbCleanFilename.Items(i) & "|"
            Next
            Preferences.moviecleanTags = strTemp.TrimEnd("|")
            cleanfilenameprefchanged = False
        End If
        If videosourceprefchanged Then
            Dim count As Integer = lbVideoSource.Items.Count - 1
            ReDim Preferences.releaseformat(count)
            For g = 0 To count
                Preferences.releaseformat(g) = lbVideoSource.Items(g)
            Next
            mov_VideoSourcePopulate()
            videosourceprefchanged = False
        End If
    End Sub

    Private Sub ToolStripMenuItem1_Click_1(sender As System.Object, e As System.EventArgs) Handles ToolStripMenuItem1.Click
        Try
            Call mov_ScrapeSpecific("trailer")
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub


    'Private Sub MovieAddSetBtn_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MovieAddSetBtn.Click

    '    If ListBox4.SelectedItems.Count=0 Then Return

    '    ListBox14.Items.Clear

    '    For Each item In ListBox4.SelectedItems
    '        ListBox14.Items.Add(item)
    '    Next

    '    'workingMovieDetails.fullmoviebody.movieset = ListBox14.Items(0)

    '    'setsTxt.Text = ListBox14.Items(0)

    '    mov_SaveQuick



    '    'If ListBox4.SelectedItem <> Nothing Then
    '    '    If ListBox4.SelectedItem <> "" Then
    '            'Dim exists As Boolean = False
    '            'For Each item In ListBox14.Items
    '            '    If item = ListBox4.SelectedItem Then
    '            '        exists = True
    '            '        Exit For
    '            '    End If
    '            'Next
    '            'If exists = False Then
    '            '    For f = ListBox14.Items.Count - 1 To 0 Step -1
    '            '        If ListBox14.Items(f) = "-None-" Then
    '            '            ListBox14.Items.RemoveAt(f)
    '            '        End If
    '            '    Next
    '            '    ListBox14.Items.Add(ListBox4.SelectedItem)
    '            'End If

    '    '        workingMovieDetails.fullmoviebody.movieset = ""
    '    '        Dim tempsets As String = ""
    '    '        For f = 0 To ListBox14.Items.Count - 1

    '    '            If f = 0 Then
    '    '                tempsets = ListBox14.Items(f)
    '    '            Else
    '    '                tempsets = tempsets & " / " & ListBox14.Items(f)
    '    '            End If
    '    '        Next
    '    '        'workingMovieDetails.fullmoviebody.movieset = tempsets
    '    '        setsTxt.Text = tempsets

    '    '        Call mov_SaveQuick()

    '    '    End If
    '    'End If




    'End Sub




    'Private Sub MovieRemoveSetBtn_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MovieRemoveSetBtn.Click
    '    If ListBox14.SelectedItem <> "-None-" Then
    '        ListBox14.Items.Remove(ListBox14.SelectedItem)
    '        If ListBox14.Items.Count = 0 Then
    '            ListBox14.Items.Add("-None-")
    '        End If
    '        workingMovieDetails.fullmoviebody.movieset = ""
    '        Dim tempsets As String = ""
    '        For f = 0 To ListBox14.Items.Count - 1
    '            If f = 0 Then
    '                tempsets = ListBox14.Items(f)
    '            Else
    '                tempsets = tempsets & " / " & ListBox14.Items(f)
    '            End If
    '        Next
    '        'workingMovieDetails.fullmoviebody.movieset = tempsets
    '        setsTxt.Text = tempsets

    '        Call mov_SaveQuick()
    '    Else
    '        MsgBox("Can only remove Added Sets")
    '    End If


    'End Sub


    Private Sub cbSort_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cbSort.SelectedIndexChanged
        Mc.clsGridViewMovie.GridFieldToDisplay2 = cbSort.Text
        Call Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)
        DisplayMovie()
        Preferences.moviesortorder = cbSort.SelectedIndex
    End Sub



    Private Function GetVotes(votes As String)

        Try
            Return CInt(votes.Replace(",", "")).ToString("000,000")
        Catch ex As Exception
            Return "000,000"
        End Try

    End Function

    Private Sub btnFindBrowser_Click(sender As System.Object, e As System.EventArgs) Handles btnFindBrowser.Click
        Try
            Dim filebrowser As New OpenFileDialog
            Dim mstrProgramFilesPath As String = System.Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles)
            filebrowser.InitialDirectory = mstrProgramFilesPath
            filebrowser.Filter = "Executable Files|*.exe"
            filebrowser.Title = "Find Executable Of Preferred Browser"
            If filebrowser.ShowDialog = Windows.Forms.DialogResult.OK Then
                Preferences.selectedBrowser = filebrowser.FileName
            End If
            If prefsload = False Then
                generalprefschanged = True
                btnGeneralPrefsSaveChanges.Enabled = True
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    'AnotherPhil bug fix - If the default browser is <goz> IE <goz/> then not stating the exe throws an exception
    Private Sub OpenUrl(url As String)
        Try
            If Preferences.selectedBrowser <> "" Then
                Process.Start(Preferences.selectedBrowser, url)
            Else
                Try
                    Process.Start(url)
                Catch ex As Exception
                    MessageBox.Show("An error occurred while trying to launch the default browser - Under 'General Preferences' check 'Use external Browser...' and then locate your browser to fix this error", "", MessageBoxButtons.OK)
                End Try
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub cbMovieRuntimeFallbackToFile_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles cbMovieRuntimeFallbackToFile.CheckedChanged
        Preferences.movieRuntimeFallbackToFile = cbMovieRuntimeFallbackToFile.Checked
        movieprefschanged = True
        btnMoviePrefSaveChanges.Enabled = True
    End Sub

    Private Sub TextBox_Plot_DoubleClick(sender As System.Object, e As System.EventArgs) Handles TextBox_Plot.DoubleClick
        ShowBigTvEpisodeText()
    End Sub

    Private Sub ShowBigTvEpisodeText()

        Dim frm As New frmBigTvEpisodeText

        frm.ShowDialog(
                        TextBox_Title.Text,
                        TextBox_Director.Text,
                        TextBox_Aired.Text,
                        TextBox_Rating.Text,
                        TextBox15.Text,
                        TextBox11.Text,
                        TextBox14.Text,
                        TextBox_Plot.Text
                        )
    End Sub


    Private Sub PictureBoxActor_DoubleClick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PictureBoxActor.DoubleClick
        ZoomActorPictureBox(PictureBoxActor)
    End Sub

    Private Sub PictureBox6_DoubleClick(sender As System.Object, e As System.EventArgs) Handles PictureBox6.DoubleClick
        ZoomActorPictureBox(PictureBox6)
    End Sub

    Private Sub ZoomActorPictureBox(pictureBox As PictureBox)

'        If pictureBox.ImageLocation = Utilities.DefaultActorPath Then
        If IsNothing(pictureBox.Tag) orElse  pictureBox.Tag.ToString = Utilities.DefaultActorPath Then
            Exit Sub
        End If

        Me.ControlBox = False
        MenuStrip1.Enabled = False

        Try
'            util_ZoomImage(New Bitmap(pictureBox.ImageLocation))
            util_ZoomImage(New Bitmap(pictureBox.Tag.ToString))
        Catch
            Dim wc As New WebClient()
            Dim ImageInBytes() As Byte = wc.DownloadData(pictureBox.Tag)
            Dim ImageStream As New IO.MemoryStream(ImageInBytes)

            util_ZoomImage(New Bitmap(ImageStream))
        End Try

    End Sub

    'Private Sub MovieAddSetBtn_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MovieAddSetBtn.Click
    '    If ListBox4.SelectedItem <> Nothing Then
    '        If ListBox4.SelectedItem <> "" Then
    '            Dim exists As Boolean = False
    '            For Each item In ListBox14.Items
    '                If item = ListBox4.SelectedItem Then
    '                    exists = True
    '                    Exit For
    '                End If
    '            Next
    '            If exists = False Then
    '                For f = ListBox14.Items.Count - 1 To 0 Step -1
    '                    If ListBox14.Items(f) = "-None-" Then
    '                        ListBox14.Items.RemoveAt(f)
    '                    End If
    '                Next
    '                ListBox14.Items.Add(ListBox4.SelectedItem)
    '            End If
    '            workingMovieDetails.fullmoviebody.movieset = ""
    '            Dim tempsets As String = ""
    '            For f = 0 To ListBox14.Items.Count - 1

    '                If f = 0 Then
    '                    tempsets = ListBox14.Items(f)
    '                Else
    '                    tempsets = tempsets & " / " & ListBox14.Items(f)
    '                End If
    '            Next
    '            'workingMovieDetails.fullmoviebody.movieset = tempsets
    '            setsTxt.Text = tempsets

    '            Call mov_SaveQuick()

    '        End If
    '    End If
    'End Sub

    'Private Sub MovieRemoveSetBtn_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MovieRemoveSetBtn.Click

    '    If ListBox14.SelectedItems.Count=0 Then Return

    '    Do While ListBox14.SelectedItems.Count>0
    '        ListBox14.Items.Remove(ListBox14.SelectedItem)
    '    Loop

    '    If ListBox14.Items.Count=0 Then
    '        ListBox14.Items.Add("-None-")
    '    End If

    '    'workingMovieDetails.fullmoviebody.movieset = ListBox14.Items(0)

    '    'setsTxt.Text = ListBox14.Items(0)


    '    'If ListBox14.SelectedItem <> "-None-" Then
    '    '    ListBox14.Items.Remove(ListBox14.SelectedItem)
    '    '    If ListBox14.Items.Count = 0 Then
    '    '        ListBox14.Items.Add("-None-")
    '    '    End If
    '        workingMovieDetails.fullmoviebody.movieset = ""
    '        Dim tempsets As String = ""
    '        For f = 0 To ListBox14.Items.Count - 1
    '            If f = 0 Then
    '                tempsets = ListBox14.Items(f)
    '            Else
    '                tempsets = tempsets & " / " & ListBox14.Items(f)
    '            End If
    '        Next
    '        workingMovieDetails.fullmoviebody.movieset = tempsets
    '    '    setsTxt.Text = tempsets

    '        mov_SaveQuick
    '    'Else
    '    '    MsgBox("Can only remove Added Sets")
    '    'End If
    'End Sub

    Private Sub SetupHomeMovies()
        If Preferences.homemoviefolders.Count = 0 And homemovielist.Count = 0 And TabControl1.SelectedIndex <> 4 Then
            MsgBox("Please add A Folder containing Home Movies")
            Try
                TabControl1.SelectedIndex = 4
            Catch
            End Try
        Else
            If homemovielist.Count > 0 Then
                Call loadhomemovielist()
            End If
            If homemoviefolders.Count > 0 Then
                ListBox19.Items.Clear()
                For Each folder In homemoviefolders
                    ListBox19.Items.Add(folder)
                Next
            End If
        End If
    End Sub



    'Private Sub listhomemovies()
    '    ListBox18.Items.Clear()
    '    For Each mov In homemovielist
    '        ListBox18.Items.Add(New ValueDescriptionPair(mov.Title, mov.FullPathAndFilename))
    '    Next
    'End Sub

    Private Sub SearchForNewHomeMoviesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SearchForNewHomeMoviesToolStripMenuItem.Click
        Call homeMovieScan()
    End Sub

    Private Sub rebuildHomeMovies()

        homemovielist.Clear()
        ListBox18.Items.Clear()

        Dim newhomemoviefolders As New List(Of String)
        Dim progress As Integer = 0
        progress = 0
        scraperLog = ""
        Dim dirpath As String = String.Empty

        Dim newHomeMovieList As New List(Of str_BasicHomeMovie)

        Dim totalfolders As New List(Of String)
        totalfolders.Clear()

        For Each moviefolder In homemoviefolders
            Dim hg As New IO.DirectoryInfo(moviefolder)
            If hg.Exists Then
                scraperLog &= "Searching Movie Folder: " & hg.FullName.ToString & vbCrLf
                totalfolders.Add(moviefolder)
                Dim newlist As List(Of String)
                Try
                    newlist = Utilities.EnumerateFolders(moviefolder)       'Max levels restriction of 6 deep removed
                    For Each subfolder In newlist
                        scraperLog = scraperLog & "Subfolder added :- " & subfolder.ToString & vbCrLf
                        totalfolders.Add(subfolder)
                    Next
                Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                End Try
            End If
        Next

        For Each homemoviefolder In totalfolders
            Dim returnedhomemovielist As New List(Of str_BasicHomeMovie)

            dirpath = homemoviefolder
            Dim dir_info As New System.IO.DirectoryInfo(dirpath)
            returnedhomemovielist = HomeMovies.listHomeMovieFiles(dir_info, "*.nfo", scraperLog)         'titlename is logged in here
            If returnedhomemovielist.Count > 0 Then
                For Each newhomemovie In returnedhomemovielist
                    Dim existsincache As Boolean = False
                    Dim pathOnly As String = IO.Path.GetDirectoryName(newhomemovie.FullPathAndFilename) & "\"
                    Dim nfopath As String = pathOnly & IO.Path.GetFileNameWithoutExtension(newhomemovie.FullPathAndFilename) & ".nfo"
                    If IO.File.Exists(nfopath) Then
                        Try
                            Dim newexistingmovie As New HomeMovieDetails
                            newexistingmovie = nfoFunction.nfoLoadHomeMovie(nfopath)
                            Dim newexistingbasichomemovie As New str_BasicHomeMovie
                            newexistingbasichomemovie.FullPathAndFilename = newexistingmovie.fileinfo.fullpathandfilename
                            newexistingbasichomemovie.Title = newexistingmovie.fullmoviebody.title

                            homemovielist.Add(newexistingbasichomemovie)
                            ListBox18.Items.Add(New ValueDescriptionPair(newexistingbasichomemovie.FullPathAndFilename, newexistingbasichomemovie.Title))
                        Catch ex As Exception

                        End Try
                    Else
                        newHomeMovieList.Add(newhomemovie)
                    End If

                Next
            End If
        Next

        Call HomeMovieCacheSave()

    End Sub

    Private Sub homeMovieScan()
        'Search for new Home Movies

        Dim moviepattern As String


        Dim newhomemoviefolders As New List(Of String)
        Dim progress As Integer = 0
        progress = 0
        scraperLog = ""
        Dim dirpath As String = String.Empty

        scraperLog &= "MC " & Trim(System.Reflection.Assembly.GetExecutingAssembly.FullName.Split(",")(1)) & vbCrLf


        ToolStripProgressBar8.Value = 0
        ToolStripProgressBar8.ProgressBar.Refresh()
        ToolStripStatusLabel9.Text = "Scanning for Home Movies"
        ToolStripProgressBar8.Visible = True
        ToolStripStatusLabel9.Visible = True

        Dim newHomeMovieList As New List(Of str_BasicHomeMovie)




        'For Each folder In homemoviefolders
        Dim totalfolders As New List(Of String)
        totalfolders.Clear()

        For Each moviefolder In homemoviefolders
            Dim hg As New IO.DirectoryInfo(moviefolder)
            If hg.Exists Then
                scraperLog &= "Found Movie Folder: " & hg.FullName.ToString & vbCrLf
                totalfolders.Add(moviefolder)
                Dim newlist As List(Of String)
                Try
                    newlist = Utilities.EnumerateFolders(moviefolder)       'Max levels restriction of 6 deep removed
                    For Each subfolder In newlist
                        scraperLog = scraperLog & "Subfolder added :- " & subfolder.ToString & vbCrLf
                        totalfolders.Add(subfolder)
                    Next
                Catch ex As Exception
#If SilentErrorScream Then
                        Throw ex
#End If
                End Try
            End If
        Next


        For Each homemoviefolder In totalfolders
            For Each ext In Utilities.VideoExtensions
                Dim returnedhomemovielist As New List(Of str_BasicHomeMovie)
                moviepattern = If((ext = "VIDEO_TS.IFO"), ext, "*" & ext)  'this bit adds the * for the extension search in mov_ListFiles2 if its not the string VIDEO_TS.IFO 

                dirpath = homemoviefolder
                Dim dir_info As New System.IO.DirectoryInfo(dirpath)
                returnedhomemovielist = HomeMovies.listHomeMovieFiles(dir_info, moviepattern, scraperLog)         'titlename is logged in here
                If returnedhomemovielist.Count > 0 Then
                    For Each newhomemovie In returnedhomemovielist
                        Dim existsincache As Boolean = False
                        Dim pathOnly As String = IO.Path.GetDirectoryName(newhomemovie.FullPathAndFilename) & "\"
                        Dim nfopath As String = pathOnly & IO.Path.GetFileNameWithoutExtension(newhomemovie.FullPathAndFilename) & ".nfo"
                        If IO.File.Exists(nfopath) Then
                            Try
                                Dim newexistingmovie As New HomeMovieDetails
                                newexistingmovie = nfoFunction.nfoLoadHomeMovie(nfopath)
                                Dim newexistingbasichomemovie As New str_BasicHomeMovie
                                newexistingbasichomemovie.FullPathAndFilename = newexistingmovie.fileinfo.fullpathandfilename
                                newexistingbasichomemovie.Title = newexistingmovie.fullmoviebody.title

                                homemovielist.Add(newexistingbasichomemovie)
                                ListBox18.Items.Add(New ValueDescriptionPair(newexistingbasichomemovie.FullPathAndFilename, newexistingbasichomemovie.Title))
                            Catch ex As Exception

                            End Try
                        Else
                            newHomeMovieList.Add(newhomemovie)
                        End If

                    Next
                End If
            Next
        Next

        ToolStripStatusLabel9.Text = newHomeMovieList.Count.ToString & " New Home Movies Found"
        Dim counter As Integer = 1
        For Each item In newHomeMovieList
            ToolStripStatusLabel9.Text = "Adding Home Movie " & counter & " of " & newHomeMovieList.Count
            Me.Refresh()
            Application.DoEvents()
            If item.FullPathAndFilename <> "" Then
                Dim newhomemovie As New str_BasicHomeMovie
                newhomemovie.FullPathAndFilename = item.FullPathAndFilename
                newhomemovie.Title = item.Title

                Dim fulldetails As New HomeMovieDetails
                fulldetails.fullmoviebody.title = newhomemovie.Title

                'Get year for home movie using modified time since more accurate (Creation date is reset if a file is copied)
                Dim fileCreatedDate As DateTime = File.GetLastWriteTime(item.FullPathAndFilename)
                Dim format As String = "yyyy"
                Dim yearstring As String = fileCreatedDate.ToString(format)
                fulldetails.fullmoviebody.year = yearstring

                'create fanart for home movie if it does not exist
                Dim thumbpathandfilename As String = Preferences.GetFanartPath(item.FullPathAndFilename)
                If Not IO.File.Exists(thumbpathandfilename) Then
                    Try
                        Dim seconds As Integer = 10
                        Dim myProcess As Process = New Process
                        myProcess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden
                        myProcess.StartInfo.CreateNoWindow = False
                        myProcess.StartInfo.FileName = Preferences.applicationPath & "\Assets\ffmpeg.exe"
                        Dim proc_arguments As String = "-y -i """ & item.FullPathAndFilename & """ -f mjpeg -ss " & seconds.ToString & " -vframes 1 -an " & """" & thumbpathandfilename & """"
                        myProcess.StartInfo.Arguments = proc_arguments
                        myProcess.Start()
                        myProcess.WaitForExit()

                    Catch ex As Exception

                    End Try



                End If

                Dim nfofilename As String = ""
                Dim extension As String = ""
                fulldetails.fullmoviebody.movieset = "Home Movie"
                fulldetails.fileinfo.fullpathandfilename = newhomemovie.FullPathAndFilename
                fulldetails.filedetails = Preferences.Get_HdTags(fulldetails.fileinfo.fullpathandfilename)
                Dim pathOnly As String = IO.Path.GetDirectoryName(fulldetails.fileinfo.fullpathandfilename) & "\"
                Dim nfopath As String = pathOnly & IO.Path.GetFileNameWithoutExtension(fulldetails.fileinfo.fullpathandfilename) & ".nfo"
                newhomemovie.FullPathAndFilename = nfopath
                nfoFunction.nfoSaveHomeMovie(nfopath, fulldetails)
                homemovielist.Add(newhomemovie)
                ListBox18.Items.Add(New ValueDescriptionPair(newhomemovie.FullPathAndFilename, newhomemovie.Title))
            End If
            counter += 1
            progress = ((100 / newHomeMovieList.Count) * (counter))
            If progress > 100 Then progress = 100
            ToolStripProgressBar8.Value = progress
        Next
        ToolStripProgressBar8.Visible = False
        ToolStripStatusLabel9.Visible = False
    End Sub

    Private Sub HomeMovieCacheSave()
        Dim fullpath As String = workingProfile.HomeMovieCache
        If homemovielist.Count > 0 And homemoviefolders.Count > 0 Then

            If IO.File.Exists(fullpath) Then
                Dim don As Boolean = False
                Dim count As Integer = 0
                Do
                    Try
                        If IO.File.Exists(fullpath) Then
                            IO.File.Delete(fullpath)
                            don = True
                        Else
                            don = True
                        End If
                    Catch ex As Exception
#If SilentErrorScream Then
                    Throw ex
#End If
                    Finally
                        count += 1
                    End Try
                Loop Until don = True

            End If

            frmSplash2.Label1.Text = "Creating Home Movie Cache xml....."
            frmSplash2.Label2.Visible = False
            frmSplash2.ProgressBar1.Visible = False

            Dim doc As New XmlDocument

            Dim thispref As XmlNode = Nothing
            Dim xmlproc As XmlDeclaration

            xmlproc = doc.CreateXmlDeclaration("1.0", "UTF-8", "yes")
            doc.AppendChild(xmlproc)
            Dim root As XmlElement
            Dim child As XmlElement
            root = doc.CreateElement("homemovie_cache")
            Dim childchild As XmlElement

            Dim count2 As Integer = 0
            frmSplash2.Label2.Text = "Creating cache xml...."
            For Each movie In homemovielist

                child = doc.CreateElement("movie")
                childchild = doc.CreateElement("fullpathandfilename")
                childchild.InnerText = movie.FullPathAndFilename
                child.AppendChild(childchild)

                childchild = doc.CreateElement("title")
                childchild.InnerText = movie.Title
                child.AppendChild(childchild)
                root.AppendChild(child)
            Next

            doc.AppendChild(root)
            For f = 1 To 100
                Try
                    frmSplash2.Label2.Text = "Saving cache xml...." & f
                    Dim output As New XmlTextWriter(fullpath, System.Text.Encoding.UTF8)
                    output.Formatting = Formatting.Indented
                    doc.WriteTo(output)
                    output.Close()
                    Exit For
                Catch ex As Exception
#If SilentErrorScream Then
                Throw ex
#End If
                End Try
            Next
        Else
            Try
                If IO.File.Exists(fullpath) Then
                    IO.File.Delete(fullpath)
                End If
            Catch 
            End Try
        End If
    End Sub

    Private Sub homemovieCacheLoad()
        homemovielist.Clear()

        Dim movielist As New XmlDocument
        Dim objReader As New System.IO.StreamReader(workingProfile.HomeMovieCache)
        Dim tempstring As String = objReader.ReadToEnd
        objReader.Close()



        movielist.LoadXml(tempstring)
        Dim thisresult As XmlNode = Nothing
        For Each thisresult In movielist("homemovie_cache")
            Select Case thisresult.Name
                Case "movie"
                    Dim newmovie As New str_BasicHomeMovie(SetDefaults)
                    Dim detail As XmlNode = Nothing
                    For Each detail In thisresult.ChildNodes
                        Select Case detail.Name
                            'workingmovie.missingdata1

                            Case "fullpathandfilename"
                                newmovie.FullPathAndFilename = detail.InnerText
                            Case "title"
                                newmovie.Title = detail.InnerText
                        End Select
                    Next
                    homemovielist.Add(newmovie)
            End Select
        Next

        Call loadhomemovielist()
        Try
            ListBox18.SelectedIndex = 0
        Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
        End Try
    End Sub

    Private Sub loadhomemovielist()
        ListBox18.Items.Clear()
        For Each item In homemovielist
            ListBox18.Items.Add(New ValueDescriptionPair(item.FullPathAndFilename, item.Title))
        Next
    End Sub

    Private Sub ListBox18_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles ListBox18.DoubleClick
        mov_Play("HomeMovie")
    End Sub

    Private Sub ListBox18_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles ListBox18.MouseDown

    End Sub

    Private Sub ListBox18_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles ListBox18.MouseUp
        Try
            Dim ptIndex As Integer = ListBox18.IndexFromPoint(e.X, e.Y)
            If e.Button = MouseButtons.Right AndAlso ptIndex > -1 AndAlso ListBox18.SelectedItems.Count > 0 Then
                Dim newSelection As Boolean = True
                'If more than one movie is selected, check if right-click is on the selection.
                If ListBox18.SelectedItems.Count > 1 And ListBox18.GetSelected(ptIndex) Then
                    newSelection = False
                End If
                'Otherwise, bring up the context menu for a single movie


                If newSelection Then
                    'ListBox18.SelectedItems.Clear()
                    ListBox18.SelectedIndex = ptIndex
                    'update context menu with movie name & also if we show the 'Play Trailer' menu item
                    PlaceHolderforHomeMovieTitleToolStripMenuItem.BackColor = Color.Honeydew
                    PlaceHolderforHomeMovieTitleToolStripMenuItem.Text = "'" & ListBox18.Text & "'"
                    PlaceHolderforHomeMovieTitleToolStripMenuItem.Font = New Font("Arial", 10, FontStyle.Bold)
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub


    Private Sub ListBox18_SelectedValueChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles ListBox18.SelectedValueChanged
        Try
            For Each homemovie In homemovielist
                If homemovie.FullPathAndFilename Is CType(ListBox18.SelectedItem, ValueDescriptionPair).Value Then
                    WorkingHomeMovie.fileinfo.fullpathandfilename = CType(ListBox18.SelectedItem, ValueDescriptionPair).Value
                    Call loadhomemoviedetails()
                End If
            Next
        Catch
            'Catch  : Invalid NFO path
            'Action : Tell user to rebuild the home movie cache
            'MessageBox.Show("Select 'Home Movies - Rebuild Home Movies Cache' to update cached folder names & remove invalid entries.", "Home movie folder\sub-folder changed?", MessageBoxButtons.OK, MessageBoxIcon.Error) 
        End Try

    End Sub

    Private Sub loadhomemoviedetails()
        HmMovTitle.Text = ""
        HmMovSort.Text = ""
        HmMovYear.Text = ""
        HmMovPlot.Text = ""
        HmMovStars.Text = ""
        PictureBox4.Image = Nothing
        WorkingHomeMovie = nfoFunction.nfoLoadHomeMovie(WorkingHomeMovie.fileinfo.fullpathandfilename)
        WorkingHomeMovie.fileinfo.fanartpath = Preferences.GetFanartPath(WorkingHomeMovie.fileinfo.fullpathandfilename)
        HmMovTitle.Text = WorkingHomeMovie.fullmoviebody.title
        HmMovSort.Text = WorkingHomeMovie.fullmoviebody.sortorder
        HmMovPlot.Text = WorkingHomeMovie.fullmoviebody.plot
        HmMovStars.Text = WorkingHomeMovie.fullmoviebody.stars
        HmMovYear.Text = WorkingHomeMovie.fullmoviebody.year
        PlaceHolderforHomeMovieTitleToolStripMenuItem.Text = WorkingHomeMovie.fullmoviebody.title
        PlaceHolderforHomeMovieTitleToolStripMenuItem.BackColor = Color.Honeydew
        PlaceHolderforHomeMovieTitleToolStripMenuItem.Font = New Font("Arial", 10, FontStyle.Bold)
        If IO.File.Exists(WorkingHomeMovie.fileinfo.fanartpath) Then
            util_ImageLoad(PictureBox4, WorkingHomeMovie.fileinfo.fanartpath, Utilities.DefaultFanartPath)
        End If
    End Sub


    Private Sub btnSaveHomeMovie_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSaveHomeMovie.Click
        If HmMovTitle.Text <> "" Then
            WorkingHomeMovie.fullmoviebody.title = HmMovTitle.Text
        End If
        If HmMovSort.Text <> "" Then
            WorkingHomeMovie.fullmoviebody.sortorder = HmMovSort.Text
        End If
        WorkingHomeMovie.fullmoviebody.year = HmMovYear.Text
        WorkingHomeMovie.fullmoviebody.plot = HmMovPlot.Text
        WorkingHomeMovie.fullmoviebody.stars = HmMovStars.Text
        nfoFunction.nfoSaveHomeMovie(WorkingHomeMovie.fileinfo.fullpathandfilename, WorkingHomeMovie)
    End Sub



    Private Sub AddHomeFolderBtn_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles AddHomeFolderBtn.Click
        Try
            Dim allok As Boolean = True
            Dim theFolderBrowser As New FolderBrowserDialog
            Dim thefoldernames As String
            theFolderBrowser.Description = "Please Select Folder to Add to DB (Subfolders will also be added)"
            theFolderBrowser.ShowNewFolderButton = True
            theFolderBrowser.RootFolder = System.Environment.SpecialFolder.Desktop
            theFolderBrowser.SelectedPath = Preferences.lastpath
            If theFolderBrowser.ShowDialog = Windows.Forms.DialogResult.OK Then
                thefoldernames = (theFolderBrowser.SelectedPath)
                Preferences.lastpath = thefoldernames
                For Each item As Object In ListBox19.Items
                    If thefoldernames.ToString = item.ToString Then allok = False
                Next

                If allok = True Then
                    ListBox19.Items.Add(thefoldernames)
                    ListBox19.Refresh()
                    Preferences.homemoviefolders.Clear()
                    For Each item In ListBox19.Items
                        Preferences.homemoviefolders.Add(item)
                    Next
                    Call SaveConfig()
                Else
                    MsgBox("        Folder Already Exists")
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub RemoveHomeFoldersBtn_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RemoveHomeFoldersBtn.Click
        Try
            While ListBox19.SelectedItems.Count > 0
                ListBox19.Items.Remove(ListBox19.SelectedItems(0))
            End While
            Preferences.homemoviefolders.Clear()
            For Each item In ListBox19.Items
                Preferences.homemoviefolders.Add(item)
            Next
            Call SaveConfig()
            Call rebuildHomeMovies()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub



    Private Sub Mov_ToolStripRemoveMovie_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Mov_ToolStripRemoveMovie.Click

        For Each row As DataGridViewRow In DataGridViewMovies.SelectedRows

            oMovies.RemoveMovieFromCache(row.Cells("fullpathandfilename").Value.ToString)

            DataGridViewMovies.Rows.RemoveAt(row.Index)
        Next

        DataGridViewMovies.ClearSelection
        oMovies.SaveMovieCache

        Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)

        Application.DoEvents
        DisplayMovie
    End Sub

    Private Sub Mov_ToolStripRenameMovie_click(sender As Object, e As EventArgs) Handles Mov_ToolStripRenameMovie.Click
        Dim ismovrenenabled As Boolean = Preferences.MovieRenameEnable
        Dim isusefolder As Boolean = Preferences.usefoldernames 
        If Preferences.MovieManualRename Then
            Preferences.MovieRenameEnable = True
            Preferences.usefoldernames = False
            mov_ScrapeSpecific("rename_files")
            While BckWrkScnMovies.IsBusy 
                Application.DoEvents
            End While
        Else
            MsgBox("Manual Movie Rename is not enabled", 0)
        End If
        Preferences.MovieRenameEnable = ismovrenenabled
        Preferences.usefoldernames = isusefolder
    End Sub

    Private Sub TabControl1_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles TabControl1.SelectedIndexChanged

        If Preferences.homemoviefolders.Count = 0 And homemovielist.Count = 0 And TabControl1.SelectedIndex <> 4 Then
            MsgBox("Please add A Folder containing Home Movies")
            Try
                TabControl1.SelectedIndex = 4
            Catch
            End Try
            homeTabIndex = 1
            Exit Sub
        End If

        Dim tab As String = TabControl1.SelectedTab.Text.ToLower
        If tab = "search for new home movies" Then
            TabControl1.SelectedIndex = homeTabIndex
            Call homeMovieScan()
        ElseIf tab="refresh list" Then
            TabControl1.SelectedIndex = homeTabIndex
            Call rebuildHomeMovies()
        ElseIf tab = "screenshot" Then
            If IO.File.Exists(WorkingHomeMovie.fileinfo.fanartpath) Then
                Try
                    Dim bitmap2 As New Bitmap(WorkingHomeMovie.fileinfo.fanartpath)
                    Dim bitmap3 As New Bitmap(bitmap2)
                    bitmap2.Dispose()
                    PictureBox5.Image = bitmap3
                Catch
                    PictureBox5.Image = Nothing
                End Try
            Else
                PictureBox5.Image = Nothing
            End If
            homeTabIndex = TabControl1.SelectedIndex
        Else
            homeTabIndex = TabControl1.SelectedIndex
        End If




    End Sub

    Private Sub RebuildHomeMovieCacheToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RebuildHomeMovieCacheToolStripMenuItem.Click
        Call rebuildHomeMovies()
    End Sub

    Private Sub homeMovie_ScreenShotBtn_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles homeMovie_ScreenShotBtn.Click
        Try

            If IsNumeric(homeMovieScreenShotTimeTxtBx.Text) Then
                Dim thumbpathandfilename As String = WorkingHomeMovie.fileinfo.fullpathandfilename.Replace(IO.Path.GetExtension(WorkingHomeMovie.fileinfo.fullpathandfilename), "-fanart.jpg")
                Dim pathandfilename As String = WorkingHomeMovie.fileinfo.fullpathandfilename.Replace(IO.Path.GetExtension(WorkingHomeMovie.fileinfo.fullpathandfilename), "")
                Dim messbox As frmMessageBox = New frmMessageBox("ffmpeg is working to capture the desired screenshot", "", "Please Wait")
                Dim exists As Boolean = False
                For Each ext In Utilities.VideoExtensions
                    Dim tempstring2 As String
                    tempstring2 = pathandfilename & ext
                    If IO.File.Exists(tempstring2) Then
                        Dim seconds As Integer = 10
                        If Convert.ToInt32(homeMovieScreenShotTimeTxtBx.Text) > 0 Then
                            seconds = Convert.ToInt32(homeMovieScreenShotTimeTxtBx.Text)
                        End If

                        If IO.File.Exists(thumbpathandfilename) Then
                            PictureBox5.Image = Nothing
                            PictureBox4.Image = Nothing
                            IO.File.Delete(thumbpathandfilename)
                        End If

                        System.Windows.Forms.Cursor.Current = Cursors.WaitCursor
                        messbox.Show()
                        messbox.Refresh()
                        Application.DoEvents()


                        Dim myProcess As Process = New Process
                        myProcess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden
                        myProcess.StartInfo.CreateNoWindow = False
                        myProcess.StartInfo.FileName = applicationPath & "\Assets\ffmpeg.exe"
                        Dim proc_arguments As String = "-y -i """ & tempstring2 & """ -f mjpeg -ss " & seconds.ToString & " -vframes 1 -an " & """" & thumbpathandfilename & """"
                        myProcess.StartInfo.Arguments = proc_arguments
                        myProcess.Start()
                        myProcess.WaitForExit()


                        If System.IO.File.Exists(thumbpathandfilename) Then
                            Try
                                Dim bitmap2 As New Bitmap(thumbpathandfilename)
                                Dim bitmap3 As New Bitmap(bitmap2)
                                bitmap2.Dispose()
                                PictureBox5.Image = bitmap3
                                PictureBox4.Image = bitmap3
                            Catch
                                messbox.Close()
                            End Try
                        End If
                        Exit For
                    End If
                Next
                messbox.Close()
            Else
                MsgBox("Please enter a numerical value into the textbox")
                homeMovieScreenShotTimeTxtBx.Focus()
                Exit Sub
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub PlayHomeMovieToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PlayHomeMovieToolStripMenuItem.Click
        mov_Play("HomeMovie")
    End Sub

    Private Sub OpenFolderToolStripMenuItem_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OpenFolderToolStripMenuItem.Click
        Try
            'Try
            If Not WorkingHomeMovie.fileinfo.fullpathandfilename Is Nothing Then
                Call util_OpenFolder(WorkingHomeMovie.fileinfo.fullpathandfilename)
            Else
                MsgBox("There is no Movie selected to open")
            End If
            'Catch
            'End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub OpenFileToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OpenFileToolStripMenuItem.Click
        Try
            Utilities.NfoNotepadDisplay(WorkingHomeMovie.fileinfo.fullpathandfilename)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub PictureBox4_DoubleClick1(ByVal sender As Object, ByVal e As System.EventArgs) Handles PictureBox4.DoubleClick
        Try
            Try
                If WorkingHomeMovie.fileinfo.fanartpath <> Nothing Then
                    If IO.File.Exists(WorkingHomeMovie.fileinfo.fanartpath) Then
                        Me.ControlBox = False
                        MenuStrip1.Enabled = False
                        Using newimage As New Bitmap(WorkingHomeMovie.fileinfo.fanartpath)
                            util_ZoomImage(newimage)
                        End Using
                    End If
                End If
            Catch ex As Exception
#If SilentErrorScream Then
            Throw ex
#End If
            End Try
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub TabLevel1_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles TabLevel1.SelectedIndexChanged

        Select Case TabLevel1.SelectedTab.Text.ToLower
            Case "general preferences"
                Call util_GeneralPreferencesSetup()
            Case "config.xml"
                RichTextBoxTabConfigXML.Text = Utilities.LoadFullText(workingProfile.config) '   applicationPath & "\settings\config.xml"
            Case "moviecache" 
                RichTextBoxTabMovieCache.Text = Utilities.LoadFullText(workingProfile.moviecache) ' applicationPath & "\settings\moviecache.xml"
            Case = "tvcache" 
                RichTextBoxTabTVCache.Text = Utilities.LoadFullText(workingProfile.tvcache) ' applicationPath & "\settings\tvcache.xml"
            Case = "actorcache" 
                RichTextBoxTabActorCache.Text = Utilities.LoadFullText(workingProfile.actorcache) '  applicationPath & "\settings\actorcache.xml"
            Case = "profile" 
                RichTextBoxTabProfile.Text = Utilities.LoadFullText(applicationPath & "\settings\profile.xml") '  applicationPath & "\settings\profile.xml"
            Case = "regex" 
                RichTextBoxTabRegex.Text = Utilities.LoadFullText(workingProfile.regexlist) '   applicationPath & "\settings\regex.xml"
        End Select

    End Sub

    Private Sub DataGridViewMovies_MouseUp(ByVal sender As System.Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles DataGridViewMovies.MouseUp
        mov_ToolStripPlayTrailer.Visible = True

        'Try
        'Dim ptIndex As Integer = MovieListComboBox.IndexFromPoint(e.X, e.Y)
        'If e.Button = MouseButtons.Right AndAlso ptIndex > -1 AndAlso MovieListComboBox.SelectedItems.Count > 0 Then
        If e.Button = MouseButtons.Right Then
            Dim multistelect As Boolean = False
            'If more than one movie is selected, check if right-click is on the selection.
            'If MovieListComboBox.SelectedItems.Count > 1 And MovieListComboBox.GetSelected(ptIndex) Then
            If DataGridViewMovies.SelectedRows.Count > 1 Then
                multistelect = True
            End If
            'Otherwise, bring up the context menu for a single movie


            If multistelect = True Then
                mov_ToolStripMovieName.BackColor = Color.Orange
                mov_ToolStripMovieName.Text = "Multisave Mode"
                mov_ToolStripMovieName.Font = New Font("Arial", 10, FontStyle.Bold)
                mov_ToolStripPlayTrailer.Visible = False    'multisave mode the "Play Trailer' is always hidden
            Else

                Try
                    'MovieListComboBox.SelectedItems.Clear()
                    'MovieListComboBox.SelectedIndex = ptIndex
                    'update context menu with movie name & also if we show the 'Play Trailer' menu item
                    mov_ToolStripMovieName.BackColor = Color.Honeydew
                    mov_ToolStripMovieName.Text = "'" & DataGridViewMovies.SelectedCells(6).Value.ToString & "'"
                    mov_ToolStripMovieName.Font = New Font("Arial", 10, FontStyle.Bold)

                    'If System.IO.File.Exists(Utilities.GetTrailerName(CType(MovieListComboBox.SelectedItem, ValueDescriptionPair).Value)) Then

                    'If System.IO.File.Exists(Utilities.GetTrailerName(DataGridViewMovies.SelectedCells(NFO_INDEX).Value.ToString)) Then

                    'Dim movie = oMovies.LoadMovie(DataGridViewMovies.SelectedCells(NFO_INDEX).Value.ToString)

                    'mov_ToolStripPlayTrailer.Visible = movie.TrailerExists

                    Dim movie As Data_GridViewMovie = (From f In oMovies.Data_GridViewMovieCache Where f.fullpathandfilename = DataGridViewMovies.selectedCells(NFO_INDEX).Value.ToString).ToList(0)

                    mov_ToolStripPlayTrailer.Visible = Not movie.MissingTrailer
                Catch
                End Try
            End If
        End If
        'Catch ex As Exception
        '    ExceptionHandler.LogError(ex)
        'End Try
    End Sub

    Private Sub RadioButtonFileName_CheckedChanged_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButtonFileName.CheckedChanged
        HandleMovieList_DisplayChange("FileName")
    End Sub

    Private Sub RadioButtonTitleAndYear_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButtonTitleAndYear.CheckedChanged
        HandleMovieList_DisplayChange("TitleAndYear")
    End Sub

    Private Sub RadioButtonFolder_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadioButtonFolder.CheckedChanged
        HandleMovieList_DisplayChange("Folder")
    End Sub

    Sub HandleMovieList_DisplayChange(DisplayField As String)
        Mc.clsGridViewMovie.GridFieldToDisplay1 = DisplayField

        If RadioButtonTitleAndYear.Checked Then Preferences.moviedefaultlist = 0
        If RadioButtonFileName    .Checked Then Preferences.moviedefaultlist = 1
        If RadioButtonFolder      .Checked Then Preferences.moviedefaultlist = 2

        Mc.clsGridViewMovie.GridviewMovieDesign(Me)
        If MainFormLoadedStatus Then
            DisplayMovie()
        End If
    End Sub

    Private Sub ButtonSaveChangesMoviePreference_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnMoviePrefSaveChanges.Click
        Try
            applyAdvancedLists()

            For Each row As DataGridViewRow In DataGridViewMovies.Rows
                Dim m As Data_GridViewMovie = row.DataBoundItem
                m.ClearStoredCalculatedFields()
            Next

            Assign_MovieFilter(cbFilterSet, oMovies.SetsFilter, SetFilter)
            Assign_FilterActor

            Mc.clsGridViewMovie.SetFirstColumnWidth(DataGridViewMovies)
            Mc.clsGridViewMovie.GridviewMovieDesign(Me)

            Preferences.SaveConfig()

            movieprefschanged = False
            btnMoviePrefSaveChanges.Enabled = False
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub

    Private Sub cbFilterChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cbFilterGeneral.SelectedValueChanged, cbFilterGenre.SelectedValueChanged, cbFilterSource.SelectedValueChanged
        ApplyMovieFilters
    End Sub
     
    Private Sub cbSetFilterChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cbFilterSet.SelectedValueChanged
        HandleMovieFilter_SelectedValueChanged(cbFilterSet,SetFilter)
    End Sub
     
    Private Sub cbFilterResolutionChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cbFilterResolution.SelectedValueChanged
        HandleMovieFilter_SelectedValueChanged(cbFilterResolution,ResolutionFilter,True)
    End Sub

      
    Private Sub cbFilterAudioLanguagesChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cbFilterAudioLanguages.SelectedValueChanged
        HandleMovieFilter_SelectedValueChanged(cbFilterAudioLanguages,AudioLanguagesFilter)
    End Sub

     
    Private Sub cbFilterAudioBitratesChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cbFilterAudioBitrates.SelectedValueChanged
        HandleMovieFilter_SelectedValueChanged(cbFilterAudioBitrates,AudioBitratesFilter)
    End Sub

     
    Private Sub cbFilterAudioChannelsChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cbFilterAudioChannels.SelectedValueChanged
        HandleMovieFilter_SelectedValueChanged(cbFilterAudioChannels,AudioChannelsFilter)
    End Sub

     
    Private Sub cbFilterNumAudioTracksChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cbFilterNumAudioTracks.SelectedValueChanged
        HandleMovieFilter_SelectedValueChanged(cbFilterNumAudioTracks,NumAudioTracksFilter)
    End Sub

     
    Private Sub cbFilterAudioCodecsChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cbFilterAudioCodecs.SelectedValueChanged
        HandleMovieFilter_SelectedValueChanged(cbFilterAudioCodecs,AudioCodecsFilter)
    End Sub
    

    Private Sub cbActorFilterChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cbFilterActor.SelectedValueChanged
        HandleMovieFilter_SelectedValueChanged(cbFilterActor,ActorFilter)
    End Sub

    Private Sub cbFilterRatingChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cbFilterRating.SelectionChanged
        ApplyMovieFilters
    End Sub

    Private Sub cbFilterVotesChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cbFilterVotes.SelectionChanged
        ApplyMovieFilters
    End Sub

    Private Sub cbFilterYearChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cbFilterYear.SelectionChanged
        ApplyMovieFilters
    End Sub


    Private Sub cbFilterBeginSliding(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cbFilterYear.BeginSliding, cbFilterVotes.BeginSliding, cbFilterRating.BeginSliding
        SplitContainer5.Panel2.ContextMenuStrip = Nothing
    End Sub

    Private Sub cbFilterEndSliding(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cbFilterYear.EndSliding, cbFilterVotes.EndSliding, cbFilterRating.EndSliding
        SplitContainer5.Panel2.ContextMenuStrip = cmsConfigureMovieFilters
    End Sub

    Private Sub ApplyMovieFilters
        If State = ProgramState.Other Then
            Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)
            DisplayMovie
        End If
    End Sub

    Sub HandleMovieFilter_SelectedValueChanged(cbFilter As ComboBox, ByRef filterValue As String, Optional replaceUnknown As Boolean = False)
        If State = ProgramState.Other Then

            If cbFilter.Text = "All" Then
                filterValue = ""
            Else
                filterValue = cbFilter.Text.RemoveAfterMatch

                If replaceUnknown Then filterValue = filterValue.Replace("Unknown","-1")
            End If

            ApplyMovieFilters
        End If
    End Sub


    Private Sub DataGridViewMovies_KeyUp(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles DataGridViewMovies.KeyUp
        DisplayMovie(True)
    End Sub

    Private Sub ButtonSearchNew_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ButtonSearchNew.Click
        SearchForNew
    End Sub

    Private Sub ButtonRescrapeMovie_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ButtonRescrapeMovie.Click
        mov_Rescrape()
    End Sub

    Private Sub TimerToolTip_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles TimerToolTip.Tick
        TimerToolTip.Enabled = False
        TooltipGridViewMovies1.Visible = Preferences.ShowMovieGridToolTip
    End Sub

    Private Sub DataGridViewMovies_MouseMove(ByVal sender As System.Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles DataGridViewMovies.MouseMove
        If ToolTipGridMoviePosition.X <> e.X Or ToolTipGridMoviePosition.Y <> e.Y Then
            TooltipGridViewMovies1.Visible = False
            TimerToolTip.Enabled = True
            ToolTipGridMoviePosition.X = e.X
            ToolTipGridMoviePosition.Y = e.Y
        End If


        Try
            Dim objMousePosition As Point = DataGridViewMovies.PointToClient(Control.MousePosition)
            Dim objHitTestInfo As DataGridView.HitTestInfo
            objHitTestInfo = DataGridViewMovies.HitTest(objMousePosition.X, objMousePosition.Y)
            Dim indexunderthemouse As Integer = objHitTestInfo.RowIndex

            Dim Runtime As String = ""
            Dim RatingRuntime As String = ""

            TimerToolTip.Enabled = True
            ToolTipGridMoviePosition.X = objMousePosition.X
            ToolTipGridMoviePosition.Y = objMousePosition.Y


            If indexunderthemouse > -1 Then
                Dim movietitle As String = DataGridViewMovies.Rows(indexunderthemouse).Cells(5).Value.ToString
                Dim movieYear As String = DataGridViewMovies.Rows(indexunderthemouse).Cells(9).Value.ToString
                Dim Rating As String = "Rating: " & DataGridViewMovies.Rows(indexunderthemouse).Cells(12).Value.ToString
                If DataGridViewMovies.Rows(indexunderthemouse).Cells(18).Value.ToString.Length > 3 Then
                    Runtime = "Runtime: " & DataGridViewMovies.Rows(indexunderthemouse).Cells(18).Value.ToString.Substring(0, DataGridViewMovies.Rows(indexunderthemouse).Cells(18).Value.ToString.IndexOf("min") + 3)
                End If
                RatingRuntime = Rating & "     " & Runtime

                Dim Plot As String = DataGridViewMovies.Rows(indexunderthemouse).Cells(17).Value.ToString

                If objHitTestInfo.RowY > -1 Then
                    'TooltipGridViewMovies1.Visible = True
                    TooltipGridViewMovies1.Top = 116
                    'TooltipGridViewMovies1.Left = MousePositionX + 100
                    TooltipGridViewMovies1.Left = 0
                    TooltipGridViewMovies1.Textinfo(Plot)
                    TooltipGridViewMovies1.TextLabelMovieYear(movieYear)
                    TooltipGridViewMovies1.TextMovieName(movietitle)
                    TooltipGridViewMovies1.TextLabelRatingRuntime(RatingRuntime)
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try

    End Sub

    Private Sub DataGridViewMovies_MouseLeave(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DataGridViewMovies.MouseLeave
        TooltipGridViewMovies1.Visible = False
        TimerToolTip.Enabled = False
    End Sub

    Private Sub DataGridViewMovies_MouseHover(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DataGridViewMovies.MouseHover
        TimerToolTip.Start()
    End Sub

#Region "Movie scraping stuff"


    Sub RunBackgroundMovieScrape(action As String)

        If Not BckWrkScnMovies.IsBusy Then
            scraperLog = ""
            tsStatusLabel.Text = ""
            tsMultiMovieProgressBar.Value = tsMultiMovieProgressBar.Minimum
            tsMultiMovieProgressBar.Visible = Get_MultiMovieProgressBar_Visiblity(action)
            ScraperStatusStrip.Visible = True
            ssFileDownload.Visible = False
            tsProgressBarFileDownload_Resize()
            EnableDisableByTag("M", False)       'Disable all UI options that can't be run while scraper is running   
            ScraperErrorDetected = False

            BckWrkScnMovies.RunWorkerAsync(action)
        Else
            MsgBox("The Movie Scraper is Already Running")
        End If
    End Sub


    Sub EnableDisableByTag(tagQualifier As String, state As Boolean)

        If IsNothing(ControlsToDisableDuringMovieScrape) Then
            ControlsToDisableDuringMovieScrape = (From c As Control In GetAllMatchingControls("M")).ToList
        End If

        For Each c In ControlsToDisableDuringMovieScrape
            c.Enabled = state
        Next

        'Not picked up for some unknown reason...
        MoviesToolStripMenuItem.Enabled = state
    End Sub


    Function GetAllMatchingControls(tagQualifier As String) As List(Of Control)

        Dim allControls As New List(Of Control)

        GetAllMatchingControls(tagQualifier, Me, allControls)

        Return allControls
    End Function


    Sub GetAllMatchingControls(tagQualifier As String, parent As Control, allControls As List(Of Control))

        Dim query = From c As Control In parent.Controls 'Where Not IsNothing(c) AndAlso Not IsNothing(c.Tag) AndAlso TypeName(c.Tag).ToLower="string" AndAlso c.tag=tagQualifier

        For Each c As Control In query

            Try
                If Not IsNothing(c) AndAlso Not IsNothing(c.Tag) AndAlso TypeName(c.Tag).ToLower = "string" AndAlso c.Tag = tagQualifier Then
                    allControls.Add(c)
                End If
            Catch ex As Exception
            End Try

            GetAllMatchingControls(tagQualifier, c, allControls)
        Next

    End Sub


    Function Get_MultiMovieProgressBar_Visiblity(action As String)

        Select Case action
            Case "BatchRescrape"          : Return _rescrapeList.FullPathAndFilenames.Count>1               ' filteredList.Count > 1
            Case "ChangeMovie"            : Return False
            Case "RescrapeAll"            : Return _rescrapeList.FullPathAndFilenames.Count>1
            Case "RescrapeDisplayedMovie" : Return False
            Case "RescrapeSpecific"       : Return _rescrapeList.FullPathAndFilenames.Count>1
            Case "ScrapeDroppedFiles"     : Return droppedItems.Count>1
            Case "SearchForNewMovies"     : Return True
            Case "RebuildCaches"          : Return True
        End Select

        MsgBox("Unrecognised scrape action : [" + action + "]!", MsgBoxStyle.Exclamation, "Programming Error!")
        Return False
    End Function


    Private Sub mov_BckWrkScnMovies_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles BckWrkScnMovies.DoWork
        Try
            CallSubByName(DirectCast(e.Argument, String))

        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub


    Public Sub CallSubByName(SubName As String)
        Me.GetType.GetMethod(SubName).Invoke(Me, Nothing)
    End Sub


    Public Sub BatchRescrape()
        oMovies.BatchRescrapeSpecific(_rescrapeList.FullPathAndFilenames, rescrapeList)    'filteredList
    End Sub


    Public Sub ChangeMovie
        oMovies.ChangeMovie(workingMovieDetails.fileinfo.fullpathandfilename, ChangeMovieImdb)
    End Sub


    Public Sub RescrapeAll
        oMovies.RescrapeAll(_rescrapeList.FullPathAndFilenames)
    End Sub


    Public Sub RebuildCaches
        oMovies.RebuildCaches
    End Sub


    Public Sub RescrapeDisplayedMovie
        oMovies.RescrapeMovie(workingMovieDetails.fileinfo.fullpathandfilename)
        oMovies.SaveCaches
    End Sub


    Public Sub RescrapeSpecific
        oMovies.RescrapeSpecific(_rescrapeList)
    End Sub


    Public Sub ScrapeDroppedFiles
        oMovies.ScrapeFiles(droppedItems)
    End Sub


    Public Sub SearchForNewMovies
        oMovies.FindNewMovies
    End Sub


    Private Sub UpdateFilteredList

        State = ProgramState.UpdatingFilteredList

        Dim lastSelectedMovie = workingMovie.fullpathandfilename

        filteredList.Clear
        filteredList.AddRange(oMovies.MovieCache)

        Assign_FilterGeneral
        Assign_FilterActor
        Assign_MovieFilter( cbFilterResolution     , oMovies.ResolutionFilter     , ResolutionFilter.Replace("-1","Unknown") )
        Assign_MovieFilter( cbFilterGenre          , oMovies.Genres               , cbFilterGenre.Text   )
        Assign_MovieFilter( cbFilterSet            , oMovies.SetsFilter           , SetFilter            )
        Assign_MovieFilter( cbFilterAudioLanguages , oMovies.AudioLanguagesFilter , AudioLanguagesFilter )
        Assign_MovieFilter( cbFilterAudioChannels  , oMovies.AudioChannelsFilter  , AudioChannelsFilter  )
        Assign_MovieFilter( cbFilterAudioBitrates  , oMovies.AudioBitratesFilter  , AudioBitratesFilter  )
        Assign_MovieFilter( cbFilterAudioCodecs    , oMovies.AudioCodecsFilter    , AudioCodecsFilter    )
        Assign_MovieFilter( cbFilterNumAudioTracks , oMovies.NumAudioTracks       , NumAudioTracksFilter )
        UpdateMinMaxMovieFilters

        Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)

        Try
            For Each row As DataGridViewRow In DataGridViewMovies.Rows
                row.Selected = (row.Cells("fullpathandfilename").Value.ToString = lastSelectedMovie)
            Next
        Catch
        End Try
        
        If DataGridViewMovies.SelectedRows.Count=0 And DataGridViewMovies.Rows.Count>1 Then
            DataGridViewMovies.Rows(0).Selected=True
        End If

 '       mov_FormPopulate()
        DisplayMovie()

        State = ProgramState.Other
    End Sub


'    Sub Assign_FilterGenre
        'Dim selected = cbFilterGenre.Text

        'cbFilterGenre.Items.Clear
        'cbFilterGenre.Items.Add("All")
        'For Each item In oMovies.Genres
        '    cbFilterGenre.Items.Add(item)
        'Next

        'If cbFilterGenre.Text = "" Then cbFilterGenre.Text = "All"

        'If selected<>"" Then
        '    For Each item As String In cbFilterGenre.Items
        '        If item.RemoveAfterMatch=selected.RemoveAfterMatch Then
        '            cbFilterGenre.SelectedItem=item    
        '            Exit For
        '        End If
        '    Next
        'End If
'    End Sub


    Sub Assign_FilterActor
        cbFilterActor.Items.Clear
        cbFilterActor.Items.Add("All")
        For Each item In oMovies.ActorsFilter
            cbFilterActor.Items.Add(item)
        Next
        If cbFilterActor.Text = "" Then cbFilterActor.Text = "All"

        If ActorFilter<>"" Then
            For Each item As String In cbFilterActor.Items
                If item.IndexOf(ActorFilter & " (")=0 Then
                    cbFilterActor.SelectedItem=item
                    Exit For
                End If
            Next
        End If
    End Sub


    Sub Assign_FilterGeneral
        Dim selected = cbFilterGeneral.Text

        cbFilterGeneral.Items.Clear
        cbFilterGeneral.Items.AddRange( oMovies.GeneralFilters.ToArray )

        If cbFilterGeneral.Text = "" Then cbFilterGeneral.Text = "All"

        If selected<>"" Then
            For Each item As String In cbFilterGeneral.Items
                If item.RemoveAfterMatch=selected.RemoveAfterMatch Then
                    cbFilterGeneral.SelectedItem=item    
                    Exit For
                End If
            Next
        End If
    End Sub


    Sub Assign_MovieFilter(cb As ComboBox, items As List(Of String), filterValue As String)
        cb.Items.Clear
        cb.Items.Add("All")
        cb.Items.AddRange(items.ToArray)

        'For Each item In items
        '    cb.Items.Add(item)
        'Next

        If cb.Text = "" Then cb.Text = "All"

        If filterValue<>"" Then
            Dim found As Boolean=False
            For Each item As String In cb.Items
                If item.IndexOf(filterValue & " (")=0 Then    
                    cb.SelectedItem=item    
                    found=True
                    Exit For
                End If
            Next

            If Not found Then filterValue=""
        End If
    End Sub



    Private Sub scraper_ProgressChanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles BckWrkScnMovies.ProgressChanged

        Dim oProgress As Progress = CType(e.UserState, Progress)

        If e.ProgressPercentage <> -1 Then
            tsMultiMovieProgressBar.Value = e.ProgressPercentage
        End If

        If oProgress.Command = Progress.Commands.Append Then
            tsStatusLabel.Text &= oProgress.Message
        Else
            tsStatusLabel.Text = oProgress.Message
        End If

        If oProgress.Message = Movie.MSG_ERROR then
            ScraperErrorDetected = True
        End If

        scraperLog += oProgress.Log
    End Sub


    Private Sub XBMC_ProgressChanged(ByVal e As System.ComponentModel.ProgressChangedEventArgs)
        If Not scrapeAndQuit Then
            If e.ProgressPercentage <> 999999 Then
                ToolStripStatusLabel1.Text = e.UserState
            Else
                Mc.clsGridViewMovie.mov_FiltersAndSortApply(Me)
            End If
        End If
    End Sub


    Private Sub scraper_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles BckWrkScnMovies.RunWorkerCompleted

        LastMovieDisplayed=""   'Force currently displayed movie details to be re-displayed 
        UpdateFilteredList()

        ScraperStatusStrip.Visible = False
        ssFileDownload.Visible = False
        EnableDisableByTag("M", True)       'Re-enable disabled UI options that couldn't be run while scraper was running

        DisplayLogFile()

        'TabPage14.Text = "Search for new movies"
        'TabPage14.ToolTipText = "Scan movie folders for new media files"
    End Sub


    Sub FileDownload_SizeObtained(ByVal iFileSize As Long) Handles oMovies.FileDownloadSizeObtained

        Callback_ShowHideFileDownloadProgressBar(True, iFileSize)

    End Sub

    Private Sub FileDownload_AmountDownloadedChanged(ByVal iTotalBytesRead As Long) Handles oMovies.AmountDownloadedChanged
        Me.Invoke(CType(Sub() Safe_FileDownload_AmountDownloadedChanged(iTotalBytesRead), MethodInvoker))
    End Sub


    Private Sub FileDownload_FileDownloadComplete() Handles oMovies.FileDownloadComplete
        Callback_ShowHideFileDownloadProgressBar(False, -1)
    End Sub


    Private Sub FileDownload_FileDownloadFailed() Handles oMovies.FileDownloadFailed
        Callback_ShowHideFileDownloadProgressBar(False, -1)
    End Sub


    'Initiate callback from main UI thread
    Sub Callback_ShowHideFileDownloadProgressBar(ByVal bool As Boolean, iFileSize As Long)

        Me.Invoke(CType(Sub() ShowHideFileDownloadProgressBar(bool, iFileSize), MethodInvoker))
    End Sub


    Sub ShowHideFileDownloadProgressBar(ByVal bool As Boolean, iFileSize As Long)
        ssFileDownload.Visible = bool
        If bool Then tsProgressBarFileDownload.Maximum = iFileSize
    End Sub


    Sub Safe_FileDownload_AmountDownloadedChanged(ByVal iTotalBytesRead As Long)
        tsProgressBarFileDownload.Value = iTotalBytesRead
    End Sub


    Private Sub Form1_KeyDown(sender As System.Object, e As System.Windows.Forms.KeyEventArgs) Handles MyBase.KeyDown
        If               e.KeyCode=Keys.Escape Then BckWrkScnMovies_Cancel
        If e.Control And e.KeyCode=Keys.C      Then AbortFileDownload
    End Sub


    Private Sub tsLabelEscCancel_Click(sender As System.Object, e As System.EventArgs) Handles tsLabelEscCancel.Click
        BckWrkScnMovies_Cancel()
    End Sub


    Sub BckWrkScnMovies_Cancel
        If BckWrkScnMovies.IsBusy Then
            tsStatusLabel.Text = "* Cancelling... *"
            BckWrkScnMovies.CancelAsync()
        End If
    End Sub

    Sub AbortFileDownload
        tsStatusLabel.Text = "* Aborting trailer download... *"
        Monitor.Enter(countLock)
        blnAbortFileDownload = True
        Monitor.Exit(countLock)
    End Sub

    Private Sub ssFileDownload_Resize(sender As System.Object, e As System.EventArgs) Handles ssFileDownload.Resize
        tsProgressBarFileDownload_Resize()
    End Sub


    Private Sub tsProgressBarFileDownload_Resize()
        tsProgressBarFileDownload.Width = ssFileDownload.Width - tsFileDownloadlabel.Width - 8
    End Sub


#End Region 'Movie scraping stuff

#Region "General 2 - Movie Preferences tab"

    'Private Sub tcMoviePreferences_Selecting( sender As System.Object,  e As System.Windows.Forms.TabControlCancelEventArgs) Handles tcMoviePreferences.Selecting
    '        Dim retainPrefState As Boolean = movieprefschanged
    '        TMDbControlsIni()
    '        movieprefschanged = retainPrefState
    '        btnMoviePrefSaveChanges.Enabled = retainPrefState
    '    End Sub


    Private Sub TMDbControlsIni()
        TMDb.LoadLanguages(comboBoxTMDbSelectedLanguage)

        comboBoxTMDbSelectedLanguage.Text = Preferences.TMDbSelectedLanguageName
        cbUseCustomLanguage.Checked = Preferences.TMDbUseCustomLanguage
        tbCustomLanguageValue.Text = Preferences.TMDbCustomLanguageValue

        Movie.LoadBackDropResolutionOptions(comboBackDropResolutions, Preferences.BackDropResolutionSI) 'SI = Selected Index
        Movie.LoadHeightResolutionOptions(comboPosterResolutions, Preferences.PosterResolutionSI)
        Movie.LoadHeightResolutionOptions(comboActorResolutions, Preferences.ActorResolutionSI)

        cbGetMovieSetFromTMDb.Checked = Preferences.GetMovieSetFromTMDb

        SetLanguageControlsState()
    End Sub



    Private Sub SetLanguageControlsState()
        comboBoxTMDbSelectedLanguage.Enabled = Not cbUseCustomLanguage.Checked
        gbCustomLanguage.Enabled = cbUseCustomLanguage.Checked
    End Sub

    Private Sub comboBoxTMDbSelectedLanguage_SelectedValueChanged(sender As System.Object, e As System.EventArgs) Handles comboBoxTMDbSelectedLanguage.SelectedValueChanged
        Preferences.TMDbSelectedLanguageName = comboBoxTMDbSelectedLanguage.Text
        movieprefschanged = True
        btnMoviePrefSaveChanges.Enabled = True
    End Sub

    Private Sub cbUseCustomLanguage_Click(sender As System.Object, e As System.EventArgs) Handles cbUseCustomLanguage.Click
        Preferences.TMDbUseCustomLanguage = cbUseCustomLanguage.Checked
        SetLanguageControlsState()
        movieprefschanged = True
        btnMoviePrefSaveChanges.Enabled = True
    End Sub

    Private Sub tbCustomLanguageValue_TextChanged(sender As System.Object, e As System.EventArgs) Handles tbCustomLanguageValue.TextChanged
        Preferences.TMDbCustomLanguageValue = tbCustomLanguageValue.Text
        movieprefschanged = True
        btnMoviePrefSaveChanges.Enabled = True
    End Sub

    Private Sub comboActorResolutions_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles comboActorResolutions.SelectedIndexChanged
        Preferences.ActorResolutionSI = comboActorResolutions.SelectedIndex
        movieprefschanged = True
        btnMoviePrefSaveChanges.Enabled = True
    End Sub

    Private Sub comboPosterResolutions_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles comboPosterResolutions.SelectedIndexChanged
        Preferences.PosterResolutionSI = comboPosterResolutions.SelectedIndex
        movieprefschanged = True
        btnMoviePrefSaveChanges.Enabled = True
    End Sub

    Private Sub comboBackDropResolutions_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles comboBackDropResolutions.SelectedIndexChanged
        Preferences.BackDropResolutionSI = comboBackDropResolutions.SelectedIndex
        movieprefschanged = True
        btnMoviePrefSaveChanges.Enabled = True
    End Sub

    Private Sub cbGetMovieSetFromTMDb_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles cbGetMovieSetFromTMDb.CheckedChanged
        Preferences.GetMovieSetFromTMDb = cbGetMovieSetFromTMDb.Checked
        movieprefschanged = True
        btnMoviePrefSaveChanges.Enabled = True
    End Sub


    Private Sub llLanguagesFile_Click(sender As System.Object, e As System.EventArgs) Handles llLanguagesFile.Click
        System.Diagnostics.Process.Start(TMDb.LanguagesFile)
    End Sub

#End Region 'General 2 - Movie Preferences tab


    Sub SearchForNew
        If Preferences.movies_useXBMC_Scraper Then
            Pre_Run_XBMC_Scraper
            mov_XBMCScrapingInitialization
            Post_Run_XBMC_Scraper
            Exit Sub
        End If

        RunBackgroundMovieScrape("SearchForNewMovies")
    End Sub


    Sub DoScrapeDroppedFiles()
        If Preferences.movies_useXBMC_Scraper Then
            Pre_Run_XBMC_Scraper()
            mov_XBMCScrapeDroppedFiles()
            droppedItems.Clear()
            Post_Run_XBMC_Scraper()
            Exit Sub
        End If

        RunBackgroundMovieScrape("ScrapeDroppedFiles")
    End Sub

    Private Sub Pre_Run_XBMC_Scraper()

        scraperLog = "MC " & Trim(System.Reflection.Assembly.GetExecutingAssembly.FullName.Split(",")(1)) & vbCrLf

        'If Preferences.usefoldernames Then
        '    scraperLog &= "Using FOLDERNAMES to determine Movie Title...." & vbCrLf
        'Else
        '    scraperLog &= "Using FILENAMES to determine Movie Title...." & vbCrLf
        'End If

        scraperLog &= "Using XBMC Scraper...." & vbCrLf
    End Sub


    Private Sub Post_Run_XBMC_Scraper()
        UpdateFilteredList()

        scraperLog &= vbCrLf & "!!! Search for New Movies Complete." & vbCrLf

        DisplayLogFile()
    End Sub

    Private Sub DisplayLogFile()
        If ScraperErrorDetected And Preferences.ShowLogOnError Then
            scraperLog = "******************************************************************************" & vbCrLf &
                         "* One or more errors were detected during scraping. See below for details.   *" & vbCrLf &
                         "* To disable seeing this, turn off General Perference - 'Show log on error'. *" & vbCrLf & 
                         "******************************************************************************" & vbCrLf & vbCrLf & scraperLog
        End If

        If (Not Preferences.disablelogfiles Or (ScraperErrorDetected And Preferences.ShowLogOnError)) And scraperLog <> "" Then
            Dim MyFormObject As New frmoutputlog(scraperLog, True)
            Try
                MyFormObject.ShowDialog()
            Catch ex As Exception
            End Try
        End If

        ScraperErrorDetected=False
    End Sub

    Private Sub rbTVbanner_CheckedChanged(sender As Object, e As EventArgs) Handles rbTVbanner.CheckedChanged
        BannerAndPosterViewer()
    End Sub


    Private Sub DataGridView1_CurrentCellDirtyStateChanged(sender As Object, e As EventArgs) Handles DataGridView1.CurrentCellDirtyStateChanged
        DataDirty = True
        btn_movTableSave.Enabled = DataDirty
    End Sub


    Private Sub cbShowMovieGridToolTip_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles cbShowMovieGridToolTip.CheckedChanged
        Preferences.ShowMovieGridToolTip = cbShowMovieGridToolTip.Checked
        If prefsload = False Then
            generalprefschanged = True
            btnGeneralPrefsSaveChanges.Enabled = True
        End If
    End Sub

    Private Sub cbOverwriteArtwork_CheckedChanged(sender As Object, e As EventArgs) Handles cbOverwriteArtwork.CheckedChanged
        Try
            If cbOverwriteArtwork.CheckState = CheckState.Checked Then
                Preferences.overwritethumbs = False
            Else
                Preferences.overwritethumbs = True
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
        If prefsload = False Then
            generalprefschanged = True
            btnGeneralPrefsSaveChanges.Enabled = True
        End If
    End Sub

    Private Sub RenameFilesToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles RenameFilesToolStripMenuItem.Click
        mov_ScrapeSpecific("rename_files")
    End Sub

    Private Sub btnMovieSetsRepopulateFromUsed_Click(sender As System.Object, e As System.EventArgs) Handles btnMovieSetsRepopulateFromUsed.Click

        Preferences.moviesets.Clear
        ListofMovieSets.Items.Clear

        Preferences.moviesets.AddRange(oMovies.MoviesSetsExNone)
        ListofMovieSets.Items.AddRange(oMovies.MoviesSetsExNone.ToArray)

        pop_cbMovieDisplay_MovieSet

        'For Each mset In Preferences.moviesets
        '    ListofMovieSets.Items.Add(mset)
        'Next
    End Sub

    Sub pop_cbMovieDisplay_MovieSet

        Dim previouslySelected = cbMovieDisplay_MovieSet.SelectedItem

        cbMovieDisplay_MovieSet.Sorted = True
        cbMovieDisplay_MovieSet.Items.Clear
        cbMovieDisplay_MovieSet.Items.AddRange( Preferences.moviesets.ToArray )
        cbMovieDisplay_MovieSet.Sorted = False

        If cbMovieDisplay_MovieSet.Items.Count = 0 Then
            cbMovieDisplay_MovieSet.Items.Add("-None-")
        End If
        If cbMovieDisplay_MovieSet.Items(0) <> "-None-" Then
            cbMovieDisplay_MovieSet.Items.Insert(0, "-None-")
        End If

        cbMovieDisplay_MovieSet.SelectedIndex = 0

        If previouslySelected=Nothing Then
            If workingMovieDetails.fullmoviebody.movieset <> Nothing Then
                If workingMovieDetails.fullmoviebody.movieset.IndexOf(" / ") = -1 Then
                    cbMovieDisplay_MovieSet.SelectedItem = workingMovieDetails.fullmoviebody.movieset
                End If
            End If
        Else
            cbMovieDisplay_MovieSet.SelectedItem = previouslySelected
        End If
    End Sub

    Private Sub ToolStripMenuItem23_Click( sender As Object,  e As EventArgs) Handles tsmiRescrapeCountry.Click
        mov_ScrapeSpecific("country")
    End Sub

    Private Sub ToolStripMenuItem2_Click( sender As Object,  e As EventArgs) Handles tsmiRescrapeTop250.Click
        mov_ScrapeSpecific("top250")
    End Sub

    Private Sub ToolStripMenuItem22_Click( sender As Object,  e As EventArgs) Handles tsmiRescrapePremiered.Click
        mov_ScrapeSpecific("Premiered")
    End Sub

    Private Sub ToolStripMenuItem26_Click( sender As Object,  e As EventArgs) Handles tsmiRescrapePosterUrls.Click
        mov_ScrapeSpecific("PosterUrls")
    End Sub

    Private Sub ToolStripMenuItem24_Click( sender As Object,  e As EventArgs) Handles tsmiRescrapeFrodo_Poster_Thumbs.Click
        mov_ScrapeSpecific("Frodo_Poster_Thumbs")
    End Sub

    Private Sub ToolStripMenuItem25_Click( sender As Object,  e As EventArgs) Handles tsmiRescrapeFrodo_Fanart_Thumbs.Click
        mov_ScrapeSpecific("Frodo_Fanart_Thumbs")
    End Sub

    Private Sub cbShowLogOnError_CheckedChanged( sender As Object,  e As EventArgs) Handles cbShowLogOnError.CheckedChanged
        If MainFormLoadedStatus Then
            Preferences.ShowLogOnError = cbShowLogOnError.Checked
            If prefsload = False Then
                generalprefschanged = True
                btnGeneralPrefsSaveChanges.Enabled = True
            End If
        End If
    End Sub

    Private Sub ManualRenameChkbox_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles ManualRenameChkbox.CheckedChanged
        If MainFormLoadedStatus Then
            Try
                Preferences.MovieManualRename = ManualRenameChkbox.Checked
                movieprefschanged = True
                btnMoviePrefSaveChanges.Enabled = True
            Catch ex As Exception
                ExceptionHandler.LogError(ex)
            End Try
        End If
    End Sub

    Private Sub tbDateFormat_TextChanged( sender As System.Object,  e As System.EventArgs) Handles tbDateFormat.TextChanged
        If MainFormLoadedStatus Then
            Try
                Preferences.DateFormat = tbDateFormat.Text
                movieprefschanged = True
                btnMoviePrefSaveChanges.Enabled = True
            Catch ex As Exception
                ExceptionHandler.LogError(ex)
            End Try
        End If
    End Sub

    Private Sub cbMovieList_ShowColPlot_CheckedChanged( sender As System.Object,  e As System.EventArgs) Handles cbMovieList_ShowColPlot.CheckedChanged
        If MainFormLoadedStatus Then
            Try
                Preferences.MovieList_ShowColPlot = cbMovieList_ShowColPlot.Checked
                movieprefschanged = True
                btnMoviePrefSaveChanges.Enabled = True
            Catch ex As Exception
                ExceptionHandler.LogError(ex)
            End Try
        End If
    End Sub

    Private Sub cbMovieList_ShowColWatched_CheckedChanged( sender As System.Object,  e As System.EventArgs) Handles cbMovieList_ShowColWatched.CheckedChanged
         If MainFormLoadedStatus Then
            Try
                Preferences.MovieList_ShowColWatched = cbMovieList_ShowColWatched.Checked
                movieprefschanged = True
                btnMoviePrefSaveChanges.Enabled = True
            Catch ex As Exception
                ExceptionHandler.LogError(ex)
            End Try
        End If
    End Sub


    Private Sub nudMovieScraper_MaxStudios_ValueChanged( sender As Object,  e As EventArgs) Handles nudMovieScraper_MaxStudios.ValueChanged
        If MainFormLoadedStatus Then
            Try
                Preferences.MovieScraper_MaxStudios = nudMovieScraper_MaxStudios.Value
                movieprefschanged = True
                btnMoviePrefSaveChanges.Enabled = True
            Catch ex As Exception
                ExceptionHandler.LogError(ex)
            End Try
        End If
    End Sub


    Private Sub nudActorsFilterMinFilms_ValueChanged( sender As System.Object,  e As System.EventArgs) Handles nudActorsFilterMinFilms.ValueChanged
        If MainFormLoadedStatus Then
            Try
                Preferences.ActorsFilterMinFilms = nudActorsFilterMinFilms.Value
                movieprefschanged = True
                btnMoviePrefSaveChanges.Enabled = True
            Catch ex As Exception
                ExceptionHandler.LogError(ex)
            End Try
        End If
    End Sub


    Private Sub nudMaxActorsInFilter_ValueChanged( sender As System.Object,  e As System.EventArgs) Handles nudMaxActorsInFilter.ValueChanged
        If MainFormLoadedStatus Then
            Try
                Preferences.MaxActorsInFilter = nudMaxActorsInFilter.Value
                movieprefschanged = True
                btnMoviePrefSaveChanges.Enabled = True
            Catch ex As Exception
                ExceptionHandler.LogError(ex)
            End Try
        End If
    End Sub


    Private Sub cbMovieFilters_Actors_Order_SelectedValueChanged( sender As Object,  e As EventArgs) Handles cbMovieFilters_Actors_Order.SelectedValueChanged
        If MainFormLoadedStatus Then
            Try
                Preferences.MovieFilters_Actors_Order = cbMovieFilters_Actors_Order.SelectedIndex
                movieprefschanged = True
                btnMoviePrefSaveChanges.Enabled = True
            Catch ex As Exception
                ExceptionHandler.LogError(ex)
            End Try
        End If
    End Sub


    Private Sub nudSetsFilterMinFilms_ValueChanged( sender As System.Object,  e As System.EventArgs) Handles nudSetsFilterMinFilms.ValueChanged
        If MainFormLoadedStatus Then
            Try
                Preferences.SetsFilterMinFilms = nudSetsFilterMinFilms.Value
                movieprefschanged = True
                btnMoviePrefSaveChanges.Enabled = True
            Catch ex As Exception
                ExceptionHandler.LogError(ex)
            End Try
        End If
    End Sub


    Private Sub nudMaxSetsInFilter_ValueChanged( sender As System.Object,  e As System.EventArgs) Handles nudMaxSetsInFilter.ValueChanged
        If MainFormLoadedStatus Then
            Try
                Preferences.MaxSetsInFilter = nudMaxSetsInFilter.Value
                movieprefschanged = True
                btnMoviePrefSaveChanges.Enabled = True
            Catch ex As Exception
                ExceptionHandler.LogError(ex)
            End Try
        End If
    End Sub


    Private Sub cbMovieFilters_Sets_Order_SelectedValueChanged( sender As Object,  e As EventArgs) Handles cbMovieFilters_Sets_Order.SelectedValueChanged
        If MainFormLoadedStatus Then
            Try
                Preferences.MovieFilters_Sets_Order = cbMovieFilters_Sets_Order.SelectedIndex
                movieprefschanged = True
                btnMoviePrefSaveChanges.Enabled = True
            Catch ex As Exception
                ExceptionHandler.LogError(ex)
            End Try
        End If
    End Sub


    Private Sub chkbOriginal_Title_CheckedChanged( sender As Object,  e As EventArgs) Handles chkbOriginal_Title.CheckedChanged
        If MainFormLoadedStatus Then
            Try
                Preferences.Original_Title = chkbOriginal_Title.Checked
                movieprefschanged = True
                btnMoviePrefSaveChanges.Enabled = True
            Catch ex As Exception
                ExceptionHandler.LogError(ex)
            End Try
        End If
    End Sub

    Private Sub Button4_Click( sender As System.Object,  e As System.EventArgs) Handles Button4.Click
        Try
            If TextBox21.Text = Nothing Then
                Exit Sub
            End If
            If TextBox21.Text = "" Then
                Exit Sub
            End If
            Dim tempstring As String = TextBox21.Text
            Do While tempstring.LastIndexOf("\") = tempstring.Length - 1
                tempstring = tempstring.Substring(0, tempstring.Length - 1)
            Loop
            Do While tempstring.LastIndexOf("/") = tempstring.Length - 1
                tempstring = tempstring.Substring(0, tempstring.Length - 1)
            Loop
            Dim exists As Boolean = False
            For Each item In ListBox7.Items
                If item.ToString.ToLower = tempstring.ToLower Then
                    exists = True
                    Exit For
                End If
            Next
            If exists = True Then
                MsgBox("        Folder Already Exists")
            Else
                Dim f As New IO.DirectoryInfo(tempstring)
                If f.Exists Then
                    ListBox7.Items.Add(tempstring)
                    ListBox7.Refresh()
                    TextBox21.Text = ""
                    'newTvFolders.Add(tempstring)
                Else
                    Dim tempint As Integer = MessageBox.Show("This folder does not appear to exist" & vbCrLf & "Are you sure you wish to add it", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                    If tempint = DialogResult.Yes Then
                        ListBox7.Items.Add(tempstring)
                        ListBox7.Refresh()
                        TextBox21.Text = ""
                        'newTvFolders.Add(tempstring)
                    End If
                End If
            End If
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
    End Sub


    Private Sub DataGridViewMovies_ColumnHeaderMouseClick( sender As Object,  e As DataGridViewCellMouseEventArgs) Handles DataGridViewMovies.ColumnHeaderMouseClick
        btnreverse.Checked = Not btnreverse.Checked
        btnreverse_CheckedChanged(Nothing,Nothing)
    End Sub

    Private Sub AutoScrnShtDelay_KeyPress(sender As Object, e As KeyPressEventArgs) Handles AutoScrnShtDelay.KeyPress
            Try
                If Char.IsNumber(e.KeyChar) = False And e.KeyChar <> Chr(8) Then
                    If AutoScrnShtDelay.Text <> "" Then
                        e.Handled = True
                    Else
                        MsgBox("Please Enter at least 1")
                        AutoScrnShtDelay.Text = "10"
                    End If
                End If
                If AutoScrnShtDelay.Text = "" Then
                    MsgBox("Please enter a numerical Value that is 1 or more")
                    AutoScrnShtDelay.Text = "10"
                    Exit Sub
                End If
                If Not IsNumeric(AutoScrnShtDelay.Text) Then
                    MsgBox("Please enter a numerical Value that is 1 or more")
                    AutoScrnShtDelay.Text = "10"
                    Exit Sub
                End If
                Preferences.ScrShtDelay = Convert.ToInt32(AutoScrnShtDelay.Text)
            Catch ex As Exception
                ExceptionHandler.LogError(ex)
            End Try

    End Sub

    Private Sub AutoScrnShtDelay_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles AutoScrnShtDelay.TextChanged
        If IsNumeric(AutoScrnShtDelay.Text) AndAlso Convert.ToInt32(AutoScrnShtDelay.Text)>0 Then
            Preferences.ScrShtDelay = Convert.ToInt32(AutoScrnShtDelay.Text)
        Else
            Preferences.ScrShtDelay = 10
            AutoScrnShtDelay.Text = "10"
            MsgBox("Please enter a numerical Value that is 1 or more")
        End If
        If tvprefschanged = False Then
            tvprefschanged = True
            btnTVPrefSaveChanges.Enabled = True
        End If
    End Sub



    Private Sub cbUseMultipleThreads_CheckedChanged( sender As Object,  e As EventArgs) Handles cbUseMultipleThreads.CheckedChanged
        If MainFormLoadedStatus Then
            Preferences.UseMultipleThreads = cbUseMultipleThreads.Checked
            If prefsload = False Then
                generalprefschanged = True
                btnGeneralPrefsSaveChanges.Enabled = True
            End If
        End If
    End Sub


    Private Sub cbCheckForNewVersion_CheckedChanged( sender As Object,  e As EventArgs) Handles cbCheckForNewVersion.CheckedChanged
        If MainFormLoadedStatus Then
            Preferences.CheckForNewVersion = cbCheckForNewVersion.Checked
            If prefsload = False Then
                generalprefschanged = True
                btnGeneralPrefsSaveChanges.Enabled = True
            End If
        End If
    End Sub

    

    Private Sub btnTvSearchNew_Click( sender As System.Object,  e As System.EventArgs) Handles btnTvSearchNew.Click
        Try
            Call ep_Search()
        Catch ex As Exception

        End Try
    End Sub

    Private Sub btnTvRefreshAll_Click( sender As System.Object,  e As System.EventArgs) Handles btnTvRefreshAll.Click
        Try
            Call tv_CacheRefresh()
        Catch ex As Exception

        End Try
    End Sub

    Private Sub bnt_TvChkFolderList_Click( sender As System.Object,  e As System.EventArgs) Handles bnt_TvChkFolderList.Click
        Try
            Call tv_Showremovedfromlist()
        Catch ex As Exception

        End Try
    End Sub


    Private Sub  ConfigureMovieFiltersToolStripMenuItem1_Click( sender As Object,  e As EventArgs) Handles ConfigureMovieFiltersToolStripMenuItem1.Click
        Dim frm As new frmConfigureMovieFilters

        frm.Init(SplitContainer5.Panel2)
        
        If frm.ShowDialog = Windows.Forms.DialogResult.OK Then 
            UpdateMovieFiltersPanel
            Preferences.SaveConfig
        End If
    End Sub

    Sub UpdateMovieFiltersPanel
        'ResizeBottomLHSPanel
        Preferences.movie_filters.PositionMovieFilters(SplitContainer5.Panel2)
        Preferences.movie_filters.UpdateFromPanel     (SplitContainer5.Panel2)
        ResizeBottomLHSPanel(MovieFiltersPanelMaxHeight)
    End Sub

    ReadOnly Property MovieFiltersPanelMaxHeight As Integer
        Get
            Return Preferences.movie_filters.GetMovieFilterPanelSize(SplitContainer5.Panel2)
        End Get
    End Property

    Private Sub SplitContainer5_DoubleClick(sender As Object,  e As EventArgs) Handles SplitContainer5.DoubleClick

        If SplitContainer5.Panel2.Height = MovieFiltersPanelMaxHeight-5 Then
            ResizeBottomLHSPanel(0)
        Else
            ResizeBottomLHSPanel(MovieFiltersPanelMaxHeight)
        End If
    End Sub


    Private Sub ResizeBottomLHSPanel(height As Integer)
        State = ProgramState.ResizingSplitterPanel

        SplitContainer5.SplitterDistance = SplitContainer5.Height - height

        DataGridViewMovies.Height = SplitContainer5.SplitterDistance - 140

        State = ProgramState.Other
    End Sub


    Private Sub ResizeBottomLHSPanel()
        If State = ProgramState.ResizingSplitterPanel Then Return

        If Not MainFormLoadedStatus Then Return
 
        Dim maxSize = MovieFiltersPanelMaxHeight
        Dim minSize = 2

        If SplitContainer5.Height - SplitContainer5.SplitterDistance > maxSize Then
            SplitContainer5.SplitterDistance = SplitContainer5.Height - maxSize
        End If

        If SplitContainer5.Height - SplitContainer5.SplitterDistance < minSize Then
            SplitContainer5.SplitterDistance = SplitContainer5.Height - minSize
        End If

        'Needed as workaround for splitter panel framework bug:
        Dim h = SplitContainer5.SplitterDistance - 140
        If h < minSize Then h = minSize
        DataGridViewMovies.Height = h
    End Sub



Private Sub ReScrFanartToolStripMenuItem_Click( sender As System.Object,  e As System.EventArgs) Handles ReScrFanartToolStripMenuItem.Click
        Try
            Dim Showname As TvShow = tv_ShowSelectedCurrently()
            'Me.tvBatchList.shFanart = True
            TvGetArtwork(Showname,True, False, False)
            tv_ShowLoad(Showname)
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
End Sub

Private Sub SelNewFanartToolStripMenuItem_Click( sender As System.Object,  e As System.EventArgs) Handles SelNewFanartToolStripMenuItem.Click
        Try
            Me.TabPage12.Select
            TabControl3.SelectedIndex=1
            
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
End Sub

Private Sub RescrapeTvEpThumbToolStripMenuItem_Click( sender As System.Object,  e As System.EventArgs) Handles RescrapeTvEpThumbToolStripMenuItem.Click
        Try
            TvEpThumbRescrape()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
End Sub

Private Sub RescrapeTvEpScreenShotToolStripMenuItem_Click( sender As System.Object,  e As System.EventArgs) Handles RescrapeTvEpScreenShotToolStripMenuItem.Click
        Try
            TvEpThumbScreenShot()
        Catch ex As Exception
            ExceptionHandler.LogError(ex)
        End Try
End Sub

Private Sub tv_PictureBoxLeft_Click( sender As System.Object,  e As System.Windows.Forms.MouseEventArgs) Handles tv_PictureBoxLeft.MouseUp, tv_PictureBoxLeft.Click
        Try
            If e.Button = Windows.Forms.MouseButtons.Right Then
                ReScrFanartToolStripMenuItem.Visible=False
                SelNewFanartToolStripMenuItem.Visible=False
                RescrapeTvEpThumbToolStripMenuItem.Visible=False
                RescrapeTvEpScreenShotToolStripMenuItem.Visible=False
                If TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvShow Or TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvSeason Then
                    ReScrFanartToolStripMenuItem.Visible=True
                    SelNewFanartToolStripMenuItem.Visible=True
                ElseIf TypeOf TvTreeview.SelectedNode.Tag Is Media_Companion.TvEpisode Then
                    RescrapeTvEpThumbToolStripMenuItem.Visible=True
                    RescrapeTvEpScreenShotToolStripMenuItem.Visible=True
                Else
                    Exit Sub
                End If
            End If
        Catch ex As Exception

        End Try

End Sub



    Sub BckWrkCheckNewVersion_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles BckWrkCheckNewVersion.DoWork

        Dim ShowNoNewVersionMsgBox As String = DirectCast(e.Argument, Boolean)

        e.Result = New NewVersionCheckResult(ShowNoNewVersionMsgBox,CheckForNewVersion)
    End Sub



    Private Sub BckWrkCheckNewVersion_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles BckWrkCheckNewVersion.RunWorkerCompleted

        Dim Results As NewVersionCheckResult = e.Result

        If IsNothing(Results.NewVersion) Then 

            If Results.ShowNoNewVersionMsgBox Then
                MsgBox("You're up-to-date!", MsgBoxStyle.OkOnly, "No new version found")
            End If

            Exit Sub
        End If
        

        Dim answer = MsgBox("Would you like to open the download page?", MsgBoxStyle.YesNo, "New version " & Results.NewVersion & " available")

        If answer=MsgBoxResult.Yes Then
            Dim downloadPage = "http://mediacompanion.codeplex.com/releases"
            OpenUrl(downloadPage)
        End If
    End Sub



    Public Function CheckForNewVersion As String
        Dim homePage         = "http://mediacompanion.codeplex.com"
        
        Dim MC_Version_RegEx = "<th><span class=""rating_header"">current</span></th>.*?<td>[\s]+.*?([0-9]*\.?[0-9]+).*?[\s]+</td>"

        Dim s As New Classimdb

        Dim html As String = s.loadwebpage(homePage,True,10).ToString

        Dim m = Regex.Match(html,MC_Version_RegEx, RegexOptions.Singleline)

        Dim displayVersion As String = m.Groups(1).Value.Trim
        Dim latestVersion  As String = displayVersion.Replace(".","")
        Dim currVersion    As String = Trim(System.Reflection.Assembly.GetExecutingAssembly.FullName.Split(",")(1)).Replace(".","").Replace("Version=","")

        If latestVersion.Length<4     Then Return Nothing
        If latestVersion<>currVersion Then Return displayVersion

        Return Nothing
    End Function

    Private Sub llMkvMergeGuiPath_Click( sender As Object,  e As EventArgs) Handles llMkvMergeGuiPath.Click
        OpenUrl("http://www.downloadbestsoft.com/MKVToolNix.html")
    End Sub

    Private Sub btnMkvMergeGuiPath_Click( sender As Object,  e As EventArgs) Handles btnMkvMergeGuiPath.Click

        Dim ofd As New OpenFileDialog

        ofd.InitialDirectory = System.Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles)
        ofd.Filter           = "Executable Files|*.exe"
        ofd.Title            = "Locate mkvmerge GUI (mmg.exe)"

        If ofd.ShowDialog = Windows.Forms.DialogResult.OK Then Preferences.MkvMergeGuiPath = ofd.FileName

        If prefsload = False Then
            generalprefschanged = True
            btnGeneralPrefsSaveChanges.Enabled = True
        End If
        
    End Sub

    Sub MkvMergeGuiPath_ChangeHandler
        tsmiOpenInMkvmergeGUI.Enabled = True
        tbMkvMergeGuiPath.Text = Preferences.MkvMergeGuiPath  
    End Sub

    Private Sub tsmiOpenInMkvmergeGUI_Click( sender As Object,  e As EventArgs) Handles tsmiOpenInMkvmergeGUI.Click

        If DataGridViewMovies.SelectedRows.Count>10 Then
            If MsgBox("Are you sure you want to open that many?",MsgBoxStyle.YesNo,"About to open " & DataGridViewMovies.SelectedRows.Count & " instances of Mkvmerge Gui")<>MsgBoxResult.Ok Then Exit Sub
        End If

        For Each row In DataGridViewMovies.SelectedRows
            Process.Start(Preferences.MkvMergeGuiPath,"""" & Utilities.GetFileName(row.Cells("fullpathandfilename").Value) & """")
        Next
    End Sub


    Private Sub btnPlayMovie_Click( sender As System.Object,  e As System.EventArgs) Handles btnPlayMovie.Click
        mov_Play("Movie")
    End Sub

    Private Sub tsmiCheckForNewVersion_Click( sender As System.Object,  e As System.EventArgs) Handles tsmiCheckForNewVersion.Click
        BckWrkCheckNewVersion.RunWorkerAsync(True)
    End Sub


    Private Sub ReloadHtmlTemplatesToolStripMenuItem_Click( sender As System.Object,  e As System.EventArgs) Handles ReloadHtmlTemplatesToolStripMenuItem.Click
        Dim mediaDropdown As New SortedList(Of String, String)
        mediaInfoExp.addTemplates(mediaDropdown)
        ExportMovieListInfoToolStripMenuItem.DropDownItems.Clear()
        ExportTVShowInfoToolStripMenuItem.DropDownItems.Clear()
        For Each item In mediaDropdown
	        If item.Value = MediaInfoExport.mediaType.Movie Then
		        ExportMovieListInfoToolStripMenuItem.DropDownItems.Add(item.Key)
		    ElseIf item.Value = MediaInfoExport.mediaType.TV Then
		        ExportTVShowInfoToolStripMenuItem.DropDownItems.Add(item.Key)
	        End If
        Next
    End Sub


End Class