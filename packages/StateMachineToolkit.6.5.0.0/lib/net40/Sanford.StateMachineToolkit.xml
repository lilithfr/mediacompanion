<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sanford.StateMachineToolkit</name>
    </assembly>
    <members>
        <member name="T:Sanford.Collections.Deque">
            <summary>
            Represents a simple double-ended-queue collection of objects.
            </summary>
        </member>
        <member name="M:Sanford.Collections.Deque.#ctor">
            <summary>
            Initializes a new instance of the Deque class.
            </summary>
        </member>
        <member name="M:Sanford.Collections.Deque.#ctor(System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the Deque class that contains 
            elements copied from the specified collection.
            </summary>
            <param name="col">
            The ICollection to copy elements from.
            </param>
        </member>
        <member name="M:Sanford.Collections.Deque.Clear">
            <summary>
            Removes all objects from the Deque.
            </summary>
        </member>
        <member name="M:Sanford.Collections.Deque.Contains(System.Object)">
            <summary>
            Determines whether or not an element is in the Deque.
            </summary>
            <param name="obj">
            The Object to locate in the Deque.
            </param>
            <returns>
            <b>true</b> if <i>obj</i> if found in the Deque; otherwise, 
            <b>false</b>.
            </returns>
        </member>
        <member name="M:Sanford.Collections.Deque.PushFront(System.Object)">
            <summary>
            Inserts an object at the front of the Deque.
            </summary>
            <param name="obj">
            The object to push onto the deque;
            </param>
        </member>
        <member name="M:Sanford.Collections.Deque.PushBack(System.Object)">
            <summary>
            Inserts an object at the back of the Deque.
            </summary>
            <param name="obj">
            The object to push onto the deque;
            </param>
        </member>
        <member name="M:Sanford.Collections.Deque.PopFront">
            <summary>
            Removes and returns the object at the front of the Deque.
            </summary>
            <returns>
            The object at the front of the Deque.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The Deque is empty.
            </exception>
        </member>
        <member name="M:Sanford.Collections.Deque.PopBack">
            <summary>
            Removes and returns the object at the back of the Deque.
            </summary>
            <returns>
            The object at the back of the Deque.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The Deque is empty.
            </exception>
        </member>
        <member name="M:Sanford.Collections.Deque.PeekFront">
            <summary>
            Returns the object at the front of the Deque without removing it.
            </summary>
            <returns>
            The object at the front of the Deque.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The Deque is empty.
            </exception>
        </member>
        <member name="M:Sanford.Collections.Deque.PeekBack">
            <summary>
            Returns the object at the back of the Deque without removing it.
            </summary>
            <returns>
            The object at the back of the Deque.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The Deque is empty.
            </exception>
        </member>
        <member name="M:Sanford.Collections.Deque.ToArray">
            <summary>
            Copies the Deque to a new array.
            </summary>
            <returns>
            A new array containing copies of the elements of the Deque.
            </returns>
        </member>
        <member name="M:Sanford.Collections.Deque.Synchronized(Sanford.Collections.Deque)">
            <summary>
            Returns a synchronized (thread-safe) wrapper for the Deque.
            </summary>
            <param name="deque">
            The Deque to synchronize.
            </param>
            <returns>
            A synchronized wrapper around the Deque.
            </returns>
        </member>
        <member name="M:Sanford.Collections.Deque.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the Deque elements to an existing one-dimensional Array, 
            starting at the specified array index.
            </summary>
            <param name="array">
            The one-dimensional Array that is the destination of the elements 
            copied from Deque. The Array must have zero-based indexing. 
            </param>
            <param name="index">
            The zero-based index in array at which copying begins. 
            </param>
        </member>
        <member name="M:Sanford.Collections.Deque.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the Deque.
            </summary>
            <returns>
            An IEnumerator for the Deque.
            </returns>
        </member>
        <member name="M:Sanford.Collections.Deque.Clone">
            <summary>
            Creates a shallow copy of the Deque.
            </summary>
            <returns>
            A shallow copy of the Deque.
            </returns>
        </member>
        <member name="P:Sanford.Collections.Deque.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the Deque is synchronized 
            (thread-safe).
            </summary>
        </member>
        <member name="P:Sanford.Collections.Deque.Count">
            <summary>
            Gets the number of elements contained in the Deque.
            </summary>
        </member>
        <member name="P:Sanford.Collections.Deque.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the Deque.
            </summary>
        </member>
        <member name="T:Sanford.Collections.Generic.Deque`1">
            <summary>
            Represents a simple double-ended-queue collection of objects.
            </summary>
        </member>
        <member name="M:Sanford.Collections.Generic.Deque`1.#ctor">
            <summary>
            Initializes a new instance of the Deque class.
            </summary>
        </member>
        <member name="M:Sanford.Collections.Generic.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the Deque class that contains 
            elements copied from the specified collection.
            </summary>
            <param name="collection">
            The collection whose elements are copied to the new Deque.
            </param>
        </member>
        <member name="M:Sanford.Collections.Generic.Deque`1.Clear">
            <summary>
            Removes all objects from the Deque.
            </summary>
        </member>
        <member name="M:Sanford.Collections.Generic.Deque`1.Contains(`0)">
            <summary>
            Determines whether or not an element is in the Deque.
            </summary>
            <param name="obj">
            The Object to locate in the Deque.
            </param>
            <returns>
            <b>true</b> if <i>obj</i> if found in the Deque; otherwise, 
            <b>false</b>.
            </returns>
        </member>
        <member name="M:Sanford.Collections.Generic.Deque`1.PushFront(`0)">
            <summary>
            Inserts an object at the front of the Deque.
            </summary>
            <param name="item">
            The object to push onto the deque;
            </param>
        </member>
        <member name="M:Sanford.Collections.Generic.Deque`1.PushBack(`0)">
            <summary>
            Inserts an object at the back of the Deque.
            </summary>
            <param name="item">
            The object to push onto the deque;
            </param>
        </member>
        <member name="M:Sanford.Collections.Generic.Deque`1.PopFront">
            <summary>
            Removes and returns the object at the front of the Deque.
            </summary>
            <returns>
            The object at the front of the Deque.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The Deque is empty.
            </exception>
        </member>
        <member name="M:Sanford.Collections.Generic.Deque`1.PopBack">
            <summary>
            Removes and returns the object at the back of the Deque.
            </summary>
            <returns>
            The object at the back of the Deque.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The Deque is empty.
            </exception>
        </member>
        <member name="M:Sanford.Collections.Generic.Deque`1.PeekFront">
            <summary>
            Returns the object at the front of the Deque without removing it.
            </summary>
            <returns>
            The object at the front of the Deque.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The Deque is empty.
            </exception>
        </member>
        <member name="M:Sanford.Collections.Generic.Deque`1.PeekBack">
            <summary>
            Returns the object at the back of the Deque without removing it.
            </summary>
            <returns>
            The object at the back of the Deque.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The Deque is empty.
            </exception>
        </member>
        <member name="M:Sanford.Collections.Generic.Deque`1.ToArray">
            <summary>
            Copies the Deque to a new array.
            </summary>
            <returns>
            A new array containing copies of the elements of the Deque.
            </returns>
        </member>
        <member name="M:Sanford.Collections.Generic.Deque`1.Synchronized(Sanford.Collections.Generic.Deque{`0})">
            <summary>
            Returns a synchronized (thread-safe) wrapper for the Deque.
            </summary>
            <param name="deque">
            The Deque to synchronize.
            </param>
            <returns>
            A synchronized wrapper around the Deque.
            </returns>
        </member>
        <member name="M:Sanford.Collections.Generic.Deque`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the Deque elements to an existing one-dimensional Array, 
            starting at the specified array index.
            </summary>
            <param name="array">
            The one-dimensional Array that is the destination of the elements 
            copied from Deque. The Array must have zero-based indexing. 
            </param>
            <param name="index">
            The zero-based index in array at which copying begins. 
            </param>
        </member>
        <member name="M:Sanford.Collections.Generic.Deque`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the Deque.
            </summary>
            <returns>
            An IEnumerator for the Deque.
            </returns>
        </member>
        <member name="M:Sanford.Collections.Generic.Deque`1.Clone">
            <summary>
            Creates a shallow copy of the Deque.
            </summary>
            <returns>
            A shallow copy of the Deque.
            </returns>
        </member>
        <member name="P:Sanford.Collections.Generic.Deque`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the Deque is synchronized 
            (thread-safe).
            </summary>
        </member>
        <member name="P:Sanford.Collections.Generic.Deque`1.Count">
            <summary>
            Gets the number of elements contained in the Deque.
            </summary>
        </member>
        <member name="P:Sanford.Collections.Generic.Deque`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the Deque.
            </summary>
        </member>
        <member name="M:Sanford.Collections.Generic.Deque`1.SynchronizedDeque.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the Deque.
            </summary>
            <returns>
            An IEnumerator for the Deque.
            </returns>
        </member>
        <member name="T:Sanford.Collections.Generic.PriorityQueue`1">
            <summary>
            Represents the priority queue data structure.
            </summary>
        </member>
        <member name="M:Sanford.Collections.Generic.PriorityQueue`1.#ctor">
            <summary>
            Initializes a new instance of the PriorityQueue class.
            </summary>
            <remarks>
            The PriorityQueue will cast its elements to the IComparable 
            interface when making comparisons.
            </remarks>
        </member>
        <member name="M:Sanford.Collections.Generic.PriorityQueue`1.#ctor(System.Collections.IComparer)">
            <summary>
            Initializes a new instance of the PriorityQueue class with the
            specified IComparer.
            </summary>
            <param name="comparer">
            The IComparer to use for comparing and ordering elements.
            </param>
            <remarks>
            If the specified IComparer is null, the PriorityQueue will cast its
            elements to the IComparable interface when making comparisons.
            </remarks>
        </member>
        <member name="M:Sanford.Collections.Generic.PriorityQueue`1.Enqueue(`0)">
            <summary>
            Enqueues the specified element into the PriorityQueue.
            </summary>
            <param name="element">
            The element to enqueue into the PriorityQueue.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If element is null.
            </exception>
        </member>
        <member name="M:Sanford.Collections.Generic.PriorityQueue`1.Dequeue">
            <summary>
            Removes the element at the head of the PriorityQueue.
            </summary>
            <returns>
            The element at the head of the PriorityQueue.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If Count is zero.
            </exception>
        </member>
        <member name="M:Sanford.Collections.Generic.PriorityQueue`1.Remove(System.Object)">
            <summary>
            Removes the specified element from the PriorityQueue.
            </summary>
            <param name="element">
            The element to remove.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If element is null
            </exception>
        </member>
        <member name="M:Sanford.Collections.Generic.PriorityQueue`1.Contains(System.Object)">
            <summary>
            Returns a value indicating whether the specified element is in the
            PriorityQueue.
            </summary>
            <param name="element">
            The element to test.
            </param>
            <returns>
            <b>true</b> if the element is in the PriorityQueue; otherwise
            <b>false</b>.
            </returns>
        </member>
        <member name="M:Sanford.Collections.Generic.PriorityQueue`1.Peek">
            <summary>
            Returns the element at the head of the PriorityQueue without 
            removing it.
            </summary>
            <returns>
            The element at the head of the PriorityQueue.
            </returns>
        </member>
        <member name="M:Sanford.Collections.Generic.PriorityQueue`1.Clear">
            <summary>
            Removes all elements from the PriorityQueue.
            </summary>
        </member>
        <member name="M:Sanford.Collections.Generic.PriorityQueue`1.Synchronized(Sanford.Collections.PriorityQueue)">
            <summary>
            Returns a synchronized wrapper of the specified PriorityQueue.
            </summary>
            <param name="queue">
            The PriorityQueue to synchronize.
            </param>
            <returns>
            A synchronized PriorityQueue.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If queue is null.
            </exception>
        </member>
        <member name="T:Sanford.Collections.PriorityQueue">
            <summary>
            Represents the priority queue data structure.
            </summary>
        </member>
        <member name="M:Sanford.Collections.PriorityQueue.#ctor">
            <summary>
            Initializes a new instance of the PriorityQueue class.
            </summary>
            <remarks>
            The PriorityQueue will cast its elements to the IComparable 
            interface when making comparisons.
            </remarks>
        </member>
        <member name="M:Sanford.Collections.PriorityQueue.#ctor(System.Collections.IComparer)">
            <summary>
            Initializes a new instance of the PriorityQueue class with the
            specified IComparer.
            </summary>
            <param name="comparer">
            The IComparer to use for comparing and ordering elements.
            </param>
            <remarks>
            If the specified IComparer is null, the PriorityQueue will cast its
            elements to the IComparable interface when making comparisons.
            </remarks>
        </member>
        <member name="M:Sanford.Collections.PriorityQueue.Enqueue(System.Object)">
            <summary>
            Enqueues the specified element into the PriorityQueue.
            </summary>
            <param name="element">
            The element to enqueue into the PriorityQueue.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If element is null.
            </exception>
        </member>
        <member name="M:Sanford.Collections.PriorityQueue.Dequeue">
            <summary>
            Removes the element at the head of the PriorityQueue.
            </summary>
            <returns>
            The element at the head of the PriorityQueue.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If Count is zero.
            </exception>
        </member>
        <member name="M:Sanford.Collections.PriorityQueue.Remove(System.Object)">
            <summary>
            Removes the specified element from the PriorityQueue.
            </summary>
            <param name="element">
            The element to remove.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If element is null
            </exception>
        </member>
        <member name="M:Sanford.Collections.PriorityQueue.Contains(System.Object)">
            <summary>
            Returns a value indicating whether the specified element is in the
            PriorityQueue.
            </summary>
            <param name="element">
            The element to test.
            </param>
            <returns>
            <b>true</b> if the element is in the PriorityQueue; otherwise
            <b>false</b>.
            </returns>
        </member>
        <member name="M:Sanford.Collections.PriorityQueue.Peek">
            <summary>
            Returns the element at the head of the PriorityQueue without 
            removing it.
            </summary>
            <returns>
            The element at the head of the PriorityQueue.
            </returns>
        </member>
        <member name="M:Sanford.Collections.PriorityQueue.Clear">
            <summary>
            Removes all elements from the PriorityQueue.
            </summary>
        </member>
        <member name="M:Sanford.Collections.PriorityQueue.Synchronized(Sanford.Collections.PriorityQueue)">
            <summary>
            Returns a synchronized wrapper of the specified PriorityQueue.
            </summary>
            <param name="queue">
            The PriorityQueue to synchronize.
            </param>
            <returns>
            A synchronized PriorityQueue.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If queue is null.
            </exception>
        </member>
        <member name="T:Sanford.Collections.ImmutableCollections.Array">
            <summary>
            Represents an array data structure.
            </summary>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.Array.#ctor(System.Int32)">
            <summary>
            Initialize an instance of the Array class with the specified array 
            length.
            </summary>
            <param name="length">
            The length of the array.
            </param>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.Array.#ctor(Sanford.Collections.ImmutableCollections.RalTopNode,System.Int32)">
            <summary>
            Initializes a new instance of the Array class with the specified 
            head of the random access list and the length of the array.
            </summary>
            <param name="head">
            The head of the random access list.
            </param>
            <param name="length">
            The length of the array.
            </param>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.Array.GetValue(System.Int32)">
            <summary>
            Gets the value of the specified element in the current Array. 
            </summary>
            <param name="index">
            An integer that represents the position of the Array element to 
            get. 
            </param>
            <returns>
            The value at the specified position in the Array.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index is outside the range of valid indexes for the current Array.
            </exception>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.Array.SetValue(System.Object,System.Int32)">
            <summary>
            Sets the specified element in the current Array to the specified 
            value.
            </summary>
            <param name="value">
            The new value for the specified element. 
            </param>
            <param name="index">
            An integer that represents the position of the Array element to set. 
            </param>
            <returns>
            A new array with the element at the specified position set to the 
            specified value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index is outside the range of valid indexes for the current Array.
            </exception>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.Array.GetEnumerator">
            <summary>
            Returns an IEnumerator for the Array.
            </summary>
            <returns>
            An IEnumerator for the Array.
            </returns>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.Array.Length">
            <summary>
            Gets an integer that represents the total number of elements in all 
            the dimensions of the Array.
            </summary>
        </member>
        <member name="T:Sanford.Collections.ImmutableCollections.ArrayList">
            <summary>
            Represents a collection of elements accessible by index and supports
            insertion and deletion.
            </summary>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.ArrayList.#cctor">
            <summary>
            Initializes the ArrayList class.
            </summary>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.ArrayList.#ctor">
            <summary>
            Initializes a new instance of the ArrayList class.
            </summary>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.ArrayList.#ctor(Sanford.Collections.ImmutableCollections.IAvlNode,System.Int32)">
            <summary>
            Initializes a new instance of the ArrayList class with the 
            specified root and count.
            </summary>
            <param name="root">
            The root of the tree.
            </param>
            <param name="count">
            The number of items in the ArrayList.
            </param>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.ArrayList.Add(System.Object)">
            <summary>
            Adds an object to the end of the ArrayList.
            </summary>
            <param name="value">
            The Object to be added to the end of the ArrayList. 
            </param>
            <returns>
            A new ArrayList object with the specified value added at the end.
            </returns>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.ArrayList.Contains(System.Object)">
            <summary>
            Determines whether an element is in the ArrayList.
            </summary>
            <param name="value">
            The Object to locate in the ArrayList. 
            </param>
            <returns>
            <b>true</b> if item is found in the ArrayList; otherwise, 
            <b>false</b>.
            </returns>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.ArrayList.IndexOf(System.Object)">
            <summary>
            Returns the zero-based index of the first occurrence of a value in 
            the ArrayList.
            </summary>
            <param name="value">
            The Object to locate in the ArrayList.
            </param>
            <returns>
            The zero-based index of the first occurrence of value within the 
            ArrayList, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.ArrayList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the ArrayList at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which value should be inserted. 
            </param>
            <param name="value">
            The Object to insert.
            </param>
            <returns>
            A new ArrayList with the specified object inserted at the specified 
            index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index is less than zero or index is greater than Count.
            </exception>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.ArrayList.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specified object from the 
            ArrayList.
            </summary>
            <param name="value">
            The Object to remove from the ArrayList. 
            </param>
            <returns>
            A new ArrayList with the first occurrent of the specified object 
            removed.
            </returns>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.ArrayList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the ArrayList.
            </summary>
            <param name="index">
            The zero-based index of the element to remove. 
            </param>
            <returns>
            A new ArrayList with the element at the specified index removed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index is less than zero or index is equal to or greater than Count.
            </exception>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.ArrayList.GetValue(System.Int32)">
            <summary>
            Gets the value at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the element to get.
            </param>
            <returns>
            The value at the specified index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index is less than zero or index is equal to or greater than Count.
            </exception>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.ArrayList.SetValue(System.Int32,System.Object)">
            <summary>
            Sets the value at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the element to set.
            </param>
            <param name="value">
            The value to set at the specified index.
            </param>
            <returns>
            A new ArrayList with the specified value set at the specified index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index is less than zero or index is equal to or greater than Count.
            </exception>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.ArrayList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the ArrayList.
            </summary>
            <returns>
            An IEnumerator that can be used to iterate through the ArrayList.
            </returns>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.ArrayList.Count">
            <summary>
            Gets the number of elements contained in the ArrayList.
            </summary>
        </member>
        <member name="T:Sanford.Collections.ImmutableCollections.AvlEnumerator">
            <summary>
            Provides functionality for iterating over an AVL tree.
            </summary> 
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.AvlEnumerator.#ctor(Sanford.Collections.ImmutableCollections.IAvlNode)">
            <summary>
            Initializes a new instance of the AvlEnumerator class.
            </summary>
            <param name="root">
            The root of the AVL tree to iterate over.
            </param>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.AvlEnumerator.#ctor(Sanford.Collections.ImmutableCollections.IAvlNode,System.Int32)">
            <summary>
            Initializes a new instance of the AvlEnumerator class.
            </summary>
            <param name="root">
            The root of the AVL tree to iterate over.
            </param>
            <param name="count">
            The number of nodes in the tree.
            </param>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.AvlEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before 
            the first element in the AVL tree.
            </summary>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.AvlEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the AVL tree.
            </summary>
            <returns>
            <b>true</b> if the enumerator was successfully advanced to the 
            next element; <b>false</b> if the enumerator has passed the end 
            of the collection.
            </returns>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.AvlEnumerator.Current">
            <summary>
            Gets the current element in the AVL tree.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element in the AVL
            tree or after the last element.
            </exception>
        </member>
        <member name="T:Sanford.Collections.ImmutableCollections.AvlNode">
            <summary>
            Represents a node in an AVL tree.
            </summary>
        </member>
        <member name="T:Sanford.Collections.ImmutableCollections.IAvlNode">
            <summary>
            Represents the functionality and properties of AVL nodes.
            </summary>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.IAvlNode.Remove">
            <summary>
            Removes the current node from the AVL tree.
            </summary>
            <returns>
            The node to in the tree to replace the current node.
            </returns>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.IAvlNode.Balance">
            <summary>
            Balances the subtree represented by the node.
            </summary>
            <returns>
            The root node of the balanced subtree.
            </returns>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.IAvlNode.IsBalanced">
            <summary>
            Indicates whether or not the subtree the node represents is in 
            balance.
            </summary>
            <returns>
            <b>true</b> if the subtree is in balance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.IAvlNode.BalanceFactor">
            <summary>
            Gets the balance factor of the subtree the node represents.
            </summary>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.IAvlNode.Count">
            <summary>
            Gets the number of nodes in the subtree.
            </summary>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.IAvlNode.Data">
            <summary>
            Gets the node's data.
            </summary>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.IAvlNode.Height">
            <summary>
            Gets the height of the subtree the node represents.
            </summary>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.IAvlNode.LeftChild">
            <summary>
            Gets the node's left child.
            </summary>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.IAvlNode.RightChild">
            <summary>
            Gets the node's right child.
            </summary>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.AvlNode.#ctor(System.Object,Sanford.Collections.ImmutableCollections.IAvlNode,Sanford.Collections.ImmutableCollections.IAvlNode)">
            <summary>
            Initializes a new instance of the AvlNode class with the specified 
            data and left and right children.
            </summary>
            <param name="data">
            The data for the node.
            </param>
            <param name="leftChild">
            The left child.
            </param>
            <param name="rightChild">
            The right child.
            </param>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.AvlNode.Remove">
            <summary>
            Removes the current node from the AVL tree.
            </summary>
            <returns>
            The node to in the tree to replace the current node.
            </returns>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.AvlNode.Balance">
            <summary>
            Balances the subtree represented by the node.
            </summary>
            <returns>
            The root node of the balanced subtree.
            </returns>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.AvlNode.IsBalanced">
            <summary>
            Indicates whether or not the subtree the node represents is in 
            balance.
            </summary>
            <returns>
            <b>true</b> if the subtree is in balance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.AvlNode.BalanceFactor">
            <summary>
            Gets the balance factor of the subtree the node represents.
            </summary>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.AvlNode.Count">
            <summary>
            Gets the number of nodes in the subtree.
            </summary>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.AvlNode.Data">
            <summary>
            Gets the node's data.
            </summary>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.AvlNode.Height">
            <summary>
            Gets the height of the subtree the node represents.
            </summary>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.AvlNode.LeftChild">
            <summary>
            Gets the node's left child.
            </summary>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.AvlNode.RightChild">
            <summary>
            Gets the node's right child.
            </summary>
        </member>
        <member name="T:Sanford.Collections.ImmutableCollections.NullAvlNode">
            <summary>
            Represents a null AVL node.
            </summary>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.NullAvlNode.Remove">
            <summary>
            Removes the current node from the AVL tree.
            </summary>
            <returns>
            The node to in the tree to replace the current node.
            </returns>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.NullAvlNode.Balance">
            <summary>
            Balances the subtree represented by the node.
            </summary>
            <returns>
            The root node of the balanced subtree.
            </returns>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.NullAvlNode.IsBalanced">
            <summary>
            Indicates whether or not the subtree the node represents is in 
            balance.
            </summary>
            <returns>
            <b>true</b> if the subtree is in balance; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.NullAvlNode.BalanceFactor">
            <summary>
            Gets the balance factor of the subtree the node represents.
            </summary>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.NullAvlNode.Count">
            <summary>
            Gets the number of nodes in the subtree.
            </summary>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.NullAvlNode.Data">
            <summary>
            Gets the node's data.
            </summary>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.NullAvlNode.Height">
            <summary>
            Gets the height of the subtree the node represents.
            </summary>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.NullAvlNode.LeftChild">
            <summary>
            Gets the node's left child.
            </summary>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.NullAvlNode.RightChild">
            <summary>
            Gets the node's right child.
            </summary>
        </member>
        <member name="T:Sanford.Collections.ImmutableCollections.RalEnumerator">
            <summary>
            Provides functionality for enumerating a RandomAccessList.
            </summary>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.RalEnumerator.#ctor(Sanford.Collections.ImmutableCollections.RalTopNode,System.Int32)">
            <summary>
            Initializes a new instance of the Enumerator with the specified 
            head of the list and the number of nodes in the list.
            </summary>
            <param name="head">
            The head of the list.
            </param>
            <param name="count">
            The number of nodes in the list.
            </param>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.RalEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before 
            the first element in the random access list.
            </summary>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.RalEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element in the random access 
            list.
            </summary>
            <returns>
            <b>true</b> if the enumerator was successfully advanced to the 
            next element; <b>false</b> if the enumerator has passed the end 
            of the collection.
            </returns>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.RalEnumerator.Current">
            <summary>
            Gets the current element in the random access list.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element in the 
            random access list or after the last element.
            </exception>
        </member>
        <member name="T:Sanford.Collections.ImmutableCollections.RalTopNode">
            <summary>
            Represents the top nodes in a RandomAccessList.
            </summary>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.RalTopNode.#ctor(Sanford.Collections.ImmutableCollections.RalTreeNode,Sanford.Collections.ImmutableCollections.RalTopNode)">
            <summary>
            Initializes a new instance of the RalTopNode with the specified 
            root of the tree this node represents and the next top node in the
            list.
            </summary>
            <param name="root">
            The root node of the tree this top node represents.
            </param>
            <param name="nextNode">
            The next top node in the list.
            </param>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.RalTopNode.GetValue(System.Int32)">
            <summary>
            Gets the value at the specified element in the random access list.
            </summary>
            <param name="index">
            An integer that represents the position of the random access list 
            element to get. 
            </param>
            <returns>
            The value at the specified position in the random access list.
            </returns>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.RalTopNode.SetValue(System.Object,System.Int32)">
            <summary>
            Sets the specified element in the current random access list to the 
            specified value.
            </summary>
            <param name="value">
            The new value for the specified element. 
            </param>
            <param name="index">
            An integer that represents the position of the random access list  
            element to set. 
            </param>
            <returns>
            A new random access list top node with the element at the specified 
            position set to the specified value.
            </returns>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.RalTopNode.Root">
            <summary>
            Gets the root node represented by the top node.
            </summary>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.RalTopNode.NextNode">
            <summary>
            Gets the next top node in the random access list.
            </summary>
        </member>
        <member name="T:Sanford.Collections.ImmutableCollections.RalTreeNode">
            <summary>
            Represents subtree nodes within random access lists.
            </summary>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.RalTreeNode.#ctor(System.Object,Sanford.Collections.ImmutableCollections.RalTreeNode,Sanford.Collections.ImmutableCollections.RalTreeNode)">
            <summary>
            Initializes an instance of the RandomAccessListNode with the
            specified value, left child, and right child.
            </summary>
            <param name="value">
            The value to store in the node.
            </param>
            <param name="leftChild">
            The left child.
            </param>
            <param name="rightChild">
            The right child.
            </param>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.RalTreeNode.GetValue(System.Int32)">
            <summary>
            Gets the value at the specified element in the random access list
            subtree.
            </summary>
            <param name="index">
            An integer that represents the position of the random access list 
            subtree element to get. 
            </param>
            <returns>
            The value at the specified position in the random access list
            subtree.
            </returns>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.RalTreeNode.SetValue(System.Object,System.Int32)">
            <summary>
            Sets the specified element in the current random access list 
            subtree to the specified value.
            </summary>
            <param name="value">
            The new value for the specified element. 
            </param>
            <param name="index">
            An integer that represents the position of the random access list  
            subtree element to set. 
            </param>
            <returns>
            A new random access list tree node with the element at the specified 
            position set to the specified value.
            </returns>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.RalTreeNode.Count">
            <summary>
            Gets the number of nodes in the tree.
            </summary>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.RalTreeNode.LeftChild">
            <summary>
            Gets the left child.
            </summary>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.RalTreeNode.RightChild">
            <summary>
            Gets the right child.
            </summary>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.RalTreeNode.Value">
            <summary>
            Gets the value represented by this node.
            </summary>
        </member>
        <member name="T:Sanford.Collections.ImmutableCollections.RandomAccessList">
            <summary>
            Implements Chris Okasaki's random access list.
            </summary>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.RandomAccessList.#ctor">
            <summary>
            Initializes a new instance of the RandomAccessList class.
            </summary>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.RandomAccessList.#ctor(Sanford.Collections.ImmutableCollections.RalTopNode,System.Int32)">
            <summary>
            Initializes a new instance of the RandomAccessList class with the
            specified first top node and the number of elements in the list.
            </summary>
            <param name="first">
            The first top node in the list.
            </param>
            <param name="count">
            The number of nodes in the list.
            </param>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.RandomAccessList.Cons(System.Object)">
            <summary>
            Prepends a value to the random access list.
            </summary>
            <param name="value">
            The value to prepend to the list.
            </param>
            <returns>
            A new random access list with the specified value prepended to the
            list.
            </returns>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.RandomAccessList.GetValue(System.Int32)">
            <summary>
            Gets the value at the specified position in the current 
            RandomAccessList.
            </summary>
            <param name="index">
            An integer that represents the position of the RandomAccessList 
            element to get. 
            </param>
            <returns>
            The value at the specified position in the RandomAccessList.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index is outside the range of valid indexes for the current 
            RandomAccessList.
            </exception>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.RandomAccessList.SetValue(System.Object,System.Int32)">
            <summary>
            Sets the specified element in the current RandomAccessList to the 
            specified value.
            </summary>
            <param name="value">
            The new value for the specified element. 
            </param>
            <param name="index">
            An integer that represents the position of the RandomAccessList 
            element to set. 
            </param>
            <returns>
            A new RandomAccessList with the element at the specified position 
            set to the specified value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index is outside the range of valid indexes for the current 
            RandomAccessList.
            </exception>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.RandomAccessList.GetEnumerator">
            <summary>
            Returns an IEnumerator for the RandomAccessList.
            </summary>
            <returns>
            An IEnumerator for the RandomAccessList.
            </returns>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.RandomAccessList.Count">
            <summary>
            Gets the number of elements in the RandomAccessList.
            </summary>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.RandomAccessList.Head">
            <summary>
            Gets a RandomAccessList with first element of the current 
            RandomAccessList.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the RandomAccessList is empty.
            </exception>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.RandomAccessList.Tail">
            <summary>
            Gets a RandomAccessList with all but the first element of the
            current RandomAccessList.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the RandomAccessList is empty.
            </exception>
        </member>
        <member name="T:Sanford.Collections.ImmutableCollections.SortedList">
            <summary>
            Represents a collection of key-and-value pairs that are sorted by the 
            keys and are accessible by key.
            </summary>
        </member>
        <member name="F:Sanford.Collections.ImmutableCollections.SortedList.Empty">
            <summary>
            An empty SortedList.
            </summary>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.SortedList.#ctor">
            <summary>
            Initializes a new instance of the SortedList class that is empty 
            and is sorted according to the IComparable interface implemented by 
            each key added to the SortedList.
            </summary>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.SortedList.#ctor(System.Collections.IComparer)">
            <summary>
            Initializes a new instance of the SortedList class that is empty 
            and is sorted according to the specified IComparer interface.
            </summary>
            <param name="comparer">
            The IComparer implementation to use when comparing keys, or a null 
            reference to use the IComparable implementation of each key. 
            </param>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.SortedList.#ctor(Sanford.Collections.ImmutableCollections.IAvlNode,System.Collections.IComparer)">
            <summary>
            Initializes a new instance of the SortedList class with the 
            specified root node and the IComparer interface to use for sorting
            keys.
            </summary>
            <param name="root">
            The root of the AVL tree.
            </param>
            <param name="comparer">
            The IComparer implementation to use when comparing keys, or a null 
            reference to use the IComparable implementation of each key.
            </param>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.SortedList.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the specified key and value to the SortedList.
            </summary>
            <param name="key">
            The key of the element to add.
            </param>
            <param name="value">
            The value of the element to add. The value can be a null reference.
            </param>
            <returns>
            A new SortedList with the specified key and value added to the 
            previous SortedList.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <i>key</i> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the specified key already exists in the SortedList,
            or The SortedList is set to use the IComparable interface, and key 
            does not implement the IComparable interface.
            </exception>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.SortedList.Contains(System.Object)">
            <summary>
            Determines whether the SortedList contains a specific key.
            </summary>
            <param name="key">
            The key to locate in the SortedList. 
            </param>
            <returns>
            <b>true</b> if the SortedList contains an element with the 
            specified <i>key</i>; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.SortedList.GetEnumerator">
            <summary>
            Returns an IDictionaryEnumerator that can iterate through the 
            SortedList.
            </summary>
            <returns>
            An IDictionaryEnumerator for the SortedList.
            </returns>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.SortedList.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from SortedList.
            </summary>
            <param name="key">
            </param>
            <returns>
            The <i>key</i> of the element to remove. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <i>key</i> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            The SortedList is set to use the IComparable interface, and key 
            does not implement the IComparable interface.
            </exception>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.SortedList.Item(System.Object)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.SortedList.Count">
            <summary>
            Gets the number of elements contained in the SortedList.
            </summary>
        </member>
        <member name="T:Sanford.Collections.ImmutableCollections.SortedList.SortedListEnumerator">
            <summary>
            Provides functionality for iterating through a SortedList.
            </summary>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.SortedList.SortedListEnumerator.#ctor(Sanford.Collections.ImmutableCollections.IAvlNode)">
            <summary>
            Initializes a new instance of the SortedListEnumerator class 
            with the specified root of the AVL tree to iterate over.
            </summary>
            <param name="root">
            The root of the AVL tree the SortedList uses internally.
            </param>
        </member>
        <member name="T:Sanford.Collections.ImmutableCollections.Stack">
            <summary>
            Represents a simple last-in-first-out collection of objects.
            </summary>
        </member>
        <member name="F:Sanford.Collections.ImmutableCollections.Stack.Empty">
            <summary>
            An empty Stack.
            </summary>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.Stack.#ctor">
            <summary>
            Initializes a new instance of the Stack class.
            </summary>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.Stack.#ctor(Sanford.Collections.ImmutableCollections.Stack.Node,System.Int32)">
            <summary>
            Initializes a new instance of the Stack class with the 
            specified top node and the number of elements in the stack.
            </summary>
            <param name="top">
            The top node in the stack.
            </param>
            <param name="count">
            The number of elements in the stack.
            </param>        
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.Stack.Push(System.Object)">
            <summary>
            Inserts an object at the top of the Stack.
            </summary>
            <param name="obj">
            The Object to push onto the Stack.
            </param>
            <returns>
            A new stack with the specified object on the top of the stack.
            </returns>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.Stack.Pop">
            <summary>
            Removes the object at the top of the Stack.
            </summary>
            <returns>
            A new stack with top of the previous stack removed.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The Stack is empty.
            </exception>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.Stack.GetEnumerator">
            <summary>
            Returns an IEnumerator for the Stack.
            </summary>
            <returns>
            An IEnumerator for the Stack.
            </returns>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.Stack.Count">
            <summary>
            Gets the number of elements in the Stack.
            </summary>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.Stack.Top">
            <summary>
            Gets the top of the stack.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The Stack is empty.
            </exception>
        </member>
        <member name="T:Sanford.Collections.ImmutableCollections.Stack.Node">
            <summary>
            Represents a node in the stack.
            </summary>
        </member>
        <member name="T:Sanford.Collections.ImmutableCollections.Stack.StackEnumerator">
            <summary>
            Provides functionality for iterating over the Stack class.
            </summary>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.Stack.StackEnumerator.#ctor(Sanford.Collections.ImmutableCollections.Stack)">
            <summary>
            Initializes a new instance of the StackEnumerator class with 
            the specified stack to iterate over.
            </summary>
            <param name="owner">
            The Stack to iterate over.
            </param>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.Stack.StackEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before 
            the first element in the Stack.
            </summary>
        </member>
        <member name="M:Sanford.Collections.ImmutableCollections.Stack.StackEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the Stack.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sanford.Collections.ImmutableCollections.Stack.StackEnumerator.Current">
            <summary>
            Gets the current element in the Stack.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the 
            Stack or after the last element.
            </exception>
        </member>
        <member name="T:Sanford.Collections.SkipList">
            <summary>
            Represents a collection of key-and-value pairs.
            </summary>
            <remarks>
            The SkipList class is an implementation of the IDictionary interface. It 
            is based on the data structure created by William Pugh.
            </remarks> 
        </member>
        <member name="M:Sanford.Collections.SkipList.#ctor">
            <summary>
            Initializes a new instance of the SkipList class that is empty and 
            is sorted according to the IComparable interface implemented by 
            each key added to the SkipList.
            </summary>
            <remarks>
            Each key must implement the IComparable interface to be capable of 
            comparisons with every other key in the SortedList. The elements 
            are sorted according to the IComparable implementation of each key 
            added to the SkipList.
            </remarks>
        </member>
        <member name="M:Sanford.Collections.SkipList.#ctor(System.Collections.IComparer)">
            <summary>
            Initializes a new instance of the SkipList class that is empty and 
            is sorted according to the specified IComparer interface.
            </summary>
            <param name="comparer">
            The IComparer implementation to use when comparing keys. 
            </param>
            <remarks>
            The elements are sorted according to the specified IComparer 
            implementation. If comparer is a null reference, the IComparable 
            implementation of each key is used; therefore, each key must 
            implement the IComparable interface to be capable of comparisons 
            with every other key in the SkipList.
            </remarks>
        </member>
        <member name="M:Sanford.Collections.SkipList.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Sanford.Collections.SkipList.Initialize">
            <summary>
            Initializes the SkipList.
            </summary>
        </member>
        <member name="M:Sanford.Collections.SkipList.GetNewLevel">
            <summary>
            Returns a level value for a new SkipList node.
            </summary>
            <returns>
            The level value for a new SkipList node.
            </returns>
        </member>
        <member name="M:Sanford.Collections.SkipList.Search(System.Object)">
            <summary>
            Searches for the specified key.
            </summary>
            <param name="key">
            The key to search for.
            </param>
            <returns>
            Returns true if the specified key is in the SkipList.
            </returns>
        </member>
        <member name="M:Sanford.Collections.SkipList.Search(System.Object,Sanford.Collections.SkipList.Node@)">
            <summary>
            Searches for the specified key.
            </summary>
            <param name="key">
            The key to search for.
            </param>
            <param name="curr">
            A SkipList node to hold the results of the search.
            </param>
            <returns>
            Returns true if the specified key is in the SkipList.
            </returns>
        </member>
        <member name="M:Sanford.Collections.SkipList.Search(System.Object,Sanford.Collections.SkipList.Node[])">
            <summary>
            Searches for the specified key.
            </summary>
            <param name="key">
            The key to search for.
            </param>
            <param name="update">
            An array of nodes holding references to the places in the SkipList
            search in which the search dropped down one level.
            </param>
            <returns>
            Returns true if the specified key is in the SkipList.
            </returns>
        </member>
        <member name="M:Sanford.Collections.SkipList.Search(System.Object,Sanford.Collections.SkipList.Node@,Sanford.Collections.SkipList.Node[])">
            <summary>
            Searches for the specified key.
            </summary>
            <param name="key">
            The key to search for.
            </param>
            <param name="curr">
            A SkipList node to hold the results of the search.
            </param>
            <param name="update">
            An array of nodes holding references to the places in the SkipList
            search in which the search dropped down one level.
            </param>
            <returns>
            Returns true if the specified key is in the SkipList.
            </returns>
        </member>
        <member name="M:Sanford.Collections.SkipList.SearchWithComparer(System.Object,Sanford.Collections.SkipList.Node@,Sanford.Collections.SkipList.Node[])">
            <summary>
            Search for the specified key using a comparer.
            </summary>
            <param name="key">
            The key to search for.
            </param>
            <param name="curr">
            A SkipList node to hold the results of the search.
            </param>
            <param name="update">
            An array of nodes holding references to the places in the SkipList
            search in which the search dropped down one level.
            </param>
            <returns>
            Returns true if the specified key is in the SkipList.
            </returns>
        </member>
        <member name="M:Sanford.Collections.SkipList.SearchWithComparable(System.Object,Sanford.Collections.SkipList.Node@,Sanford.Collections.SkipList.Node[])">
            <summary>
            Search for the specified key using the IComparable interface 
            implemented by each key.
            </summary>
            <param name="key">
            The key to search for.
            </param>
            <param name="curr">
            A SkipList node to hold the results of the search.
            </param>
            <param name="update">
            An array of nodes holding references to the places in the SkipList
            search in which the search dropped down one level.
            </param>
            <returns>
            Returns true if the specified key is in the SkipList.
            </returns>
            <remarks>
            Assumes each key inserted into the SkipList implements the 
            IComparable interface.
            
            If the specified key is in the SkipList, the curr parameter will
            reference the node with the key. If the specified key is not in the
            SkipList, the curr paramater will either hold the node with the 
            first key value greater than the specified key or it will have the
            same value as the header indicating that the search reached the end 
            of the SkipList.
            </remarks>
        </member>
        <member name="M:Sanford.Collections.SkipList.Insert(System.Object,System.Object,Sanford.Collections.SkipList.Node[])">
            <summary>
            Inserts a key/value pair into the SkipList.
            </summary>
            <param name="key">
            The key to insert into the SkipList.
            </param>
            <param name="val">
            The value to insert into the SkipList.
            </param>
            <param name="update">
            An array of nodes holding references to places in the SkipList in 
            which the search for the place to insert the new key/value pair 
            dropped down one level.
            </param>
        </member>
        <member name="M:Sanford.Collections.SkipList.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the SkipList.
            </summary>
            <param name="key">
            The Object to use as the key of the element to add. 
            </param>
            <param name="value">
            The Object to use as the value of the element to add. 
            </param>
        </member>
        <member name="M:Sanford.Collections.SkipList.Clear">
            <summary>
            Removes all elements from the SkipList.
            </summary>
        </member>
        <member name="M:Sanford.Collections.SkipList.Contains(System.Object)">
            <summary>
            Determines whether the SkipList contains an element with the 
            specified key.
            </summary>
            <param name="key">
            The key to locate in the SkipList.
            </param>
            <returns>
            true if the SkipList contains an element with the key; otherwise, 
            false.
            </returns>
        </member>
        <member name="M:Sanford.Collections.SkipList.GetEnumerator">
            <summary>
            Returns an IDictionaryEnumerator for the SkipList.
            </summary>
            <returns>
            An IDictionaryEnumerator for the SkipList.
            </returns>
        </member>
        <member name="M:Sanford.Collections.SkipList.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the SkipList.
            </summary>
            <param name="key">
            The key of the element to remove.
            </param>
        </member>
        <member name="M:Sanford.Collections.SkipList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the SkipList to an Array, starting at a 
            particular Array index.
            </summary>
            <param name="array">
            The one-dimensional Array that is the destination of the elements 
            copied from SkipList.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:Sanford.Collections.SkipList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the SkipList.
            </summary>
            <returns>
            An IEnumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Sanford.Collections.SkipList.IsFixedSize">
            <summary>
            Gets a value indicating whether the SkipList has a fixed size.
            </summary>
        </member>
        <member name="P:Sanford.Collections.SkipList.IsReadOnly">
            <summary>
            Gets a value indicating whether the IDictionary is read-only.
            </summary>
        </member>
        <member name="P:Sanford.Collections.SkipList.Item(System.Object)">
            <summary>
            Gets or sets the element with the specified key. This is the 
            indexer for the SkipList. 
            </summary>
        </member>
        <member name="P:Sanford.Collections.SkipList.Keys">
            <summary>
            Gets an ICollection containing the keys of the SkipList.
            </summary>
        </member>
        <member name="P:Sanford.Collections.SkipList.Values">
            <summary>
            Gets an ICollection containing the values of the SkipList.
            </summary>
        </member>
        <member name="P:Sanford.Collections.SkipList.Count">
            <summary>
            Gets the number of elements contained in the SkipList.
            </summary>
        </member>
        <member name="P:Sanford.Collections.SkipList.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the SkipList is 
            synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Sanford.Collections.SkipList.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the 
            SkipList.
            </summary>
        </member>
        <member name="T:Sanford.Collections.SkipList.Node">
            <summary>
            Represents a node in the SkipList.
            </summary>
        </member>
        <member name="M:Sanford.Collections.SkipList.Node.#ctor(System.Int32)">
            <summary>
            Initializes an instant of a Node with its node level.
            </summary>
            <param name="level">
            The node level.
            </param>
        </member>
        <member name="M:Sanford.Collections.SkipList.Node.#ctor(System.Int32,System.Object,System.Object)">
            <summary>
            Initializes an instant of a Node with its node level and 
            key/value pair.
            </summary>
            <param name="level">
            The node level.
            </param>
            <param name="key">
            The key for the node.
            </param>
            <param name="val">
            The value for the node.
            </param>
        </member>
        <member name="M:Sanford.Collections.SkipList.Node.Dispose">
            <summary>
            Disposes the Node.
            </summary>
        </member>
        <member name="P:Sanford.Collections.SkipList.Node.Key">
            <summary>
            Key property.
            </summary>
        </member>
        <member name="P:Sanford.Collections.SkipList.Node.Value">
            <summary>
            Value property.
            </summary>
        </member>
        <member name="P:Sanford.Collections.SkipList.Node.Entry">
            <summary>
            Node dictionary Entry property - contains key/value pair. 
            </summary>
        </member>
        <member name="T:Sanford.Collections.SkipList.SkipListEnumerator">
            <summary>
            Enumerates the elements of a skip list.
            </summary>
        </member>
        <member name="M:Sanford.Collections.SkipList.SkipListEnumerator.#ctor(Sanford.Collections.SkipList)">
            <summary>
            Initializes an instance of a SkipListEnumerator.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Sanford.Collections.SkipList.SkipListEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the skip list.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next 
            element; false if the enumerator has passed the end of the 
            skip list.
            </returns>
        </member>
        <member name="M:Sanford.Collections.SkipList.SkipListEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before 
            the first element in the skip list.
            </summary>
        </member>
        <member name="P:Sanford.Collections.SkipList.SkipListEnumerator.Entry">
            <summary>
            Gets both the key and the value of the current dictionary 
            entry.
            </summary>
        </member>
        <member name="P:Sanford.Collections.SkipList.SkipListEnumerator.Key">
            <summary>
            Gets the key of the current dictionary entry.
            </summary>
        </member>
        <member name="P:Sanford.Collections.SkipList.SkipListEnumerator.Value">
            <summary>
            Gets the value of the current dictionary entry.
            </summary>
        </member>
        <member name="P:Sanford.Collections.SkipList.SkipListEnumerator.Current">
            <summary>
            Gets the current element in the skip list.
            </summary>
        </member>
        <member name="T:Sanford.Threading.AsyncResult">
            <summary>
            Provides basic implementation of the IAsyncResult interface.
            </summary>
        </member>
        <member name="M:Sanford.Threading.AsyncResult.#ctor(System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the AsyncResult object with the
            specified owner of the AsyncResult object, the optional callback
            delegate, and optional state object.
            </summary>
            <param name="owner">
            The owner of the AsyncResult object.
            </param>
            <param name="callback">
            An optional asynchronous callback, to be called when the 
            operation is complete. 
            </param>
            <param name="state">
            A user-provided object that distinguishes this particular 
            asynchronous request from other requests. 
            </param>
        </member>
        <member name="M:Sanford.Threading.AsyncResult.Signal">
            <summary>
            Signals that the operation has completed.
            </summary>
        </member>
        <member name="P:Sanford.Threading.AsyncResult.Owner">
            <summary>
            Gets the owner of this AsyncResult object.
            </summary>
        </member>
        <member name="T:Sanford.Threading.DelegateQueue">
            <summary>
            Represents an asynchronous queue of delegates.
            </summary>
        </member>
        <member name="M:Sanford.Threading.DelegateQueue.#ctor">
            <summary>
            Initializes a new instance of the DelegateQueue class.
            </summary>
        </member>
        <member name="M:Sanford.Threading.DelegateQueue.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the DelegateQueue class with the specified IContainer object.
            </summary>
            <param name="container">
            The IContainer to which the DelegateQueue will add itself.
            </param>
        </member>
        <member name="M:Sanford.Threading.DelegateQueue.BeginInvokePriority(System.Delegate,System.Object[])">
            <summary>
            Executes the delegate on the main thread that this object executes on.
            </summary>
            <param name="method">
            A Delegate to a method that takes parameters of the same number and 
            type that are contained in args. 
            </param>
            <param name="args">
            An array of type Object to pass as arguments to the given method. 
            </param>
            <returns>
            An IAsyncResult interface that represents the asynchronous operation 
            started by calling this method.
            </returns>
            <remarks>
            The delegate is placed at the beginning of the queue. Its invocation
            takes priority over delegates already in the queue. 
            </remarks>
        </member>
        <member name="M:Sanford.Threading.DelegateQueue.InvokePriority(System.Delegate,System.Object[])">
            <summary>
            Executes the delegate on the main thread that this object executes on.
            </summary>
            <param name="method">
            A Delegate to a method that takes parameters of the same number and 
            type that are contained in args. 
            </param>
            <param name="args">
            An array of type Object to pass as arguments to the given method. 
            </param>
            <returns>
            An IAsyncResult interface that represents the asynchronous operation 
            started by calling this method.
            </returns>
            <remarks>
            <para>
            The delegate is placed at the beginning of the queue. Its invocation
            takes priority over delegates already in the queue. 
            </para>
            <para>
            Unlike BeginInvoke, this method operates synchronously, that is, it 
            waits until the process completes before returning. Exceptions raised 
            during the call are propagated back to the caller.
            </para>
            </remarks>
        </member>
        <member name="M:Sanford.Threading.DelegateQueue.PostPriority(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches an asynchronous message to this synchronization context. 
            </summary>
            <param name="d">
            The SendOrPostCallback delegate to call.
            </param>
            <param name="state">
            The object passed to the delegate.
            </param>
            <remarks>
            The Post method starts an asynchronous request to post a message. 
            </remarks>
        </member>
        <member name="M:Sanford.Threading.DelegateQueue.SendPriority(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches an synchronous message to this synchronization context. 
            </summary>
            <param name="d">
            The SendOrPostCallback delegate to call.
            </param>
            <param name="state">
            The object passed to the delegate.
            </param>
        </member>
        <member name="M:Sanford.Threading.DelegateQueue.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches a synchronous message to this synchronization context. 
            </summary>
            <param name="d">
            The SendOrPostCallback delegate to call.
            </param>
            <param name="state">
            The object passed to the delegate.
            </param>
            <remarks>
            The Send method starts an synchronous request to send a message. 
            </remarks>
        </member>
        <member name="M:Sanford.Threading.DelegateQueue.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches an asynchronous message to this synchronization context. 
            </summary>
            <param name="d">
            The SendOrPostCallback delegate to call.
            </param>
            <param name="state">
            The object passed to the delegate.
            </param>
            <remarks>
            The Post method starts an asynchronous request to post a message. 
            </remarks>
        </member>
        <member name="M:Sanford.Threading.DelegateQueue.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            Executes the delegate on the main thread that this DelegateQueue executes on.
            </summary>
            <param name="method">
            A Delegate to a method that takes parameters of the same number and type that 
            are contained in args. 
            </param>
            <param name="args">
            An array of type Object to pass as arguments to the given method. This can be 
            a null reference (Nothing in Visual Basic) if no arguments are needed. 
            </param>
            <returns>
            An IAsyncResult interface that represents the asynchronous operation started 
            by calling this method.
            </returns>
            <remarks>
            <para>The delegate is called asynchronously, and this method returns immediately. 
            You can call this method from any thread. If you need the return value from a process 
            started with this method, call EndInvoke to get the value.</para>
            <para>If you need to call the delegate synchronously, use the Invoke method instead.</para>
            </remarks>
        </member>
        <member name="M:Sanford.Threading.DelegateQueue.EndInvoke(System.IAsyncResult)">
            <summary>
            Waits until the process started by calling BeginInvoke completes, and then returns 
            the value generated by the process.
            </summary>
            <param name="result">
            An IAsyncResult interface that represents the asynchronous operation started 
            by calling BeginInvoke. 
            </param>
            <returns>
            An Object that represents the return value generated by the asynchronous operation.
            </returns>
            <remarks>
            This method gets the return value of the asynchronous operation represented by the 
            IAsyncResult passed by this interface. If the asynchronous operation has not completed, this method will wait until the result is available.
            </remarks>
        </member>
        <member name="M:Sanford.Threading.DelegateQueue.Invoke(System.Delegate,System.Object[])">
            <summary>
            Executes the delegate on the main thread that this DelegateQueue executes on.
            </summary>
            <param name="method">
            A Delegate that contains a method to call, in the context of the thread for the DelegateQueue.
            </param>
            <param name="args">
            An array of type Object that represents the arguments to pass to the given method.
            </param>
            <returns>
            An Object that represents the return value from the delegate being invoked, or a 
            null reference (Nothing in Visual Basic) if the delegate has no return value.
            </returns>
            <remarks>
            <para>Unlike BeginInvoke, this method operates synchronously, that is, it waits until 
            the process completes before returning. Exceptions raised during the call are propagated 
            back to the caller.</para>
            <para>Use this method when calling a method from a different thread to marshal the call 
            to the proper thread.</para>
            </remarks>
        </member>
        <member name="M:Sanford.Threading.DelegateQueue.Dispose">
            <summary>
            Disposes of the DelegateQueue.
            </summary>
        </member>
        <member name="E:Sanford.Threading.DelegateQueue.InvokeCompleted">
            <summary>
            Occurs after a method has been invoked as a result of a call to 
            the BeginInvoke or BeginInvokePriority methods.
            </summary>
        </member>
        <member name="E:Sanford.Threading.DelegateQueue.PostCompleted">
            <summary>
            Occurs after a method has been invoked as a result of a call to
            the Post and PostPriority methods.
            </summary>
        </member>
        <member name="E:Sanford.Threading.DelegateQueue.Disposed">
            <summary>
            Represents the method that handles the Disposed delegate of a DelegateQueue.
            </summary>
        </member>
        <member name="P:Sanford.Threading.DelegateQueue.Site">
            <summary>
            Gets or sets the ISite associated with the DelegateQueue.
            </summary>
        </member>
        <member name="P:Sanford.Threading.DelegateQueue.InvokeRequired">
            <summary>
            Gets a value indicating whether the caller must call Invoke.
            </summary>
            <value>
            <b>true</b> if the caller must call Invoke; otherwise, <b>false</b>.
            </value>
            <remarks>
            This property determines whether the caller must call Invoke when making 
            method calls to this DelegateQueue. If you are calling a method from a different 
            thread, you must use the Invoke method to marshal the call to the proper thread.
            </remarks>
        </member>
        <member name="T:Sanford.Threading.DelegateQueue.DelegateQueueAsyncResult">
            <summary>
            Implements the IAsyncResult interface for the DelegateQueue class.
            </summary>
        </member>
        <member name="T:Sanford.Threading.DelegateScheduler">
            <summary>
            Provides functionality for timestamped delegate invocation.
            </summary>
        </member>
        <member name="F:Sanford.Threading.DelegateScheduler.Infinite">
            <summary>
            A constant value representing an unlimited number of delegate invocations.
            </summary>
        </member>
        <member name="M:Sanford.Threading.DelegateScheduler.#ctor">
            <summary>
            Initializes a new instance of the DelegateScheduler class.
            </summary>
        </member>
        <member name="M:Sanford.Threading.DelegateScheduler.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the DelegateScheduler class with the
            specified IContainer.
            </summary>
        </member>
        <member name="M:Sanford.Threading.DelegateScheduler.Add(System.Int32,System.Int32,System.Delegate,System.Object[])">
            <summary>
            Adds a delegate to the DelegateScheduler.
            </summary>
            <param name="count">
            The number of times the delegate should be invoked.
            </param>
            <param name="millisecondsTimeout">
            The time in milliseconds between delegate invocation.
            </param>
            <param name="method">
            </param>
            The delegate to invoke.
            <param name="args">
            The arguments to pass to the delegate when it is invoked.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            If the DelegateScheduler has already been disposed.
            </exception>
            <remarks>
            If an unlimited count is desired, pass the DelegateScheduler.Infinity 
            constant as the count argument.
            </remarks>
        </member>
        <member name="M:Sanford.Threading.DelegateScheduler.Start">
            <summary>
            Starts the DelegateScheduler.
            </summary>
        </member>
        <member name="M:Sanford.Threading.DelegateScheduler.Stop">
            <summary>
            Stops the DelegateScheduler.
            </summary>
        </member>
        <member name="M:Sanford.Threading.DelegateScheduler.Clear">
            <summary>
            Clears the DelegateScheduler of all tasks.
            </summary>
        </member>
        <member name="E:Sanford.Threading.DelegateScheduler.InvokeCompleted">
            <summary>
            Raised when a delegate is invoked.
            </summary>
        </member>
        <member name="P:Sanford.Threading.DelegateScheduler.PollingInterval">
            <summary>
            Gets or sets the interval in milliseconds in which the 
            DelegateScheduler polls its queue of delegates in order to 
            determine when they should run.
            </summary>
        </member>
        <member name="P:Sanford.Threading.DelegateScheduler.IsRunning">
            <summary>
            Gets a value indicating whether the DelegateScheduler is running.
            </summary>
        </member>
        <member name="P:Sanford.Threading.DelegateScheduler.SynchronizingObject">
            <summary>
            Gets or sets the object used to marshal event-handler calls and delegate invocations.
            </summary>
        </member>
        <member name="T:Sanford.Threading.InvokeCompletedEventArgs">
            <summary>
            Represents information about the InvokeCompleted event.
            </summary>
        </member>
        <member name="T:Sanford.StateMachineToolkit.ActiveStateMachine`3">
            <summary>
            The ActiveStateMachine class uses the Active Object design pattern. 
            What this means is that an ActiveStateMachine object runs in its own thread. 
            Internally, ActiveStateMachines use <see cref="T:Sanford.Threading.DelegateQueue"/> objects for handling 
            and dispatching events. 
            You derive your state machines from this class when you want them to be active objects.<para/>
            The ActiveStateMachine class implements the <see cref="T:System.IDisposable"/> interface. 
            Since it represents an  active object, it needs to be disposed of at some point to 
            shut its thread down. 
            The Dispose method was made virtual so that derived ActiveStateMachine classes can override it. 
            Typically, a derived ActiveStateMachine will override the Dispose method, and when it is called, 
            will send an event to itself using the <see cref="M:Sanford.StateMachineToolkit.ActiveStateMachine`3.SendPriority(`1,`2)"/> method telling it to dispose of itself. 
            In other words, disposing of an ActiveStateMachine is treated like an event. 
            How your state machine handles the disposing event depends on its current state. 
            However, at some point, your state machine will need to call the ActiveStateMachine's 
            <see cref="M:Sanford.StateMachineToolkit.ActiveStateMachine`3.Dispose(System.Boolean)"/> base class method, passing it a true value. 
            This lets the base class dispose of its <see cref="T:Sanford.Threading.DelegateQueue"/> object, thus shutting down the 
            thread in which it is running.
            </summary>
            <typeparam name="TState">The state enumeration type.</typeparam>
            <typeparam name="TEvent">The event enumeration type.</typeparam>
            <typeparam name="TArgs">The event arguments type.</typeparam>
        </member>
        <member name="T:Sanford.StateMachineToolkit.StateMachine`3">
            <summary>
            Represents the base class for all state machines. You do not derive your state machine classes from this 
            class but rather from one of its derived classes, either the <see cref="T:Sanford.StateMachineToolkit.ActiveStateMachine`3"/> 
            class or the <see cref="T:Sanford.StateMachineToolkit.PassiveStateMachine`3"/> class.
            </summary>
            <typeparam name="TState">The state enumeration type.</typeparam>
            <typeparam name="TEvent">The event enumeration type.</typeparam>
            <typeparam name="TArgs">The event arguments type.</typeparam>
        </member>
        <member name="T:Sanford.StateMachineToolkit.IStateMachine`3">
            <summary>
            Represents the base class for all state machines. You do not derive your state machine classes from this 
            class but rather from one  of its derived classes, either the <see cref="T:Sanford.StateMachineToolkit.ActiveStateMachine`2"/> 
            class or the <see cref="T:Sanford.StateMachineToolkit.PassiveStateMachine`2"/> class.
            </summary>
            <typeparam name="TState">The state enumeration type.</typeparam>
            <typeparam name="TEvent">The event enumeration type.</typeparam>
        </member>
        <member name="M:Sanford.StateMachineToolkit.IStateMachine`3.Send(`1,`2)">
            <summary>
            Sends an event to the state machine, that might trigger a transition.
            </summary>
            <param name="eventId">The event.</param>
            <param name="args">Optional event arguments.</param>
        </member>
        <member name="E:Sanford.StateMachineToolkit.IStateMachine`3.BeginDispatch">
            <summary>
            Occurs before a dispatch starts.
            </summary>
        </member>
        <member name="E:Sanford.StateMachineToolkit.IStateMachine`3.BeginTransition">
            <summary>
            Occurs before a transition starts.
            </summary>
        </member>
        <member name="E:Sanford.StateMachineToolkit.IStateMachine`3.ExceptionThrown">
            <summary>
            Occurs when an exception is thrown.
            </summary>
        </member>
        <member name="E:Sanford.StateMachineToolkit.IStateMachine`3.TransitionCompleted">
            <summary>
            Occurs after a transition is completed.
            </summary>
        </member>
        <member name="E:Sanford.StateMachineToolkit.IStateMachine`3.TransitionDeclined">
            <summary>
            Occurs when a transition is declined.
            </summary>
        </member>
        <member name="P:Sanford.StateMachineToolkit.IStateMachine`3.CurrentStateID">
            <summary>
            Gets the ID of the current state.
            </summary>
        </member>
        <member name="F:Sanford.StateMachineToolkit.StateMachine`3.s_currentStateMachine">
            <summary>
            The return value of the last action.
            </summary>
        </member>
        <member name="F:Sanford.StateMachineToolkit.StateMachine`3.m_initialized">
            <summary>
            Indicates whether the state machine has been initialized.
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.AddTransition(`0,`1,`0,System.EventHandler{Sanford.StateMachineToolkit.TransitionEventArgs{`0,`1,`2}}[])">
            <summary>
            Adds a new transition to the state machine.  The source and target states will be 
            implicitly added to the state machine if necesseray. 
            </summary>
            <param name="source">The source state.</param>
            <param name="eventId">The event that will trigger the transition.</param>
            <param name="target">The target state.</param>
            <param name="actions">Optional actions that will be performed during the transition.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.AddTransition(`0,`1,Sanford.StateMachineToolkit.GuardHandler{`0,`1,`2},`0,System.EventHandler{Sanford.StateMachineToolkit.TransitionEventArgs{`0,`1,`2}}[])">
            <summary>
            Adds a new transition to the state machine.  The source and target states will be 
            implicitly added to the state machine if necessary. 
            </summary>
            <param name="source">The source state.</param>
            <param name="eventId">The event that will trigger the transition.</param>
            <param name="guard">A transition guard.</param>
            <param name="target">The target state.</param>
            <param name="actions">Optional actions that will be performed during the transition.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.Send(`1,`2)">
            <summary>
            Sends an event to the state machine, that might trigger a transition.
            </summary>
            <param name="eventId">The event.</param>
            <param name="args">Optional event arguments.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.SetupSubstates(`0,Sanford.StateMachineToolkit.HistoryType,`0,`0[])">
            <summary>
            Setups substates for hierarchical state machine.
            </summary>
            <param name="superState">The super state.</param>
            <param name="historyType">The history type.</param>
            <param name="initialSubstate">The initial substate.</param>
            <param name="additionalSubstates">Additional substates.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.AssertMachineIsValid">
            <summary>
            Asserts that the state machine was initialized.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the state machine was not initialized.</exception>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.Dispatch(`1,`2)">
            <summary>
            Dispatches events to the current state.
            </summary>
            <param name="eventId">
            The event ID.
            </param>
            <param name="args">
            The data accompanying the event.
            </param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.HandleDispatchException(System.Exception)">
            <summary>
            Template method for handling dispatch exceptions.
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.Initialize(`0)">
            <summary>
            Initializes the StateMachine's initial state.
            </summary>
            <param name="initialStateId">
            The state that will initially receive events from the StateMachine.
            </param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.Initialize">
            <summary>
            Initializes the StateMachine's initial state.
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.InitializeStateMachine(`0)">
            <summary>
            Initializes the StateMachine's initial state.
            </summary>
            <param name="initialStateId">
            The state that will initially receive events from the StateMachine.
            </param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.OnBeginDispatch(Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.EventContext)">
            <summary>
            Raises the <see cref="!:StateMachine&lt;TState,TEvent&gt;.BeginDispatch"/> event.
            </summary>
            <param name="eventContext">The event context.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.OnBeginTransition(Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.EventContext)">
            <summary>
            Raises the <see cref="!:StateMachine&lt;TState,TEvent&gt;.BeginTransition"/> event.
            </summary>
            <param name="eventContext">The event context.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.OnExceptionThrown(Sanford.StateMachineToolkit.TransitionErrorEventArgs{`0,`1,`2})">
            <summary>
            Raises the <see cref="!:StateMachine&lt;TState,TEvent&gt;.ExceptionThrown"/> event.
            </summary>
            <param name="args">The <see cref="!:TransitionCompletedEventArgs&lt;TState,TEvent&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.OnTransitionCompleted(Sanford.StateMachineToolkit.TransitionCompletedEventArgs{`0,`1,`2})">
            <summary>
            Raises the <see cref="E:Sanford.StateMachineToolkit.StateMachine`3.TransitionCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:Sanford.StateMachineToolkit.TransitionCompletedEventArgs`3"/> instance 
            containing the event data.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.OnTransitionDeclined(Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.EventContext)">
            <summary>
            Raises the <see cref="E:Sanford.StateMachineToolkit.StateMachine`3.TransitionDeclined"/> event.
            </summary>
            <param name="eventContext">The event context.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.RaiseSafeEvent``1(System.EventHandler{``0},``0,Sanford.StateMachineToolkit.ExceptionPolicy)">
            <summary>
            Raises an event, without throwing out exceptions. 
            Optionally, exceptions could trigger the <see cref="E:Sanford.StateMachineToolkit.StateMachine`3.ExceptionThrown"/> event.
            </summary>
            <typeparam name="TArgs">The type of the event arguments.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <param name="args">The event arguments.</param>
            <param name="exceptionPolicy">if set to <see cref="F:Sanford.StateMachineToolkit.ExceptionPolicy.RaiseExceptionEvent"/> 
            exceptions will trigger the <see cref="E:Sanford.StateMachineToolkit.StateMachine`3.ExceptionThrown"/> event.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.SendPriority(`1,`2)">
            <summary>
            Sends an event to the state machine, that might trigger a transition.
            This event will have precedence over other pending events that were sent using
            the <see cref="M:Sanford.StateMachineToolkit.StateMachine`3.Send(`1,`2)"/> method.
            </summary>
            <param name="eventId">The event.</param>
            <param name="args">event arguments.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.currentStateMachineOnBeginTransition">
            <summary>
            Raises the <see cref="E:Sanford.StateMachineToolkit.StateMachine`3.BeginTransition"/> event 
            on the currently running state machine.
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.currentStateMachineOnExceptionThrown(System.Exception)">
            <summary>
            Raises the <see cref="E:Sanford.StateMachineToolkit.StateMachine`3.ExceptionThrown"/> event
            on the currently running state machine.
            </summary>
            <param name="ex">The exception that was thrown.</param>
        </member>
        <member name="E:Sanford.StateMachineToolkit.StateMachine`3.BeginDispatch">
            <summary>
            Occurs before a dispatch starts.
            </summary>
        </member>
        <member name="E:Sanford.StateMachineToolkit.StateMachine`3.BeginTransition">
            <summary>
            Occurs before a transition starts.
            </summary>
        </member>
        <member name="E:Sanford.StateMachineToolkit.StateMachine`3.ExceptionThrown">
            <summary>
            Occurs when an exception is thrown.
            </summary>
        </member>
        <member name="E:Sanford.StateMachineToolkit.StateMachine`3.TransitionCompleted">
            <summary>
            Occurs after a transition is completed.
            </summary>
        </member>
        <member name="E:Sanford.StateMachineToolkit.StateMachine`3.TransitionDeclined">
            <summary>
            Occurs when a transition is declined.
            </summary>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.Item(`0)">
            <summary>
            Gets the <see cref="T:Sanford.StateMachineToolkit.StateMachine`3.IStateEventHandlers"/> for the specified state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.CurrentStateID">
            <summary>
            Gets the ID of the current state.
            </summary>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.ActionResult">
            <summary>
            Gets or sets the results of the action performed during the last transition.
            </summary>
            <remarks>
            This property should only be set during the execution of an action method.
            </remarks>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.CurrentEventContext">
            <summary>
            Gets or sets the current event context.
            </summary>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.CurrentState">
            <summary>
            Gets or sets the current state.
            </summary>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.IsInitialized">
            <summary>
            Gets a value indicating whether this state machine is initialized.
            </summary>
            <value>
                <c>true</c> if this state machine is initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.states">
            <summary>
            Gets the states of the state machine.
            </summary>
        </member>
        <member name="T:Sanford.StateMachineToolkit.StateMachine`3.IStateEventHandlers">
            <summary>
            The event handlers of a state.
            </summary>
        </member>
        <member name="E:Sanford.StateMachineToolkit.StateMachine`3.IStateEventHandlers.EntryHandler">
            <summary>
            Occurs when entering the state.
            </summary>
        </member>
        <member name="E:Sanford.StateMachineToolkit.StateMachine`3.IStateEventHandlers.ExitHandler">
            <summary>
            Occurs when leaving the state.
            </summary>
        </member>
        <member name="T:Sanford.StateMachineToolkit.StateMachine`3.State">
            <summary>
            The State class represents a state a <see cref="!:StateMachine&lt;TState,TEvent&gt;"/> can be in during 
            its lifecycle. 
            A State can be a substate and/or superstate to other States.<para/>
            When a State receives an event, it checks to see if it has any Transitions for that event. 
            If it does, it iterates through all of the Transitions for that event until one of them fires. 
            If no Transitions were found, the State passes the event up to its superstate, if it has one; 
            the process is repeated at the superstate level. 
            This process can continue indefinitely until either a Transition fires or the top of the 
            state hierarchy is reached.<para/>
            After processing an event, the State returns the results to the 
            <see cref="!:Dispatch(TEvent,object[])"/> method where the State originally received the event. 
            The results indicate whether or not a Transition fired, and if so, the resulting 
            State of the <see cref="T:Sanford.StateMachineToolkit.StateMachine`3.Transition"/>. 
            It also indicates whether or not an exception occurred during the Transition's action 
            (if one was performed). State machines use this information to update their 
            current State, if necessary.
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.State.#ctor(`0,System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the State class with the specified
            number of events it will handle as well as its entry and exit 
            actions.
            </summary>
            <param name="stateId">
            The State's ID.
            </param>
            <param name="entryHandler">
            The entry action.
            </param>
            <param name="exitHandler">
            The exit action.
            </param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.State.Dispatch(Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.EventContext)">
            <summary>
            Dispatches an event to the StateMachine.
            </summary>
            <param name="context"></param>
            <returns>
            The results of the dispatch.
            </returns>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.State.Entry(Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.EventContext)">
            <summary>
            Enters the state.
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.State.Exit(Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.EventContext)">
            <summary>
            Exits the state.
            </summary>
        </member>
        <member name="E:Sanford.StateMachineToolkit.StateMachine`3.State.EntryHandler">
            <summary>
            Occurs when entering the state.
            </summary>
        </member>
        <member name="E:Sanford.StateMachineToolkit.StateMachine`3.State.ExitHandler">
            <summary>
            Occurs when leaving the state.
            </summary>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.State.HistoryType">
            <summary>
            Gets or sets the history type.
            </summary>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.State.ID">
            <summary>
            Gets the State's ID.
            </summary>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.State.InitialState">
            <summary>
            Gets or sets the initial state.
            </summary>
            <remarks>
            If no initial state exists for this state, this property is null.
            </remarks>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.State.Substates">
            <summary>
            Gets the collection of substates.
            </summary>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.State.Transitions">
            <summary>
            Gets the collection of transitions.
            </summary>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.State.Superstate">
            <summary>
            Gets or sets the superstate.
            </summary>
            <remarks>
            If no superstate exists for this state, this property is null.
            </remarks>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.State.Level">
            <summary>
            Gets the State's level in the State hierarchy.
            </summary>
        </member>
        <member name="T:Sanford.StateMachineToolkit.StateMachine`3.StateMap">
            <summary>
            A readonly mapping from <typeparamref name="TState"/> ID to 
            <see cref="T:Sanford.StateMachineToolkit.StateMachine`3.State"/> object.
            </summary>
        </member>
        <member name="F:Sanford.StateMachineToolkit.StateMachine`3.StateMap.m_map">
            <summary>
            Maps state IDs to state objects.
            </summary>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.StateMap.Item(`0)">
            <summary>
            Gets the <see cref="T:Sanford.StateMachineToolkit.StateMachine`3.State"/>
            object with the specified <typeparamref name="TState"/> ID.
            </summary>
            <param name="state">The state ID.</param>
            <value>The <typeparamref name="TState"/> ID.</value>
        </member>
        <member name="T:Sanford.StateMachineToolkit.StateMachine`3.EventContext">
            <summary>
            A context with information about an event is being processed by the state machine.
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.EventContext.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Sanford.StateMachineToolkit.StateMachine`3.EventContext"/> class.
            </summary>
            <param name="sourceState">The source state.</param>
            <param name="currentEvent">The current event.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.EventContext.SourceState">
            <summary>
            Gets the source state.
            </summary>
            <value>The state of the source.</value>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.EventContext.Args">
            <summary>
            Gets the event arguments.
            </summary>
            <value>The event arguments.</value>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.EventContext.CurrentEvent">
            <summary>
            Gets the current event.
            </summary>
            <value>The current event.</value>
        </member>
        <member name="T:Sanford.StateMachineToolkit.StateMachine`3.SubstateCollection">
            <summary>
            The SubstateCollection class represents a collection of substates. 
            Each <see cref="T:Sanford.StateMachineToolkit.StateMachine`3.State"/> has a <see cref="P:Sanford.StateMachineToolkit.StateMachine`3.State.Substates"/> 
            property of the SubstateCollection type. 
            Substates are added and removed to a <see cref="T:Sanford.StateMachineToolkit.StateMachine`3.State"/> via this property.<para/>
            Substates are not represented by their own class. The <see cref="T:Sanford.StateMachineToolkit.StateMachine`3.State"/> class 
            performs double duty, playing the role of substates and superstates when necessary. 
            Whether or not a <see cref="T:Sanford.StateMachineToolkit.StateMachine`3.State"/> is a substate depends on whether or not 
            it has been added to another State's <see cref="P:Sanford.StateMachineToolkit.StateMachine`3.State.Substates"/> collection. 
            And whether or not a State is a superstate depends on whether or not any States have 
            been added to its <see cref="P:Sanford.StateMachineToolkit.StateMachine`3.State.Substates"/> collection.<para/>
            There are some restrictions on which States can be added as substates to another <see cref="T:Sanford.StateMachineToolkit.StateMachine`3.State"/>. 
            The most obvious one is that a <see cref="T:Sanford.StateMachineToolkit.StateMachine`3.State"/> cannot be added to its own 
            <see cref="P:Sanford.StateMachineToolkit.StateMachine`3.State.Substates"/> collection; 
            a <see cref="T:Sanford.StateMachineToolkit.StateMachine`3.State"/> cannot be a substate to itself. 
            Also, a <see cref="T:Sanford.StateMachineToolkit.StateMachine`3.State"/> can only be the direct substate of one other 
            <see cref="T:Sanford.StateMachineToolkit.StateMachine`3.State"/>; you cannot add a <see cref="T:Sanford.StateMachineToolkit.StateMachine`3.State"/> to the 
            <see cref="P:Sanford.StateMachineToolkit.StateMachine`3.State.Substates"/> collection of more than one <see cref="T:Sanford.StateMachineToolkit.StateMachine`3.State"/>.
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.SubstateCollection.#ctor(Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.State)">
            <summary>
            Initializes a new instance of the SubstateCollection with the 
            specified owner.
            </summary>
            <param name="owner">
            The owner of the collection.
            </param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.SubstateCollection.Add(Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.State)">
            <summary>
            Adds the specified State to the collection.
            </summary>
            <param name="substate">
            The State to add to the collection.
            </param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.SubstateCollection.Remove(Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.State)">
            <summary>
            Removes the specified State from the collection.
            </summary>
            <param name="substate">
            The State to remove from the collection.
            </param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.SubstateCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Sanford.StateMachineToolkit.StateMachine`3.Transition">
            <summary>
            The Transition class represents a transition from one <see cref="T:Sanford.StateMachineToolkit.StateMachine`3.State"/> 
            to another. It can have a delegate representing a <see cref="!:GuardHandler"/> method which it 
            will use to  determine whether or not it should fire. 
            It can also have one or more delegates representing action methods that it will 
            execute when it fires. And, it can have a <see cref="P:Sanford.StateMachineToolkit.StateMachine`3.Transition.Target"/> <see cref="T:Sanford.StateMachineToolkit.StateMachine`3.State"/> 
            that is the target of the Transition..
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.Transition.#ctor(Sanford.StateMachineToolkit.GuardHandler{`0,`1,`2},Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.State)">
            <summary>
            Initializes a new instance of the Transition class with the 
            specified guard and target.
            </summary>
            <param name="guard">
            The guard to test to determine whether the transition should take 
            place.
            </param>
            <param name="target">
            The target state of the transition.
            </param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.Transition.fire(Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.EventContext)">
            <summary>
            Fires the transition.
            </summary>
            <param name="origin">
            The State that originally received the event.
            </param>
            <param name="args">
            The arguments accompanying the event.
            </param>
            <returns>
            A TransitionResult object representing the results of the transition.
            </returns>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.Transition.Guard">
            <summary>
            Gets the guard to test to determine if the transition should take 
            place.
            </summary>
            <remarks>
            If no guard is necessary, this value may be null.
            </remarks>
        </member>
        <member name="E:Sanford.StateMachineToolkit.StateMachine`3.Transition.Actions">
            <summary>
            Gets the collection of actions.
            </summary>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.Transition.Target">
            <summary>
            Gets the target of the transition.
            </summary>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.Transition.Source">
            <summary>
            Gets or sets the source of the transition.
            </summary>
        </member>
        <member name="T:Sanford.StateMachineToolkit.StateMachine`3.TransitionCollection">
            <summary>
            The TransitionCollection represents a collection of Transitions. 
            Each <see cref="T:Sanford.StateMachineToolkit.StateMachine`3.State"/> object has its own 
            TransitionCollection for holding its Transitions.<para/>
            When a Transition is added to a State's <see cref="P:Sanford.StateMachineToolkit.StateMachine`3.State.Transitions"/>, 
            it is registered with an event ID. This event ID is a value identifying an event a 
            <see cref="T:Sanford.StateMachineToolkit.StateMachine`3.State"/> can receive. When a <see cref="T:Sanford.StateMachineToolkit.StateMachine`3.State"/> 
            receives an event, it uses the event's ID to check to see if it has any Transitions for that 
            event (as described above).
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.TransitionCollection.#ctor(Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.State,System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the TransitionCollection class with 
            the specified number of events.
            </summary>
            <param name="owner">
            The state that owns the TransitionCollection.
            </param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.TransitionCollection.Add(`1,Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.Transition)">
            <summary>
            Adds a Transition to the collection for the specified event ID.
            </summary>
            <param name="eventId">
            The event ID associated with the Transition.
            </param>
            <param name="trans">
            The Transition to add.
            </param>
            <remarks>
            When a Transition is added to the collection, it is associated with
            the specified event ID. When a State receives an event, it looks up
            the event ID in its TransitionCollection to see if there are any 
            Transitions for the specified event. 
            </remarks>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.TransitionCollection.Add(`1,Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.State,System.EventHandler{Sanford.StateMachineToolkit.TransitionEventArgs{`0,`1,`2}}[])">
            <summary>
            Adds a Transition to the collection for the specified event ID.
            </summary>
            <param name="eventId">
            The event ID associated with the Transition.
            </param>
            <param name="targetState">
            The target state of the transtion.
            </param>
            <param name="actions">
            Optional array of actions, to be performed during the transition.
            </param>
            <remarks>
            When a Transition is added to the collection, it is associated with
            the specified event ID. When a State receives an event, it looks up
            the event ID in its TransitionCollection to see if there are any 
            Transitions for the specified event. 
            </remarks>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.TransitionCollection.Add(`1,Sanford.StateMachineToolkit.GuardHandler{`0,`1,`2},Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.State,System.EventHandler{Sanford.StateMachineToolkit.TransitionEventArgs{`0,`1,`2}}[])">
            <summary>
            Adds a Transition to the collection for the specified event ID.
            </summary>
            <param name="eventId">
            The event ID associated with the Transition.
            </param>
            <param name="guard">
            The guard to test to determine whether the transition should take 
            place.
            </param>
            <param name="targetState">
            The target state of the transtion.
            </param>
            <param name="actions">
            Optional array of actions, to be performed during the transition.
            </param>
            <remarks>
            When a Transition is added to the collection, it is associated with
            the specified event ID. When a State receives an event, it looks up
            the event ID in its TransitionCollection to see if there are any 
            Transitions for the specified event. 
            </remarks>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.TransitionCollection.Remove(`1,Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.Transition)">
            <summary>
            Removes the specified Transition at the specified event ID.
            </summary>
            <param name="eventId">
            The event ID associated with the Transition.
            </param>
            <param name="trans">
            The Transition to remove.
            </param>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.TransitionCollection.Item(`1)">
            <summary>
            Gets a collection of Transitions at the specified event ID.
            </summary>
            <remarks>
            If there are no Transitions at the specified event ID, the value
            of the collection will be null.
            </remarks>
        </member>
        <member name="T:Sanford.StateMachineToolkit.StateMachine`3.TransitionResult">
            <summary>
            Represents the result of a transition.
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.StateMachine`3.TransitionResult.#ctor(System.Boolean,`0,System.Exception)">
            <summary>
            Initializes a new instance of the TransitionResult class.
            </summary>
            <param name="hasFired">
            Indicates whether or not the Transition fired.
            </param>
            <param name="newState">
            The resulting state of the Transition.
            </param>
            <param name="error">
            The resulting exception of the Transition if one was thrown.
            </param>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.TransitionResult.HasFired">
            <summary>
            Gets a value indicating whether or not the transition fired.
            </summary>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.TransitionResult.Error">
            <summary>
            Gets the exception that was a result of firing the Transition.
            </summary>
            <remarks>
            This property will be null if the Transition did not fire or if it
            did fire but no exception took place.
            </remarks>
        </member>
        <member name="P:Sanford.StateMachineToolkit.StateMachine`3.TransitionResult.NewState">
            <summary>
            Gets the state that is a result of firing the Transition.
            </summary>
            <remarks>
            This property will be null if the Transition did not fire.
            </remarks>
        </member>
        <member name="T:Sanford.StateMachineToolkit.IActiveStateMachine`3">
            <summary>
            The ActiveStateMachine class uses the Active Object design pattern. 
            What this means is that an ActiveStateMachine object runs in its own thread. 
            Internally, ActiveStateMachines use <see cref="T:Sanford.Threading.DelegateQueue"/> objects for handling 
            and dispatching events. 
            </summary>
            <typeparam name="TState">The state enumeration type.</typeparam>
            <typeparam name="TEvent">The event enumeration type.</typeparam>
        </member>
        <member name="T:Sanford.StateMachineToolkit.IActiveStateMachine">
            <summary>
            Represents an active state machine.
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.IActiveStateMachine.WaitForPendingEvents">
            <summary>
            Waits for pending events.
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.IActiveStateMachine`3.SendSynchronously(`1,`2)">
            <summary>
            Sends an event to the StateMachine, and blocks until it processing ends.
            </summary>
            <param name="eventId">
            The event ID.
            </param>
            <param name="args">
            The data accompanying the event.
            </param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.IActiveStateMachine`3.SendSynchronously(`1)">
            <summary>
            Sends an event to the StateMachine, and blocks until it processing ends.
            </summary>
            <param name="eventId">
            The event ID.
            </param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.ActiveStateMachine`3.#ctor(System.Collections.Generic.IEqualityComparer{`1},Sanford.StateMachineToolkit.IStateStorage{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Sanford.StateMachineToolkit.ActiveStateMachine`3"/> class.
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.ActiveStateMachine`3.#ctor(System.Threading.SynchronizationContext,System.Collections.Generic.IEqualityComparer{`1},Sanford.StateMachineToolkit.IStateStorage{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Sanford.StateMachineToolkit.ActiveStateMachine`3"/> class.
            </summary>
            <param name="syncContext">The synchronization context.</param>
            <param name="comparer"> </param>
            <param name="stateStorage"> </param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.ActiveStateMachine`3.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.ActiveStateMachine`3.Send(`1,`2)">
            <summary>
            Sends an event to the StateMachine.
            </summary>
            <param name="eventId">
            The event ID.
            </param>
            <param name="args">
            The data accompanying the event.
            </param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.ActiveStateMachine`3.SendSynchronously(`1,`2)">
            <summary>
            Sends an event to the StateMachine, and blocks until it processing ends.
            </summary>
            <param name="eventId">
            The event ID.
            </param>
            <param name="args">
            The data accompanying the event.
            </param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.ActiveStateMachine`3.SendSynchronously(`1)">
            <summary>
            Sends an event to the StateMachine, and blocks until it processing ends.
            </summary>
            <param name="eventId">
            The event ID.
            </param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.ActiveStateMachine`3.WaitForPendingEvents">
            <summary>
            Waits for pending events.
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.ActiveStateMachine`3.AssertMachineIsValid">
            <summary>
            Asserts that the state machine was initialized and not disposed.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the state machine was not initialized.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when the state machine was already disposed.</exception>"
        </member>
        <member name="M:Sanford.StateMachineToolkit.ActiveStateMachine`3.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; 
            <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.ActiveStateMachine`3.Initialize(`0)">
            <summary>
            Initializes the StateMachine's initial state.
            </summary>
            <param name="initialState">The state that will initially receive events from the StateMachine.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.ActiveStateMachine`3.HandleDispatchException(System.Exception)">
            <summary>
            Template method for handling dispatch exceptions.
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.ActiveStateMachine`3.OnBeginDispatch(Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.EventContext)">
            <summary>
            Raises the <see cref="E:Sanford.StateMachineToolkit.StateMachine`3.BeginDispatch"/> event.
            </summary>
            <param name="eventContext">The event context.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.ActiveStateMachine`3.OnBeginTransition(Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.EventContext)">
            <summary>
            Raises the <see cref="E:Sanford.StateMachineToolkit.StateMachine`3.BeginTransition"/> event.
            </summary>
            <param name="eventContext">The event context.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.ActiveStateMachine`3.OnExceptionThrown(Sanford.StateMachineToolkit.TransitionErrorEventArgs{`0,`1,`2})">
            <summary>
            Raises the <see cref="E:Sanford.StateMachineToolkit.StateMachine`3.ExceptionThrown"/> event.
            </summary>
            <param name="args">The <see cref="T:Sanford.StateMachineToolkit.TransitionErrorEventArgs`3"/> instance containing the event data.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.ActiveStateMachine`3.OnTransitionCompleted(Sanford.StateMachineToolkit.TransitionCompletedEventArgs{`0,`1,`2})">
            <summary>
            Raises the <see cref="E:Sanford.StateMachineToolkit.StateMachine`3.TransitionCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:Sanford.StateMachineToolkit.TransitionCompletedEventArgs`3"/> instance
            containing the event data.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.ActiveStateMachine`3.OnTransitionDeclined(Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.EventContext)">
            <summary>
            Raises the <see cref="E:Sanford.StateMachineToolkit.StateMachine`3.TransitionDeclined"/> event.
            </summary>
            <param name="eventContext">The event context.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.ActiveStateMachine`3.SendPriority(`1,`2)">
            <summary>
            Sends an event to the state machine, that might trigger a transition.
            This event will have precedence over other pending events that were sent using
            the <see cref="M:Sanford.StateMachineToolkit.ActiveStateMachine`3.Send(`1,`2)"/> method.
            </summary>
            <param name="eventId">The event.</param>
            <param name="args">Optional event arguments.</param>
        </member>
        <member name="P:Sanford.StateMachineToolkit.ActiveStateMachine`3.queue">
            <summary>
            Used for queuing events.
            </summary>
        </member>
        <member name="P:Sanford.StateMachineToolkit.ActiveStateMachine`3.synchronousInvocation">
            <summary>
            Indicates whether the current event was sent synchronously.
            </summary>
        </member>
        <member name="P:Sanford.StateMachineToolkit.ActiveStateMachine`3.CurrentStateID">
            <summary>
            Gets the ID of the current state.
            </summary>
            <remarks>Thread safe.</remarks>
            <value></value>
        </member>
        <member name="P:Sanford.StateMachineToolkit.ActiveStateMachine`3.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
                <c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sanford.StateMachineToolkit.ActiveStateMachine`3.SyncContext">
            <summary>
            The synchronization context, for executing callbacks on the origin thread.
            </summary>
        </member>
        <member name="T:Sanford.StateMachineToolkit.NullSynchronizationContext">
            <summary>
            An empty implementation of <see cref="T:System.Threading.SynchronizationContext"/>
            which always invokes the delegates on the calling thread.
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.NullSynchronizationContext.CreateCopy">
            <summary>
            Creates a copy of the synchronization context.
            </summary>
            <returns>
            A new <see cref="T:System.Threading.SynchronizationContext"/> object.
            </returns>
        </member>
        <member name="M:Sanford.StateMachineToolkit.NullSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches a synchronous message to a synchronization context.
            </summary>
            <param name="d">The <see cref="T:System.Threading.SendOrPostCallback"/> delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.NullSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches an asynchronous message to a synchronization context.
            </summary>
            <param name="d">The <see cref="T:System.Threading.SendOrPostCallback"/> delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/> class.
            </summary>
            <param name="required"><c>true</c> if a element should be localized; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.
            </summary>
            <param name="obj">The object to test the value equality of. </param>
            <returns>
            <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.</returns>
        </member>
        <member name="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required">
            <summary>
            Gets a value indicating whether a element should be localized.
            <value><c>true</c> if a element should be localized; otherwise, <c>false</c>.</value>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:JetBrains.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one  of the parameters of the caller function.
            For example, <see cref="T:System.ArgumentNullException"/> has such parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if one of the conditions is satisfied. 
            To set the condition, mark one of the parameters with <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionAttribute"/>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. 
            The method itself should be marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute.
            The mandatory argument of the attribute is the assertion type.
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionType"/>
        </member>
        <member name="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
            <summary>
            Initializes new instance of AssertionConditionAttribute
            </summary>
            <param name="conditionType">Specifies condition type</param>
        </member>
        <member name="P:JetBrains.Annotations.AssertionConditionAttribute.ConditionType">
            <summary>
            Gets condition type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisifes the condition, then the execution continues. 
            Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>
            Indicates that the marked parameter should be evaluated to true
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>
            Indicates that the marked parameter should be evaluated to false
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to null value
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to not null value
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of marked element could never be <c>null</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of marked type (or its derivatives) cannot be compared using '==' or '!=' operators.
            There is only exception to compare with <c>null</c>, it is permitted
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to target attribute, specifies a requirement for any type which is marked with 
            target attribute to implement or inherit specific type or types
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
            <summary>
            Initializes new instance of BaseTypeRequiredAttribute
            </summary>
            <param name="baseType">Specifies which types are required</param>
        </member>
        <member name="P:JetBrains.Annotations.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
            Gets enumerations of specified base types
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.UsedImplicitlyAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MeansImplicitUseAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>
            Only entity marked with attribute considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>
            Indicates implicit assignment to a member
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>
            Members of entity marked with attribute are considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>
            Entity marked with attribute and all its members considered used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack. 
            If the parameter is delegate, indicates that delegate is executed while the method is executed.
            If the parameter is enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that method doesn't contain observable side effects.
            The same as <see cref="T:System.Diagnostics.Contracts.PureAttribute"/>
            </summary>
        </member>
        <member name="T:Sanford.StateMachineToolkit.TransitionEventArgs`3">
            <summary>
            Event data for transition events.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <typeparam name="TArgs">The event arguments type.</typeparam>
        </member>
        <member name="M:Sanford.StateMachineToolkit.TransitionEventArgs`3.#ctor(Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.EventContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sanford.StateMachineToolkit.TransitionEventArgs`3"/> class.
            </summary>
            <param name="eventContext">The event context.</param>
        </member>
        <member name="F:Sanford.StateMachineToolkit.TransitionEventArgs`3.m_eventContext">
            <summary>
            The event context.
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.TransitionEventArgs`3.op_Implicit(Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.EventContext)~Sanford.StateMachineToolkit.TransitionEventArgs{`0,`1,`2}">
            <summary>
            Performs an implicit conversion from <see cref="T:Sanford.StateMachineToolkit.StateMachine`3.EventContext"/> 
            to <see cref="T:Sanford.StateMachineToolkit.TransitionEventArgs`3"/>.
            </summary>
            <param name="context">The context.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:Sanford.StateMachineToolkit.TransitionEventArgs`3.Empty">
            <summary>
            Represents an event with no event data.
            </summary>
        </member>
        <member name="P:Sanford.StateMachineToolkit.TransitionEventArgs`3.EventArgs">
            <summary>
            Gets the event arguments.
            </summary>
            <value>The event arguments.</value>
        </member>
        <member name="P:Sanford.StateMachineToolkit.TransitionEventArgs`3.EventID">
            <summary>
            Gets the event ID.
            </summary>
            <value>The event ID.</value>
        </member>
        <member name="P:Sanford.StateMachineToolkit.TransitionEventArgs`3.SourceStateID">
            <summary>
            Gets the source state ID.
            </summary>
            <value>The source state ID.</value>
        </member>
        <member name="P:Sanford.StateMachineToolkit.TransitionEventArgs`3.MachineInitialized">
            <summary>
            Gets a value indicating whether the state machine was initialized.
            </summary>
            <value><c>true</c> if the state machine was initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Sanford.StateMachineToolkit.TransitionErrorEventArgs`3">
            <summary>
            Event data for the <see cref="E:Sanford.StateMachineToolkit.StateMachine`3.ExceptionThrown"/> event.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <typeparam name="TArgs">The event arguments type.</typeparam>
        </member>
        <member name="M:Sanford.StateMachineToolkit.TransitionErrorEventArgs`3.#ctor(Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.EventContext,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sanford.StateMachineToolkit.TransitionErrorEventArgs`3"/> class.
            </summary>
            <param name="eventContext">The event context.</param>
            <param name="error">The error.</param>
        </member>
        <member name="P:Sanford.StateMachineToolkit.TransitionErrorEventArgs`3.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Sanford.StateMachineToolkit.TransitionErrorEventArgs`3.Empty">
            <summary>
            Represents an event with no event data.
            </summary>
        </member>
        <member name="T:Sanford.StateMachineToolkit.TransitionCompletedEventArgs`3">
            <summary>
            Event data for the <see cref="E:Sanford.StateMachineToolkit.StateMachine`3.TransitionCompleted"/> event.
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.TransitionCompletedEventArgs`3.#ctor(`0,Sanford.StateMachineToolkit.StateMachine{`0,`1,`2}.EventContext,System.Object,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sanford.StateMachineToolkit.TransitionCompletedEventArgs`3"/> class.
            </summary>
            <param name="targetStateId">The target state ID.</param>
            <param name="eventContext">The event context.</param>
            <param name="actionResult">The action result.</param>
            <param name="error">The error.</param>
        </member>
        <member name="P:Sanford.StateMachineToolkit.TransitionCompletedEventArgs`3.ActionResult">
            <summary>
            Gets the action result.
            </summary>
            <value>The action result.</value>
        </member>
        <member name="P:Sanford.StateMachineToolkit.TransitionCompletedEventArgs`3.Empty">
            <summary>
            Represents an event with no event data.
            </summary>
        </member>
        <member name="P:Sanford.StateMachineToolkit.TransitionCompletedEventArgs`3.TargetStateID">
            <summary>
            Gets the target state ID.
            </summary>
            <value>The target state ID.</value>
        </member>
        <member name="T:Sanford.StateMachineToolkit.GuardException">
            <summary>
            Represents errors that occur during <see cref="!:StateMachine&lt;TState,TEvent&gt;.Transition"/>'s
            <see cref="!:StateMachine&lt;TState,TEvent&gt;.Transition.Guard"/> execution.
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.GuardException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sanford.StateMachineToolkit.GuardException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:Sanford.StateMachineToolkit.EntryException">
            <summary>
            Represents errors that occur during <see cref="!:StateMachine&lt;TState,TEvent&gt;.State"/>'s 
            <see cref="!:StateMachine&lt;TState,TEvent&gt;.State.Entry"/> execution.
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.EntryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sanford.StateMachineToolkit.EntryException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:Sanford.StateMachineToolkit.ActionException">
            <summary>
            Represents errors that occur during <see cref="!:StateMachine&lt;TState,TEvent&gt;.Transition"/>'s 
            <see cref="!:StateMachine&lt;TState,TEvent&gt;.Transition.Actions"/> execution.
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.ActionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sanford.StateMachineToolkit.ActionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:Sanford.StateMachineToolkit.ExitException">
            <summary>
            Represents errors that occur during <see cref="!:StateMachine&lt;TState,TEvent&gt;.State"/>'s 
            <see cref="!:StateMachine&lt;TState,TEvent&gt;.State.Exit"/> execution.
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.ExitException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sanford.StateMachineToolkit.ExitException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:Sanford.StateMachineToolkit.IPassiveStateMachine">
            <summary>
            Represents a passive state machine.
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.IPassiveStateMachine.Execute">
            <summary>
            Executes pending events.
            </summary>
        </member>
        <member name="P:Sanford.StateMachineToolkit.IPassiveStateMachine.Synchronized">
            <summary>
            If <value>true</value>, the state machine will run synchronized (using a lock).
            Otherwise, synchronization concerns remain the responsibility of the caller.
            </summary>
        </member>
        <member name="T:Sanford.StateMachineToolkit.IPassiveStateMachine`3">
            <summary>
            Unlike the <see cref="!:ActiveStateMachine&lt;TState,TEvent&gt;"/> class, 
            the PassiveStateMachine class does not run in its own thread. Sometimes using an active 
            object is overkill. In those cases, it is  appropriate to derive your state machine from 
            the PassiveStateMachine class.<para/>
            Because the PassiveStateMachine is, well, passive, it has to be prodded to 
            fire its transitions. You do this by calling its <see cref="M:Sanford.StateMachineToolkit.IPassiveStateMachine.Execute"/> method. After sending a 
            PassiveStateMachine derived class one or more events, you then call <see cref="M:Sanford.StateMachineToolkit.IPassiveStateMachine.Execute"/>. 
            The state machine responds by dequeueing all of the events in its event queue, 
            dispatching them one right after the other. 
            </summary>
            <typeparam name="TState">The state enumeration type.</typeparam>
            <typeparam name="TEvent">The event enumeration type.</typeparam>
        </member>
        <member name="T:Sanford.StateMachineToolkit.ActiveStateMachine`1">
            <summary>
            A base non-generic active state machine.
            </summary>
        </member>
        <member name="T:Sanford.StateMachineToolkit.PassiveStateMachine`1">
            <summary>
            A base non-generic passive state machine.
            </summary>
        </member>
        <member name="T:Sanford.StateMachineToolkit.PassiveStateMachine`3">
            <summary>
            Unlike the <see cref="T:Sanford.StateMachineToolkit.ActiveStateMachine`3"/> class, 
            the PassiveStateMachine class does not run in its own thread. Sometimes using an active 
            object is overkill. In those cases, it is  appropriate to derive your state machine from 
            the PassiveStateMachine class.<para/>
            Because the PassiveStateMachine is, well, passive, it has to be prodded to 
            fire its transitions. You do this by calling its <see cref="M:Sanford.StateMachineToolkit.PassiveStateMachine`3.Execute"/> method. After sending a 
            PassiveStateMachine derived class one or more events, you then call <see cref="M:Sanford.StateMachineToolkit.PassiveStateMachine`3.Execute"/>. 
            The state machine responds by dequeueing all of the events in its event queue, 
            dispatching them one right after the other. 
            </summary>
            <typeparam name="TState">The state enumeration type.</typeparam>
            <typeparam name="TEvent">The event enumeration type.</typeparam>
            <typeparam name="TArgs">The event arguments type.</typeparam>
        </member>
        <member name="M:Sanford.StateMachineToolkit.PassiveStateMachine`3.#ctor(System.Collections.Generic.IEqualityComparer{`1},Sanford.StateMachineToolkit.IStateStorage{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Sanford.StateMachineToolkit.PassiveStateMachine`3"/> class.
            </summary>
            <param name="comparer"> </param>
            <param name="stateStorage">The state storage.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.PassiveStateMachine`3.Execute">
            <summary>
            Executes pending events.
            </summary>
        </member>
        <member name="M:Sanford.StateMachineToolkit.PassiveStateMachine`3.Send(`1,`2)">
            <summary>
            Sends an event to the state machine, that might trigger a transition.
            </summary>
            <param name="eventId">The event.</param>
            <param name="args">Optional event arguments.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.PassiveStateMachine`3.HandleDispatchException(System.Exception)">
            <summary>
            Template method for handling dispatch exceptions.
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.PassiveStateMachine`3.Initialize(`0)">
            <summary>
            Initializes the StateMachine's initial state.
            </summary>
            <param name="initialState">The state that will initially receive events from the StateMachine.</param>
        </member>
        <member name="M:Sanford.StateMachineToolkit.PassiveStateMachine`3.SendPriority(`1,`2)">
            <summary>
            Sends an event to the state machine, that might trigger a transition.
            This event will have precedence over other pending events that were sent using
            the <see cref="M:Sanford.StateMachineToolkit.PassiveStateMachine`3.Send(`1,`2)"/> method.
            </summary>
            <param name="eventId">The event.</param>
            <param name="args">Optional event arguments.</param>
        </member>
        <member name="P:Sanford.StateMachineToolkit.PassiveStateMachine`3.Synchronized">
            <summary>
            If <value>true</value>, the state machine will run synchronized (using a lock).
            Otherwise, synchronization concerns remain the responsibility of the caller.
            </summary>
        </member>
        <member name="T:Sanford.StateMachineToolkit.GuardHandler`3">
            <summary>
            Represents the method that is evaluated to determine whether the state
            transition should fire.
            </summary>
        </member>
        <member name="T:Sanford.StateMachineToolkit.HistoryType">
            <summary>
            Specifies constants defining the type of history a state uses.
            </summary>
            <remarks>
            A state's history type determines which of its nested states it enters 
            into when it is the target of a transition. If a state does not have 
            any nested states, its history type has no effect.
            </remarks>
        </member>
        <member name="F:Sanford.StateMachineToolkit.HistoryType.None">
            <summary>
            The state enters into its initial state which in turn enters into
            its initial state and so on until the innermost nested state is 
            reached.
            </summary>
        </member>
        <member name="F:Sanford.StateMachineToolkit.HistoryType.Shallow">
            <summary>
            The state enters into its last active state which in turn enters 
            into its initial state and so on until the innermost nested state
            is reached.
            </summary>
        </member>
        <member name="F:Sanford.StateMachineToolkit.HistoryType.Deep">
            <summary>
            The state enters into its last active state which in turns enters
            into its last active state and so on until the innermost nested
            state is reached.
            </summary>
        </member>
        <member name="T:Sanford.StateMachineToolkit.ExceptionPolicy">
            <summary>
            Policy when exception is caught
            </summary>
        </member>
        <member name="F:Sanford.StateMachineToolkit.ExceptionPolicy.Swallow">
            <summary>
            Ignore the exception
            </summary>
        </member>
        <member name="F:Sanford.StateMachineToolkit.ExceptionPolicy.RaiseExceptionEvent">
            <summary>
            Raise an event
            </summary>
        </member>
    </members>
</doc>
